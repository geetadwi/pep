<?php

class Item extends Db_Action
{
    function __construct($pagerFunName = 'frmsubmit')
    {

        parent::__construct();

        $this->autMsg = "";

        $this->indian_all_states = array(

            'AP' => 'Andhra Pradesh',

            'AR' => 'Arunachal Pradesh',

            'AS' => 'Assam',

            'BR' => 'Bihar',

            'CT' => 'Chhattisgarh',

            'GA' => 'Goa',

            'GJ' => 'Gujarat',

            'HR' => 'Haryana',

            'HP' => 'Himachal Pradesh',

            'JK' => 'Jammu & Kashmir',

            'JH' => 'Jharkhand',

            'KA' => 'Karnataka',

            'KL' => 'Kerala',

            'MP' => 'Madhya Pradesh',

            'MH' => 'Maharashtra',

            'MN' => 'Manipur',

            'ML' => 'Meghalaya',

            'MZ' => 'Mizoram',

            'NL' => 'Nagaland',

            'OR' => 'Odisha',

            'PB' => 'Punjab',

            'RJ' => 'Rajasthan',

            'SK' => 'Sikkim',

            'TN' => 'Tamil Nadu',

            'TR' => 'Tripura',

            'UK' => 'Uttarakhand',

            'UP' => 'Uttar Pradesh',

            'WB' => 'West Bengal',

            'AN' => 'Andaman & Nicobar',

            'CH' => 'Chandigarh',

            'DN' => 'Dadra and Nagar Haveli',

            'DD' => 'Daman & Diu',

            'DL' => 'Delhi',

            'LD' => 'Lakshadweep',

            'PY' => 'Puducherry',

            'TL' => 'Telangana',

            'SA' => 'Seemandhra',

            'CUP' => 'Central Up',

            'WUP' => 'West Up',

            'EUP' => 'East Up',

            'APTL' => 'AP & Telangana'

        );

    }
    function toCamelCase($string) {
       
        // Split the string into words
        $words = explode(' ', trim($string)); // Trim to avoid empty elements
    
        // Capitalize the first letter of each word and lowercase the rest
        $camelCaseWords = array_map('ucfirst', array_map('strtolower', $words));
    
        // Join the words with a space
        return implode(' ', $camelCaseWords);
    }
    function generateNumericCode($length)
    {

        $characters = '0123456789';

        $charactersLength = strlen($characters);

        $randomString = '';

        for ($i = 0; $i < $length; $i++) {

            $randomString .= $characters[rand(0, $charactersLength - 1)];

        }

        return $randomString;

    }

//getAccountFeaturesList

    function getAccountFeaturesList()

    {

        $aRec = $this->_getSelectList('table_feature_map as fm ', 'fm.feature_id', '', 'fm.status="A" And fm.account_id=' . $_SESSION['accountId']);

        if (is_array($aRec) && count($aRec) > 0) {

            foreach ($aRec as $key => $value) {

                $temparr[] = $value->feature_id;

            }

            return $temparr;

        } else {

            return array();

        }

    }

    function getAccountRec()
    {

//        $aRec=$this->_getSelectList2('table_web_users as u left join table_account as a on a.account_id=u.account_id',"count(DISTINCT u.salesman_id) as ttl_users, a.no_of_employees",''," u.account_id='".$_SESSION['accountId']."' and u.status='A' AND u.user_type > 1 ");

        $aRec = $this->_getSelectList2('table_account as a 

        left join table_web_users as u on a.account_id=u.account_id', "count(u.account_id) as ttl_users, a.no_of_employees", '', " a.account_id='" . $_SESSION['accountId'] . "' and u.status='A' AND u.user_type > 1 ");

        $total = ($aRec[0]->no_of_employees - $aRec[0]->ttl_users);

        return $total;

    }

    /************************************* Start Upload Category ***************************************/

    function uploadCategoryFile()

    {

        $fields = array('Category Name*', 'Category Code');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Category Name*") {

                    $strErr .= "Error in Row" . $row . " ," . $fields[0] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(category_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "'";

                    $aCatRec = $this->_getSelectList('table_category', '*', '', $condi);

                    // echo '<pre>';

                    // print_r($condi);

                    // print_r($aCatRec);

                    // die(' die here');

                    if (is_array($aCatRec)) {

                        $strErr .= " Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,already exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['category_name'] = mysql_escape_string($this->clean(trim($arrFile[0])));

                    $data['category_code'] = mysql_escape_string($this->clean(trim($arrFile[1])));

                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'New';

                    $data['type'] = 'I';

                    $data['status'] = 'A';

                    $id = $this->_dbInsert($data, 'table_category');

                    if(empty($data['category_code']))
                    {
                        $update_data=array('category_code'=>$id);
                        $this->_dbUpdate($update_data, 'table_category', " category_id=" . $id);

                    }

                }

            }

            $row++;

        }

        //print_r($str_err_array);

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /************************************* End Upload Category ***************************************/

    /************************************* Start Upload Color ***************************************/

    function uploadColorFile()

    {

        $fields = array('Color Description*', 'Color Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Color Description*" || empty($arrFile[1]) || $arrFile[1] == "Color Code*") {

                    //$strErr .="Error in Row".$row." ";

                    if (empty($arrFile[0]) && empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $fields[0] . " and " . $fields[1] . "  shouldn't be empty \n";

                    } else if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $fields[0] . " shouldn't be empty \n";

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $fields[1] . " shouldn't be empty \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(color_code)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "'";

                    $aCatRec = $this->_getSelectList('table_color', '*', '', $condi);

                    if (is_array($aCatRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ,already exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['color_desc'] = mysql_escape_string($this->clean(trim($arrFile[0])));

                    $data['color_code'] = mysql_escape_string($this->clean(trim($arrFile[1])));

                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'New';

                    $data['status'] = 'A';

                    $id = $this->_dbInsert($data, 'table_color');

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /************************************* End Upload Color ***************************************/

    /************************************* Start Upload Items ***************************************/

    function uploadItemListFile_bckup_29Nov2021()

    {

        $fields = array('Category Name*', 'Item Code*', 'Item Description*', 'Grams', 'D.P', 'M R P*', 'Cases Size*', 'Brand*', 'Offer Type', 'Item Erp Code', 'Variant Name', 'Sku Name', 'Tax Rate', 'Distributor Price', 'Stockist Price');    // Remove Chain Name

        //echo "<pre/>";print_r($fields);die;

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty(trim($arrFile[0])) || empty(trim($arrFile[1])) || empty(trim($arrFile[2])) || empty(trim($arrFile[5])) || empty(trim($arrFile[6])) || empty(trim($arrFile[7]))) {

                    if (empty(trim($arrFile[0]))) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $arrFile[11] . " ," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . " ," . $fields[0] . " shouldn't be empty \n";

                    } else if (empty(trim($arrFile[1]))) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $arrFile[11] . " ," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . " ," . $fields[1] . " shouldn't be empty \n";

                    } else if (empty(trim($arrFile[2]))) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $arrFile[11] . " ," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . " ," . $fields[2] . " shouldn't be empty \n";

                    }

                    // else if(empty($arrFile[4])){

                    // $strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4]." ,".$arrFile[5]." ,".$arrFile[6]." ,".$arrFile[7]." ,".$arrFile[8]." ,".$arrFile[9].",".$arrFile[10]." ,".$arrFile[11]." ,".$fields[4]." shouldn't be empty \n";

                    // }

                    else if (empty(trim($arrFile[5]))) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $arrFile[11] . " ," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . " ," . $fields[5] . " shouldn't be empty \n";

                    } else if (empty(trim($arrFile[6]))) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $arrFile[11] . " ," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . " ," . $fields[6] . " shouldn't be empty \n";

                    } else if (empty(trim($arrFile[7]))) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $arrFile[11] . " ," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . " ," . $fields[7] . " shouldn't be empty \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(item_code)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-',.%&()-+[]\/]/", "", strtolower(str_replace("'", "\'", $arrFile[1]))), ENT_IGNORE) . "' AND  LOWER(item_name)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-',.%&()-+[]\/]/", "", strtolower(str_replace("'", "\'", $arrFile[1]))), ENT_IGNORE) . "'";

                    $aCatRec = $this->_getSelectList('table_item', '*', '', $condi);

                    if (is_array($aCatRec) && count($aCatRec) > 0) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $arrFile[11] . " ," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . " , " . $fields[1] . $condi . "->" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-',.%&()-+[]\/]/", "", strtolower(str_replace("'", "\'", $arrFile[1]))), ENT_IGNORE) . "->" . preg_replace("/[^A-Za-z0-9?!\s-',.%&()-+[]\/]/", "", strtolower(str_replace("'", "\'", $arrFile[1]))) . "->" . strtolower(str_replace("'", "\'", $arrFile[1])) . str_replace("'", "\'", $arrFile[1]) . " already exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $condi = "account_id=" . $_SESSION['accountId'] . " AND LOWER(category_name)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[0]))) . "'";

                    $catRec = $this->_getSelectList('table_category', "category_id", '', $condi);

                    $category_id = ((is_array($catRec) && count($catRec) > 0) ? $catRec[0]->category_id : 0);

                    if (!is_array($catRec) || count($catRec) <= 0) {

                        $categoryArr = array();

                        $categoryArr['account_id'] = $_SESSION['accountId'];

                        $categoryArr['category_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[0]));

                        $categoryArr['category_code'] = '';

                        $categoryArr['last_update_date'] = date('Y-m-d');

                        $categoryArr['last_update_status'] = 'New';

                        $categoryArr['type'] = 'I';

                        $categoryArr['status'] = 'A';

                        $category_id = $this->_dbInsert($categoryArr, 'table_category');

                    }

                }

                // checking Brands

                $brandId = 0;

                if ($flag && trim($arrFile[7]) != '') {

                    $condi = "account_id=" . $_SESSION['accountId'] . " AND LOWER(brand_name) LIKE '%" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[7]))) . "%'";

                    $brandRec = $this->_getSelectList('table_brands', "brand_name,brand_id", '', $condi);

                    $brandId = ((is_array($brandRec) && count($brandRec) > 0) ? $brandRec[0]->brand_id : 0);

                    if (!is_array($brandRec) || count($brandRec) <= 0) {

                        $brandArr = array();

                        $brandArr['brand_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[7]));

                        $brandArr['account_id'] = $_SESSION['accountId'];

                        $brandId = $this->_dbInsert($brandArr, 'table_brands');

                    }

                }

                /* Description : for Variant name */

                // echo $arrFile[10];

                $variantId = 0;

                if ($flag && trim($arrFile[10]) != '') {

                    $condi = "account_id=" . $_SESSION['accountId'] . " AND LOWER(variant_name)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[10]))) . "'";

                    $variantRec = $this->_getSelectList('table_variant', "variant_name,variant_id", '', $condi);

                    $variantId = ((is_array($variantRec) && count($variantRec) > 0) ? $variantRec[0]->variant_id : 0);

                    if (!is_array($variantRec) || count($variantRec) <= 0) {

//						$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4]." ,".$arrFile[5]." ,".$arrFile[6]." ,".$arrFile[7]." ,".$arrFile[8]." ,".$arrFile[9].",".$arrFile[10]." ,".$arrFile[11]." , ".$fields[10]." Invalid. \n";

//						$str_err_array=array($strErr);

//						$flag =false;

                        $variantArr = array();

                        $variantArr['variant_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[10]));

                        $variantArr['account_id'] = $_SESSION['accountId'];

                        $variantArr['status'] = 'A';

                        $variantId = $this->_dbInsert($variantArr, 'table_variant');

                    }

                }

                /*Description : for Sku name */

                $skuId = 0;

                if ($flag && trim($arrFile[11]) != '') {

                    $condi = "account_id=" . $_SESSION['accountId'] . " AND LOWER(sku_name)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[11]))) . "'";

                    $skuRec = $this->_getSelectList('table_sku', "sku_name,sku_id", '', $condi);

                    $skuId = ((is_array($skuRec) && count($skuRec) > 0) ? $skuRec[0]->sku_id : 0);

                    if (!is_array($skuRec) || count($skuRec) <= 0) {

//						$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4].",".$arrFile[5]." ,".$arrFile[6].",".$arrFile[7].",".$arrFile[8].",".$arrFile[9].",".$arrFile[10].",".$arrFile[11].", Invalid Sku. \n";

//						$str_err_array=array($strErr);

//						$flag =false;

                        $skuArr = array();

                        $skuArr['sku_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[11]));

                        $skuArr['account_id'] = $_SESSION['accountId'];

                        $skuArr['status'] = 'A';

                        $skuId = $this->_dbInsert($skuArr, 'table_sku');

                    }

                }

                //Checking Offers

                $offerId = 0;

                if ($flag && trim($arrFile[8]) != '') {

                    $condi = "account_id=" . $_SESSION['accountId'] . " AND LOWER(offer_name)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[8]))) . "'";

                    $offerRec = $this->_getSelectList('table_offer', "offer_name,offer_id", '', $condi);

                    $offerId = ((is_array($offerRec) && count($offerRec) > 0) ? $offerRec[0]->offer_id : 0);

                    if (!is_array($offerRec) || count($offerRec) <= 0) {

//						$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4].",".$arrFile[5]." ,".$arrFile[6].",".$arrFile[7].",".$arrFile[8].",".$arrFile[9].",".$arrFile[10].",".$arrFile[11]." ,Invalid offers. \n";

//						$str_err_array=array($strErr);

//						$flag =false;

                        $offerArr = array();

                        $offerArr['offer_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[8]));

                        $offerArr['account_id'] = $_SESSION['accountId'];

                        $offerArr['status'] = 'A';

                        $offerId = $this->_dbInsert($offerArr, 'table_offer');

                    }

                }

                // for cases

                $cases = $arrFile[6];

                $casesList = explode(",", $cases);

                //echo $cases;die('case list');

                if ($flag && !is_numeric($cases)) {

                    $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . "," . $arrFile[7] . "," . $arrFile[8] . "," . $arrFile[9] . "," . $arrFile[10] . "," . $arrFile[11] . " ," . $arrFile[12] . " ,Case Size should be in Numeric. \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // Cases Sizes should be one.

                if ($flag && sizeof($casesList) > 1) {

                    $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . "," . $arrFile[7] . "," . $arrFile[8] . "," . $arrFile[9] . "," . $arrFile[10] . "," . $arrFile[11] . " ," . $arrFile[12] . " , One item should be one case size. \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                /* Check cases in numeric values. */

                /*if($arrFile[6]!="")

				 {

                    for($i=0;$i<count($casesList);$i++)

                    {

                    $condition=	" LOWER(case_size)='".strtolower($casesList[$i])."'";

                    $caseval=$this->_getSelectList('table_cases','case_id','',$condition);

                    if(!is_array($caseval))

                       {

                     $strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4].",".$arrFile[5]." ,".$arrFile[6].",".$arrFile[7]." ,".$arrFile[8]." ,Invalid casees sizes. \n";

								$str_err_array=array($strErr);

								$flag =false;

                       }

                     }

				   }*/

                // COLOR SECTION    // code commented

                /*$color=mysql_escape_string($arrFile[6]);

				$colorList = explode(",", $color);

				if($arrFile[6]!='')

				{

					for($i=0;$i<count($colorList);$i++)

					{

						$condition=	" LOWER(color_code)='".strtolower($colorList[$i])."'";

						$col=$this->_getSelectList('table_color','color_id','',$condition);

							if(!is_array($col))

							{

								$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4].",".$arrFile[5]." ,".$arrFile[6]." ,Invalid color code. \n";

								$str_err_array=array($strErr);

								$flag =false;

							}

					}

				} else {

					// Add Default QTY attribute for all of the items into table_color.

				 $chkColor = $this->_getSelectList('table_color','color_id','', ' LOWER(color_code) = "qty"');

					if(!is_array($chkColor) && $chkColor[0]->color_id =='') {

						$data = array();

						$data['account_id']=$this->clean($_SESSION['accountId']);

						$data['color_code']= 'QTY';

						$data['color_desc']= 'QTY';

						$data['last_update_date']=date('Y-m-d');

						$data['last_update_status']='New';

						$data['status']= 'A';

						$colorID = $this->_dbInsert($data,'table_color');

					}

				}*/

                if ($flag && !empty(trim($arrFile[5]))) {

                    $mrp = intval(trim($arrFile[5]));

                    if ($mrp <= 0) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . "," . $arrFile[7] . "," . $arrFile[8] . "," . $arrFile[9] . "," . $arrFile[10] . "," . $arrFile[11] . " ," . $arrFile[12] . " , MRP should be greater than zero. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['category_id'] = $category_id;

                    if ($_SESSION['accountId'] == 14) {

                        $data['item_code'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-',.%&()-+[]\/]/", "", str_replace("'", "\'", $arrFile[1])), ENT_IGNORE);

                        $data['item_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-',.%&()-+[]\/]/", "", str_replace("'", "\'", $arrFile[1])), ENT_IGNORE);

                    } else {

                        $data['item_code'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[1]), ENT_IGNORE);

                        $data['item_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[2]), ENT_IGNORE);

                    }

                    $data['item_size'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[3]));

                    $data['brand_id'] = $brandId;

                    $data['offer_id'] = $offerId;

                    $data['item_erp_code'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[9]));

                    /* New added */

                    $data['variant_id'] = $variantId;

                    $data['sku_id'] = $skuId;

                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'New';

                    $data['item_type'] = 'I';

                    $data['status'] = 'A';

                    $item_id = $this->_dbInsert($data, 'table_item');

                    /*$color=mysql_escape_string($arrFile[6]);

					$colorList = explode(",", $color);*/

                    $cases = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[6]));

                    $casesList = explode(",", $cases);

                    if ($arrFile[6] != '') {

                        for ($i = 0; $i < count($casesList); $i++) {

                            /*$condition=	" LOWER(color_code)='".strtolower($colorList[$i])."'";

							$col=$this->_getSelectList('table_color','color_id','',$condition);

							$data1['item_id']= $this->clean($item_id);

							$data1['color_id']= $this->clean($col[0]->color_id);

							$col_id=$this->_dbInsert($data1,'table_item_color');

								*/

                            /*$condition=	" LOWER(case_size)='".strtolower($casesList[$i])."'";

							$caseVal  =$this->_getSelectList('table_cases','case_id','',$condition);

							$case['item_id'] 		= $item_id;

							$case['case_id'] 		= $caseVal[0]->case_id;

							$caseRelation =$this->_dbInsert($case,'table_item_case_relationship'); */

                            $case['case_description'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[0])) . '-' . ($casesList[$i]);

                            $case['case_size'] =

                                htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $casesList[$i]));

                            //mysql_escape_string($casesList[$i]);

                            $case['account_id'] = $this->clean($_SESSION['accountId']);

                            $case['status'] = 'A';

                            $caseId = $this->_dbInsert($case, 'table_cases');

                            $data2['item_id'] = $item_id;

                            $data2['case_id'] = $caseId;

                            $rou_sch_id = $this->_dbInsert($data2, 'table_item_case_relationship');

                            // Default inserted a record with attribute ID

                            $data3['account_id'] = $this->clean($_SESSION['accountId']);

                            $data3['item_id'] = $this->clean($item_id);

                            $data3['category_id'] = $this->clean($category_id);

                            $data3['attribute_value_id'] = $this->clean($caseId);

                            $data3['stock_value'] = 0;

                            $data3['last_updated_date'] = date('Y-m-d');

                            $data3['last_update_datetime'] = date('Y-m-d h:i:s');

                            $data3['color_id'] = 1;

                            $data3['status'] = 'A';

                            $ndc_stk_id = $this->_dbInsert($data3, 'table_item_ndc_stock');

                        }

                    } else {

                        /*$chkColor = $this->_getSelectList('table_color','color_id','', ' LOWER(color_code) = "qty"');

							$data1['item_id']= $this->clean($item_id);

							$data1['color_id']= $this->clean($chkColor[0]->color_id);

							$col_id=$this->_dbInsert($data1,'table_item_color');

							*/

                        // Default inserted a record with attribute ID

                        $data3['account_id'] = $this->clean($_SESSION['accountId']);

                        $data3['item_id'] = $this->clean($item_id);

                        $data3['category_id'] = $this->clean($category_id);

                        $data3['color_id'] = 1;

                        $data3['attribute_value_id'] = 0;

                        $data3['stock_value'] = 0;

                        $data3['last_updated_date'] = date('Y-m-d');

                        $data3['last_update_datetime'] = date('Y-m-d h:i:s');

                        $data3['status'] = 'A';

                        $ndc_stk_id = $this->_dbInsert($data3, 'table_item_ndc_stock');

                    }

                }

                //  if flag is true for ceses then we add.

                if ($flag) {

                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['item_id'] = $this->clean($item_id);

                    $data['item_mrp'] = $arrFile[5];

                    $data['item_dp'] = $arrFile[5];

                    $data['dist_price'] = $arrFile[13];

                    $data['stockist_price'] = $arrFile[14];

                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'New';

                    $data['start_date'] = $this->clean($_SESSION['StartDate']);

                    $data['end_date'] = $this->clean($_SESSION['EndDate']);

                    $data['status'] = 'A';

                    $item_price_id = $this->_dbInsert($data, 'table_price');

                }

                if ($flag) {

                    $taxrate = 0;

                    if (!empty($arrFile[12]) && is_numeric($arrFile[12])) {

                        $taxrate = $arrFile[12];

                    }

                    $data = array();

                    $data['item_id'] = $this->clean($item_id);

                    $data['tax'] = $taxrate;

                    $item_price_id = $this->_dbInsert($data, 'table_item_gst');

                }

                /************************** Remove Chain Name 18th March 2015 (Gaurav) *************************/

                // used for modrern trade 05 jan 2015(Ajay)

                /*if($flag){

				$chainList = array();

				$itemChain = $arrFile[7];

				if(isset($itemChain)) {

				$chainList = explode (",",$itemChain);

				//echo "<pre>";

				//print_r($chainList);

				//exit;

				if(sizeof($chainList)> 0) {

				foreach ($chainList as $value) :

				$value = preg_replace( "/\r|\n/", "", trim($value) );

				$condi = " LOWER(chain_name)='".mysql_escape_string(strtolower(trim($value)))."'";

				$aRetRec = $this->_getSelectList('table_chain','chain_id','',$condi);

					if(!is_array($aRetRec)){

						$data = array();

						$data['account_id'] =$_SESSION['accountId'];

						$data['chain_name'] = $value;

						$data['last_updated_on'] = date('Y-m-d H:i:s');

						$data['status']='A';

						$chain_id = $this->_dbInsert($data,'table_chain');

					} else {

						$chain_id = $aRetRec[0]->chain_id;

					}

				$chainData = array();

				$chainData['item_id'] = $item_id;

				$chainData['chain_id'] = $chain_id;

				$this->_dbInsert($chainData,'table_item_chain_relationship');

				endforeach;

				//exit;

				} // check size

				} // check chain list not empty

				} // check flag

				*/

                // used for modren trade 05 Jan 2015

                /************************** Remove Chain Name 18th March 2015 (Gaurav) *************************/

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    function uploadItemListFile()
    {


        $fields = array(
            'Item Code*',                     // 0
            'Item Description*',              // 1
            'Brand*',                         // 2
            'Category Name*',                 // 3
            'Sub Category',                   // 4 (new key added here)
            'Cases Size*',                    // 5
            'Grams',                          // 6
            'Tax Rate',                       // 7
            'Item MRP',                       // 8
            'Item PTR*',                      // 9
            $this->AliaseUsers['distributor'] . ' Price', // 10
            $this->AliaseUsers['stockist'] . ' Price',    // 11
            'Grade Name',                     // 12
            'HSN Code',//13
            'Item Rank Name',                        // 14
            'FOC Item(Yes/No)'        // 15 
        );
        
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $row = 0;
        $fErr = "no";
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";
        $remove = array("\n", "\r\n", "\r", '"', ',');
        while (!feof($file)) {
            $arrFile = fgetcsv($file);
            $flag = true;

/////////////////// Domar

        // print_r($arrFile);die;


if ($row == 0) {

    // print_r(trim($arrFile[14]));
    if (count($arrFile) == 16 && trim($arrFile[0]) == "Item Code*" && trim($arrFile[1]) == "Item Description*" && trim($arrFile[2]) == 'Brand*' && trim($arrFile[3]) == 'Category Name*' && trim($arrFile[4]) == 'Sub Category Name' && trim($arrFile[5]) == 'Cases Size*' && trim($arrFile[6]) == 'Grams' && trim($arrFile[7]) == 'Tax Rate' && trim($arrFile[8]) == 'Item MRP' && trim($arrFile[9]) == 'Item PTR*' && trim($arrFile[10]) == $this->AliaseUsers['distributor'] .' Price' && trim($arrFile[11]) == $this->AliaseUsers['stockist'].' Price' && trim($arrFile[12]) == 'Grade Name' && trim($arrFile[13]) == 'HSN Code' && trim($arrFile[14]) == 'Item Rank Name' && trim($arrFile[15]) == 'FOC Item(Yes/No)') {
        $flag2 = true;

    } else {
   
        $flag2 = false;
        $fErr = "fnot";
    }
}
// die;
if (empty($arrFile[0]) && empty($arrFile[1]) && empty($arrFile[2]) && empty($arrFile[3]) && empty($arrFile[4]) && empty($arrFile[5]) && empty($arrFile[6]) && empty($arrFile[7]) && empty($arrFile[8]) && empty($arrFile[9]) && empty($arrFile[10]) && empty($arrFile[11]) && empty($arrFile[12]) && empty($arrFile[13]) && empty($arrFile[14]) && empty($arrFile[15])
) {
    $row++;
}


if ($flag2 && $row > 0 && is_array($arrFile)) {

/////////////Domar



            
            // if ($row > 0 && is_array($arrFile)) {
                if (empty(trim($arrFile[0])) || empty(trim($arrFile[1])) || empty(trim($arrFile[2])) || empty(trim
                    ($arrFile[3])) ||  empty(trim($arrFile[5])) || empty(trim($arrFile[8]))) {
                    if (empty(trim($arrFile[0]))) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $fields[0] . " shouldn't be empty \n";
                    } else if (empty(trim($arrFile[1]))) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $fields[1] . " shouldn't be empty \n";
                    } else if (empty(trim($arrFile[2]))) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $arrFile[11] . " ," . $arrFile[12] . " ," . $arrFile[13] . " ," . $fields[2] . " shouldn't be empty \n";
                    } else if (empty(trim($arrFile[3]))) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $fields[3] . " shouldn't be empty \n";
                    } 
                    // else if (empty(trim($arrFile[4]))) {
                    //     $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                    //         $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $fields[4] . " shouldn't be empty \n";
                    // }

                    else if (empty(trim($arrFile[5]))) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $fields[5] . " shouldn't be empty \n";
                    }
                    
                    else if (empty(trim($arrFile[8]))) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . " ," . $fields[8] . " shouldn't be empty \n";
                    }
                    $str_err_array = array($strErr);
                    $flag = false;
                }
                if ($flag) {
//                    $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(item_code)='" .
//                        mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "",
//                            strtolower(str_replace("'", "\'", $arrFile[0]))), ENT_IGNORE)) . "' AND  LOWER(item_name)='" . mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", strtolower(str_replace("'", "\'", $arrFile[0]))), ENT_IGNORE)) . "'";
                    $condi = "LOWER(item_code)='" . mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", strtolower(str_replace("'", "\'", $arrFile[0]))), ENT_IGNORE)) . "' ";
                    $aCatRec = $this->_getSelectList('table_item', '*', '', $condi);
                    if (is_array($aCatRec) && count($aCatRec) > 0) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," .
                            $arrFile[10] . " , " .
                            $fields[0] . htmlspecialchars(preg_replace($regex, "", strtolower
                            (str_replace("'", "\'", $arrFile[0]))), ENT_IGNORE) . " already exists in the system. \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                if ($flag) {
                    $condi = " LOWER(item_name)='" . mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", strtolower(str_replace("'", "\'", $arrFile[1]))), ENT_IGNORE)) . "'";
                    $aCatRec = $this->_getSelectList('table_item', '*', '', $condi);
                    if (is_array($aCatRec) && count($aCatRec) > 0) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . " ," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . " ," . $arrFile[8] . " ," . $arrFile[9] . "," .
                            $arrFile[10] . " , " .
                            $fields[1] . htmlspecialchars(preg_replace($regex, "", strtolower
                            (str_replace("'", "\'", $arrFile[1]))), ENT_IGNORE) . " already exists in the system. \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                if ($flag) {
                    //    htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[3])))
                    $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(category_name)='" . mysql_escape_string(strtolower($arrFile[3])) . "' AND status = 'A' AND cat_type = 'C' AND type = 'I'";
                    $catRec = $this->_getSelectList('table_category', "category_id", '', $condi);
                    if (is_array($catRec) && (count($catRec) > 0)) {
                        $category_id = $catRec[0]->category_id;
                    } else {
                        //                        $categoryArr = array();
                        //                        $categoryArr['account_id'] = $_SESSION['accountId'];
                        //                        $categoryArr['category_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[3]));
                        //                        $categoryArr['category_code'] = '';
                        //                        $categoryArr['last_update_date'] = date('Y-m-d');
                        //                        $categoryArr['last_update_status'] = 'New';
                        //                        $categoryArr['type'] = 'I';
                        //                        $categoryArr['cat_type'] = 'C';
                        //                        $categoryArr['status'] = 'A';
                        //                        $category_id = $this->_dbInsert($categoryArr, 'table_category');
                        $strErr .= "Error in Row - " . $row;
                        for ($i = 0; $i < count($fields); $i++) {
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                        }
                        $catfields = $fields[3];
                        $strErr .= " , $catfields does not exists in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }


////   checking Sub Category

if ($flag) {
    
    if(!empty($arrFile[4])){
        $condi = "account_id=" . $_SESSION['accountId'] . " AND subcategory_name='" . mysql_escape_string($arrFile[4]) . "' AND status = 'A'";
        $subcatRec = $this->_getSelectList('table_subcategory', "subcategory_id, category_id", '', $condi);
    
        // Check if the subcategory exists
        if ($subcatRec) {
            if ($subcatRec[0]->category_id) {
                // Check if the category exists for the given subcategory
                $condicheck = "account_id=" . $_SESSION['accountId'] . " AND category_id='" . mysql_escape_string($subcatRec[0]->category_id) . "' AND status = 'A'";
                $catRecCheck = $this->_getSelectList('table_category', "category_id, category_name", '', $condicheck);
    
                // Validate if the category matches the expected value
                if (trim($arrFile[3]) == trim($catRecCheck[0]->category_name)) {
                    // If subcategory exists, retrieve its ID
                    if (is_array($subcatRec) && count($subcatRec) > 0) {
                        $subcategory_id = $subcatRec[0]->subcategory_id;
                    } else {
                        // Error handling for subcategory not existing in the system
                        $strErr .= "Error in Row - " . $row;
                        for ($i = 0; $i < count($fields); $i++) {
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                        }
                        $subcatfields = $fields[4];
                        $strErr .= " , $subcatfields does not exist in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                } else {
                    // Error if category doesn't match
                    $strErr .= "Error in Row - " . $row;
                    for ($i = 0; $i < count($fields); $i++) {
                        $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                    }
                    $subcatfields = $fields[4];
                    $strErr .= " , Please select a valid Sub Category.\n";
                    $str_err_array = array($strErr);
                    $flag = false;
                }
            }
        } else {
            // Error if Sub Category doesn't exist in the system
            $strErr .= "Error in Row - " . $row;
            for ($i = 0; $i < count($fields); $i++) {
                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
            }
            $subcatfields = $fields[4];
            $strErr .= " , Please enter a valid Sub Category.\n";
            $str_err_array = array($strErr);
            $flag = false;
        }
    }
    else{
        $subcategory_id = "";
    }


    
}

////   checking Sub Category

 if ($flag) {
                    //    htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[3])))
                    $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(category_name)='" . mysql_escape_string(strtolower($arrFile[3])) . "' AND status = 'A' AND cat_type = 'C' AND type = 'I'";
                    $catRec = $this->_getSelectList('table_category', "category_id", '', $condi);
                    if (is_array($catRec) && (count($catRec) > 0)) {
                        $category_id = $catRec[0]->category_id;
                    } else {
                        //                        $categoryArr = array();
                        //                        $categoryArr['account_id'] = $_SESSION['accountId'];
                        //                        $categoryArr['category_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[3]));
                        //                        $categoryArr['category_code'] = '';
                        //                        $categoryArr['last_update_date'] = date('Y-m-d');
                        //                        $categoryArr['last_update_status'] = 'New';
                        //                        $categoryArr['type'] = 'I';
                        //                        $categoryArr['cat_type'] = 'C';
                        //                        $categoryArr['status'] = 'A';
                        //                        $category_id = $this->_dbInsert($categoryArr, 'table_category');
                        $strErr .= "Error in Row - " . $row;
                        for ($i = 0; $i < count($fields); $i++) {
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                        }
                        $catfields = $fields[3];
                        $strErr .= " , $catfields does not exists in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                // checking Brands
                $brandId = 0;
                if ($flag && trim($arrFile[2]) != '') {
                    $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(brand_name) LIKE '%" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[2]))) . "%'";
                    $brandRec = $this->_getSelectList('table_brands', "brand_name,brand_id", '', $condi);
                    if (is_array($brandRec) && (count($brandRec) > 0)) {
                        $brandId = $brandRec[0]->brand_id;
                    } else {
//                        $brandArr = array();
//                        $brandArr['brand_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "",$arrFile[2]));
//                        $brandArr['account_id'] = $_SESSION['accountId'];
//                        $brandId = $this->_dbInsert($brandArr, 'table_brands');
                        $strErr .= "Error in Row - " . $row;
                        for ($i = 0; $i < count($fields); $i++) {
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                        }
                        $brandfields = $fields[2];
                        $strErr .= " , $brandfields does not exists in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                /* Description : for Variant name */
                // echo $arrFile[9];
                $variantId = 0;
//                if ($flag && trim($arrFile[9]) != '') {
//
//                    $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(variant_name)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[9]))) . "'";
//
//                    $variantRec = $this->_getSelectList('table_variant', "variant_name,variant_id", '', $condi);
//
//                    $variantId = ((is_array($variantRec) && count($variantRec) > 0) ? $variantRec[0]->variant_id : 0);
//
//                    if (!is_array($variantRec) || count($variantRec) <= 0) {
//
////						$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4]." ,".$arrFile[5]." ,".$arrFile[6]." ,".$arrFile[7]." ,".$arrFile[8]." ,".$arrFile[9].",".$arrFile[10]." ,".$arrFile[11]." , ".$fields[10]." Invalid. \n";
//
////						$str_err_array=array($strErr);
//
////						$flag =false;
//
//                        $variantArr = array();
//
//                        $variantArr['variant_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[9]));
//
//                        $variantArr['account_id'] = $_SESSION['accountId'];
//
//                        $variantArr['status'] = 'A';
//
//                        $variantId = $this->_dbInsert($variantArr, 'table_variant');
//
//                    }
//
//                }
                /*Description : for Sku name */
//                $skuId = 0;
//
//                if ($flag && trim($arrFile[10]) != '') {
//
//                    $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(sku_name)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[10]))) . "'";
//
//                    $skuRec = $this->_getSelectList('table_sku', "sku_name,sku_id", '', $condi);
//
//                    $skuId = ((is_array($skuRec) && count($skuRec) > 0) ? $skuRec[0]->sku_id : 0);
//
//                    if (!is_array($skuRec) || count($skuRec) <= 0) {
//
////						$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4].",".$arrFile[5]." ,".$arrFile[6].",".$arrFile[7].",".$arrFile[8].",".$arrFile[9].",".$arrFile[10].",".$arrFile[11].", Invalid Sku. \n";
//
////						$str_err_array=array($strErr);
//
////						$flag =false;
//
//                        $skuArr = array();
//
//                        $skuArr['sku_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[10]));
//
//                        $skuArr['account_id'] = $_SESSION['accountId'];
//
//                        $skuArr['status'] = 'A';
//
//                        $skuId = $this->_dbInsert($skuArr, 'table_sku');
//
//                    }
//
//                }
                //Checking Offers
//                $offerId = 0;
//                if ($flag && trim($arrFile[8]) != '') {
//                    $condi = "account_id=" . $_SESSION['accountId'] . " AND LOWER(offer_name)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[8]))) . "'";
//
//                    $offerRec = $this->_getSelectList('table_offer', "offer_name,offer_id", '', $condi);
//                    $offerId = ((is_array($offerRec) && count($offerRec) > 0) ? $offerRec[0]->offer_id : 0);
//
//                    if (!is_array($offerRec) || count($offerRec) <= 0) {
////						$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4].",".$arrFile[5]." ,".$arrFile[6].",".$arrFile[7].",".$arrFile[8].",".$arrFile[9].",".$arrFile[10].",".$arrFile[11]." ,Invalid offers. \n";
////						$str_err_array=array($strErr);
////						$flag =false;
//                        $offerArr = array();
//                        $offerArr['offer_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[8]));
//                        $offerArr['account_id'] = $_SESSION['accountId'];
//                        $offerArr['status'] = 'A';
//                        $offerId = $this->_dbInsert($offerArr, 'table_offer');
//                    }
//                }
                //for ptr price
                if ($flag) {
                    $item_ptr = trim($arrFile[9]);
//                    $pattern = "/^[0-9]*$/";
                    $pattern = "/^[0-9]\d*(\.\d+)?$/";
                    if (!preg_match($pattern, $item_ptr)) {
                        $strErr .= "Error in Row - " . $row;
                        for ($i = 0; $i < count($fields); $i++) {
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                        }
                        $ptrfields = $fields[9];
                        $strErr .= " , Please Provide Valid $ptrfields \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                // for cases
                if ($flag) {
                    $caseSize = trim($arrFile[5]);
                    $pattern = "/^[0-9]*$/";
                    if (!preg_match($pattern, $caseSize)) {
                        $strErr .= "Error in Row - " . $row;
                        for ($i = 0; $i < count($fields); $i++) {
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                        }
                        $strErr .= " , Please Provide Valid Case Size. \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                if ($flag && trim($arrFile[12]) != '') {
                    $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(grade_name)='" . mysql_escape_string(strtolower($arrFile[12])) . "' AND status = 'A'";
                    $gradeRec = $this->_getSelectList('table_grade', "grade_name,grade_id", '', $condi);
                    $gradeId = ((is_array($gradeRec) && count($gradeRec) > 0) ? $gradeRec[0]->grade_id : 0);
                    if (!is_array($gradeRec) || count($gradeRec) <= 0) {
                        $strErr .= "Error in Row - " . $row;
                        for ($i = 0; $i < count($fields); $i++) {
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                            //echo $arrFile[$i].'-'.$i.'<br>';
                        }
                        $strErr .= ",grade name doesn't exists. \n";
                        //  echo $arrFile[$i].' '.$strErr;die;
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
//                $casesList = explode(",", $cases);
                //echo $cases;die('case list');
//                if ($flag && !is_numeric($cases)) {
//                    $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . "," . $arrFile[7] . "," . $arrFile[8] . "," . $arrFile[9] . "," . $arrFile[10] . "," . $arrFile[11] . " ," . $arrFile[12]. " ," . $arrFile[13] . " , Case Size should be in Numeric. \n";
//                    $str_err_array = array($strErr);
//                    $flag = false;
//                }
                // Cases Sizes should be one.
//                if ($flag && sizeof($casesList) > 1) {
//                    $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . "," . $arrFile[7] . "," . $arrFile[8] . "," . $arrFile[9] . "," . $arrFile[10] . "," . $arrFile[11] . " ," . $arrFile[12] . " ," . $arrFile[13] . " , One item should be one case size. \n";
//                    $str_err_array = array($strErr);
//                    $flag = false;
//                }
                /* Check cases in numeric values. */
                /*if($arrFile[6]!="")
				 {
                    for($i=0;$i<count($casesList);$i++)
                    {
                    $condition=	" LOWER(case_size)='".strtolower($casesList[$i])."'";
                    $caseval=$this->_getSelectList('table_cases','case_id','',$condition);
                    if(!is_array($caseval))
                       {
                     $strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4].",".$arrFile[5]." ,".$arrFile[6].",".$arrFile[7]." ,".$arrFile[8]." ,Invalid casees sizes. \n";
								$str_err_array=array($strErr);
								$flag =false;
                       }
                     }
				   }*/
                // COLOR SECTION    // code commented
                /*$color=mysql_escape_string($arrFile[6]);
				$colorList = explode(",", $color);
				if($arrFile[6]!='')
				{
					for($i=0;$i<count($colorList);$i++)
					{
						$condition=	" LOWER(color_code)='".strtolower($colorList[$i])."'";
						$col=$this->_getSelectList('table_color','color_id','',$condition);
							if(!is_array($col))
							{
								$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4].",".$arrFile[5]." ,".$arrFile[6]." ,Invalid color code. \n";
								$str_err_array=array($strErr);
								$flag =false;


                     }

					}
				} else {
					// Add Default QTY attribute for all of the items into table_color.
				 $chkColor = $this->_getSelectList('table_color','color_id','', ' LOWER(color_code) = "qty"');
					if(!is_array($chkColor) && $chkColor[0]->color_id =='') {
						$data = array();
						$data['account_id']=$this->clean($_SESSION['accountId']);
						$data['color_code']= 'QTY';
						$data['color_desc']= 'QTY';
						$data['last_update_date']=date('Y-m-d');
						$data['last_update_status']='New';
						$data['status']= 'A';
						$colorID = $this->_dbInsert($data,'table_color');
					}
				}*/
                // Checnk HSN Code


                if ($flag && trim($arrFile[13]) != '') {
                    $condi = "LOWER(HSN_Code)='" . mysql_escape_string(strtolower($arrFile[13])) . "'";

                 
                    $hsnRec = $this->_getSelectList2('table_HSN_code_master', "hsn_id,HSN_Code", '', $condi);
                    // if (is_array($hsnRec) || count($gradeRec) > 0) {
                        if (is_array($hsnRec)> 0) {
                      
                        $hsnId = $hsnRec[0]->hsn_id;
                    } else {
                       
                        $data1['HSN_Code'] = mysql_escape_string(strtolower($arrFile[13]));
                        $data1['created_at'] = date('Y-m-d H:i:s');
                        $hsnId = $this->_dbInsert($data1, 'table_HSN_code_master');
                    }
                }


                      // checking Item Rank Name
                      $rankId = 0;
                      if ($flag && trim($arrFile[14]) != '') {
                          $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(item_rank_name) LIKE '%" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[14]))) . "%'";
                          $itemRankRec = $this->_getSelectList('table_item_ranking', "item_rank_name,item_rank_id", '', $condi);
                          if (is_array($itemRankRec) && (count($itemRankRec) > 0)) {
                              $rankId = $itemRankRec[0]->item_rank_id;
                          } else {
      //                        $brandArr = array();
      //                        $brandArr['item_rank_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "",$arrFile[2]));
      //                        $brandArr['account_id'] = $_SESSION['accountId'];
      //                        $brandId = $this->_dbInsert($brandArr, 'table_brands');
                              $strErr .= "Error in Row - " . $row;
                              for ($i = 0; $i < count($fields); $i++) {
                                  $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                              }
                              $itemRankfields = $fields[14];
                              $strErr .= " , $itemRankfields does not exists in the system.\n";
                              $str_err_array = array($strErr);
                              $flag = false;
                          }
                      }







                if ($flag) {

                    if(empty($arrFile[15]) || 'No' == ucwords(strtolower($arrFile[15]))){
                        $item_type = 'I';
                    }else if('Yes' == ucwords(strtolower($arrFile[15]))){
                        $item_type = 'F';
                    }


                    $data = array();
                    $data['account_id'] = $this->clean($_SESSION['accountId']);
                    $data['category_id'] = $category_id;
                    $data['subcategory_id'] = $subcategory_id;
                    if ($_SESSION['accountId'] == 14) {
                        $data['item_code'] = mysqli_real_escape_string($this->db_connect_id, htmlspecialchars
                        (preg_replace($regex, "", str_replace("'", "\'", $arrFile[0])), ENT_IGNORE));
                        $data['item_name'] = mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", str_replace("'", "\'", $arrFile[0])), ENT_IGNORE));
                    } else {
                        $data['item_code'] = mysqli_real_escape_string($this->db_connect_id, htmlspecialchars
                        (preg_replace($regex, "", $arrFile[0]), ENT_IGNORE));
                        $data['item_name'] = mysqli_real_escape_string($this->db_connect_id, htmlspecialchars
                        (preg_replace($regex, "", $arrFile[1]), ENT_IGNORE));
                    }
                    $data['item_size'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", $arrFile[5]));
                    $data['brand_id'] = $brandId;
                    $data['grade_id'] = $gradeId;
                    $data['HSN_id'] = $hsnId;
                    $data['offer_id'] = 0;
//
//                    $data['item_erp_code'] = mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", $arrFile[8])));
                    /* New added */
//                    $data['variant_id'] = $variantId;
//
//                    $data['sku_id'] = $skuId;
                    $data['last_update_date'] = date('Y-m-d');
                    $data['last_update_status'] = 'New';

                    $data['item_type'] = $item_type;

                    $data['status'] = 'A';
                    if ($this->clean($_SESSION['accountId']) == 5) {
                        $data['sequence_order'] = $this->getItemSequenceNo($category_id);
                    }

                    $data['rank_id'] = $rankId;

                    $check_item_where='item_code="'.$data['item_code'].'"';
                    $check_item = $this->_getSelectList('table_item', "item_id", '', $check_item_where);
                    if(empty($check_item))
                    {
                        $item_id = $this->_dbInsert($data, 'table_item');
                    }
                    else
                    {
                        $this->_dbUpdate($data, 'table_item', " item_code=" . $data['item_code']);

                        $item_id=$check_item[0]->item_id;
                    }


                    // $data['rank_id'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "",trim($arrFile[14])));



                    // $item_id = $this->_dbInsert($data, 'table_item');
                    //  if flag is true for ceses then we add.
                    if ($item_id > 0) {
                        $data = array();
                        $data['account_id'] = $this->clean($_SESSION['accountId']);
                        $data['item_id'] = $this->clean($item_id);
                        $data['item_mrp'] = mysqli_real_escape_string($this->db_connect_id, $this->getNumber
                        ($arrFile[9]));
                        $data['item_dp'] = (isset($arrFile[8]) && !empty($arrFile[8])) ? mysqli_real_escape_string
                        ($this->db_connect_id, $this->getNumber($arrFile[8])) : mysqli_real_escape_string
                        ($this->db_connect_id, $this->getNumber($arrFile[9]));
                        $data['dist_price'] = $arrFile[10];
                        $data['stockist_price'] = $arrFile[11];
                        $data['last_update_date'] = date('Y-m-d');
                        $data['last_update_status'] = 'New';
                        $data['start_date'] = $this->clean($_SESSION['StartDate']);
                        $data['end_date'] = $this->clean($_SESSION['EndDate']);
                        $data['status'] = 'A';
                        $this->_dbInsert($data, 'table_price');
                    }
                    if ($item_id > 0) {
                        $taxrate = 0;
                        if (!empty($arrFile[7]) && is_numeric($arrFile[7])) {
                            $taxrate = $arrFile[7];
                        }
                        $data = array();
                        $data['item_id'] = $this->clean($item_id);
                        $data['tax'] = $taxrate;
                        $this->_dbInsert($data, 'table_item_gst');
                    }
                    if ($item_id > 0) {
                        if (isset($caseSize) && !empty($caseSize) && (intval($caseSize) > 0)) {
                            $case = [];
                            $item_code = mysqli_real_escape_string($this->db_connect_id, htmlspecialchars
                            (preg_replace($regex, "", $arrFile[0]), ENT_IGNORE));
                            $item_ptr = mysqli_real_escape_string($this->db_connect_id, $this->getNumber($arrFile[9]));
                            $item_mrp = (isset($arrFile[7]) && !empty($arrFile[8])) ? mysqli_real_escape_string
                            ($this->db_connect_id, $this->getNumber($arrFile[8])) : mysqli_real_escape_string
                            ($this->db_connect_id, $this->getNumber($arrFile[9]));
                            $dist_price = (isset($arrFile[10]) && !empty($arrFile[10])) ? mysqli_real_escape_string
                            ($this->db_connect_id, $this->getNumber($arrFile[10])) : 0;
                            $stockist_price = (isset($arrFile[11]) && !empty($arrFile[11])) ?
                                mysqli_real_escape_string($this->db_connect_id, $this->getNumber($arrFile[11])) : 0;
                            $case['account_id'] = mysqli_real_escape_string($this->db_connect_id, $_SESSION['accountId']);
                            $case['case_description'] = $item_code . '-' . mysqli_real_escape_string($this->db_connect_id, $caseSize);
                            $case['case_size'] = mysqli_real_escape_string($this->db_connect_id, $caseSize);
                            $case['case_price_ptr'] = ($item_ptr * $caseSize);
                            $case['case_price_mrp'] = ($item_mrp * $caseSize);
                            $case['case_price_distributor'] = (intval($dist_price) > 0) ? ($dist_price * $caseSize) : '';
                            $case['case_price_stockist'] = (intval($stockist_price) > 0) ? ($stockist_price * $caseSize) : '';
                            $case['created_date'] = date('Y-m-d H:i:s');
                            $case['updated_date'] = date('Y-m-d H:i:s');
                            $case['status'] = 'A';
                            $caseId = $this->_dbInsert($case, 'table_cases');
                            if ($caseId > 0) {
                                $data2 = [];
                                $data2['item_id'] = $item_id;
                                $data2['case_id'] = $caseId;
                                $this->_dbInsert($data2, 'table_item_case_relationship');
                                // Default inserted a record with attribute ID
                                $stock_enabale = 1;
                                if ($stock_enabale == 1) {
                                    $data3 = [];
                                    $batch_no = 'No Batch';
                                    $condi = " LOWER(color_code)='" . strtolower($batch_no) . "'";
                                    $resultset = $this->_getSelectList('table_color', 'color_id', '', $condi);
                                    if (is_array($resultset) && (count($resultset) > 0)) {
                                        $color_id = $resultset[0]->color_id;
                                    }
                                    $data3['account_id'] = $_SESSION['accountId'];
                                    $data3['item_id'] = $item_id;
                                    $data3['category_id'] = $category_id;
                                    $data3['attribute_value_id'] = $caseId;
                                    $data3['color_id'] = $color_id;
                                    $data3['stock_value'] = 0;
                                    $data3['last_updated_date'] = date('Y-m-d');
                                    $data3['last_update_datetime'] = date('Y-m-d H:i:s');
                                    $data3['status'] = 'A';
                                    $this->_dbInsert($data3, 'table_item_ndc_stock');
                                }
                            }
                        }
                    }
                }
            }
            $row++;
        }
        fclose($file);


        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else
            return $str_err_array;
    }
    
    function getItemSequenceNo($catid)

    {

        $sequenceNo = 1;

        $condi = " category_id=" . $catid;

        $resultset = $this->_getSelectList('table_item', 'MAX(sequence_order) as sequence_order', '', $condi);

        if (count($resultset) > 0) {

            $sequenceNo = ($resultset[0]->sequence_order + 1);

        }

        return $sequenceNo;

    }

    /************************************* Start Upload Items ***************************************/

    /************************************* Start Upload PTR For Items ***************************************/

    function importItemsPTRFile()

    {

        $fields = array('State Name*', 'City Name*', 'Item Code*', ' PTR Price*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[3])) {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $fields[0] . " shouldn't be empty \n";

                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $fields[1] . " shouldn't be empty \n";

                    } else if (empty($arrFile[2])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $fields[2] . " shouldn't be empty \n";

                    } else if (empty($arrFile[3])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . " ," . $fields[3] . " shouldn't be empty \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower($arrFile[0])) . "' AND status = 'A'";

                    //echo $condi."<br/>";

                    $StateRec = $this->_getSelectList2('state', "state_id", '', $condi);

                    $state_id = $StateRec[0]->state_id;

                    if (!is_array($StateRec) && (count($StateRec) <= 0)) {

                        //$strErr .="Invalid City name: &nbsp;&nbsp;".implode(",",$arrFile)."";

                        //$flag =false;

//                        $state = array();

//                        $state['state_name'] = mysql_escape_string($this->clean($arrFile[0]));

//                        $state['last_update_date'] = date('Y-m-d');

//                        $state['last_update_status'] = 'New';

//                        $state_id = $this->_dbInsert($state, 'state');

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  , State does not exist in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $condi = " LOWER(city_name)='" . mysql_escape_string(strtolower($arrFile[1])) . "' AND state_id='" . $state_id . "' AND status = 'A' ";

                    $CityRec = $this->_getSelectList2('city', "city_id", '', $condi);

                    $city_id = $CityRec[0]->city_id;

                    if (!is_array($CityRec) && (count($CityRec) <= 0)) {

//                        $city = array();

//                        $city['state_id'] = $this->clean($state_id);

//                        $city['city_name'] = mysql_escape_string($this->clean($arrFile[1]));

//                        $city['last_update_date'] = date('Y-m-d');

//                        $city['last_update_status'] = 'New';

//                        $city_id = $this->_dbInsert($city, 'city');

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  , City does not exist in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower($arrFile[2])) . "' AND status = 'A'";

                    $ItemRec = $this->_getSelectList('table_item', "item_id", '', $condi);

                    $item_id = $ItemRec[0]->item_id;

                    if (!is_array($ItemRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ,Invalid Item Code. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $condi = " item_id='" . $item_id . "' and city_id='" . $city_id . "'";

                    $PtrRec = $this->_getSelectList('table_ptr', "ptr_id", '', $condi);

                    if (is_array($PtrRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ,Item Price Details already exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['item_id'] = $this->clean($item_id);

                    $data['city_id'] = $this->clean($city_id);

                    $data['item_price'] = mysql_escape_string($arrFile[3]);

                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'New';

                    $data['start_date'] = 'New';

                    $data['start_date'] = $this->clean($_SESSION['StartDate']);

                    $data['end_date'] = $this->clean($_SESSION['EndDate']);

                    $data['status'] = 'A';

                    $item_price_id = $this->_dbInsert($data, 'table_ptr');

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /************************************* End Upload PTR For Items ***************************************/

    /************************************* Start Upload Distributor ***************************************/
    function uploadDistributorFile()
    {
        $fields = array($this->AliaseUsers['distributor'] . ' Code', $this->AliaseUsers['distributor'] . ' Name*', 'Phone No1*', 'Phone No2', $this->AliaseUsers['distributor'] . ' Address', 'zipcode', 'State*', 'District*', 'City*', 'Contact Person1*', 'contact Phone No1*', 'Contact Person2', 'contact Phone No2', 'Email-ID1', 'Email-ID2', $this->AliaseUsers['distributor'] . 'Type', $this->AliaseUsers('distributor') . 'Region', $this->AliaseUsers['stockist'] . ' Code*', 'GST No', 'Username', 'Password', 'Route Name');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[6]) || empty($arrFile[7]) || empty
                    ($arrFile[8]) || empty($arrFile[9]) || empty($arrFile[10]) || empty($arrFile[16])) {

                    if (empty($arrFile[1])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . " ," . $arrFile[20] . " ," . $fields[1] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[2])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . " ," . $arrFile[20] . " ," . $fields[2] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[6])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . " ," . $arrFile[20] . " ," . $fields[6] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[7])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . " ," . $arrFile[20] . " ," . $fields[7] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[8])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . " ," . $arrFile[20] . " ," . $fields[8] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[9])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . " ," . $arrFile[20] . " ," . $fields[9] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[10])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . " ," . $arrFile[20] . " ," . $fields[10] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[16])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                            $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," .
                            $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . " ," . $arrFile[20] . " ," . $fields[16] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    if (isset($arrFile[18]) && !empty(trim($arrFile[18]))) {

                        if ($this->getAccountRec() <= 0) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , You have exceeded the maximum limit of active users \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                if ($flag) {

                    $phnNo = trim($arrFile[2]);

                    $pattern = "/^[0-9+\-]*$/";

                    if (!preg_match($pattern, $phnNo)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . " ,Please Provide The Valid Phone Number. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // Distributor Check

                if ($flag) {

                    $condi = " status = 'A' AND distributor_phone_no='" . $phnNo . "' ";

                    $aDisRec = $this->_getSelectList('table_distributors', '*', '', $condi);

                    if (is_array($aDisRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . " ," . $arrFile[20] . " ,already exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // if ($flag) {

                //     $SmsNo = trim($arrFile[15]);

                //     if (isset($SmsNo) && !empty($SmsNo)) {

                //         $pattern = "/^[0-9+\-]*$/";

                //         if (!preg_match($pattern, $SmsNo)) {

                //             $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . "," . $arrFile[21] . " ,Please Provide The Valid Phone Number To Send SMS \n";

                //             $str_err_array = array($strErr);

                //             $flag = false;

                //         }

                //     }

                // }

// State Check

                if ($flag) {

                    // Get State ID with the help of State Name

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower(trim($arrFile[6]))) . "' AND status = 'A'";

                    $StateRec = $this->_getSelectList2('state', "state_id,country_id", '', $condi);

                    if (is_array($StateRec) && (count($StateRec) > 0)) {

                        $state_id = $StateRec[0]->state_id;

                        $country_id = $StateRec[0]->country_id;

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . " , State does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // District

                if ($flag) {

                    $condi = " LOWER(city_name)='" . mysql_escape_string(strtolower(trim($arrFile[7]))) . "' AND state_id='" . $state_id . "' AND status = 'A'";

                    $CityRec = $this->_getSelectList2('city', "city_id", '', $condi);

                    if (is_array($CityRec) && (count($CityRec) > 0)) {

                        $city_id = $CityRec[0]->city_id;

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . " , District does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // City

                if ($flag) {

                    $condi = " LOWER(location_name)='" . mysql_escape_string(strtolower(trim($arrFile[8]))) . "' AND state_id='" . $state_id . "' AND city_id='" . $city_id . "' AND status = 'A'";

                    $locRec = $this->_getSelectList2('table_location', "location_id", '', $condi);

                    if (is_array($locRec) && (count($locRec) > 0)) {

                        $location_id = $locRec[0]->location_id;

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . " , City does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // 	Check Distributor Class Name '

                if (isset($arrFile[15]) && !empty(trim($arrFile[15]))) {

                    $condi = " LOWER(dis_type_name)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "",
                            strtolower($arrFile[15]))) . "' AND status = 'A'";

                    $RelationRec = $this->_getSelectList('table_distributor_type_master', "dis_type_id", '', $condi);

                    if (is_array($RelationRec)) {

                        $dis_type_id = $RelationRec[0]->dis_type_id;

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . " ," . $this->AliaseUsers['distributor'] . " Type does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {
                    $condi = " LOWER(country_id)='" . mysql_escape_string($country_id) . "' AND status = 'A' ";

                    $StRec = $this->_getSelectList2('country', "contact_max_length,contact_min_length", '', $condi);

                    if (is_array($StRec) && (count($StRec) > 0)) {
                        $cnt_1 = strlen(trim($arrFile[2]));
                        $cnt_2 = strlen(trim($arrFile[3]));
                        $cnt_3 = strlen(trim($arrFile[10]));
                        $cnt_4 = strlen(trim($arrFile[12]));
                        //$cnt_5 = strlen($arrFile[15]);

                        if ($cnt_1 >= $StRec[0]->contact_min_length && $cnt_1 <=
                            $StRec[0]->contact_max_length) {
                            $phone_no = trim($arrFile[2]);

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Phone number " . $arrFile[2] . " \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                        if (!empty($arrFile[3])) {
                            if ($cnt_2 >= $StRec[0]->contact_min_length && $cnt_2 <=
                                $StRec[0]->contact_max_length) {
                                $phone_no1 = trim($arrFile[3]);

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[3] . " \n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        } else {
                            $phone_no1 = trim($arrFile[3]);
                        }

                        if ($cnt_3 >= $StRec[0]->contact_min_length && $cnt_3 <=
                            $StRec[0]->contact_max_length) {
                            $phone_no2 = trim($arrFile[10]);

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Phone number " . $arrFile[10] . " \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                        if (!empty($arrFile[12])) {
                            if ($cnt_4 >= $StRec[0]->contact_min_length && $cnt_4 <=
                                $StRec[0]->contact_max_length) {
                                $phone_no3 = trim($arrFile[12]);
                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[12] . "\n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        } else {
                            $phone_no3 = trim($arrFile[12]);
                        }

                        // if (!empty($arrFile[15])) {
                        //     if ($cnt_5 >= $StRec[0]->contact_min_length && $cnt_5 <=
                        //         $StRec[0]->contact_max_length) {
                        //         $phone_no4 = $arrFile[15];
                        //     } else {

                        //         $strErr .= "Error in Row - " . $row;

                        //         for ($i = 0; $i < count($fields); $i++) {

                        //             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        //         }

                        //         $strErr .= " , Invalid Phone number " . $arrFile[15] . " \n";

                        //         $str_err_array = array($strErr);

                        //         $flag = false;
                        //     }
                        // } else {
                        //     $phone_no4 = $arrFile[15];
                        // }


                    }
                }

// Check distributor region

//                if (isset($arrFile[17]) && !empty(trim($arrFile[17]))) {
//
//                    $condi = " LOWER(region_name)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[17]))) . "' AND status = 'A' ";
//
//                    $RegionRec = $this->_getSelectList('table_region', "region_id", '', $condi);
//
//                    if (is_array($RegionRec) && (count($RegionRec) > 0)) {
//
//                        $regionId = $RegionRec[0]->region_id;
//
//                    } else {
//
////                        $region = array();
//
////                        $region['account_id'] = $this->clean($_SESSION['accountId']);
//
////                        $region['region_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower($arrFile[20])));
//
////                        $region['status'] = 'A';
//
////                        $regionId = $this->_dbInsert($region, 'table_region');
//
//                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
//                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . "," . $arrFile[21] . " ," . $arrFile[22] . " , " . $this->AliaseUsers['distributor'] . " Region does not exists. \n";
//
//                        $str_err_array = array($strErr);
//
//                        $flag = false;
//
//                    }
//
//                }

                // Check for distributor code

                if ($flag) {

                    $condi = " LOWER(distributor_code)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower(trim($arrFile[0])))) . "' AND status = 'A'";

                    $aDisCode = $this->_getSelectList('table_distributors', '*', '', $condi);

                    if (is_array($aDisCode)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . " , " . $this->AliaseUsers['distributor'] . " code already exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //check username already exists or not

                if ($flag) {

                    if ((isset($arrFile[18]) && !empty($arrFile[18])) && (isset($arrFile[19]) && !empty($arrFile[19])
                        )) {

                        $condi = " LOWER(username)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "",
                                strtolower(trim($arrFile[18])))) . "' AND status = 'A' ";

                        $aDisCode = $this->_getSelectList2('table_web_users', '*', '', $condi);

                        if (is_array($aDisCode)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . " , Username already exists in the system. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                // Check for Stockist code

                if ($flag) {

                    $condi = " LOWER(stockist_code)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "",
                            strtolower(trim($arrFile[16])))) . "' AND status = 'A'";

                    $aStockistCode = $this->_getSelectList('table_stockist', 'stockist_id', '', $condi);

                    if (!is_array($aStockistCode) && empty($aStockistCode) && $aStockistCode[0]->stockist_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                            $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," .
                            $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," .
                            $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . " ," . $this->AliaseUsers['stockist'] . " Code Not exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $stockist_id = $aStockistCode[0]->stockist_id;

                    }

                }

                // Database Insert Query

                if ($flag) {

                    $data = array();

                    //$str = preg_replace('/[^A-Za-z0-9\. -]/', '', $str);

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['distributor_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", trim($arrFile[1])));

                    $data['distributor_address'] = trim($arrFile[4]);

                    $data['distributor_location'] = trim($arrFile[8]);

                    /*add relationship class and region */

                    $data['distributor_type_id'] = $dis_type_id;

                    $data['gst_no'] = trim($arrFile[17]);

//                    $data['region_id'] = $regionId;

                    $data['stockist_id'] = $stockist_id;

                    $data['country'] = $country_id;

                    $data['state'] = $this->clean($state_id);

                    $data['city'] = $this->clean($city_id);

                    $data['location'] = $this->clean($location_id);

                    $data['zipcode'] = trim($arrFile[5]);

                    $data['distributor_phone_no'] = trim($phone_no);

                    $data['distributor_phone_no2'] = trim($phone_no1);

//                    $data['distributor_phone_no3'] = $arrFile[3];

                    $data['distributor_email'] = trim($arrFile[13]);

                    $data['distributor_email2'] = trim($arrFile[14]);

//                    $data['distributor_email3'] = $arrFile[17];

                    $data['contact_person'] = trim($arrFile[9]);

                    $data['contact_person2'] = trim($arrFile[11]);

//                    $data['contact_person3'] = $arrFile[13];

                    $data['contact_number'] = trim($phone_no2);

                    $data['contact_number2'] = trim($phone_no3);

//                    $data['contact_number3'] = $arrFile[14];

                    //$data['sms_number'] = trim($phone_no4);

                    $data['distributor_code'] = $arrFile[0];

                    $data['start_date'] = date('Y-m-d');

                    // $data['end_date'] = $_SESSION['EndDate']; //commented by sachin as per dhavika's request

                    $data['status'] = 'A';
//echo "<pre>";print_r($data);die;
                    $dis_id = $this->_dbInsert($data, 'table_distributors');

                    /*-----Distributor assign to all categories-----*/

                    if ($dis_id > 0) {

                        if (empty($arrFile[0]) || $arrFile[0] == '') {
                            $dataDistCode = [];
                            $dataDistCode['distributor_code'] = $dis_id;
                            $this->_dbUpdate($dataDistCode, 'table_distributors', " distributor_id=" . $dis_id);
                        }

                        //Todo Start : sudhanshu 03 may 2024 : insert multiple stocksit mapping
                        $mapping['distributor_id'] = $dis_id;
                        $mapping['stockist_id'] = $stockist_id;
                        $mapping['status'] = 'A';
                        $mapping['account_id'] = $_SESSION['accountId'];
                        $mappingId = $this->_dbInsert($mapping, 'table_stockist_distributor_mapping');
                        //Todo Start : sudhanshu 03 may 2024 : insert multiple stocksit mapping

                        //Todo Start Sudhanshu 20 may 2024 : shipping addres insert mapping table
                        if (trim($arrFile[4]) != '') {
                            $addr['distributor_id'] = $dis_id;
                            $addr['account_id'] = $_SESSION['accountId'];
                            $addr['address'] = trim($arrFile[4]);
                            $addr['zipcode'] = trim($arrFile[5]);
                            $addr['status'] = 'A';
                            $addr['created_at'] = date('Y-m-d H:i:s');
                            $addr['updated_at'] = date('Y-m-d H:i:s');
                            $adrId = $this->_dbInsert($addr, 'table_distributor_address');

                            $datat2['address_id'] = $adrId;
                            $this->_dbUpdate($datat2, 'table_distributors', " distributor_id=" . $dis_id);

                        }
                        //Todo End Sudhanshu 20 may 2024 : shipping addres insert mapping table

                        //create login

                        if ((isset($arrFile[18]) && !empty($arrFile[18])) && (isset($arrFile[19]) && !empty
                                ($arrFile[19]))) {

                            $disLogin = [];

                            $disLogin['account_id'] = $_SESSION['accountId'];

                            $disLogin['username'] = trim($arrFile[18]);

                            $disLogin['password'] = md5($arrFile[19]);

                            $disLogin['email_id'] = trim($arrFile[13]);

                            $disLogin['distributor_id'] = $dis_id;

                            $disLogin['user_type'] = 3;

                            $disLogin['start_date'] = $_SESSION['StartDate'];

                            //$disLogin['end_date'] = $_SESSION['EndDate']; //commented by sachin as per dhavika's request

                            $disLogin['status'] = 'A';

                            $this->_dbInsert($disLogin, 'table_web_users');

                        }


                        if (isset($arrFile[20]) && !empty($arrFile[20]) && (trim($arrFile[20]) != '')) {

                            $route = mysql_escape_string($arrFile[20]);

                            $routeList = explode(",", $route);
                            $sortOrder = 1;
                            for ($i = 0; $i < count($routeList); $i++) {

                                $condition = " LOWER(route_name)='" . strtolower(trim($routeList[$i])) . "'";

                                $resultset = $this->_getSelectList('table_route', 'route_id,state_id,city_id,locations', '', $condition);

                                if (sizeof($resultset) > 0 && !empty($resultset) && $resultset[0]->route_id != "") {

                                    $route_id = $resultset[0]->route_id;

                                    $stateArr = array_filter(explode(',', $resultset[0]->state_id));
                                    $cityArr = array_filter(explode(',', $resultset[0]->city_id));
                                    $locationArr = array_filter(explode(',', $resultset[0]->locations));

                                    array_push($stateArr, $state_id);
                                    array_push($cityArr, $city_id);
                                    array_push($locationArr, $location_id);

                                    $comma_separated_state = implode(",", array_unique($stateArr));
                                    $comma_separated_city = implode(",", array_unique($cityArr));
                                    $comma_separated_location = implode(",", array_unique($locationArr));


                                    $data3 = array();
                                    $data3['state_id'] = $comma_separated_state;
                                    $data3['city_id'] = $comma_separated_city;
                                    $data3['locations'] = $comma_separated_location;

                                    $this->_dbUpdate($data3, 'table_route', " route_id='" . $route_id . "'");

                                    $data5 = array();
                                    $data5['account_id'] = $_SESSION['accountId'];
                                    $data5['route_id'] = $route_id;
                                    $data5['distributor_id'] = $dis_id;
                                    $data5['sort_order'] = $sortOrder;
                                    $this->_dbInsert($data5, 'table_route_retailer');
                                    $sortOrder++;
                                } else {
                                    $data2 = array();
                                    $data2['account_id'] = $_SESSION['accountId'];
                                    $data2['state_id'] = $state_id;
                                    $data2['city_id'] = $city_id;
                                    $data2['locations'] = $location_id;
                                    $data2['route_name'] = $routeList[$i];
                                    $data2['status'] = 'A';
                                    $resultRoute = $this->_dbInsert($data2, 'table_route');

                                    $data4 = array();
                                    $data4['account_id'] = $_SESSION['accountId'];
                                    $data4['route_id'] = $resultRoute;
                                    $data4['distributor_id'] = $dis_id;
                                    $data4['sort_order'] = $sortOrder;
                                    $this->_dbInsert($data4, 'table_route_retailer');
                                    $sortOrder++;
                                }
                            }
                        }

                        $Category = $this->_getSelectList('table_category', "*", '', " status='A' ");

                        foreach ($Category as $key => $value) {

                            $datadis['distributor_id'] = $dis_id;

                            $datadis['category_id'] = $value->category_id;

                            $id = $this->_dbInsert($datadis, 'table_distributors_category');

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /************************************* End Upload Distributor ***************************************/

    /************************************* Start Upload Retailer ***************************************/

    function uploadRetailerFile()

    {

//        $fields = array('Retailer Name*', 'Phone No1*', 'Phone No2', 'Retailer Address', 'Retailer Market*', 'State*', 'District*', 'City*', 'Zipcode', 'Contact Person1*', 'contact Phone No1*', 'Contact Person2', 'Contact Phone No2', 'Email-ID1*', 'Email-ID2', 'Retailer Class', 'Route Name', 'Retailer Channel', 'Distributor Code*', 'Display Outlet', 'Retailer Type', 'Username', 'Password', 'GST Number', 'PAN Number', 'Retailer Code', 'Aadhar Number');
        $fields = array($this->AliaseUsers['retailer'] . ' Code', $this->AliaseUsers['retailer'] . ' Name*', 'Phone No1*', 'Phone No2', 'State*', 'District*', 'City*', $this->AliaseUsers['retailer'] . ' Market*', 'Zipcode', $this->AliaseUsers['retailer'] . ' Address', $this->AliaseUsers['retailer'] . ' Group', $this->AliaseUsers['retailer'] . ' Channel*', $this->AliaseUsers['retailer'] . ' Class*', $this->AliaseUsers['retailer'] . ' Type*', 'GST Number', 'PAN Number', 'Aadhar Number', 'Display Outlet', 'Route Name', 'Contact Person1*', 'contact Phone No1*', 'Email-ID1', 'Contact Person2', 'Contact Phone No2', 'Email-ID2', $this->AliaseUsers['distributor'] . ' Code*', 'Username', 'Password');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[4]) || empty($arrFile[5]) || empty
                    ($arrFile[6]) || empty($arrFile[7]) || empty($arrFile[19]) || empty($arrFile[20]) || empty($arrFile[25]) || empty($arrFile[13]) || empty($arrFile[11]) || empty($arrFile[12])) {

                    if (empty($arrFile[1])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[2])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[4])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[4] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[5])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[5] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[6])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[6] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[7])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[7] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[19])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[19] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[20])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[20] . " shouldn't be empty. \n";

                    } //remove email validation : sudhanshu 20 may 2024
                    else if (empty($arrFile[25])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[25] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[13])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[13] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[11])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[11] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[12])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[12] . " shouldn't be empty. \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    if (isset($arrFile[26]) && !empty(trim($arrFile[26]))) {

                        if ($this->getAccountRec() <= 0) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , You have exceeded the maximum limit of active users \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                /*  For channel id */

                $relChannel = mysql_escape_string(trim($arrFile[11]));

                if ($relChannel != "") {

                    if ($flag) {

                        $condi = " LOWER(channel_name)='" . strtolower($relChannel) . "' AND status = 'A'";

                        $aRetRec = $this->_getSelectList('table_retailer_channel_master', 'channel_id', '', $condi);

                        if (is_array($aRetRec) && (count($aRetRec) > 0)) {

                            $channel = $aRetRec[0]->channel_id;

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . " Channel does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

//                            $data = [];

//                            $data['channel_name']=$relChannel;

//                            $data['account_id']  =$_SESSION['accountId'];

//                            $data['create_date']  = date('Y-m-d H:i:s');

//                            $data['status']		 ='A';

//                            $channel = $this->_dbInsert($data,'table_retailer_channel_master');

                        }

                    }

                }

                /* for retailer  group */
                $relGroup = mysql_escape_string(trim($arrFile[10]));

                if ($relGroup != "") {

                    if ($flag) {

                        $condi = " LOWER(group_name)='" . strtolower($relGroup) . "' AND status = 'A'";

                        $aGrRec = $this->_getSelectList('table_retailer_group', 'group_id', '', $condi);

                        if (is_array($aGrRec) && (count($aGrRec) > 0)) {

                            $groupId = $aGrRec[0]->group_id;

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . " Group does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;


                        }

                    }

                }
                /*  For Retailer  type id */

                $relType = mysql_escape_string(trim($arrFile[13]));

                if ($relType != "") {

                    if ($flag) {

                        $condi = " LOWER(type_name)='" . strtolower($relType) . "' AND status = 'A'";

                        $aRetRec = $this->_getSelectList('table_retailer_type_master', 'type_id', '', $condi);

                        if (is_array($aRetRec) && (count($aRetRec) > 0)) {

                            $typeval = $aRetRec[0]->type_id;

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . " Type does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

//                            $data = [];

//                            $data['type_name'] = $relType;

//                            $data['account_id']  =$_SESSION['accountId'];

//                            $data['status']		 ='A';

//                            $data['create_date'] =date('Y-m-d');

//                            $typeval = $this->_dbInsert($data,'table_retailer_type_master');

                        }

                    }

                }

                /*  For distributor id */

                $disCode = mysql_escape_string(trim($arrFile[25]));

                if ($disCode != "") {

                    if ($flag) {

                        $condi = " LOWER(distributor_code)='" . strtolower($disCode) . "' AND status = 'A'";

                        $aRetRec = $this->_getSelectList('table_distributors', 'distributor_id', '', $condi);

                        if (!is_array($aRetRec)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Sorry No " . $this->AliaseUsers('distributor') . " code exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $distributor = $aRetRec[0]->distributor_id;

                        }

                    }

                }

                $relCode = mysql_escape_string(trim($arrFile[12]));

                if (!empty($relCode)) {

                    if ($flag) {

                        $condi = " LOWER(relationship_code)='" . strtolower($relCode) . "' AND status = 'A'";

                        $aRetRec = $this->_getSelectList('table_relationship', 'relationship_id', '', $condi);

                        if (!is_array($aRetRec)) {

//                        $data = [];

//                        $data['relationship_code']=mysql_escape_string($relCode);

//                        $data['relationship_desc']=mysql_escape_string($relCode);

//                        $data['account_id']=mysql_escape_string($_SESSION['accountId']);

//                        $data['last_update_date']=date('Y-m-d');

//                        $data['last_update_status']='New';

//                        $data['status']= 'A';

//                        $relationship_id = $this->_dbInsert($data,'table_relationship');

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . " Class does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $relationship_id = $aRetRec[0]->relationship_id;

                        }

                    }

                }

                if ($flag) {

                    // Get State ID with the help of State Name

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower($arrFile[4])) . "' AND status = 'A'";

                    $StateRec = $this->_getSelectList2('state', "state_id,country_id", '', $condi);

                    if (is_array($StateRec) && (count($StateRec) > 0)) {

                        $state_id = $StateRec[0]->state_id;

                        $country_id = $StateRec[0]->country_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , State does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $condi = " LOWER(city_name)='" . mysql_escape_string($this->clean(strtolower($arrFile[5]))) . "' AND state_id='" . $state_id . "' AND status = 'A'";

                    $CityRec = $this->_getSelectList2('city', "city_id", '', $condi);

                    if (is_array($CityRec) && (count($CityRec) > 0)) {

                        $city_id = $CityRec[0]->city_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , District does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $condi = " LOWER(location_name)='" . mysql_escape_string($this->clean(strtolower($arrFile[6]))) .
                        "' AND state_id='" . $state_id . "' AND city_id='" . $city_id . "' AND status = 'A' ";

                    $locRec = $this->_getSelectList2('table_location', "location_id", '', $condi);

                    if (is_array($locRec) && (count($locRec) > 0)) {

                        $location_id = $locRec[0]->location_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , City does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $phnNo = trim($arrFile[2]);

                    $pattern = "/^[0-9+\-]*$/";

                    if (!preg_match($pattern, $phnNo)) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Please Provide the valid Phone Number. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {
                    $condi = " LOWER(country_id)='" . mysql_escape_string($country_id) . "' AND status = 'A' ";

                    $StRec = $this->_getSelectList2('country', "contact_max_length,contact_min_length", '', $condi);

                    if (is_array($StRec) && (count($StRec) > 0)) {
                        $cnt_1 = strlen($arrFile[2]);
                        $cnt_2 = strlen($arrFile[3]);
                        $cnt_3 = strlen($arrFile[20]);
                        $cnt_4 = strlen($arrFile[23]);

                        if ($cnt_1 >= $StRec[0]->contact_min_length && $cnt_1 <=
                            $StRec[0]->contact_max_length) {
                            $phone_no = $arrFile[2];

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Phone number " . $arrFile[2] . " \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                        if (!empty($arrFile[3])) {
                            if ($cnt_2 >= $StRec[0]->contact_min_length && $cnt_2 <=
                                $StRec[0]->contact_max_length) {
                                $phone_no1 = $arrFile[3];

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[3] . "\n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        } else {
                            $phone_no1 = $arrFile[3];
                        }


                        if ($cnt_3 >= $StRec[0]->contact_min_length && $cnt_3 <=
                            $StRec[0]->contact_max_length) {
                            $phone_no2 = $arrFile[20];

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Phone number " . $arrFile[20] . "\n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                        if (!empty($arrFile[23])) {
                            if ($cnt_4 >= $StRec[0]->contact_min_length && $cnt_4 <=
                                $StRec[0]->contact_max_length) {
                                $phone_no3 = $arrFile[23];
                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[23] . " \n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        } else {
                            $phone_no3 = $arrFile[23];
                        }

                    }
                }
                if ($flag) {

                    if (!empty($arrFile[0])) {

                        $condi = " retailer_code = '" . mysql_escape_string($this->clean($arrFile[0])) . "' ";

                        $aRetRec = $this->_getSelectList('table_retailer', '*', '', $condi);

                        if (is_array($aRetRec)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . " Code already exists in the system. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $condi = " LOWER(retailer_name)='" . mysql_escape_string(strtolower($this->clean
                                ($arrFile[1]))) . "' AND state ='" . $state_id . "' AND city ='" . $city_id . "' AND location_id = '" . $location_id . "' AND retailer_phone_no ='" . $phnNo . "' ";

                            $aRetRec = $this->_getSelectList('table_retailer', '*', '', $condi);

                            if (is_array($aRetRec)) {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , " . $this->AliaseUsers('retailer') . " already exists in the system. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        }

                    } else {

                        $condi = " LOWER(retailer_name)='" . mysql_escape_string(strtolower($this->clean($arrFile[1])
                            )) . "' AND state ='" . $state_id . "' AND city ='" . $city_id . "' AND location_id = '" . $location_id . "' AND retailer_phone_no ='" . $phnNo . "' ";

                        $aRetRec = $this->_getSelectList('table_retailer', '*', '', $condi);

                        if (is_array($aRetRec)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . " already exists in the system. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    if ($flag) {

                        $username = trim($arrFile[26]);

                        if (isset($username) && !empty($username)) {

                            $condi = " LOWER(username)='" . mysql_escape_string(strtolower($username)) . "'  AND status = 'A'";

                            $aRetRec = $this->_getSelectList2('table_web_users', '*', '', $condi);

                            if (is_array($aRetRec)) {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Username already exists in the system \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        }

                    }

//                    $aRetRec = $this->_getSelectList('table_retailer', '*', '', $condi);

//                    if (is_array($aRetRec)) {

//                        $strErr .= "Error in Row - " . $row;

//                        for($i = 0; $i < count($fields); $i++){

//                            $strErr .= "," . str_replace($remove, ' ',$arrFile[$i]);

//                        }

//                        $strErr .= " , Retailer already exists in the system. \n";

//

//                        $str_err_array = array($strErr);

//                        $flag = false;

//                    }

                }

                /* display out */

                if (mysql_escape_string(trim(strtolower($arrFile[17]))) == 'yes') {

                    $outlet = 'Y';

                } else if (mysql_escape_string(trim(strtolower($arrFile[17]))) == 'no') {

                    $outlet = 'N';

                } else {

                    $outlet = '';

                }

                if ($flag) {

                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['relationship_id'] = $relationship_id;

                    //$data['chain_id']= $chain_id; // Remove Chain Name

                    $data['retailer_name'] = mysql_escape_string($this->clean($arrFile[1]));

                    $data['retailer_code'] = mysql_escape_string($this->clean($arrFile[0]));

                    /* Med mofification */

                    $data['channel_id'] = mysql_escape_string($channel);

                    $data['distributor_id'] = mysql_escape_string($distributor);

                    $data['display_outlet'] = mysql_escape_string($outlet);

                    $data['type_id'] = mysql_escape_string($typeval);

                    /* Ends Med modification */

                    $data['retailer_address'] = mysql_escape_string(trim($arrFile[9]));

                    $data['retailer_location'] = mysql_escape_string($this->clean($arrFile[7]));

                    $data['country'] = $country_id;

                    $data['state'] = $this->clean($state_id);

                    $data['city'] = $this->clean($city_id);

                    $data['location_id'] = trim($location_id);

                    $data['retailer_phone_no'] = mysql_escape_string(trim($phone_no));

                    $data['retailer_phone_no2'] = mysql_escape_string($this->clean($phone_no1));

                    $data['contact_person'] = mysql_escape_string($this->clean($arrFile[19]));

                    $data['contact_number'] = mysql_escape_string($this->clean($phone_no2));

                    $data['contact_person2'] = mysql_escape_string($this->clean($arrFile[22]));

                    $data['contact_number2'] = mysql_escape_string($this->clean($phone_no3));

                    $data['retailer_email'] = mysql_escape_string(trim($arrFile[21]));

                    $data['retailer_email2'] = mysql_escape_string(trim($arrFile[24]));

                    $data['zipcode'] = mysql_escape_string($this->clean($arrFile[8]));

                    $data['gst_no'] = mysql_escape_string($this->clean($arrFile[14]));

                    $data['pan_no'] = mysql_escape_string($this->clean($arrFile[15]));

                    $data['aadhar_no'] = mysql_escape_string($this->clean($arrFile[16]));

                    $data['start_date'] = date('Y-m-d');

                    //$data['end_date'] = $this->clean($_SESSION['EndDate']); //commented by sachin as per dhavika's request

                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'New';

                    $data['status'] = 'A';
                    $data['group_id'] = $groupId;

                    $data['survey_status'] = 'I';

                    //echo "<pre>";print_r($data);die;

                    $ret_id = $this->_dbInsert($data, 'table_retailer');

                    if (($ret_id > 0) && (empty($arrFile[0]) || $arrFile[0] == '')) {

                        $dataRetCode = [];

                        $dataRetCode['retailer_code'] = $ret_id;

                        $this->_dbUpdate($dataRetCode, 'table_retailer', " retailer_id=" . $ret_id);

                    }

                    //Todo Start : sudhanshu 20 May 2024 : shipping address inser mapping table
                    if (trim($arrFile[9]) != '') {

                        $addr['retailer_id'] = $ret_id;
                        $addr['account_id'] = $_SESSION['accountId'];
                        $addr['address'] = trim($arrFile[9]);
                        $addr['zipcode'] = mysql_escape_string(trim($arrFile[8]));
                        $addr['status'] = 'A';
                        $addr['created_at'] = date('Y-m-d H:i:s');
                        $addr['updated_at'] = date('Y-m-d H:i:s');
                        $adrId = $this->_dbInsert($addr, 'table_retailer_address');

                        $datat2['address_id'] = $adrId;
                        $this->_dbUpdate($datat2, 'table_retailer', " retailer_id=" . $ret_id);

                    }
                    //Todo End : sudhanshu 20 May 2024 : shipping address inser mapping table

                    if ($ret_id != '') {

                        if (trim($arrFile[26]) != '' && trim($arrFile[26]) != '') {

                            $data2['account_id'] = $_SESSION['accountId'];

                            $data2['retailer_id'] = $ret_id;

                            $data2['username'] = $arrFile[26];

                            $data2['password'] = md5($arrFile[27]);

                            //$data2['user_type']= '5';

                            $data2['start_date'] = $_SESSION['StartDate'];

                            //$data2['end_date'] = $_SESSION['EndDate']; //commented by sachin as per dhavika's request

                            $data2['status'] = 'A';

                            $userId = $this->_dbInsert($data2, 'table_web_users');

                            /* add for table_retailer_app_user*/

                            $data3['account_id'] = $_SESSION['accountId'];

                            $data3['retailer_id'] = $ret_id;

                            $data3['username'] = $arrFile[26];

                            $data3['password'] = $arrFile[27];

                            $data3['status'] = 'A';

                            $retId = $this->_dbInsert($data3, 'table_retailer_app_user');

                        }

                    }

                    //print_r($routeList);

                    //exit;

//                    file_put_contents("routename.log", print_r($routeList, true) . "\r\n", FILE_APPEND);

                    if ($arrFile[18] != '') {

                        $route = mysql_escape_string($arrFile[18]);

                        $routeList = explode(",", $route);
                        $sortOrder = 1;
                        for ($i = 0; $i < count($routeList); $i++) {
                            $condition = " LOWER(route_name)='" . strtolower($routeList[$i]) . "'";

                            $resultset = $this->_getSelectList('table_route', 'route_id,state_id,city_id,locations', '', $condition);

                            if (sizeof($resultset) > 0 && !empty($resultset) && $resultset[0]->route_id != "") {

                                $route_id = $resultset[0]->route_id;

                                $stateArr = array_filter(explode(',', $resultset[0]->state_id));
                                $cityArr = array_filter(explode(',', $resultset[0]->city_id));
                                $locationArr = array_filter(explode(',', $resultset[0]->locations));

                                array_push($stateArr, $state_id);
                                array_push($cityArr, $city_id);
                                array_push($locationArr, $location_id);


                                $comma_separated_state = implode(",", array_unique($stateArr));
                                $comma_separated_city = implode(",", array_unique($cityArr));
                                $comma_separated_location = implode(",", array_unique($locationArr));


                                $data3 = array();
                                $data3['state_id'] = $comma_separated_state;
                                $data3['city_id'] = $comma_separated_city;
                                $data3['locations'] = $comma_separated_location;
                                $this->_dbUpdate($data3, 'table_route', " route_id='" . $route_id . "'");

                                $data5 = array();
                                $data5['account_id'] = $_SESSION['accountId'];
                                $data5['route_id'] = $route_id;
                                $data5['retailer_id'] = $ret_id;
                                $data5['sort_order'] = $sortOrder;
                                $this->_dbInsert($data5, 'table_route_retailer');
                                $sortOrder++;
                            } else {
                                $data2 = array();
                                $data2['account_id'] = $_SESSION['accountId'];
                                $data2['state_id'] = $state_id;
                                $data2['city_id'] = $city_id;
                                $data2['locations'] = $location_id;
                                $data2['route_name'] = $routeList[$i];
                                $data2['status'] = 'A';
                                $resultRoute = $this->_dbInsert($data2, 'table_route');

                                $data4 = array();
                                $data4['account_id'] = $_SESSION['accountId'];
                                $data4['route_id'] = $resultRoute;
                                $data4['retailer_id'] = $ret_id;
                                $data4['sort_order'] = $sortOrder;
                                $this->_dbInsert($data4, 'table_route_retailer');
                                $sortOrder++;
                            }

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /************************************* End Upload Retailer ***************************************/

    /************************************* Start Upload Salesman ***************************************/

    function uploadSalesmanFile()

    {

//        $fields = array('Salesman Name*', 'State*', 'District*', 'City*', 'Address', 'Phone No*', 'Username', 'Password', 'Category Name', 'Salesman Designation', 'Reporting Person', 'Min Price Editable (Yes/No)','Salesman Code');
        $fields = array($this->AliaseUsers['salesman'] . ' Code', $this->AliaseUsers['salesman'] . ' Name*', 'Phone No*', 'Email Id'
        , 'State*', 'District*', 'City*', 'Address', $this->AliaseUsers['salesman']
            . ' Designation*', 'Reporting Person*', 'Username*', 'Password*', 'Min Price Editable (Yes/No)', 'Joining Date', 'Salary');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[4]) || empty($arrFile[5]) || empty
                    ($arrFile[6]) || empty($arrFile[8]) || empty($arrFile[10]) || empty($arrFile[11])) {

                    if (empty($arrFile[1])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[2])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[4])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[4] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[5])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[5] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[6])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[6] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[8])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[8] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[11])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[11] . " shouldn't be empty. \n";

                    }elseif (empty($arrFile[10])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[10] . " shouldn't be empty. \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    if ($this->getAccountRec() <= 0) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , You have exceeded the maximum limit of active users \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $phnNo = trim($arrFile[2]);

                    $pattern = "/^[0-9+\-]*$/";

                    if (!preg_match($pattern, $phnNo)) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Please Provide the valid Phone Number.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {
//Todo Start : Sagar: 11th May 2023 : As discussed with Dhavika, salesman code should be unique and duplicacy will be checked on the combination of salesman name & phone, same as retailer master

//                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(salesman_name)='" . mysql_escape_string(strtolower($arrFile[1])) . "' AND salesman_phome_no='" . mysql_escape_string($phnNo) . "' AND status = 'A' ";
//
//                    $aRetRec = $this->_getSelectList('table_salesman', '*', '', $condi);
//
//                    if (is_array($aRetRec)) {
//
//                        $strErr .= "Error in Row - " . $row;
//
//                        for ($i = 0; $i < count($fields); $i++) {
//
//                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
//
//                        }
//
//                        $strErr .= " , " . $this->AliaseUsers['salesman'] . " already exists in the system \n";
//
//                        $str_err_array = array($strErr);
//
//                        $flag = false;
//
//                    }


                    if (!empty($arrFile[0])) {
                        $condi = " employee_code = '" . mysql_escape_string($this->clean($arrFile[0])) . "' ";
                        $aRetRec = $this->_getSelectList('table_salesman', '*', '', $condi);
                        if (is_array($aRetRec)) {
                            $strErr .= "Error in Row - " . $row;
                            for ($i = 0; $i < count($fields); $i++) {
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                            }

                            $strErr .= " , " . $this->AliaseUsers('salesman') . " Code already exists in the system. \n";
                            $str_err_array = array($strErr);
                            $flag = false;

                        } else {

                            $condi = " LOWER(salesman_name)='" . mysql_escape_string(strtolower($this->clean
                                ($arrFile[1]))) . "' AND salesman_phome_no ='" . $phnNo . "'  ";

                            $aRetRec = $this->_getSelectList('table_salesman', '*', '', $condi);

                            if (is_array($aRetRec)) {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , " . $this->AliaseUsers('salesman') . " Name & Mobile No. already exists in the system. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        }

                    } else {

                        $condi = " LOWER(salesman_name)='" . mysql_escape_string(strtolower($this->clean($arrFile[1])
                            )) . "' AND salesman_phome_no ='" . $phnNo . "'   ";

                        $aRetRec = $this->_getSelectList('table_salesman', '*', '', $condi);

                        if (is_array($aRetRec)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('salesman') . " Name & Mobile No. already exists in the system. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    //Todo Start : Sagar: 11th May 2023 : As discussed with Dhavika, salesman code should be unique and duplicacy will be checked on the combination of salesman name & phone, same as retailer master

                }

                if ($flag) {

                    $condi = " LOWER(username)='" . mysql_escape_string(strtolower($arrFile[10])) . "'  AND status = 'A'";

                    $aRetRec = $this->_getSelectList2('table_web_users', '*', '', $condi);

                    if (is_array($aRetRec)) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Username already exists in the system \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($arrFile[10] != '') {

                    if ($flag) {

                        $count_sal = $this->_getSelectList('table_salesman', 'count(salesman_id) as total_salesman',
                            '', " ");

                        if ($count_sal[0]->total_salesman <= 0) {

                            $rpt_person_id = '';
                            $rpt_sort_order = '';
                            $rpt_hierarchy_id = '';

                        } else {

                           if (trim(strtolower($arrFile[9])) !=''){
                               $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(salesman_name)='" .
                                   mysql_escape_string(strtolower($arrFile[9])) . "' AND status = 'A'";

                               $rptPersonexist = $this->_getSelectList('table_salesman', '*', '', $condi);

                               if (empty($rptPersonexist)) {

                                   $strErr .= "Error in Row - " . $row;

                                   for ($i = 0; $i < count($fields); $i++) {

                                       $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                   }

                                   $strErr .= " , Reporting person not exists in the system \n";

                                   $str_err_array = array($strErr);

                                   $flag = false;

                               } else {

                                   $rpt_person_id = $rptPersonexist[0]->salesman_id;

                                   $condi = " account_id=" . $_SESSION['accountId'] . "  AND  salesman_id='" . $rpt_person_id . "'";

                                   $rptPersonHierarchy = $this->_getSelectList('table_salesman_hierarchy_relationship', '*', '', $condi);

                                   if (empty($rptPersonHierarchy)) {

                                       $strErr .= "Error in Row - " . $row;

                                       for ($i = 0; $i < count($fields); $i++) {

                                           $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                       }

                                       $strErr .= " , Hierarchy of reporting person does not exists in the system \n";

                                       $str_err_array = array($strErr);

                                       $flag = false;

                                   } else {

                                       $rpt_hierarchy_id = $rptPersonHierarchy[0]->hierarchy_id;

                                       $condi = " account_id=" . $_SESSION['accountId'] . "  AND  hierarchy_id='" . $rpt_hierarchy_id . "' AND status = 'A'";

                                       $rptPersonHierarchy = $this->_getSelectList('table_salesman_hierarchy', '*', '', $condi);

                                       $rpt_sort_order = $rptPersonHierarchy[0]->sort_order;

                                   }

                               }
                           }else{
                               $strErr .= "Error in Row - " . $row;

                               for ($i = 0; $i < count($fields); $i++) {

                                   $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                               }

                               $strErr .= " , Reporting Person can't be blank. \n";

                               $str_err_array = array($strErr);

                               $flag = false;
                           }
                        }

                    }

                }

                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(description)='" .
                        mysql_escape_string(strtolower($arrFile[8])) . "' AND status = 'A'";

                    $hierarchyExist = $this->_getSelectList('table_salesman_hierarchy', '*', '', $condi);

                    if (empty($hierarchyExist)) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , ". $this->AliaseUsers('salesman'). "  Designation does not exists in the system \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $sal_sort_order = $hierarchyExist[0]->sort_order;

                        $sal_hierarchy_id = $hierarchyExist[0]->hierarchy_id;

                    }

                }

                if ($flag) {

                    if ($arrFile[9] != '' && $rpt_person_id != '' && $rpt_sort_order != '' && $rpt_hierarchy_id != '') {

                        if ($sal_sort_order < $rpt_sort_order) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Reporting person hierarchy is lower than " . $this->AliaseUsers['salesman'] . " hierarchy. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                if ($flag) {

                    // Get State ID with the help of State Name

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower(trim($arrFile[4]))) . "' AND status = 'A' ";

                    $StateRec = $this->_getSelectList2('state', "state_id,country_id", '', $condi);

                    // print_r($StateRec);
                    // die;

                    if (is_array($StateRec) && (count($StateRec) > 0)) {

                        $state_id = $StateRec[0]->state_id;

                        $country_id = $StateRec[0]->country_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , State does not exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {
                    $condi = " LOWER(country_id)='" . mysql_escape_string(trim($country_id)) . "' AND status = 'A' ";

                    $StRec = $this->_getSelectList2('country', "contact_max_length,contact_min_length", '', $condi);

                    if (is_array($StRec) && (count($StRec) > 0)) {

                        $cnt_no = strlen($arrFile[2]);

                        if ($cnt_no >= $StRec[0]->contact_min_length && $cnt_no <=
                            $StRec[0]->contact_max_length) {

                            $phone_no = $arrFile[2];
                            //echo  "<pre>";print_r($phone_no);die;

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Phone number " . $arrFile[2] . " \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                    }
                }

                if ($flag) {

                    // District

                    $condi = " LOWER(city_name)='" . mysql_escape_string(strtolower(trim($arrFile[5]))) . "' and state_id='" . $state_id . "' AND status = 'A'";

                    $CityRec = $this->_getSelectList2('city', "city_id", '', $condi);

                    if (is_array($CityRec) && (count($CityRec) > 0)) {

                        $city_id = $CityRec[0]->city_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , District does not exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    // CITY

                    $condi = " LOWER(location_name)='" . mysql_escape_string(strtolower(trim($arrFile[6]))) . "' AND state_id='" . $state_id . "' AND city_id='" . $city_id . "'  AND status = 'A'";

                    $locRec = $this->_getSelectList2('table_location', "location_id", '', $condi);

                    if (is_array($locRec) && (count($locRec) > 0)) {

                        $location_id = $locRec[0]->location_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , City does not exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // Username Checked
                if ($flag) {


                    $condi = " LOWER(username)='" . mysql_escape_string(strtolower($arrFile[10])) . "' ";

                    $webRec = $this->_getSelectList2('table_web_users', "web_user_id", '', $condi);

                    if (is_array($webRec) && (count($webRec) > 0)) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , User name already exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;


                    }

                }

                //Todo Start sudhanshu 28 august 2024 : check password degit
                if ($flag) {


                    $password = trim($arrFile[11]);



                    if (strlen($password) < 8) {
                        //echo strlen($password);die;
                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Password should be 8 characters. \n";

                        $str_err_array = array($strErr);

                        $flag = false;


                    }

                }

                //Todo End sudhanshu 28 august 2024 : check password degit

                // Joining Date 29 sep 2023 : sudhanshu

                if ($flag) {


                    if (!empty(trim($arrFile[13])) && trim($arrFile[13]) != '') {

                        $joiningDate = trim($arrFile[13]);

                        if (strtotime($joiningDate) !== false) {

                            $joining_date = date('Y-m-d', strtotime($joiningDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Joining date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } else {

                        $joining_date = '0000-00-00';


                    }

                }
                // End Todo : Joining Date 29 sep 2023 : sudhanshu

                // Salary Validate 29 sep 2023 : sudhanshu

                if ($flag) {


                    if (!empty(trim($arrFile[14])) && trim($arrFile[14]) != '') {

                        $SalSalary = trim($arrFile[14]);

                        if (preg_match("/^[1-9][0-9.]{0,15}$/", $SalSalary)) {

                            $salary = $SalSalary;

                        } else {
                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , please fill correct salary amount. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } else {

                        $salary = '';


                    }

                }
                // End Todo : Joining Date 29 sep 2023 : sudhanshu

                if ($flag) {

                    $data = array();

                    $data2 = array();

                    $data3 = array();

                    $data4 = array();

                    $data['account_id'] = $_SESSION['accountId'];

                    $data['salesman_name'] = mysql_escape_string(trim($arrFile[1]));

                    $data['employee_code'] = mysql_escape_string(trim($arrFile[0]));

                    $data['salesman_address'] = mysql_escape_string(trim($arrFile[7]));

                    $data['salesman_email'] = mysql_escape_string(trim($arrFile[3]));

                    $data['country'] = $country_id;

                    $data['state'] = $state_id;

                    $data['city'] = $city_id;

                    $data['location'] = trim($location_id);

                    $data['salesman_phome_no'] = mysql_escape_string(trim($phone_no));

                    $data['start_date'] = date('Y-m-d');

                    //$data['end_date'] = $_SESSION['EndDate'];  //commented by sachin as per dhavika's request

                    $data['is_editable'] = (isset($arrFile[12]) && !empty($arrFile[12])) ? strtolower($arrFile[12]) :
                        'no';

                    $data['joining_date'] = $joining_date;

                    $data['sal_salary'] = $salary;

                    $data['status'] = 'A';

                    $item_id = $this->_dbInsert($data, 'table_salesman');

                    if (($item_id > 0) && (empty(trim($arrFile[0])) || trim($arrFile[0]) == '')) {

                        $dataSalCode = [];

                        $dataSalCode['employee_code'] = $item_id;

                        $this->_dbUpdate($dataSalCode, 'table_salesman', " salesman_id=" . $item_id);

                    }

//                    $category = mysql_escape_string(trim($arrFile[8]));
//
//                    if (isset($category) && !empty($category)) {
//
//                        $categoryList = explode(",", $category);
//
//                        for ($i = 0; $i < count($categoryList); $i++) {
//
//                            $condition = " LOWER(category_name)='" . strtolower($categoryList[$i]) . "'";
//
//                            $col = $this->_getSelectList('table_category', 'category_id', '', $condition);
//
//                            $data1['salesman_id'] = $item_id;
//
//                            $data1['category_id'] = $col[0]->category_id;
//
//                            $col_id = $this->_dbInsert($data1, 'table_salesman_category');
//
//                        }
//
//                    }

                    if ($arrFile[10] != '' && $arrFile[11] != '') {

                        $data2['account_id'] = $_SESSION['accountId'];

                        $data2['salesman_id'] = $item_id;

                        $data2['username'] = trim($arrFile[10]);

                        $data2['password'] = md5($arrFile[11]);

                        $data2['user_type'] = '5';

                        $data2['start_date'] = $_SESSION['StartDate'];

                        //$data2['end_date'] = $_SESSION['EndDate']; //commented by sachin as per dhavika's request

                        $data2['status'] = 'A';

                        $userId = $this->_dbInsert($data2, 'table_web_users');

                    }

                    if ($arrFile[8] != '' && $arrFile[9] == '') {

                        $data3['account_id'] = $_SESSION['accountId'];

                        $data3['salesman_id'] = $item_id;

                        $data3['hierarchy_id'] = $sal_hierarchy_id;

                        $data3['user_type'] = $_SESSION['userLoginType'];

                        $data3['status'] = '1';

                        $relId = $this->_dbInsert($data3, 'table_salesman_hierarchy_relationship');

                    }

                    if ($arrFile[9] != '' && $rpt_person_id != '' && $rpt_sort_order != '' && $rpt_hierarchy_id != '') {

                        if ($sal_sort_order > $rpt_sort_order) {

                            $data4['account_id'] = $_SESSION['accountId'];

                            $data4['salesman_id'] = $item_id;

                            $data4['hierarchy_id'] = $sal_hierarchy_id;

                            $data4['rpt_user_id'] = $rpt_person_id;

                            $data4['rpt_hierarchy_id'] = $rpt_hierarchy_id;

                            $data4['user_type'] = $_SESSION['userLoginType'];

                            $data4['status'] = '1';

                            $relId = $this->_dbInsert($data4, 'table_salesman_hierarchy_relationship');

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Reporting person hierarchy is lower than " . $this->AliaseUsers['salesman'] . " hierarchy. \n";

                            $str_err_array = array($strErr);

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /************************************* End Upload Salesman ***************************************/

    /************************************* Start Upload City ***************************************/

    function uploadDistrict()

    {

        $fields = array('State Name*', 'District Name*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "State Name*" || empty($arrFile[1]) || $arrFile[1] == "District Name*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "State Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " , " . $fields[0] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[1]) || $arrFile[1] == "District Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " , " . $fields[1] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND status = 'A' ";

                    $StateRec = $this->_getSelectList2('state', "state_id", '', $condi);

                    if (is_array($StateRec) && (count($StateRec) > 0)) {

                        $state_id = $StateRec[0]->state_id;

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " , State does not exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $condi = " LOWER(city_name)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' AND state_id = " . $state_id . " AND status = 'A' ";

                    $CityRec = $this->_getSelectList2('city', "city_id", '', $condi);

//                    $city_id = $CityRec[0]->city_id;

                    if (is_array($CityRec) && (count($CityRec) > 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " , District already exists in the system \n";

                        $str_err_array = array($strErr);

//                        $flag = false;

                    } else {

                        $city = array();

                        $city['state_id'] = $this->clean($state_id);

                        $city['city_name'] = mysql_escape_string($this->clean(trim($arrFile[1])));

                        $city['last_update_date'] = date('Y-m-d');

                        $city['last_update_status'] = 'New';

                        $city['status'] = 'A';

                        $this->_dbInsert($city, 'city');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    function uploadstatecity()

    {

        $fields = array('State Name*', 'District Name*', 'City Name*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "State Name*" || empty($arrFile[1]) || $arrFile[1] == "District Name*" || empty($arrFile[2]) || $arrFile[2] == "City Name*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "State Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . " , " . $fields[0] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[1]) || $arrFile[1] == "District Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . " , " . $fields[1] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[2]) || $arrFile[2] == "City Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . " , " . $fields[2] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                //state

                if ($flag) {

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND status = 'A'";

                    $StateRec = $this->_getSelectList2('state', "state_id", '', $condi);

                    if (is_array($StateRec) && (count($StateRec) > 0)) {

                        $state_id = $StateRec[0]->state_id;

                    } else {

//                        $state = array();

//                        $state['state_name'] = mysql_escape_string($this->clean($arrFile[0]));

//                        $state['last_update_date'] = date('Y-m-d');

//                        $state['last_update_status'] = 'New';

//                        $state_id = $this->_dbInsert($state, 'state');

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . " , State does not exists.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //district

                if ($flag) {

                    $condi = " LOWER(city_name)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' AND state_id = " . $state_id . " AND status = 'A' ";

                    $districtRec = $this->_getSelectList2('city', "city_id", '', $condi);

                    if (is_array($districtRec) && (count($districtRec) > 0)) {

                        $city_id = $districtRec[0]->city_id;

                    } else {

//                        $district = array();

//                        $district['state_id'] = $this->clean($state_id);

//                        $district['city_name'] = mysql_escape_string($this->clean($arrFile[1]));

//                        $district['last_update_date'] = date('Y-m-d');

//                        $district['last_update_status'] = 'New';

//                        $district['status'] = 'A';

//                        $city_id = $this->_dbInsert($district, 'city');

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . " , District does not exists.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //city

                if ($flag) {

                    $condi = " LOWER(location_name)='" . mysql_escape_string(strtolower(trim($arrFile[2]))) . "' AND state_id = " . $state_id . " AND city_id = " . $city_id . " AND status = 'A' ";

                    $CityRec = $this->_getSelectList2('table_location', "location_id", '', $condi);

                    if (is_array($CityRec) && (count($CityRec) > 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . " , City already exists in the system \n";

                        $str_err_array = array($strErr);

                    } else {

                        $data['location_name'] = mysql_escape_string($this->clean(trim($arrFile[2])));

                        $data['state_id'] = mysql_escape_string($state_id);

                        $data['city_id'] = mysql_escape_string($city_id);

                        $data['created_date'] = date('Y-m-d H:i:s');

                        $data['last_updated_date'] = date('Y-m-d H:i:s');

                        $data['last_updated_status'] = 'New';

                        $data['status'] = 'A';

                        $this->_dbInsert($data, 'table_location');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /************************************* End Upload City ***************************************/

    /************************************* Start Upload Stock ***************************************/

    function uploadstockDetails()
    {
        // $fields = array('Category Name*','Item Code*','Cases Size*','Number Of Cases*', 'Batch No');
        $fields = array('Item Code*', 'Quantity*');
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $resultset = "";
        $row = 0;
        $data = array();
        $data2 = array();
        $finalDataArr = array();
        $finalActivityArr = array();
        $checkFlag = true;
        while (!feof($file)) {
            $arrFile = fgetcsv($file);
            $flag = true;
            // $color_code = trim($arrFile[2]);


            // echo "<pre>"; print_r($arrFile); echo $arrFile[7];
            if ($row > 0 && is_array($arrFile)) {
                if (empty($arrFile[0]) || $arrFile[0] == "Item Code*" || empty($arrFile[1]) || $arrFile[1] == "Quantity*") {
                    if (empty($arrFile[0])) {
                        // $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . " ," . $fields[0] . " shouldn't be empty  \n";

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $fields[0] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[1])) {
                        // $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . " ," . $fields[1] . " shouldn't be empty  \n";

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $fields[1] . " shouldn't be empty  \n";

                    }

                    /* elseif(empty($arrFile[2]))
				{
					$strErr .= "Error in Row".$row." ,".$arrFile[0]." ,".$arrFile[1]." ,".$arrFile[2]." ,".$arrFile[3]." ,".$arrFile[4]." ,".$fields[2]." shouldn't be empty  \n";
				} elseif(empty($arrFile[3]))
				{
					$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2]." ,".$arrFile[3]." ,".$arrFile[4]." ,".$fields[3]." shouldn't be empty  \n";
				} */
                    $str_err_array = array($strErr);
                    $flag = false;
                    $checkFlag = false;
                }
                // Check category exists in the system.
                /*if($flag)
			{
				$condi =" LOWER(category_name)='".mysql_escape_string(strtolower(trim($arrFile[0])))."'";
				$resultset = $this->_getSelectList('table_category','category_id','',$condi);
				if(!is_array($resultset) && empty($resultset) && $resultset[0]->category_id == "")
				{
					$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2]." ,".$arrFile[3]." ,".$arrFile[4]." ,Category doesn't exists in the system  \n";
					$str_err_array=array($strErr);
					$flag=false;
					$checkFlag = false;
				} else {
					$category_id = $resultset[0]->category_id;
				}
			}*/
                // Check item exists in the system.
                if ($flag) {
                    $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND status = 'A' ";
                    $resultset = $this->_getSelectList('table_item', 'item_id,category_id', '', $condi);
                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->item_id == "") {
                        // $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ,Item doesn't exists in the system \n";

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ,Item doesn't exists in the system \n";

                        $str_err_array = array($strErr);
                        $flag = false;
                        $checkFlag = false;
                    } else {
                        $item_id = $resultset[0]->item_id;
                        $category_id = $resultset[0]->category_id;
                    }
                }
                // Check attribute(size) exists in the system.
                if ($flag) {
                    // $condi =" LOWER(case_size)='".mysql_escape_string(strtolower(trim($arrFile[2])))."'";
                    $condi = "cr.item_id = '" . $item_id . "'";
                    $resultset = $this->_getSelectList2('table_item_case_relationship as cr left join table_cases as c on c.case_id = cr.case_id', 'c.case_id', '', $condi);
                    if (is_array($resultset) && sizeof($resultset) > 0) {
                        $case_id = $resultset[0]->case_id;
                    } else {
                        $case_id = 0;
                    }
                    // if(!is_array($resultset) && empty($resultset) && $resultset[0]->case_id == "")
                    // {
                    // 	$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2]." ,Item Case Size doesn't exists in the system \n";
                    // 	$str_err_array=array($strErr);
                    // 	$flag=false;
                    // 	$checkFlag = false;
                    // } else {
                    // 	$case_id = $resultset[0]->case_id;
                    // }
                }
                if ($flag) {
                    // if (empty($color_code)) {
                        $color_code = 'NA';
                    // }
                    $condi = " color_code='" . mysql_escape_string($color_code) . "' ";
                    $resultset = $this->_getSelectList('table_color', 'color_id', '', $condi);
                    if (!is_array($resultset) && empty($resultset)) {
                        $dataclr['account_id'] = $this->clean($_SESSION['accountId']);
                        $dataclr['color_code'] = trim($color_code);
                        $dataclr['color_desc'] = trim($color_code);
                        $dataclr['last_update_date'] = date('Y-m-d');
                        $dataclr['last_update_status'] = 'New';
                        $dataclr['status'] = 'A';
                        $color_id = $this->_dbInsert($dataclr, 'table_color');
                    } else {
                        $color_id = $resultset[0]->color_id;
                    }
                    $Cond = " color_id= '" . $color_id . "' AND item_id='" . $item_id . "' ";
                    $resCol = $this->_getSelectList2('table_item_color', 'item_color_id', '', $Cond);
                    if (!is_array($resCol) && empty($resCol) && $color_id > 0) {
                        $dataMap['color_id'] = $color_id;
                        $dataMap['item_id'] = $item_id;
                        $result = $this->_dbInsert($dataMap, 'table_item_color');
                    }
                }
                // Insert/Update data in the system
                if ($flag) {
                    $data['account_id'] = $this->clean($_SESSION['accountId']);
                    $data['item_id'] = $this->clean($item_id);
                    $data['category_id'] = $this->clean($category_id);
                    //$data['attribute_value_id']= $this->clean($case_id);
                    $data['color_id'] = $this->clean($color_id);
                    //$data['stock_value']= $arrFile[3]+$resultset[0]->stock_value;
                    $data['stock_value'] = $this->clean(trim($arrFile[1]));
                    $data['last_updated_date'] = date('Y-m-d');
                    $data['last_update_datetime'] = date('Y-m-d H:i:s');
                    $data['status'] = 'A';
                    $finalDataArr[] = $data;
                    // $data2['account_id']= $this->clean($_SESSION['accountId']);
                    // $data2['item_id']= $this->clean($item_id);
                    // $data2['category_id']= $this->clean($category_id);
                    // $data2['attribute_value_id']= $this->clean($case_id);
                    // $data2['color_id']= $this->clean($color_id);
                    // $data2['stock_value']= $this->clean($arrFile[3]);
                    // $data2['created_datetime']= date('Y-m-d H:i:s');
                    //$finalDataArr[] = $data;
                    // $finalActivityArr[] = $data2;
                    // $condi =" attribute_value_id ='".$case_id."' AND item_id ='".$item_id."' AND category_id ='".$category_id."' AND color_id = '".$color_id."'";
                    // 	$resultset = $this->_getSelectList('table_item_ndc_stock','stock_id, stock_value','',$condi);
                    // if(is_array($resultset) && sizeof($resultset)>0)
                    // {
                    // 	$result = $this->_dbUpdate($data,'table_item_ndc_stock',$condi);
                    // 	$data2['stock_id']= $resultset[0]->stock_id;
                    // 	$result = $this->_dbInsert($data2,'table_item_ndc_stock_activity');
                    // } else {
                    // 	$result = $this->_dbInsert($data,'table_item_ndc_stock');
                    // 	$data2['stock_id']= $result;
                    // 	$result = $this->_dbInsert($data2,'table_item_ndc_stock_activity');
                    // }
                }
            }
            $row++;
        }
        if ($checkFlag) {
            if (count($finalDataArr) > 0) {
                foreach ($finalDataArr as $key => $value) {
                    // $condi =" attribute_value_id ='".$value['attribute_value_id']."' AND item_id ='".$value['item_id']."' AND category_id ='".$value['category_id']."' AND color_id = '".$value['color_id']."'";
                    $condi = " item_id ='" . $value['item_id'] . "' AND category_id ='" . $value['category_id'] . "' AND color_id = '" . $value['color_id'] . "'";
                    $resultset = $this->_getSelectList('table_item_ndc_stock', 'stock_id, stock_value', '', $condi);
                    if (is_array($resultset) && sizeof($resultset) > 0) {
                        $stockQty = ($resultset[0]->stock_value + $value['stock_value']);

                        $data2['stock_value'] = $this->clean(trim($value['stock_value']));

                        $value['stock_value'] = $stockQty;
                        $result = $this->_dbUpdate($value, 'table_item_ndc_stock', $condi);
                        $data2['account_id'] = $this->clean($_SESSION['accountId']);
                        $data2['item_id'] = $this->clean($value['item_id']);
                        $data2['category_id'] = $this->clean($value['category_id']);
                        //$data2['attribute_value_id']= $this->clean($value['attribute_value_id']);
                        $data2['color_id'] = $this->clean($value['color_id']);
                        // $data2['stock_value']= $this->clean($value['stock_value']);
                        $data2['created_datetime'] = date('Y-m-d H:i:s');
                        $data2['stock_id'] = $resultset[0]->stock_id;
                        $this->_dbInsert($data2, 'table_item_ndc_stock_activity');
                    } else {
                        $result = $this->_dbInsert($value, 'table_item_ndc_stock');
                        $data2['account_id'] = $this->clean($_SESSION['accountId']);
                        $data2['item_id'] = $this->clean($value['item_id']);
                        $data2['category_id'] = $this->clean($value['category_id']);
                        //$data2['attribute_value_id']= $this->clean($value['attribute_value_id']);
                        $data2['color_id'] = $this->clean($value['color_id']);
                        $data2['stock_value'] = $this->clean($value['stock_value']);
                        $data2['created_datetime'] = date('Y-m-d H:i:s');
                        $data2['stock_id'] = $result;
                        $this->_dbInsert($data2, 'table_item_ndc_stock_activity');
                    }
                }
            }
        }
        fclose($file);
        if ($row <= 2)
            return "no";
        else
            return $str_err_array;
    }

    /************************************* Start Upload Stock ***************************************/

    /*********************************** DISTRIBUTOR DISPATCHED STOCK *************************************************/

    function uploadDistributorDispatchstock()
    {

        // $fields = array($this->AliaseUsers['stockist'] . ' Code*', $this->AliaseUsers['distributor'] . ' Code*', 'Item Code*', 'Bill No*', 'Bill Date*', 'Quantity*', 'Batch No', 'Rate', 'Invoice Value', 'Taxable Value', 'IGST Amount', 'CGST Amount', 'SGST Amount', 'Cess Amount', 'Bill Type(Invoice/Return)*');

        
        $fields = array($this->AliaseUsers['stockist'] . ' Code*', $this->AliaseUsers['distributor'] . ' Code*', 'Item Code*', 'Bill No*', 'Bill Date*', 'Quantity*', 'Rate', 'Invoice Value', 'Taxable Value', 'IGST Amount', 'CGST Amount', 'SGST Amount', 'Cess Amount', 'Bill Type(Invoice/Return)*');


        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $resultset = "";
        $row = 0;
        $data = array();
        $data2 = array();
        $check = true;
        $checkStockistFeature = $this->getAccountFeaturesList();
        $_objAdmin = new Admin();
        while (!feof($file)) {
            $arrFile = fgetcsv($file);
            $flag = true;
            if ($row > 0 && is_array($arrFile) && strtolower(trim($arrFile[0])) != '') {
                $stockist_code = mysql_escape_string(strtolower(trim($arrFile[0])));
                $distributor_code = mysql_escape_string(strtolower(trim($arrFile[1])));
                $item_code = mysql_escape_string(strtolower(trim($arrFile[2])));
                $bill_no_requested = trim($arrFile[3]);
                $bill_no = mysql_escape_string($bill_no_requested);
                $bill_date_requested = trim($arrFile[4]);
                //$bill_date_requested = true;
                $stock_value = trim($arrFile[5]);

                // $batch_no = mysql_escape_string(strtolower(trim($arrFile[6])));


                $price = trim($arrFile[6]);
                $invoice_value = trim($arrFile[7]);
                $taxable_value = trim($arrFile[8]);
                $igst_amount = trim($arrFile[9]);
                $cgst_amount = trim($arrFile[10]);
                $sgst_amount = trim($arrFile[11]);
                $cess_amount = trim($arrFile[12]);
                $bill_type = trim($arrFile[13]);
                $billdatecondi = "";
                if (empty($arrFile[0]) || $arrFile[0] == $this->AliaseUsers['stockist'] . " Code*" || empty($arrFile[1]) || $arrFile[1] == $this->AliaseUsers['distributor'] . " Code*" || empty
                    ($arrFile[2]) || $arrFile[3] == "Item Code*" || empty($arrFile[3]) || $arrFile[3] == "Bill No*" || empty($arrFile[4]) || $arrFile[4] == "Bill Date*" || empty($arrFile[5]) || $arrFile[5] == "Quantity*" || $arrFile[13] == "Bill Type(Invoice/Return)*" || empty($arrFile[13])) {
                    if (empty($arrFile[0]) || $arrFile[0] == "Stockist Code*") {


                        /// Remove only  ", " . $arrFile[14] .


                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . " ," . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == $this->AliaseUsers['distributor'] . " Code*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                            $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . ", " . $fields[1] . " shouldn't be empty. \n";
                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Item Code*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                            $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . "," . $fields[2] . " shouldn't be empty. \n";
                    } elseif (empty($arrFile[3]) || $arrFile[3] == "Bill No*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                            $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . ", " . $fields[3] . " shouldn't be empty. \n";
                    } elseif (empty($arrFile[4]) || $arrFile[4] == "Bill Date*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                            $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . "," . $fields[4] . " shouldn't be empty. \n";
                    } elseif (empty($arrFile[5]) || $arrFile[5] == "Quantity*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                            $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . ", " . $fields[5] . " shouldn't be empty. \n";
                    } elseif (empty($arrFile[13]) || $arrFile[13] == "Bill Type(Invoice/Return)*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                            $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . ", " . $fields[13] . " shouldn't be empty. \n";
                    } elseif (empty($arrFile[13]) || (strtolower($arrFile[13]) != "invoice" && strtolower($arrFile[13]) != "return")) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . " ," . $fields[13] . " Invalid Invoice Type. \n";
                    }
                    $str_err_array = array($strErr);
                    $flag = false;
                    $check = false;
                }
                if ($flag) {
                    if (!empty($bill_no_requested)) {
                        $bill_no = mysql_escape_string($bill_no_requested);
                        $billdatecondi .= "AND bill_no = '" . $bill_no . "'";
                    }
                    if (!empty($bill_date_requested)) {
                        $bill_date = date('Y-m-d', strtotime($bill_date_requested));
                        $billdatecondi .= "AND bill_date = '" . $bill_date . "'";

                        //Tood Start : Sudhanshu 05 April 2024 : add validation for Import Distributor Stock  user can upload last month to current date
                        $lastMonth = date('Y-m', strtotime('last month'));
                        $curretDate = date('Y-m-d');
                        $billMonth = date('Y-m', strtotime($bill_date));

                        if (($billMonth >= $lastMonth) && ($bill_date <= $curretDate)) {

                            $billDateValidate = true;

                        }

                        if (!$billDateValidate) {

                            // Remove only ", " . $arrFile[14] .

                            $strErr .= "Error in Row" . $row . ", " . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . ", " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . ", bill date should be last moth to current date.\n";
                            $str_err_array = array($strErr);
                            $flag = false;

                        }

                        //Tood End : Sudhanshu 05 April 2024 : add validation for Import Distributor Stock  user can upload last month to current date

                    }
                }

                //Todo Start : sudhanshu 09 May 2024 :  multi stokist
                if ($flag) {
                    $stockistCond = '';
                    if ($_SESSION['userLoginType'] == 7 && $_SESSION['stockistId'] > 0) {
                        $stockistCond = " AND stockist_id  = '" . $_SESSION['stockistId'] . "' ";
                    }
                    $condi = " LOWER(stockist_code)='" . $stockist_code . "' $stockistCond AND status = 'A'";
                    $resultset = $this->_getSelectList('table_stockist', 'stockist_id', '', $condi);

                    // remove only ", " . $arrFile[14] . 

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->distributor_id == "") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                            $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " .
                            $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " .
                            $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . " , " . $this->AliaseUsers('stockist') . " code doesn't exists in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        $check = false;
                    } else {

                        $stockist_id = $resultset[0]->stockist_id;
                    }
                }
                //Todo End : sudhanshu 09 May 2024 :  multi stokist
                // Check Distributor Code exists in the system.
                if ($flag) {
                    $condi = " LOWER(distributor_code)='" . $distributor_code . "' AND status = 'A'";
                    $resultset = $this->_getSelectList('table_distributors', 'stockist_id,distributor_id', '', $condi);

                    // remove only ", " . $arrFile[14] . 

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->distributor_id == "") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                            $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " .
                            $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " .
                            $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] .  " , " . $this->AliaseUsers('distributor') . " code doesn't exists in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        $check = false;
                    } else {
                        $distributor_id = $resultset[0]->distributor_id;
                        //$stockist_id = $resultset[0]->stockist_id;
                    }
                }

                //Todo Start : sudhanshu 09 May 2024 :  check stockist distrbutor mapping
                if ($flag) {
                    $Mapcondi = " distributor_id ='" . $distributor_id . "' AND stockist_id = '" . $stockist_id . "' AND status = 'A'";
                    $resultset = $this->_getSelectList('table_stockist_distributor_mapping', 'stockist_id,distributor_id', '', $Mapcondi);

                    // remove only ", " . $arrFile[14] . 


                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->distributor_id == "") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                            $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " .
                            $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " .
                            $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . " , " . $this->AliaseUsers('distributor') . " mapping doesn't exists in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        $check = false;
                    }
                }
                //Todo End : sudhanshu 09 May 2024 :  check stockist distrbutor mapping
                // Check item exists in the system.
                if ($flag) {
                    $item_id = $category_id = '';
                    $condi = " LOWER(item_code)='" . $item_code . "' AND status = 'A'";
                    $resultset = $this->_getSelectList('table_item', 'item_id,category_id', '', $condi);

                    // remove only ", " . $arrFile[14] . 

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->item_id == "") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . ", Item doesn't exists in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        $check = false;
                    } else {
                        $item_id = $resultset[0]->item_id;
                        $category_id = $resultset[0]->category_id;
                    }
                }
                // Check attribute( cases size) exists in the system.
                if ($flag) {
                    $condi = "ic.item_id=" . $item_id;
                    $resultset = $this->_getSelectList('table_cases as c left join table_item_case_relationship as ic on ic.case_id=c.case_id', 'c.case_id,case_size', '', $condi);
                    $case_size = $resultset[0]->case_size;
                    $case_id = $resultset[0]->case_id;
                }
                //Check for batch No.(color_id) exists in the system.
                if ($flag) {
                    // batch no hide 
                    // if (empty($batch_no)) {
                        $batch_no = 'NA';
                    // }
                    $condi = " LOWER(color_code)='" . strtolower($batch_no) . "' AND account_id=" . $this->clean($_SESSION['accountId']);
                    $resultset = $this->_getSelectList('table_color', 'color_id', '', $condi);
                    if (is_array($resultset) && (count($resultset) > 0)) {
                        $color_id = $resultset[0]->color_id;
                    } else {
                        $dataCol = array();
                        $dataCol['account_id'] = $this->clean($_SESSION['accountId']);
                        $dataCol['color_desc'] = mysql_escape_string($this->clean($batch_no));
                        $dataCol['color_code'] = mysql_escape_string($this->clean($batch_no));
                        $dataCol['last_update_date'] = date('Y-m-d');
                        $dataCol['last_update_status'] = 'New';
                        $dataCol['status'] = 'A';
                        $color_id = $this->_dbInsert($dataCol, 'table_color');
                    }
                }

                // Check existing invoice no.
                if ($flag) {
                    $condi = " bill_no = '" . $bill_no . "' AND bill_date != '" . $bill_date . "' AND YEAR(bill_date)= '" . date('Y', strtotime($bill_date)) . "'";
                    $resultset = $this->_getSelectList('table_item_dis_stk_inprocess', 'dis_stk_inpro_id', '', $condi);

                    // remove only ", " . $arrFile[14] . 

                    if (is_array($resultset) && !empty($resultset) && $resultset[0]->dis_stk_inpro_id != "") {
                        $strErr .= "Error in Row" . $row . ", " . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . ", Duplicate Bill Number.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        $check = false;
                    }
                }

                if ($flag) {
                    if (strtolower($bill_type) == 'return') {
                        $stockCheck = " distributor_id= '" . $distributor_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                        $DistStk = $this->_getSelectList2('table_item_distributor_stock', 'dis_stk_id, dis_stock_value', '', $stockCheck);

                        // remove only ", " . $arrFile[14] . 

                        if ((!is_array($DistStk) || count($DistStk) == 0 || $DistStk[0]->dis_stock_value < $stock_value)) {
                            $strErr .= "Error in Row" . $row . ", " . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . ", " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] .  ", Distributor doesn't have enough stock to adjust.\n";
                            $str_err_array = array($strErr);
                            $flag = false;
                            $check = false;
                        }
                    } else {

                        $stockCheck = " stockist_id= '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                        $StockistStk = $this->_getSelectList2('table_item_stockist_stock', 'stockist_stk_id, stockist_stock_value', '', $stockCheck);

                        // remove only ", " . $arrFile[14] . 

                        if (in_array(85, $checkStockistFeature) && (!is_array($StockistStk) || count($StockistStk) == 0 || $StockistStk[0]->stockist_stock_value < $stock_value)) {
                            $strErr .= "Error in Row" . $row . ", " . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . ", " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] .  ", Stockist doesn't have enough stock to transfer.\n";
                            $str_err_array = array($strErr);
                            $flag = false;
                            $check = false;
                        }
                    }
                }


                //Insert/Update data in the table_item_dis_stk_inprocess table
                if ($flag) {
                    $condi = "stockist_id= '" . $stockist_id . "' AND distributor_id = '" . $distributor_id . "' AND item_id ='" . $item_id . "' AND category_id ='" . $category_id . "' AND color_id = '" . $color_id . "' " . $billdatecondi;
                    $resultset = $this->_getSelectList('table_item_dis_stk_inprocess', 'dis_stk_inpro_id, rec_stock_value', '', $condi . " AND status = 'I' ");
                    if (is_array($resultset) && sizeof($resultset) > 0) {
                        $dis_stk_inpro_id = $resultset[0]->dis_stk_inpro_id;
                        $Cond = "dis_stk_inpro_id 	= '" . $dis_stk_inpro_id . "' ";
                        $data2['rec_stock_value'] = $stock_value;
                        $data2['price'] = $price;
                        $data2['before_tax_amount'] = $taxable_value;
                        $data2['total_tax_amount'] = ($igst_amount + $cgst_amount + $sgst_amount + $cess_amount);
                        $data2['igst_amount'] = $igst_amount;
                        $data2['cgst_amount'] = $cgst_amount;
                        $data2['sgst_amount'] = $sgst_amount;
                        $data2['cess_amount'] = $cess_amount;
                        $data2['last_update_datetime'] = date('Y-m-d H:i:s');
                        $result = $this->_dbUpdate($data2, 'table_item_dis_stk_inprocess', $Cond);

                        /***********Manage stockist stock******************/
                        $newStock = 0;
                        /**Find margin of the stock to manage from stockist stock**/
                        $remainStock = ($stock_value - $resultset[0]->rec_stock_value);

                        $stockistCondi = " stockist_id = '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                        $stockistResult = $this->_getSelectList2('table_item_stockist_stock', '*', '', $stockistCondi);
                        $stockistData = array();
                        $stockistActivity = array();
                        if (is_array($stockistResult) && !empty($stockistResult) && count($stockistResult) > 0) {
                            $stockist_stk_id = $stockistResult[0]->stockist_stk_id;
                            $stockist_stock_value = $stockistResult[0]->stockist_stock_value;
                            if (strtolower($bill_type) == 'return') {
                                $newStock = $stockist_stock_value + ($remainStock);

                            } else {
                                $newStock = $stockist_stock_value - ($remainStock);
                            }

                            //*************************** Manage stockist stock summary table*********************//
                            $stockistData['stockist_stock_value'] = $newStock;
                            $stockistData['last_updated_date'] = date('Y-m-d');
                            $stockistData['last_update_datetime'] = date('Y-m-d H:i:s');
                            $ndcWhereCond1 = "stockist_stk_id = '" . $stockist_stk_id . "' ";
                            if (in_array(85, $checkStockistFeature)) {
                                //*************************** Manage stockist stock summary table*********************//
                                if (strtolower($bill_type) == 'return') {
                                    $_objAdmin->updateStockistQtySummary('dis_ret_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $remainStock);
                                } else {
                                    $_objAdmin->updateStockistQtySummary('dis_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $remainStock);
                                }

                                $this->_dbUpdate($stockistData, 'table_item_stockist_stock', $ndcWhereCond1);
                            }
                            //  insert NDC stock activity
                            $stockistActivity['account_id'] = $this->clean($_SESSION['accountId']);
                            $stockistActivity['stockist_id'] = $stockist_id;
                            $stockistActivity['distributor_id'] = $distributor_id;
                            $stockistActivity['item_id'] = $item_id;
                            $stockistActivity['category_id'] = $category_id;
                            //$stockistActivity['attribute_value_id'] = $attribute_value_id;
                            $stockistActivity['color_id'] = $color_id;
                            $stockistActivity['dispatch_stock_value'] = $remainStock;
                            $stockistActivity['bill_date'] = $bill_date;
                            $stockistActivity['bill_no'] = $bill_no;
                            $stockistActivity['created_datetime'] = date('Y-m-d H:i:s');
                            $stockistActivity['status'] = 'LI';
                            if (in_array(85, $checkStockistFeature)) {
                                $this->_dbInsert($stockistActivity, 'table_item_stockist_stk_dispatch_activity');
                            }
                        }
                        /**************************************************/
                    } else {

                        $asRes = $this->_getSelectList('table_item_dis_stk_inprocess', 'dis_stk_inpro_id, rec_stock_value, acpt_stock_value', '', $condi . " AND status = 'A' ");
                        if (is_array($asRes) && sizeof($asRes) > 0) {

                            // $Cond = " distributor_id = '".$distributor_id."' AND item_id = '".$item_id."' AND category_id = '".$category_id."' AND attribute_value_id = '".$case_id."' AND color_id = '".$color_id."' ";
                            $Cond = " distributor_id = '" . $distributor_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "' ";
                            $resultRes = $this->_getSelectList2('table_item_distributor_stock', 'dis_stk_id, dis_stock_value', '', $Cond);
                            $data = array();

                            if (is_array($resultRes) && sizeof($resultRes) > 0) {
                                $finalStock = 0;
                                if (strtolower($bill_type) == 'return') {
                                    $finalStock = ($resultRes[0]->dis_stock_value + $asRes[0]->acpt_stock_value);
                                    $_objAdmin->revertDistQtySummary('ret_rct_qty', $distributor_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $asRes[0]->acpt_stock_value);
                                } else {
                                    $_objAdmin->revertDistQtySummary('rct_qty', $distributor_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $asRes[0]->acpt_stock_value);
                                    $finalStock = ($resultRes[0]->dis_stock_value - $asRes[0]->acpt_stock_value);
                                }
                                $data['dis_stock_value'] = $finalStock;
                                $data['last_updated_date'] = date('Y-m-d');
                                $data['last_update_datetime'] = date('Y-m-d H:i:s');
                                $whereCond = "dis_stk_id = '" . $resultRes[0]->dis_stk_id . "'";
                                $this->_dbUpdate($data, 'table_item_distributor_stock', $whereCond);
                            }
                            // $StockistStkCond = "stockist_id= '".$stockist_id."' AND item_id = '".$item_id."' AND category_id = '".$category_id."' AND attribute_value_id = '".$case_id."' AND color_id = '".$color_id."'";
                            $StockistStkCond = "stockist_id= '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                            $resultStockistStk = $this->_getSelectList2('table_item_stockist_stock', 'stockist_stk_id, stockist_stock_value', '', $StockistStkCond);
                            $data = array();
                            if (is_array($resultStockistStk) && sizeof($resultStockistStk) > 0) {
                                $stkfinalStock = 0;
                                if (strtolower($bill_type) == 'return') {
                                    $stkfinalStock = ($resultStockistStk[0]->stockist_stock_value - $asRes[0]->acpt_stock_value);
                                } else {
                                    $stkfinalStock = ($resultStockistStk[0]->stockist_stock_value + $asRes[0]->acpt_stock_value);
                                }

                                $data['stockist_stock_value'] = $stkfinalStock;
                                $data['last_updated_date'] = date('Y-m-d');
                                $data['last_update_datetime'] = date('Y-m-d H:i:s');
                                $whereCond = "stockist_stk_id = '" . $resultStockistStk[0]->stockist_stk_id . "'";
                                if (in_array(85, $checkStockistFeature)) {
                                    //*************************** Manage stockist stock summary table*********************//
                                    if (strtolower($bill_type) == 'return') {
                                        $_objAdmin->revertStockistQtySummary('dis_ret_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $asRes[0]->acpt_stock_value);
                                    } else {
                                        $_objAdmin->revertStockistQtySummary('dis_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $asRes[0]->acpt_stock_value);
                                    }


                                    $this->_dbUpdate($data, 'table_item_stockist_stock', $whereCond);
                                }
                            }
                            /***********Manage stockist stock******************/
                            $newStock = 0;
                            $stockistCondi = " stockist_id = '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                            $stockistResult = $this->_getSelectList2('table_item_stockist_stock', '*', '', $stockistCondi);
                            $stockistData = array();
                            $stockistActivity = array();
                            if (is_array($stockistResult) && !empty($stockistResult) && count($stockistResult) > 0) {
                                $stockist_stk_id = $stockistResult[0]->stockist_stk_id;
                                $stockist_stock_value = $stockistResult[0]->stockist_stock_value;
                                if (strtolower($bill_type) == 'return') {
                                    $newStock = $stockist_stock_value + $stock_value;
                                } else {
                                    $newStock = $stockist_stock_value - $stock_value;
                                }

                                $stockistData['stockist_stock_value'] = $newStock;
                                $stockistData['last_updated_date'] = date('Y-m-d');
                                $stockistData['last_update_datetime'] = date('Y-m-d H:i:s');
                                $ndcWhereCond1 = "stockist_stk_id = '" . $stockist_stk_id . "' ";
                                if (in_array(85, $checkStockistFeature)) {
                                    //*************************** Manage stockist stock summary table*********************//
                                    if (strtolower($bill_type) == 'return') {
                                        $_objAdmin->updateStockistQtySummary('dis_ret_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $stock_value);
                                    } else {
                                        $_objAdmin->updateStockistQtySummary('dis_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $stock_value);
                                    }

                                    $this->_dbUpdate($stockistData, 'table_item_stockist_stock', $ndcWhereCond1);
                                }
                                //  insert NDC stock activity
                                $stockistActivity['account_id'] = $this->clean($_SESSION['accountId']);
                                $stockistActivity['stockist_id'] = $stockist_id;
                                $stockistActivity['distributor_id'] = $distributor_id;
                                $stockistActivity['item_id'] = $item_id;
                                $stockistActivity['category_id'] = $category_id;
                                //$stockistActivity['attribute_value_id'] = $attribute_value_id;
                                $stockistActivity['color_id'] = $color_id;
                                $stockistActivity['dispatch_stock_value'] = $stock_value;
                                $stockistActivity['bill_date'] = $bill_date;
                                $stockistActivity['bill_no'] = $bill_no;
                                $stockistActivity['created_datetime'] = date('Y-m-d H:i:s');
                                $stockistActivity['status'] = 'LI';
                                if (in_array(85, $checkStockistFeature)) {
                                    $this->_dbInsert($stockistActivity, 'table_item_stockist_stk_dispatch_activity');
                                }
                            }
                            /**************************************************/
                            $data = array();
                            $stockistActCond = $condi . " AND status = 'LI' ";
                            $data['status'] = 'D';
                            if (in_array(85, $checkStockistFeature)) {
                                $this->_dbUpdate($data, 'table_item_stockist_stk_dispatch_activity', $stockistActCond);
                            }
                            $data = array();
                            $data['rec_stock_value'] = $stock_value;
                            $data['acpt_stock_value'] = 0;
                            $data['last_update_datetime'] = date('Y-m-d H:i:s');
                            $data['created_datetime'] = date('Y-m-d H:i:s');
                            $data['status'] = 'I';
                            $data['price'] = $price;
                            $data['before_tax_amount'] = $taxable_value;
                            $data['total_tax_amount'] = ($igst_amount + $cgst_amount + $sgst_amount + $cess_amount);
                            $data['igst_amount'] = $igst_amount;
                            $data['cgst_amount'] = $cgst_amount;
                            $data['sgst_amount'] = $sgst_amount;
                            $data['cess_amount'] = $cess_amount;
                            $whereCnd = "dis_stk_inpro_id = '" . $asRes[0]->dis_stk_inpro_id . "'";
                            $result = $this->_dbUpdate($data, 'table_item_dis_stk_inprocess', $whereCnd);
                        } else {
                            // insert data in inprocess table
                            $data1 = array();
                            $data1['account_id'] = $this->clean($_SESSION['accountId']);
                            $data1['stockist_id'] = $this->clean($stockist_id);
                            $data1['distributor_id'] = $this->clean($distributor_id);
                            $data1['item_id'] = $this->clean($item_id);
                            $data1['category_id'] = $this->clean($category_id);
                            $data1['attribute_value_id'] = $this->clean($color_id);
                            $data1['color_id'] = $this->clean($color_id);
                            $data1['bill_date'] = $this->clean($bill_date);
                            $data1['bill_no'] = $this->clean($bill_no);
                            $data1['rec_stock_value'] = $stock_value;
                            $data1['last_update_datetime'] = date('Y-m-d H:i:s');
                            $data1['created_datetime'] = date('Y-m-d H:i:s');
                            $data1['status'] = 'I';
                            $data1['price'] = $price;
                            $data1['before_tax_amount'] = $taxable_value;
                            $data1['total_tax_amount'] = ($igst_amount + $cgst_amount + $sgst_amount + $cess_amount);
                            $data1['igst_amount'] = $igst_amount;
                            $data1['cgst_amount'] = $cgst_amount;
                            $data1['sgst_amount'] = $sgst_amount;
                            $data1['cess_amount'] = $cess_amount;
                            $data1['bill_type'] = ucfirst($bill_type);
                            $data1['bill_status'] = 'A';

                            $stockCheck = "stockist_id= '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                            $StockistStk = $this->_getSelectList2('table_item_stockist_stock', 'stockist_stk_id, stockist_stock_value', '', $stockCheck);


                            // remove only ", " . $arrFile[14] . 

                            if (in_array(85, $checkStockistFeature) && (!is_array($StockistStk) || count($StockistStk) == 0 || $StockistStk[0]->stockist_stock_value < $stock_value)) {
                                $strErr .= "Error in Row" . $row . ", " . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . ", " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", " . $arrFile[13] . ", Stockist doesn't have enough stock to transfer.\n";
                                $str_err_array = array($strErr);
                                $flag = false;
                                $check = false;

                            } else {

                                if (!is_array($StockistStk) || count($StockistStk) == 0) {
                                    $data = array();
                                    $data['account_id'] = $this->clean($_SESSION['accountId']);
                                    $data['stockist_id'] = $this->clean($stockist_id);
                                    $data['item_id'] = $this->clean($item_id);
                                    $data['category_id'] = $this->clean($category_id);
                                    $data['attribute_value_id'] = $this->clean($case_id);
                                    $data['color_id'] = $this->clean($color_id);
                                    $data['stockist_stock_value'] = ($stock_value * (-1));
                                    $data['status'] = 'A';
                                    $data['last_updated_date'] = date('Y-m-d');
                                    $data['last_update_datetime'] = date('Y-m-d H:i:s');
                                    if (in_array(85, $checkStockistFeature)) {
                                        $this->_dbInsert($data, 'table_item_stockist_stock');
                                        //*************************** Manage stockist stock summary table*********************//
                                        if (strtolower($bill_type) == 'return') {
                                            $_objAdmin->updateStockistQtySummary('dis_ret_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $stock_value);
                                        } else {
                                            $_objAdmin->updateStockistQtySummary('dis_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $stock_value);
                                        }


                                    }
                                    $result = $this->_dbInsert($data1, 'table_item_dis_stk_inprocess');

                                } else {

                                    $result = $this->_dbInsert($data1, 'table_item_dis_stk_inprocess');

                                    /**********************Manage stockist stock***************************************/
                                    $stockistCondi = " stockist_id = '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                                    $stockistResult = $this->_getSelectList2('table_item_stockist_stock', '*', '', $stockistCondi);
                                    $stockistData = array();
                                    $stockistActivity = array();
                                    if (is_array($stockistResult) && !empty($stockistResult) && count($stockistResult) > 0) {
                                        $stockist_stk_id = $stockistResult[0]->stockist_stk_id;
                                        $stockist_stock_value = $stockistResult[0]->stockist_stock_value;
                                        if (strtolower($bill_type) == 'return') {
                                            $newStock = $stockist_stock_value + $stock_value;
                                        } else {
                                            $newStock = $stockist_stock_value - $stock_value;
                                        }

                                        $stockistData['stockist_stock_value'] = $newStock;
                                        $stockistData['last_updated_date'] = date('Y-m-d');
                                        $stockistData['last_update_datetime'] = date('Y-m-d H:i:s');
                                        $ndcWhereCond1 = "stockist_stk_id = '" . $stockist_stk_id . "' ";
                                        if (in_array(85, $checkStockistFeature)) {
                                            $this->_dbUpdate($stockistData, 'table_item_stockist_stock', $ndcWhereCond1);
                                            //*************************** Manage stockist stock summary table*********************//
                                            if (strtolower($bill_type) == 'return') {
                                                $_objAdmin->updateStockistQtySummary('dis_ret_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $stock_value);
                                            } else {
                                                $_objAdmin->updateStockistQtySummary('dis_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $stock_value);
                                            }
                                        }
                                        //  insert NDC stock activity
                                        $stockistActivity['account_id'] = $this->clean($_SESSION['accountId']);
                                        $stockistActivity['stockist_id'] = $stockist_id;
                                        $stockistActivity['distributor_id'] = $distributor_id;
                                        $stockistActivity['item_id'] = $item_id;
                                        $stockistActivity['category_id'] = $category_id;
                                        //$stockistActivity['attribute_value_id'] = $attribute_value_id;
                                        $stockistActivity['color_id'] = $color_id;
                                        $stockistActivity['dispatch_stock_value'] = $stock_value;
                                        $stockistActivity['bill_date'] = $bill_date;
                                        $stockistActivity['bill_no'] = $bill_no;
                                        $stockistActivity['created_datetime'] = date('Y-m-d H:i:s');
                                        $stockistActivity['status'] = 'LI';
                                        if (in_array(85, $checkStockistFeature)) {
                                            $this->_dbInsert($stockistActivity, 'table_item_stockist_stk_dispatch_activity');
                                        }
                                    }
                                    /**********************************************************************************/


                                }//else part for new insert stk record
                            }


                        } //else part for new rcrd insert


                    }

                } //if flag
            }
            $row++;
        }
        fclose($file);
        //If Auto GRN feature is on than auto accept GRN

        if ($check && in_array(115, $checkStockistFeature)) {

            $this->getDistributorStockFromInprocessStock();
        }

        if ($row <= 2)
            return "no";
        else
            return $str_err_array;
    }


    function getDistributorFullfilmentStockFromInprocessStock()
    {
        $_objAdmin = new Admin();
        $condi = "status = 'I'";
        $resultset = $this->_getSelectList('table_item_dis_stk_inprocess ', '*', '', $condi);

        if (is_array($resultset) && !empty($resultset) && count($resultset) > 0) {

            foreach ($resultset as $key => $value) {
                $stkbfrAct = 0;
                $rec_stock_value = 0;

                $dis_stk_inpro_id = $this->clean($value->dis_stk_inpro_id);
                $stockist_id = $value->stockist_id;
                $account_id = $value->account_id;
                $distributor_id = $this->clean($value->distributor_id);
                $item_id = $this->clean($value->item_id);
                $category_id = $this->clean($value->category_id);
                //$attribute_value_id = $this->clean($value->attribute_value_id);
                $color_id = $this->clean($value->color_id);
                $rec_stock_value = $this->clean($value->rec_stock_value);
                $bill_date = $this->clean($value->bill_date);
                $bill_no = $this->clean($value->bill_no);
                $bill_type = $this->clean($value->bill_type);
                // $Cond = " distributor_id = '".$distributor_id."' AND item_id = '".$item_id."' AND category_id = '".$category_id."' AND attribute_value_id = '".$attribute_value_id."' AND color_id = '".$color_id."'";

                $Cond = " distributor_id = '" . $distributor_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                $result = $this->_getSelectList('table_item_distributor_stock', '*', '', $Cond);
                $data = array();
                $StkinvType = '';
                if (is_array($result) && !empty($result) && count($result) > 0) {

                    $dis_stk_id = $result[0]->dis_stk_id;
                    $dis_stock_value = $result[0]->dis_stock_value;
                    $stkbfrAct = $dis_stock_value;
                    if (strtolower($bill_type) == 'return invoice') {
                        $StkinvType = 'ret_rct_qty';
                        $total_stock = ($dis_stock_value - $rec_stock_value);
                    } else {
                        $StkinvType = 'rct_qty';
                        $total_stock = ($rec_stock_value + $dis_stock_value);
                    }

                    //$total_stock 		= ($rec_stock_value + $dis_stock_value);
                    //  Update distributor stock

                    $data['dis_stock_value'] = $total_stock;
                    $data['last_updated_date'] = date('Y-m-d');
                    $data['last_update_datetime'] = date('Y-m-d H:i:s');
                    $WhereCond = "dis_stk_id = '" . $dis_stk_id . "' ";
                    $this->_dbUpdate($data, 'table_item_distributor_stock', $WhereCond);

                } else {
                    if (strtolower($bill_type) == 'return invoice') {
                        $StkinvType = 'ret_rct_qty';
                    } else {
                        $StkinvType = 'rct_qty';
                    }
                    $stkbfrAct = 0;
                    // insert distributor stock
                    $data['account_id'] = $account_id;
                    $data['distributor_id'] = $distributor_id;
                    $data['item_id'] = $item_id;
                    $data['category_id'] = $category_id;
                    //$data['attribute_value_id'] = $attribute_value_id;

                    $data['color_id'] = $color_id;
                    if (strtolower($bill_type) == 'return invoice') {
                        $data['dis_stock_value'] = (0 - $rec_stock_value);
                    } else {
                        $data['dis_stock_value'] = $rec_stock_value;
                    }

                    //$data['dis_stock_value'] 		= $rec_stock_value;

                    $data['last_updated_date'] = date('Y-m-d');
                    $data['last_update_datetime'] = date('Y-m-d H:i:s');
                    $result = $this->_dbInsert($data, 'table_item_distributor_stock');
                }
                $_objAdmin->updateDistQtySummary($StkinvType, $distributor_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $rec_stock_value);

                $Trans_data = array();
                $Trans_data['distributor_id'] = $distributor_id;
                $Trans_data['item_id'] = $item_id;
                $Trans_data['stock_before_activity'] = $stkbfrAct;
                $Trans_data['quantity'] = $rec_stock_value;

                if (strtolower($bill_type) == 'return invoice') {
                    $Trans_data['stock_after_activity'] = ($stkbfrAct - $rec_stock_value);
                    $Trans_data['activity_type'] = "GRN_RET";
                } else {
                    $Trans_data['stock_after_activity'] = ($stkbfrAct + $rec_stock_value);
                    $Trans_data['activity_type'] = "GRN_REC";
                }

                //$Trans_data['stock_after_activity'] 	= ($stkbfrAct + $rec_stock_value);

                $Trans_data['activity_date'] = date('Y-m-d');
                $Trans_data['activity_time'] = date('H:i:s');
                $this->_dbInsert($Trans_data, 'table_item_distributor_stock_transaction_activity');


                $data = array();

                //  Update distributor inprocess stock

                $data['acpt_stock_value'] = $rec_stock_value;
                $data['last_update_datetime'] = date('Y-m-d H:i:s');
                $data['status'] = 'A';
                $data['GRN_date'] = date('Y-m-d H:i:s');
                $WhereCond1 = "dis_stk_inpro_id = '" . $dis_stk_inpro_id . "' ";
                $this->_dbUpdate($data, 'table_item_dis_stk_inprocess', $WhereCond1);
                //  select ndc stock for update company stock when transfer stock to stockist
                // $stockistCondi =  " stockist_id = '".$stockist_id."' AND item_id = '".$item_id."' AND category_id = '".$category_id."' AND attribute_value_id = '".$attribute_value_id."' AND color_id = '".$color_id."'";

            }

            $this->insertDisInvoiceInSAPtable($resultset);

        }

    }

    function getDistributorStockFromInprocessStock()
    {
        $_objAdmin = new Admin();
        $condi = "status = 'I'";
        $resultset = $this->_getSelectList('table_item_dis_stk_inprocess ', '*', '', $condi);

        if (is_array($resultset) && !empty($resultset) && count($resultset) > 0) {

            foreach ($resultset as $key => $value) {
                $stkbfrAct = 0;
                $rec_stock_value = 0;

                $dis_stk_inpro_id = $this->clean($value->dis_stk_inpro_id);
                $stockist_id = $value->stockist_id;
                $account_id = $value->account_id;
                $distributor_id = $this->clean($value->distributor_id);
                $item_id = $this->clean($value->item_id);
                $category_id = $this->clean($value->category_id);
                //$attribute_value_id = $this->clean($value->attribute_value_id);
                $color_id = $this->clean($value->color_id);
                $rec_stock_value = $this->clean($value->rec_stock_value);
                $bill_date = $this->clean($value->bill_date);
                $bill_no = $this->clean($value->bill_no);
                $bill_type = $this->clean($value->bill_type);
                // $Cond = " distributor_id = '".$distributor_id."' AND item_id = '".$item_id."' AND category_id = '".$category_id."' AND attribute_value_id = '".$attribute_value_id."' AND color_id = '".$color_id."'";

                $Cond = " distributor_id = '" . $distributor_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                $result = $this->_getSelectList('table_item_distributor_stock', '*', '', $Cond);
                $data = array();
                $StkinvType = '';
                if (is_array($result) && !empty($result) && count($result) > 0) {

                    $dis_stk_id = $result[0]->dis_stk_id;
                    $dis_stock_value = $result[0]->dis_stock_value;
                    $stkbfrAct = $dis_stock_value;
                    if (strtolower($bill_type) == 'return') {
                        $StkinvType = 'ret_rct_qty';
                        $total_stock = ($dis_stock_value - $rec_stock_value);
                    } else {
                        $StkinvType = 'rct_qty';
                        $total_stock = ($rec_stock_value + $dis_stock_value);
                    }

                    //$total_stock 		= ($rec_stock_value + $dis_stock_value);
                    //  Update distributor stock

                    $data['dis_stock_value'] = $total_stock;
                    $data['last_updated_date'] = date('Y-m-d');
                    $data['last_update_datetime'] = date('Y-m-d H:i:s');
                    $WhereCond = "dis_stk_id = '" . $dis_stk_id . "' ";
                    $this->_dbUpdate($data, 'table_item_distributor_stock', $WhereCond);

                } else {
                    if (strtolower($bill_type) == 'return') {
                        $StkinvType = 'ret_rct_qty';
                    } else {
                        $StkinvType = 'rct_qty';
                    }
                    $stkbfrAct = 0;
                    // insert distributor stock
                    $data['account_id'] = $account_id;
                    $data['distributor_id'] = $distributor_id;
                    $data['item_id'] = $item_id;
                    $data['category_id'] = $category_id;
                    //$data['attribute_value_id'] = $attribute_value_id;

                    $data['color_id'] = $color_id;
                    if (strtolower($bill_type) == 'return') {
                        $data['dis_stock_value'] = (0 - $rec_stock_value);
                    } else {
                        $data['dis_stock_value'] = $rec_stock_value;
                    }

                    //$data['dis_stock_value'] 		= $rec_stock_value;

                    $data['last_updated_date'] = date('Y-m-d');
                    $data['last_update_datetime'] = date('Y-m-d H:i:s');
                    $result = $this->_dbInsert($data, 'table_item_distributor_stock');
                }
                $_objAdmin->updateDistQtySummary($StkinvType, $distributor_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $rec_stock_value);

                $Trans_data = array();
                $Trans_data['distributor_id'] = $distributor_id;
                $Trans_data['item_id'] = $item_id;
                $Trans_data['stock_before_activity'] = $stkbfrAct;
                $Trans_data['quantity'] = $rec_stock_value;

                if (strtolower($bill_type) == 'return') {
                    $Trans_data['stock_after_activity'] = ($stkbfrAct - $rec_stock_value);
                    $Trans_data['activity_type'] = "GRN_RET";
                } else {
                    $Trans_data['stock_after_activity'] = ($stkbfrAct + $rec_stock_value);
                    $Trans_data['activity_type'] = "GRN_REC";
                }

                //$Trans_data['stock_after_activity'] 	= ($stkbfrAct + $rec_stock_value);

                $Trans_data['activity_date'] = date('Y-m-d');
                $Trans_data['activity_time'] = date('H:i:s');
                $this->_dbInsert($Trans_data, 'table_item_distributor_stock_transaction_activity');


                $data = array();

                //  Update distributor inprocess stock

                $data['acpt_stock_value'] = $rec_stock_value;
                $data['last_update_datetime'] = date('Y-m-d H:i:s');
                $data['status'] = 'A';
                $data['GRN_date'] = date('Y-m-d H:i:s');
                $WhereCond1 = "dis_stk_inpro_id = '" . $dis_stk_inpro_id . "' ";
                $this->_dbUpdate($data, 'table_item_dis_stk_inprocess', $WhereCond1);
                //  select ndc stock for update company stock when transfer stock to stockist
                // $stockistCondi =  " stockist_id = '".$stockist_id."' AND item_id = '".$item_id."' AND category_id = '".$category_id."' AND attribute_value_id = '".$attribute_value_id."' AND color_id = '".$color_id."'";

            }

            $this->insertDisInvoiceInSAPtable($resultset);

        }

    }

    function insertDisInvoiceInSAPtable($recordSet)

    {

        $invoiceitem = array();

        if (count($recordSet) > 0) {

            foreach ($recordSet as $key => $value) {

                //$invoiceitem['bill_no'][]=$value;

                $billno = $value->bill_no;

                $itemid = $value->item_id;

                $inproid = $value->dis_stk_inpro_id;

                $bill_date = date('Y-m-d', strtotime($value->bill_date));

                /**********Invoice item array****************/

                $price = $value->price;

                $igst_amount = $value->igst_amount;

                $cgst_amount = $value->cgst_amount;

                $sgst_amount = $value->sgst_amount;

                $cess_amount = $value->cess_amount;

                $taxable_value = ($igst_amount + $cgst_amount + $sgst_amount + $cess_amount);

                $invoice_value = (($value->price * $value->rec_stock_value) + $taxable_value);

                $detaildata = array();

                $detaildata['account_id'] = $value->account_id;

                $detaildata['inprocess_id'] = $inproid;

                $detaildata['item_id'] = $itemid;

                $detaildata['acc_quantity'] = $value->rec_stock_value;

                $detaildata['created_at'] = date('Y-m-d');

                $detaildata['updated_at'] = date('Y-m-d');

                $detaildata['price'] = $price;

                $detaildata['acc_total_amount'] = $invoice_value;

                $detaildata['acc_tax_amount'] = $taxable_value;

                $detaildata['igst_amount'] = $igst_amount;

                $detaildata['cgst_amount'] = $cgst_amount;

                $detaildata['sgst_amount'] = $sgst_amount;

                $detaildata['cess_amount'] = $cess_amount;

                /**********Invoice item array****************/

                $Cond = " sap_invoice_no = '" . $billno . "' AND invoice_date = '" . $bill_date . "' ";

                $result = $this->_getSelectList2('table_sap_invoice_history', '*', '', $Cond);

                if (is_array($result) && count($result) > 0) {

                    //update header record

                    $Cond1 = " invoice_id = '" . $result[0]->invoice_id . "' AND item_id = '" . $itemid . "' ";

                    $result1 = $this->_getSelectList2('table_sap_invoice_history_details', '*', '', $Cond1);

                    if (is_array($result1) && count($result1) > 0) {

                        $updateItem = array();

                        $updateItem['acc_quantity'] = $value->rec_stock_value;

                        $updateItem['price'] = $price;

                        $updateItem['acc_total_amount'] = $invoice_value;

                        $updateItem['acc_tax_amount'] = $taxable_value;

                        $updateItem['igst_amount'] = $igst_amount;

                        $updateItem['cgst_amount'] = $cgst_amount;

                        $updateItem['sgst_amount'] = $sgst_amount;

                        $updateItem['cess_amount'] = $cess_amount;

                        $condition = " invoice_id = '" . $result[0]->invoice_id . "' AND item_id = '" . $itemid . "' ";;

                        $this->_dbUpdate($updateItem, 'table_sap_invoice_history_details', $condition);

                    } else {

                        //insert item detail record

                        $detaildata['invoice_id'] = $result[0]->invoice_id;

                        $this->_dbInsert($detaildata, 'table_sap_invoice_history_details');

                    }

                } else {

                    //insert header record

                    $headerdata = array();

                    $headerdata['account_id'] = $value->account_id;

                    $headerdata['sap_invoice_no'] = $billno;

                    $headerdata['distributor_id'] = $value->distributor_id;

                    $headerdata['invoice_type'] = 'sales';

                    $headerdata['invoice_date'] = $bill_date;

                    $headerdata['total_amount'] = 0;

                    $headerdata['tax_amount'] = 0;

                    $headerdata['created_at'] = date('Y-m-d');

                    $headerdata['updated_at'] = date('Y-m-d');

                    $invid = $this->_dbInsert($headerdata, 'table_sap_invoice_history');

                    $detaildata['invoice_id'] = $invid;

                    $this->_dbInsert($detaildata, 'table_sap_invoice_history_details');

                }

            }

        }

        return;

    }

    /*********************************** DISTRIBUTOR DISPATCHED STOCK *************************************************/

    /*********************************** RETAILER DUE *************************************************/

    function uploadRetailerDueFile()

    {

        $fields = array('Retailer ID*', 'Retailer Name*', 'Due Amount');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $resultset = "";

        $row = 0;

        $data = array();

        $data2 = array();

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Retailer ID*" || empty($arrFile[1]) || $arrFile[1] == "Retailer Name*") {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " , " . $fields[0] . "shouldn't be empty.";

                    } elseif (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " , " . $fields[1] . "shouldn't be empty";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = "  LOWER(retailer_name)='" . mysql_escape_string(strtolower($arrFile[1])) . "' and retailer_id='" . mysql_escape_string(strtolower($arrFile[0])) . "' AND status = 'A'";

                    $aDisRec = $this->_getSelectList('table_retailer', 'retailer_id', '', $condi);                    //exit;

                    if (!is_array($aDisRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ,Retailer does not exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $data = array();

                    $data2 = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['retailer_id'] = mysql_escape_string($this->clean($aDisRec[0]->retailer_id));

                    $data['due_amt'] = mysql_escape_string($this->clean($arrFile[2]));

                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_datetime'] = date('Y-m-d H:i:s');

                    $data2['due_amt'] = mysql_escape_string($this->clean($arrFile[2]));

                    $data2['last_update_date'] = date('Y-m-d');

                    $data2['last_update_datetime'] = date('Y-m-d H:i:s');

                    $condi1 = "retailer_id=" . $aDisRec[0]->retailer_id . " and account_id=" . $_SESSION['accountId'] . " ";

                    $aRetRec = $this->_getSelectList('table_retailer_due_details', '*', '', $condi1);

                    if ($arrFile[2] != '') {

                        if (is_array($aRetRec)) {

                            $item_id = $this->_dbUpdate($data2, 'table_retailer_due_details', " retailer_id=" . $aDisRec[0]->retailer_id);

                        } else {

                            $item_id = $this->_dbInsert($data, 'table_retailer_due_details');

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /*********************************** RETAILER DUE *************************************************/

    /*********************************** DISTRIBUTOR DISPATCHED STOCK *************************************************/

    /************************************* Upload distributor actual stock(10 Sep 2014) ***************************************/

    function uploadDistributorActualStock()

    {

        $fields = array('Distributor Code*', 'Category Name*', 'Item Code*', 'Cases Size', 'Number Of Cases*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $resultset = "";

        $row = 0;

        $disCd = '';

        $catName = '';

        $itmCd = '';

        $caseSize = '';

        $stkValue = '';

        while (!feof($file)) {

            $data = array();

            $data2 = array();

            $data3 = array();

            $arrFile = fgetcsv($file);

            $flag = true;

            $disCd = trim($arrFile[0]);

            $catName = trim($arrFile[1]);

            $itmCd = trim($arrFile[2]);

            $caseSize = trim($arrFile[3]);

            $stkValue = trim($arrFile[4]);

            //echo "<pre>"; print_r($arrFile);

            //exit;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($disCd) || $disCd == "Distributor Code*" || empty($catName) || $catName == "Category Name*" || empty($itmCd) || $itmCd == "Item Code*" || empty($stkValue) || $stkValue == "Number Of Cases*") {

                    if (empty($disCd)) {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $catName . " ," . $itmCd . " ," . $caseSize . " , " . $stkValue . ", " . $fields[0] . " shouldn't be empty  \n";

                    } elseif (empty($catName)) {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $catName . " ," . $itmCd . " ," . $caseSize . " , " . $stkValue . ", " . $fields[1] . " shouldn't be empty  \n";

                    } elseif (empty($itmCd)) {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $catName . " ," . $itmCd . " ," . $caseSize . " , " . $stkValue . ", " . $fields[2] . " shouldn't be empty  \n";

                    } elseif (empty($stkValue)) {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $catName . " ," . $itmCd . " ," . $caseSize . " , " . $stkValue . ", " . $fields[4] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // Check Distributor Code exists in the system.

                if ($flag) {

                    $condi = " LOWER(distributor_code)='" . mysql_escape_string(strtolower(trim($disCd))) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_distributors', 'distributor_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->distributor_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $catName . " ," . $itmCd . " ," . $caseSize . " , " . $stkValue . " , Distributor code doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $distributor_id = $resultset[0]->distributor_id;

                    }

                }

                // Check category exists in the system.

                if ($flag) {

                    $condi = " LOWER(category_name)='" . mysql_escape_string(strtolower($catName)) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_category', 'category_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->category_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $catName . " ," . $itmCd . " ," . $caseSize . ", " . $stkValue . " ,Category doesn't exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $category_id = $resultset[0]->category_id;

                    }

                }

                // Check item exists in the system.

                if ($flag) {

                    $condi = "  category_id ='" . $category_id . "' AND LOWER(item_code)='" . mysql_escape_string(strtolower($itmCd)) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_item', 'item_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->item_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $catName . " ," . $itmCd . " ," . $caseSize . " ,Item doesn't exists in this category or item code doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $item_id = $resultset[0]->item_id;

                    }

                }

                // Check attribute(size,color) exists in the system.

                //Check cases size in the system.

                if ($flag) {

                    if ($caseSize != "") {

                        $condi = " LOWER(case_size) = '" . mysql_escape_string(strtolower($caseSize)) . "' AND ic.item_id=" . $item_id;

                    } else {

                        $condi = " LOWER(case_size) = '1' AND ic.item_id=" . $item_id;

                    }

                    $resultset = $this->_getSelectList('table_cases as c left join table_item_case_relationship as ic on ic.case_id=c.case_id', 'c.case_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->case_id == "") {

                        $strErr .= "Error in Row" . $row . "," . $disCd . "," . $catName . "," . $itmCd . "," . $caseSize . ", Cases Sizes doesn't exists in the system\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $case_id = $resultset[0]->case_id;

                    }

                }

                // Insert/Update data in the system

                if ($flag) {

                    $condi = " distributor_id = '" . $distributor_id . "' AND category_id ='" . $category_id . "' AND item_id ='" . $item_id . "' AND attribute_value_id ='" . $case_id . "'";

                    $resultset = $this->_getSelectList('table_item_distributor_stock', '*', '', $condi);

                    //print_r($resultset);

                    //exit;

                    $data['account_id'] = $_SESSION['accountId'];

                    $data['distributor_id'] = $distributor_id;

                    $data['item_id'] = $item_id;

                    $data['category_id'] = $category_id;

                    $data['attribute_value_id'] = $case_id;

                    $data['last_updated_date'] = date('Y-m-d');

                    $data['last_update_datetime'] = date('Y-m-d H:i:s');

                    $data['status'] = 'A';

                    $data2['account_id'] = $_SESSION['accountId'];

                    $data2['distributor_id'] = $distributor_id;

                    $data2['item_id'] = $item_id;

                    $data2['category_id'] = $category_id;

                    $data2['attribute_value_id'] = $case_id;

                    $data2['dispatch_stock_value'] = $stkValue;  // Distributor Activity Value

                    $data2['created_datetime'] = date('Y-m-d H:i:s');

                    $data2['status'] = 'A';

                    if (is_array($resultset) && sizeof($resultset) > 0) {

                        //$data['dis_stock_value']= $resultset[0]->dis_stock_value + $stkValue;   // Distributor Actual Stock Value

                        $data['dis_stock_value'] = $stkValue;   // Distributor Actual Stock Value

                        $result = $this->_dbUpdate($data, 'table_item_distributor_stock', $condi);

                        $result_activity = $this->_dbInsert($data2, 'table_item_dis_stk_dispatch_activity');

                    } else {

                        $data['dis_stock_value'] = $stkValue;   // Distributor Actual Stock Value

                        $result = $this->_dbInsert($data, 'table_item_distributor_stock');

                        $result_activity = $this->_dbInsert($data2, 'table_item_dis_stk_dispatch_activity');

                    }

                    //check insert/update only last update date in nds stock.

                    $data3['account_id'] = $_SESSION['accountId'];

                    $data3['item_id'] = $item_id;

                    $data3['category_id'] = $category_id;

                    $data3['attribute_value_id'] = $case_id;

                    $data3['last_updated_date'] = date('Y-m-d');

                    $data3['last_update_datetime'] = date('Y-m-d H:i:s');

                    $data3['status'] = 'A';

                    $condnds = " category_id='" . $category_id . "' AND item_id='" . $item_id . "' AND attribute_value_id='" . $case_id . "'";

                    $ndcresultset = $this->_getSelectList('table_item_ndc_stock', '*', '', $condnds);

                    if (isset($ndcresultset) && count($ndcresultset) > 0) {

                        $this->_dbUpdate($data3, 'table_item_ndc_stock', $condnds);

                    } else {

                        $this->_dbInsert($data3, 'table_item_ndc_stock', $condnds);

                    }

                    //check insert/update only last update date in nds stock.

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /************************************* Upload distributor actual stock(10 Sep 2014) ***************************************/

    /*****************************************************
     * desc : Import SKU Promotions
     * created on : 05 Jan 2015
     * Author : AJAY
     *
     ***/

    // import data here

    function import_item_promotion()

    {

        $fields = array('Chain Name*', 'Item Code*', 'Offer*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $resultset = "";

        $row = 0;

        $chainName = '';

        $itmCd = '';

        $promo_desc = '';

        while (!feof($file)) {

            $data = array();

            $data2 = array();

            $data3 = array();

            $arrFile = fgetcsv($file);

            $flag = true;

            $chainName = trim($arrFile[0]);

            $itmCd = trim($arrFile[1]);

            $promo_desc = trim($arrFile[2]);

            $start_date = date('Y-m-d', strtotime(trim($arrFile[3])));

            $end_date = date('Y-m-d', strtotime(trim($arrFile[4])));

            if (!isset($start_date) || empty($start_date) || $start_date == '1970-01-01') $start_date = NULL;

            if (!isset($end_date) || empty($end_date) || $end_date == '1970-01-01') $end_date = NULL;

            //echo $start_date;

            //echo $end_date;

            //echo "<pre>"; print_r($arrFile);

            //exit;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($chainName) || $chainName == "Chain Name*" || empty($itmCd) || $itmCd == "Item Code*" || empty($promo_desc) || $promo_desc == "Offer*") {

                    if (empty($chainName)) {

                        $strErr .= "Error in Row" . $row . " ," . $chainName . "," . $itmCd . " ," . $promo_desc . " , " . $fields[0] . " shouldn't be empty  \n";

                    } elseif (empty($itmCd)) {

                        $strErr .= "Error in Row" . $row . " ," . $chainName . "," . $itmCd . " ," . $promo_desc . " , " . $fields[1] . " shouldn't be empty  \n";

                    } elseif (empty($promo_desc)) {

                        $strErr .= "Error in Row" . $row . " ," . $chainName . "," . $itmCd . " ," . $promo_desc . " , " . $fields[2] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // Check item exists in the system.

                if ($flag) {

                    $itmCd = preg_replace("/\r|\n/", "", $itmCd);

                    $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower(trim($itmCd))) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_item', 'item_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->item_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $chainName . "," . $itmCd . " ," . $promo_desc . " ,Item code doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $item_id = $resultset[0]->item_id;

                    }

                }

                // Check SKU CHAIN exists in the system.

                if ($flag) {

                    $resultset = array();

                    $chainName = preg_replace("/\r|\n/", "", trim($chainName));

                    $condi = " LOWER(chain_name)='" . mysql_escape_string(strtolower(trim($chainName))) . "' AND ICR.item_id =" . $item_id;

                    //exit;

                    $resultset = $this->_getSelectList('table_chain AS C LEFT JOIN table_item_chain_relationship AS ICR ON ICR.chain_id = C.chain_id ', 'C.chain_id', '', $condi);

                    //print_r($resultset);

                    //exit;

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->chain_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $chainName . "," . $itmCd . " ," . $promo_desc . ", " . $condi . " , Chain doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $chain_id = $resultset[0]->chain_id;

                    }

                }

                // Insert/Update data in the system

                if ($flag) {

                    $data = array();

                    $condi = " item_id = '" . $item_id . "'";

                    $resultset = $this->_getSelectList('table_promotion', '*', '', $condi);

                    //print_r($resultset);

                    //exit;

                    $data['account_id'] = $_SESSION['accountId'];

                    $data['item_id'] = $item_id;

                    $data['chain_id'] = $chain_id;

                    $data['promo_desc'] = $promo_desc;  // promo_desc

                    $data['start_date'] = $start_date;

                    $data['end_date'] = $end_date;

                    $data['last_updated_on'] = date('Y-m-d H:i:s');

                    $data['status'] = 'A';

                    $result = $this->_dbInsert($data, 'table_promotion');

                    /* if(is_array($resultset) && sizeof($resultset)>0) {

				$data['promo_desc']	= $promo_desc;   // promo_desc

				$result = $this->_dbUpdate($data,'table_promotion',$condi);

			} else {

				$data['promo_desc']	= $promo_desc;   // promo_desc

				$result = $this->_dbInsert($data,'table_promotion');

			} */

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /************************** Add Monthly Route Assignments ***********************************/

// 	function uploadMonthlyRouteList () {

//     //echo 'aaa'; exit;

//      $fields = array('Salesman Name*','Route Name*','Year*','Month*','day1','day2','day3','day4','day5','day6','day7','day8','day9','day10','day11','day12','day13','day14','day15','day16','day17','day18','day19','day20','day21','day22','day23','day24','day25','day26','day27','day28','day29','day30','day31');

// 	$file = fopen($_FILES['fileToUpload']['tmp_name'],"r");

// 	$strErr="";

// 	$resultset = "";

// 	$row=0;

// 	$salesman_name ="";

// 	$route_name="";

// 	$year="";

// 	$month="";

// 	$day1="";

// 	$day2="";

// 	$day3="";

// 	$day4="";

// 	$day5="";

// 	$day6="";

// 	$day7="";

// 	$day8="";

// 	$day9="";

// 	$day10="";

// 	$day11="";

// 	$day12="";

// 	$day13="";

// 	$day14="";

// 	$day15="";

// 	$day16="";

// 	$day17="";

// 	$day18="";

// 	$day19="";

// 	$day20="";

// 	$day21="";

// 	$day22="";

// 	$day23="";

// 	$day24="";

// 	$day25="";

// 	$day26="";

// 	$day27="";

// 	$day28="";

// 	$day29="";

// 	$day30="";

// 	$day31="";

// 	while(!feof($file))

// 	{

// 	$data = array();

// 	$data2 = array();

// 		$arrFile=fgetcsv($file);

// 		$flag=true;

// 		$day1            =trim($arrFile[4]);

// 		$day2            =trim($arrFile[5]);

// 		$day3            =trim($arrFile[6]);

// 		$day4            =trim($arrFile[7]);

// 		$day5            =trim($arrFile[8]);

// 		$day6            =trim($arrFile[9]);

// 		$day7            =trim($arrFile[10]);

// 		$day8            =trim($arrFile[11]);

// 		$day9            =trim($arrFile[12]);

// 		$day10           =trim($arrFile[13]);

// 		$day11           =trim($arrFile[14]);

// 		$day12           =trim($arrFile[15]);

// 		$day13           =trim($arrFile[16]);

// 		$day14           =trim($arrFile[17]);

// 		$day15           =trim($arrFile[18]);

// 		$day16           =trim($arrFile[19]);

// 		$day17           =trim($arrFile[20]);

// 		$day18           =trim($arrFile[21]);

// 		$day19           =trim($arrFile[22]);

// 		$day20           =trim($arrFile[23]);

// 		$day21           =trim($arrFile[24]);

// 		$day22           =trim($arrFile[25]);

// 		$day23           =trim($arrFile[26]);

// 		$day24           =trim($arrFile[27]);

// 		$day25           =trim($arrFile[28]);

// 		$day26           =trim($arrFile[29]);

// 		$day27           =trim($arrFile[30]);

// 		$day28           =trim($arrFile[31]);

// 		$day29           =trim($arrFile[32]);

// 		$day30           =trim($arrFile[33]);

// 		$day31           =trim($arrFile[34]);

// 		$salesman_name 	 =trim($arrFile[0]);

// 		$route_name 	 =trim($arrFile[1]);

// 		$year            =trim($arrFile[2]);

// 		$month           =trim($arrFile[3]);

//        /* Day not assignment */

// 		/*echo '<pre>';

// 		print_r($arrFile);

// 	    echo '<pre>';

// 	    $arr=array_filter($arrFile);

// 	    print_r($arr);

//         echo sizeof($arr);

// 	    for($i=3;$i<sizeof($arr)-4;$i++)

// 	       {

// 	       	$abc[]=$arr;

// 	       }

// */

// 	if($row>0 && is_array($arrFile)) {

// 	if(empty($salesman_name) || $route_name=="Route Name*" || empty($year) || $year=="Year*" || empty($month) || $month=="Month*" ){

// 	if(empty($salesman_name)){

// 	$strErr .= "Error in Row".$row." ,".$salesman_name.",".$route_name." ,".$year." ,".$month.", ".$fields[0]." shouldn't be empty  \n";

// 	} elseif(empty($route_name)){

// 	$strErr .= "Error in Row".$row." ,".$salesman_name.",".$route_name." ,".$year." ,".$month.", ".$fields[1]." shouldn't be empty  \n";

// 	} elseif(empty($year)){

// 	$strErr .= "Error in Row".$row." ,".$salesman_name.",".$route_name." ,".$year." ,".$month.", ".$fields[2]." shouldn't be empty  \n";

// 	} elseif(empty($month)){

// 	$strErr .= "Error in Row".$row." ,".$salesman_name.",".$route_name." ,".$year." ,".$month.", ".$fields[3]." shouldn't be empty  \n";

// 	}

//     $str_err_array=array($strErr);

// 	$flag=false;

// 	}

// 	// All days should not be empty

// 	// Check Salesman exists in the system or not.

// 	if($flag){

// 	 $condi =" LOWER(salesman_name)='".$salesman_name."'";

// 	$resultset = $this->_getSelectList('table_salesman','salesman_name,salesman_id','',$condi);

// 		if(!is_array($resultset) && empty($resultset) && $resultset[0]->salesman_id == "") {

// 			$strErr .= "Error in Row".$row." ,".$salesman_name.",".$route_name." ,".$year." ,".$month." ,Salesman doesn't exists in the system. \n";

// 			$str_err_array=array($strErr);

// 			$flag=false;

// 		} else {

// 			$salesman_id = $resultset[0]->salesman_id;

// 		}

// 	}

// 	if($flag){

// 	$condi =" LOWER(route_name)='".$route_name."' ";

// 	$resultset = $this->_getSelectList('table_route','route_name,route_id','',$condi);

// 		if(!is_array($resultset) && empty($resultset) && $resultset[0]->location == "") {

// 			$strErr .= "Error in Row".$row." ,".$salesman_name.",".$route_name." Route Name doesn't exists in the system. \n";

// 			$str_err_array=array($strErr);

// 			$flag=false;

// 		}

// 		else{

// 			$route_id = $resultset[0]->route_id;

// 		}

// 	}

//  // Route Name alredy exits

// 	/*if($flag){

// 	$condi =" salesman_id ='".$salesman_id."' month='".$month."' year='".$year."' ";

// 	$resultset = $this->_getSelectList('table_route_scheduled','salesman_id,month,year','',$condi);

// 		if(!is_array($resultset) && empty($resultset) && $resultset[0]->location == "") {

// 			$strErr .= "Error in Row".$row." ,".$salesman_name.",".$route_name." Route Name doesn't exists in the system. \n";

// 			$str_err_array=array($strErr);

// 			$flag=false;

// 		}

// 		else{

// 			$route_id = $resultset[0]->route_id;

// 		}

// 	}	*/

// 	// Message show in excel sheet current month, with have current to previous date should not be updted.

// 	/*if($falg)

// 		{

// 			$condi= " ";

// 		}

// 	*/

//     if($flag)

//     {	$current_month   =date('n');

//     	$monthValue = date("m", strtotime($month));

//     	if($monthValue<$current_month && $year<=date('Year')){

//     		$strErr .= $month."  Month and Year could not be less than the current year. \n";

// 			$str_err_array=array($strErr);

// 			$flag=false;

//     	}

//     }

// 	// Insert/Update data in the system

// 	if($flag)

// 	  {

// 	  			/* Find Already exits route plans */

// 	  			 $monthValue = date("m", strtotime($month));

// 	  			 $condi =" LOWER(salesman_id)='".$salesman_id."' and  month='".$monthValue."' and year='".$year."' ";

// 				 $route_exits = $this->_getSelectList('table_route_scheduled','salesman_id,month,year,route_schedule_id','',$condi);

// 				 /*echo '<pre>';

// 				 print_r($route_exits);

// 				 echo sizeof($route_exits);*/

// 				 if(sizeof($route_exits)>0 && $route_exits[0]->route_schedule_id!="")

// 				 {

// 				  $route_schedule_id=$route_exits[0]->route_schedule_id;

// 				 }

// 				else

// 				{

// 	  	        $monthValue = date("m", strtotime($month));

// 	  			if($route_id!='') {

// 				$data['account_id']			= $_SESSION['accountId'];   // promo_desc

// 				$data['salesman_id']		= $salesman_id;

// 				$data['month']				= $monthValue;

// 				$data['year']				= $year;

// 				$data['created_date']		= date('Y-m-d');

// 				$data['status']				= 'A';

// 				$route_schedule_id = $this->_dbInsert($data,'table_route_scheduled');

// 				}

// 			   }

// 			if($route_schedule_id!="")

// 			{        $current_month   =date('n');

// 					 $dayValue        =date('d');

// 					 /* Already Exits Route details have been first delete */

// 					 $excondi =" LOWER(route_id)='".$route_id."' and route_schedule_id='".$route_schedule_id."' ";

// 				     $route_detaild_exits = $this->_getSelectList2('table_route_schedule_details','route_id,route_schedule_id','',$excondi);

// 				     if(is_array($route_detaild_exits)){

// 				     $this->mysql_query("delete from table_route_schedule_details where route_schedule_id='".$route_schedule_id."'");

// 				     }

// 			  		for($i=4;$i<sizeof($arrFile); $i++)

// 			  		{

// 			  			  if($current_month==$monthValue){

//                          if($arrFile[$i]!=""){ $key=$i; $assign_day= $key+$dayValue-4;

//                           if($route_id!='') {

// 							$data2['route_id']				= $route_id;   // promo_desc

// 							$data2['assign_day']			= $assign_day;

// 							$data2['route_schedule_id']		= $route_schedule_id;

// 							$data2['status']				= 'A';

// 							$route_detail_id = $this->_dbInsert($data2,'table_route_schedule_details');

// 							 }

// 			  			 }

// 			  		}

// 			  		else{

// 			  			if($arrFile[$i]!=""){ $key=$i; $assign_day= $key-3;

//                           if($route_id!='') {

// 							$data2['route_id']				= $route_id;   // promo_desc

// 							$data2['assign_day']			= $assign_day;

// 							$data2['route_schedule_id']		= $route_schedule_id;

// 							$data2['status']				= 'A';

// 							$route_detail_id = $this->_dbInsert($data2,'table_route_schedule_details');

// 							 }

// 			  			 }

// 			  		}

// 	  	    }  // ends loop

// 	     } // ends route_schedule_id condition

//       } // ends flag

// 		}

// 		  $row++;

// 		}

// 		fclose($file);

// 	   if($row<=1)

// 	   	return "no";

// 	   else

// 	  	return $str_err_array;

//   }

    function isRealDate($date)
    {

        if (false === strtotime($date)) {

            return false;

        }

        list($year, $month, $day) = explode('-', $date);

        return checkdate($month, $day, $year);

    }

    function uploadMonthlyRouteList($salesman)

    {

        $fields = array($AliaseUsers['route'].' Name*', 'Salesman Code*', 'Assign Day*(Mon|Tue|Wed|Thu|Fri|Sat|Sun)', 'From Date*', 'To Date*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $resultset = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            $route_name = mysql_escape_string(strtolower(trim($arrFile[0])));

            $employee_code = mysql_escape_string(strtolower(trim($arrFile[1])));

            // $username =mysql_escape_string(trim($arrFile[1]));

            //$division_name = mysql_escape_string(strtolower(trim($arrFile[2])));

            $assignDay = mysql_escape_string(trim($arrFile[2]));

//            $route_schedule_id = 0;

//            $division_id = 0;

            $route_id = 0;

//            $route_division_id = 0;

//            $salesman_division_id = 0;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == $AliaseUsers['route']." Name*" || empty($arrFile[1]) || $arrFile[1] == "Salesman Code*" || empty($arrFile[2]) || $arrFile[2] == "Assign Day*(Mon|Tue|Wed|Thu|Fri|Sat|Sat|Sun)" || empty($arrFile[3]) || empty($arrFile[4])) {

                    if (empty($arrFile[0]) || $arrFile[0] == $AliaseUsers['route']." Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", " . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Salesman Username*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", " . $fields[1] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Assign Day*(Mon|Tue|Wed|Thu|Fri|Sat|Sat|Sun)") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", " . $fields[2] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[3]) || $arrFile[3] == "From Date* (yyyy-mm-dd)") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", " . $fields[3] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[4]) || $arrFile[4] == "To Date* (yyyy-mm-dd)") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", " . $fields[4] . " shouldn't be empty. \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // Check Route Name exists in the system.

                if ($flag) {

                    $condi = " LOWER(route_name)='" . $route_name . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_route', 'route_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ",". $AliaseUsers['route']." Name doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $route_id = $resultset[0]->route_id;

                        //$route_division_id = $resultset[0]->division_id;

                    }

                }

                if ($flag) {

                    $condi = " employee_code='" . $employee_code . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_salesman as s', 'salesman_id', '', $condi . $salesman);

                    if (!is_array($resultset) && empty($resultset)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", Salesman doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $salesman_id = $resultset[0]->salesman_id;

                    }

                }

                if ($flag) {

                    if (isset($arrFile[3]) && !empty($arrFile[3])) {

                        if ($this->isRealDate($arrFile[3])) {

                            if ($arrFile[3] < date('Y-m-d')) {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", From Date should be greater than or equal to current date.\n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", Invalid From Date.\n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                if ($flag) {

                    if (isset($arrFile[4]) && !empty($arrFile[4])) {

                        if (!$this->isRealDate($arrFile[4])) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", Invalid To Date.\n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                // if($flag)

                // {

                // 	if($route_division_id > 0 && $salesman_division_id > 0)

                // 	{

                // 		if($route_division_id != $salesman_division_id)

                // 		{

                // 			$strErr .= "Error in Row".$row." ,".$arrFile[0].", ".$arrFile[1].", ".$arrFile[2].", ".$arrFile[3].", Sales Organization Mismatch of Route and Salesman.\n";

                // 			$str_err_array=array($strErr);

                // 			$flag=false;

                // 		}

                // 	}

                // }

                // Insert Route Retailers

                if ($flag) {

                    if ($route_id > 0 && $salesman_id > 0) {

                        $routeCond = " AND salesman_id='" . $salesman_id . "'";

                        $rouRec = $this->_getSelectList('table_route_schedule', 'route_schedule_id', '', $routeCond);

                        if (is_array($rouRec) && sizeof($rouRec) > 0) {

                            $route_schedule_id = $rouRec[0]->route_schedule_id;

                        } else {

                            $data = array();

                            $data['account_id'] = $_SESSION['accountId'];

                            $data['salesman_id'] = $salesman_id;

                            $data['from_date'] = date('Y-m-d', strtotime($arrFile[3]));

                            $data['to_date'] = date('Y-m-d', strtotime($arrFile[4]));

                            $data['status'] = 'A';

                            $route_schedule_id = $this->_dbInsert($data, 'table_route_schedule');

                        }

                        if ($route_schedule_id > 0) {

                            $where = " AND (Mon='" . $route_id . "' OR Tue='" . $route_id . "' OR Wed='" . $route_id . "' OR Thu='" . $route_id . "' OR Fri='" . $route_id . "' OR Sat='" . $route_id . "' OR Sun='" . $route_id . "') ";

                            $this->mysql_query("DELETE FROM table_route_schedule_by_day WHERE route_schedule_id='" . $route_schedule_id . "' $where");

                            $assign_days = explode('|', $assignDay);

//                            $days = array_filter($assign_days);

                            $data = array();

                            $data['account_id'] = $_SESSION['accountId'];

                            $data['route_schedule_id'] = $route_schedule_id;

                            $data['status'] = 'A';

                            foreach ($assign_days as $value) {

                                $day = ucwords(trim($value));

                                $arr = array('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun');

                                if (in_array($day, $arr)) {

                                    $data[$day] = $route_id;

                                }


                            }

                            $this->_dbInsert($data, 'table_route_schedule_by_day');

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /***************************************************** Add Route ******************************************************/

    function uploadRouteList()

    {

        $fields = array('ID*', 'Retailer*', 'State*', 'City*', 'Market*', 'Route Name*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $resultset = "";

        $row = 0;

        $retailer_id = "";

        $retailer_name = "";

        $state = "";

        $city = "";

        $market = "";

        $route_name = "";

        while (!feof($file)) {

            $data = array();

            $data2 = array();

            $data3 = array();

            $arrFile = fgetcsv($file);

            $flag = true;

            $retailer_id = trim($arrFile[0]);

            $retailer_name = trim($arrFile[1]);

            $state = trim($arrFile[2]);

            $city = trim($arrFile[3]);

            $market = trim($arrFile[4]);

            $route_name = trim($arrFile[5]);

            if ($row > 0 && is_array($arrFile)) {

                if (empty($retailer_id) || $retailer_id == "ID*" || empty($retailer_name) || $retailer_name == "Retailer*" || empty($state) || $state == "State*" || empty($city) || $city == "City*" || empty($market) || $market == "Market*" || empty($route_name) || $route_name == "Route Name*") {

                    if (empty($retailer_id)) {

                        $strErr .= "Error in Row" . $row . " ," . $retailer_id . "," . $retailer_name . " ," . $state . " ," . $city . "," . $market . " ," . $route_name . ", " . $fields[0] . " shouldn't be empty  \n";

                    } elseif (empty($retailer_name)) {

                        $strErr .= "Error in Row" . $row . " ," . $retailer_id . "," . $retailer_name . " ," . $state . " ," . $city . "," . $market . " ," . $route_name . " , " . $fields[1] . " shouldn't be empty  \n";

                    } elseif (empty($state)) {

                        $strErr .= "Error in Row" . $row . " ," . $retailer_id . "," . $retailer_name . " ," . $state . " ," . $city . "," . $market . " ," . $route_name . " , " . $fields[2] . " shouldn't be empty  \n";

                    } elseif (empty($city)) {

                        $strErr .= "Error in Row" . $row . " ," . $retailer_id . "," . $retailer_name . " ," . $state . " ," . $city . "," . $market . " ," . $route_name . ", " . $fields[3] . " shouldn't be empty  \n";

                    } elseif (empty($market)) {

                        $strErr .= "Error in Row" . $row . " ," . $retailer_id . "," . $retailer_name . " ," . $state . " ," . $city . "," . $market . " ," . $route_name . " , " . $fields[4] . " shouldn't be empty  \n";

                    } elseif (empty($route_name)) {

                        $strErr .= "Error in Row" . $row . " ," . $retailer_id . "," . $retailer_name . " ," . $state . " ," . $city . "," . $market . " ," . $route_name . " , " . $fields[5] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // Check State exists in the system.

                if ($flag) {

                    $condi = " LOWER(state_name)='" . $state . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('state', 'state_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->state_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $retailer_id . "," . $retailer_name . " ," . $state . " ," . $city . "," . $market . " ," . $route_name . " ,State doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $state_id = $resultset[0]->state_id;

                    }

                }

                // Check City exists in the system.

                if ($flag) {

                    $condi = " LOWER(city_name)='" . $city . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('city', 'city_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->city_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $retailer_id . "," . $retailer_name . " ," . $state . " ," . $city . "," . $market . " ," . $route_name . " , City doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $city_id = $resultset[0]->city_id;

                    }

                }

                if ($flag) {

                    $condi = " LOWER(location)='" . $market . "' and state_id='" . $state_id . "' and city='" . $city_id . "'";

                    $resultset = $this->_getSelectList('table_market', 'location', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->location == "") {

                        $strErr .= "Error in Row" . $row . " ," . $retailer_id . "," . $retailer_name . " ," . $state . " ," . $city . "," . $market . " ," . $route_name . " ,Market doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $route_name = mysql_escape_string(strtolower(trim($route_name)));

                    $condi = " LOWER(r.route_name)='" . $route_name . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_route as r', 'r.route_id,r.state_id,r.city_id', '', $condi);

                    //print_r($resultset);exit;

                    if (is_array($resultset) && !empty($resultset) && $resultset[0]->route_id != "") {

                        $route_id = $resultset[0]->route_id;

                        if ($route_id != '') {

                            $stateArr = array_filter(explode(',', $resultset[0]->state_id));

                            $cityArr = array_filter(explode(',', $resultset[0]->city_id));

                            array_push($stateArr, $state_id);

                            array_push($cityArr, $city_id);

                            $comma_separated_state = implode(",", array_unique($stateArr));

                            $comma_separated_city = implode(",", array_unique($cityArr));

                        }

                    } else {

                        $comma_separated_state = $state_id;

                        $comma_separated_city = $city_id;

                    }

                }

                if ($flag) {

                    //$itmCd = preg_replace( "/\r|\n/", "", $itmCd );

                    $retailer_name = mysql_escape_string(strtolower(trim($retailer_name)));

                    $state = mysql_escape_string(strtolower(trim($state)));

                    $city = mysql_escape_string(strtolower(trim($city)));

                    $market = mysql_escape_string(strtolower(trim($market)));

                    $condi = " LOWER(retailer_name)='" . $retailer_name . "' AND LOWER(retailer_location)='" . $market . "' AND state='" . $state_id . "' AND city='" . $city_id . "' AND retailer_id='" . $retailer_id . "' AND status = 'A' ";

                    $resultset = $this->_getSelectList('table_retailer', 'retailer_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->retailer_id == "") {

                        $strErr .= "Error in Row" . $row . "  ," . $retailer_id . "," . $retailer_name . " ," . $state . " ," . $city . "," . $market . " ," . $route_name . " ,Retailer doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $retailer_id = $resultset[0]->retailer_id;

                    }

                }

                if ($flag) {

                    if ($route_id != '' && $retailer_id != '') {

                        $condi = " route_id ='" . $route_id . "' and retailer_id='" . $retailer_id . "'";

                        $resultset = $this->_getSelectList('table_route_retailer', 'retailer_id', '', $condi);

                        if (is_array($resultset) && !empty($resultset) && $resultset[0]->retailer_id != "") {

                            $strErr .= "Error in Row" . $row . "  ," . $retailer_id . "," . $retailer_name . " ," . $state . " ," . $city . "," . $market . " ," . $route_name . " ,Retailer already mapped to the route. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                // Insert/Update data in the system

                if ($flag) {

                    if ($route_id == '') {

                        $data = array();

                        $data['account_id'] = $_SESSION['accountId'];

                        $data['state_id'] = $comma_separated_state;

                        $data['city_id'] = $comma_separated_city;

                        $data['route_name'] = $route_name;  // promo_desc

                        $data['status'] = 'A';

                        $resultRoute = $this->_dbInsert($data, 'table_route');

                    } else {

                        $data['state_id'] = $comma_separated_state;

                        $data['city_id'] = $comma_separated_city;

                        $result = $this->_dbUpdate($data, 'table_route', " route_id='" . $route_id . "'");

                    }

                    if (isset($resultRoute) && $resultRoute != '' && $route_id == '') {

                        $data2['account_id'] = $_SESSION['accountId'];   // promo_desc

                        $data2['route_id'] = $resultRoute;

                        $data2['retailer_id'] = $retailer_id;

                        $result_id = $this->_dbInsert($data2, 'table_route_retailer');

                    } else {

                        $data2['account_id'] = $_SESSION['accountId'];   // promo_desc

                        $data2['route_id'] = $route_id;

                        $data2['retailer_id'] = $retailer_id;

                        $result_id = $this->_dbInsert($data2, 'table_route_retailer');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /***************************************************** Add Route ******************************************************/

    /************************************* Upload distributor target (3rd June 2015) Gaurav ***************************************/

    function uploadDistributorTraget()

    {

        //echo "Heelloo";

        $fields = array('Distributor Code*', 'Item Code*', 'Cases Size*', 'Number Of Cases*', 'Target Type*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $resultset = "";

        $row = 0;

        $disCd = '';

        //$catName= '';

        $itmCd = '';

        $caseSize = '';

        $numberOfCases = '';

        $targetType = '';

        while (!feof($file)) {

            $data = array();

            $data2 = array();

            $data3 = array();

            $arrFile = fgetcsv($file);

            $flag = true;

            $disCd = trim($arrFile[0]);

            $itmCd = trim($arrFile[1]);

            $caseSize = trim($arrFile[2]);

            $numberOfCases = trim($arrFile[3]);

            $targetType = trim($arrFile[4]);

            $target_month = $_REQUEST['month'];

            $target_year = $_REQUEST['year'];

            //echo "<pre>"; print_r($row);

            //exit;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($disCd) || $disCd == "Distributor Code*" || empty($itmCd) || $itmCd == "Item Code*" || empty($caseSize) || $caseSize == "Cases Size*" || empty($numberOfCases) || $numberOfCases == "Number Of Cases*" || empty($targetType) || $targetType == "Target Type*") {

                    if (empty($disCd)) {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $itmCd . " ," . $caseSize . " ," . $numberOfCases . " , " . $targetType . ", " . $fields[0] . " shouldn't be empty  \n";

                    } elseif (empty($itmCd)) {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $itmCd . " ," . $caseSize . " ," . $numberOfCases . " , " . $targetType . ", " . $fields[1] . " shouldn't be empty  \n";

                    } elseif (empty($caseSize)) {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $itmCd . " ," . $caseSize . " ," . $numberOfCases . " , " . $targetType . ", " . $fields[2] . " shouldn't be empty  \n";

                    } elseif (empty($numberOfCases)) {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $itmCd . " ," . $caseSize . " ," . $numberOfCases . " , " . $targetType . ", " . $fields[3] . " shouldn't be empty  \n";

                    } elseif (empty($targetType)) {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $itmCd . " ," . $caseSize . " ," . $numberOfCases . " , " . $targetType . ", " . $fields[4] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                //echo "<pre>";print_r($disCd);

                // Check Distributor Code exists in the system.

                if ($flag) {

                    //echo "<pre>"; print_r($disCd);

                    //exit;

                    $condi = " LOWER(distributor_code)='" . mysql_escape_string(strtolower(trim($disCd))) . "' AND status = 'A' ";

                    $resultset = $this->_getSelectList('table_distributors', 'distributor_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->distributor_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $itmCd . " ," . $caseSize . " ," . $numberOfCases . " , " . $targetType . " , Distributor code doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $distributor_id = $resultset[0]->distributor_id;

                    }

                }

                // Check category exists in the system.

                // Check item exists in the system.

                if ($flag) {

                    $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower($itmCd)) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_item', 'item_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->item_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $itmCd . " ," . $caseSize . " ," . $numberOfCases . " , " . $targetType . " ,Item doesn't exists in this category or item code doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $item_id = $resultset[0]->item_id;

                    }

                }

                // Check attribute(size,color) exists in the system.

                //Check cases size in the system.

                if ($flag) {

                    if ($caseSize != "") {

                        $condi = " LOWER(case_size) = '" . mysql_escape_string(strtolower($caseSize)) . "' AND ic.item_id=" . $item_id;

                    } else {

                        $condi = " LOWER(case_size) = '1' AND ic.item_id=" . $item_id;

                    }

                    $resultset = $this->_getSelectList('table_cases as c left join table_item_case_relationship as ic on ic.case_id=c.case_id', 'c.case_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->case_id == "") {

                        $strErr .= "Error in Row" . $row . "," . $disCd . "," . $itmCd . " ," . $caseSize . " ," . $numberOfCases . " , " . $targetType . ", Cases Sizes doesn't exists in the system\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $case_id = $resultset[0]->case_id;

                    }

                }

                //Check target type in the system.

                if ($flag) {

                    $getTargetType = strtolower($targetType);

                    if ($getTargetType == "primary") {

                        $targetTypeId = 1;

                    } else if ($getTargetType == "secondary") {

                        $targetTypeId = 2;

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $itmCd . " ," . $caseSize . " ," . $numberOfCases . " , " . $targetType . " ,Target type doesn't exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $resultset = $this->_getSelectList('table_distributors_target', 'distributor_target_id', '', " distributor_id='" . $distributor_id . "' and target_month='" . $target_month . "' and target_year='" . $target_year . "' ");

                    if (sizeof($resultset) > 0) {

                        $strErr .= "Error in Row" . $row . " ," . $disCd . "," . $itmCd . " ," . $caseSize . " ," . $numberOfCases . " , " . $targetType . " ,Target already exists in the system for distributor.  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //echo "<pre>"; print_r($distributor_id);

                //exit;

                // Insert/Update data in the system

                if ($flag) {

                    $data['account_id'] = $_SESSION['accountId'];

                    $data['distributor_id'] = $distributor_id;

                    $data['target_month'] = $target_month;

                    $data['target_year'] = $target_year;

                    $data['created_date'] = date('Y-m-d');

                    $data['item_id'] = $item_id;

                    $data['case_id'] = $case_id;

                    $data['no_of_cases'] = $numberOfCases;

                    $data['target_type'] = $targetTypeId;

                    //echo "<pre>"; print_r($arrFile);

                    //exit;

                    $temData = $this->_dbInsert($data, 'table_distributors_target_temp');

                    //check insert/update only last update date in nds stock.

                }

            }

            $row++;

        }

        $disTarget = $this->_getSelectList('table_distributors_target_temp', 'account_id,distributor_id,target_month,target_year,created_date,target_type', '', " GROUP BY distributor_id,target_month,target_year,target_type");

        if (sizeof($disTarget) > 0) {

            foreach ($disTarget as $key => $value) {

                $data2['account_id'] = $_SESSION['accountId'];

                $data2['distributor_id'] = $value->distributor_id;

                $data2['target_month'] = $value->target_month;

                $data2['target_year'] = $value->target_year;

                $data2['target_type'] = $value->target_type;

                $data2['created_date'] = date('Y-m-d');

                $data2['last_update_date'] = date('Y-m-d');

                $data2['last_update_status'] = "New";

                $data2['status'] = "A";

                $disTargetID = $this->_dbInsert($data2, 'table_distributors_target');

                $disTargetItem = $this->_getSelectList('table_distributors_target_temp', 'item_id,case_id,no_of_cases,target_type', '', " account_id='" . $_SESSION['accountId'] . "' and distributor_id='" . $value->distributor_id . "' and target_month='" . $value->target_month . "' and target_year='" . $value->target_year . "' and target_type='" . $value->target_type . "'");

                if (sizeof($disTargetItem) > 0) {

                    foreach ($disTargetItem as $key => $valueItem) {

                        $getCaseList = $this->_getSelectList2('table_item_case_relationship as c left join table_cases as ca on c.case_id=ca.case_id', "ca.case_size", '', " c.item_id='" . $valueItem->item_id . "' and ca.case_id='" . $valueItem->case_id . "' ORDER BY ca.case_size", '');

                        $data3['distributor_target_id'] = $disTargetID;

                        $data3['item_id'] = $valueItem->item_id;

                        $data3['case_id'] = $valueItem->case_id;

                        $data3['no_of_cases'] = $valueItem->no_of_cases;

                        $data3['target_type'] = $valueItem->target_type;

                        $data3['total_quantity'] = ($getCaseList[0]->case_size) * $valueItem->no_of_cases;

                        $data3['last_update_date'] = date('Y-m-d');

                        $data3['last_update_status'] = "New";

                        $data3['status'] = "A";

                        $disTargetItemID = $this->_dbInsert($data3, 'table_distributors_target_item');

                    }

                }

            }

        }

        $disTargetTempDel = $this->_getTruncate('table_distributors_target_temp');

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /************************************* Upload distributor target (3rd June 2015 Gaurav) ***************************************/

    /********************************************************************************
     * DESC : Upload salesman orders by admin
     * Author : AJAY
     * Created : 29th July 2015
     *
     **/

    function uploadOrdersFile()

    {

        $fields = array('Salesman Name*', 'Salemsan Phone*', 'Distributor Code*', 'Retailer Name*', 'Retailer Phone*', 'Bill Date', 'Bill No', 'Date of Order*', 'Item Code*', 'Qty*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $resultset = "";

        $row = 0;

        $salesmanName = '';

        $salesmanPhone = '';

        $distributorCode = '';

        $retailerName = '';

        $retailerPhone = '';

        $billDate = '';

        $billNo = '';

        $dateOfOrder = '';

        $itemCode = '';

        $qty = '';

        while (!feof($file)) {

            $data = array();

            $data2 = array();

            $data3 = array();

            $arrFile = fgetcsv($file);

            $flag = true;

            $salesmanName = strtolower(trim($arrFile[0]));

            $salesmanPhone = trim($arrFile[1]);

            $distributorCode = strtolower(trim($arrFile[2]));

            $retailerName = strtolower(trim($arrFile[3]));

            $retailerPhone = trim($arrFile[4]);

            $billDate = trim($arrFile[5]);

            $billNo = trim($arrFile[6]);

            $dateOfOrder = trim($arrFile[7]);

            $dateOfOrder = date('Y-m-d', strtotime($dateOfOrder));

            $itemCode = strtolower(trim($arrFile[8]));

            $qty = trim($arrFile[9]);

            //echo "<pre>"; print_r($row);

            //exit;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($salesmanName) || $salesmanName == "Salesman Name*" || empty($salesmanPhone) || $salesmanPhone == "Salemsan Phone*" || empty($distributorCode) || $distributorCode == "Distributor Code*" || empty($retailerName) || $retailerName == "Retailer Name*" || empty($retailerPhone) || $retailerPhone == "Retailer Phone*" || empty($dateOfOrder) || $dateOfOrder == "Date of Order*" || empty($itemCode) || $itemCode == "Item Code*" || empty($qty) || $qty == "Qty*") {

                    if (empty($salesmanName)) {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . ", " . $billDate . ", " . $billNo . ", " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", " . $fields[0] . " shouldn't be empty  \n";

                    } elseif (empty($salesmanPhone)) {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . "," . $billDate . ", " . $billNo . ",  " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", " . $fields[1] . " shouldn't be empty  \n";

                    } elseif (empty($distributorCode)) {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . ", " . $billDate . ", " . $billNo . ", " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", " . $fields[2] . " shouldn't be empty  \n";

                    } elseif (empty($retailerName)) {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . ", " . $billDate . ", " . $billNo . ", " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", " . $fields[3] . " shouldn't be empty  \n";

                    } elseif (empty($retailerPhone)) {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . ", " . $billDate . ", " . $billNo . ", " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", " . $fields[4] . " shouldn't be empty  \n";

                    } elseif (empty($dateOfOrder)) {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . ", " . $billDate . ", " . $billNo . ",  " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", " . $fields[5] . " shouldn't be empty  \n";

                    } elseif (empty($itemCode)) {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . ", " . $billDate . ", " . $billNo . ", " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", " . $fields[6] . " shouldn't be empty  \n";

                    } elseif (empty($qty) && $qty > 0) {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . ", " . $billDate . ", " . $billNo . ", " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", " . $fields[7] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // Check salesman with phone number exists in the system.

                if ($flag) {

                    $condi = " LOWER(salesman_name)='" . mysql_escape_string($salesmanName) . "' AND  salesman_phome_no ='" . $salesmanPhone . "'";

                    $resultset = $this->_getSelectList('table_salesman', 'salesman_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->salesman_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . "," . $billDate . ", " . $billNo . ",  " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", invalid salesman  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $salesman_id = $resultset[0]->salesman_id;

                    }

                }

                // Check distributor with the help of distributor code exists in the system.

                if ($flag) {

                    $condi = " LOWER(distributor_code) ='" . mysql_escape_string($distributorCode) . "'";

                    $resultset = $this->_getSelectList('table_distributors', 'distributor_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->distributor_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . "," . $billDate . ", " . $billNo . ",  " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", Distributor code doesn't exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $distributor_id = $resultset[0]->distributor_id;

                    }

                }

                // Check retailer with phone number and distributor exists in the system.

                if ($flag) {

                    $condi = " LOWER(retailer_name)='" . mysql_escape_string($retailerName) . "' AND  retailer_phone_no ='" . $retailerPhone . "' AND distributor_id =" . $distributor_id;

                    $resultset = $this->_getSelectList('table_retailer', 'retailer_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->retailer_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . ", " . $billDate . ", " . $billNo . ", " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", invalid retailer or retailer doesn't mapped with this ditributor  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $retailer_id = $resultset[0]->retailer_id;

                    }

                }

                // Check item exists in the system.

                if ($flag) {

                    $condi = " LOWER(item_code)='" . mysql_escape_string($itemCode) . "'";

                    $resultset = $this->_getSelectList('table_item', 'item_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->item_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . ", " . $billDate . ", " . $billNo . ", " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", item doesn't exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $item_id = $resultset[0]->item_id;

                    }

                }

                // Check Item Price

                if ($flag) {

                    $resultset = $this->_getSelectList('table_price', 'item_mrp, item_dp', '', " item_id='" . $item_id . "' AND start_date<='" . date('Y-m-d') . "' AND end_date>='" . date('Y-m-d') . "'");

                    if (sizeof($resultset) == 0 || $resultset[0]->item_mrp <= 0) {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . ", " . $billDate . ", " . $billNo . ", " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", item price(mrp) doesn't exists in the system or should not be zero. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $item_price = $resultset[0]->item_mrp;

                    }

                }

                // Check date of order is valid date or not

                if ($flag) {

                    if (strtotime($dateOfOrder) == strtotime('1970-01-01')) {

                        $strErr .= "Error in Row" . $row . " ," . $salesmanName . "," . $salesmanPhone . " ," . $distributorCode . " ," . $retailerName . " , " . $retailerPhone . ", " . $billDate . ", " . $billNo . ", " . $dateOfOrder . ", " . $itemCode . ",  " . $qty . ", date of order is not in valid format(Y-m-d)  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                $order_id = NULL;

                if ($billNo > 0 && !empty($billDate)) {

                    $order_status = "D";

                } else {

                    $order_status = "A";

                }

                // Add order into table_order

                if ($flag) {

                    if ($salesman_id > 0 && $distributor_id > 0 && $retailer_id > 0 && $item_id) {

                        $data = array();

                        $resultset = $this->_getSelectList('table_order', 'order_id', '', " salesman_id='" . $salesman_id . "' AND distributor_id='" . $distributor_id . "' AND retailer_id ='" . $retailer_id . "' AND date_of_order = '" . $dateOfOrder . "'");

                        if (sizeof($resultset) > 0 && $resultset[0]->order_id > 0) {

                            $order_id = $resultset[0]->order_id;

                        } else { // Insert new Order

                            $data['account_id'] = $_SESSION['accountId'];

                            $data['salesman_id'] = $salesman_id;

                            $data['distributor_id'] = $distributor_id;

                            $data['retailer_id'] = $retailer_id;

                            $data['bill_date'] = $billDate;

                            $data['bill_no'] = $billNo;

                            $data['date_of_order'] = $dateOfOrder;

                            $data['time_of_order'] = NULL;

                            $data['lat'] = NULL;

                            $data['lng'] = NULL;

                            $data['accuracy_level'] = NULL;

                            $data['comments'] = NULL;

                            $data['order_type'] = "Yes"; // Yes , No , Adhoc

                            $data['location_provider'] = NULL;

                            $data['tag_id'] = NULL;

                            $data['tag_description'] = NULL;

                            $data['total_invoice_amount'] = 0;

                            $data['acc_total_invoice_amount'] = 0;

                            $data['last_update_date'] = $date;

                            $data['last_update_status'] = 'New';

                            $data['order_status'] = $order_status;  // A = New Order, I = Processed , D = Dispatched

                            // Actual Shceme Details

                            $data['discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage

                            $data['discount_amount'] = NULL;

                            $data['dicount_percentage'] = NULL;

                            $data['free_item_id'] = NULL;     // FOC Item ID If discount type FOC

                            $data['free_item_qty'] = NULL;     // How many FOC Item qty

                            $data['discount_id'] = NULL;     // Scheme ID

                            $data['discount_desc'] = NULL;     // Scheme Description

                            $data['acc_discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage

                            $data['acc_discount_amount'] = NULL;

                            $data['acc_dicount_percentage'] = NULL;

                            $data['acc_free_item_id'] = NULL;     // FOC Item ID If discount type FOC

                            $data['acc_free_item_qty'] = NULL;     // How many FOC Items

                            $data['acc_discount_id'] = NULL;     // Scheme ID

                            $order_id = $this->_dbInsert($data, 'table_order');

                        }

                        /***************************************************************************************
                         * DESC : Add/Update order detail items
                         * Author : AJAY
                         * Created : 29th June 2015
                         *
                         **/

                        if (isset($order_id) && $order_id > 0 && $item_id > 0) {

                            $data = array();

                            $discount_id = NULL;

                            $discount_desc = NULL;

                            $discount_type = NULL;

                            $discount_amount = NULL;

                            $discount_percentage = NULL;

                            $free_item_id = NULL;

                            $total_free_quantity = NULL;

                            $acc_discount_type = NULL;

                            $acc_discount_amount = NULL;

                            $acc_dicount_percentage = NULL;

                            $acc_free_item_id = NULL;

                            $acc_free_item_qty = NULL;

                            $acc_discount_id = NULL;

                            if ($qty > 0) {

                                $resultset = $this->_getSelectList2('table_order_detail', 'item_id', '', " order_id='" . $order_id . "' AND item_id='" . $item_id . "'");

                                if (sizeof($resultset) > 0 && $resultset[0]->item_id > 0) {

                                    $data['price'] = $item_price;

                                    $data['quantity'] = $qty;

                                    $data['total'] = $qty * $item_price;

                                    $data['acc_quantity'] = $qty;

                                    $data['acc_total'] = $data['total'];

                                    $data['last_update_date'] = $date;

                                    $data['last_update_status'] = 'Update';

                                    $this->_dbUpdate2($data, 'table_order_detail', " order_id='" . $order_id . "' AND item_id='" . $item_id . "'");

                                } else { // Insert new Order

                                    $data['order_id'] = $order_id;

                                    $data['item_id'] = $item_id;

                                    $data['free_item_id'] = $free_item_id;

                                    $data['price'] = $item_price;

                                    $data['quantity'] = $qty;

                                    $data['total'] = $qty * $item_price;

                                    $data['acc_quantity'] = $qty;

                                    $data['acc_total'] = $data['total'];

                                    $data['color_id'] = NULL;

                                    $data['color_type'] = NULL;

                                    $data['type'] = 1;     // 1 = Normal, 2 = Free Item

                                    $data['price_type'] = 1;     // 1 = MRP , 2 = DP , 3 = PTR

                                    $data['discount_id'] = $discount_id;

                                    $data['discount_desc'] = $discount_desc;

                                    $data['discount_type'] = $discount_type;

                                    $data['discount_amount'] = $discount_amount;

                                    $data['discount_percentage'] = $discount_percentage;

                                    $data['total_free_quantity'] = $total_free_quantity;

                                    $data['last_update_date'] = $date;

                                    $data['last_update_status'] = 'New';

                                    $data['order_detail_status'] = '1';   // 1 = New , 2 = Accepted, 3 = Rejected, 4 = Discount Applicable, 5 = Discount Not Applicable

                                    $data['tag_id'] = NULL;

                                    $data['acc_discount_type'] = $acc_discount_type;

                                    $data['acc_discount_amount'] = $acc_discount_amount;

                                    $data['acc_dicount_percentage'] = $acc_dicount_percentage;

                                    $data['acc_free_item_id'] = $acc_free_item_id;

                                    $data['acc_free_item_qty'] = $acc_free_item_qty;

                                    $data['acc_discount_id'] = $acc_discount_id;

                                    $this->_dbInsert($data, 'table_order_detail'); // Saved item detail

                                }

                            } // End of check quantity

                            /************************************************************************
                             * DESC : Update table order total invoice amount (get total amount from table_order_detail)
                             * Auhtor : AJAY
                             * Created : 29th July 2015
                             *
                             *
                             **/

                            $data = array();

                            $getTtlInvoiceAmount = $this->_getSelectList2('table_order_detail', 'SUM(total) AS total_invoice_amount', '', " order_id='" . $order_id . "' GROUP BY order_id ");

                            if (sizeof($getTtlInvoiceAmount) > 0 && $getTtlInvoiceAmount[0]->total_invoice_amount > 0) {

                                $data['total_invoice_amount'] = $getTtlInvoiceAmount[0]->total_invoice_amount;

                                $data['acc_total_invoice_amount'] = $getTtlInvoiceAmount[0]->total_invoice_amount;

                                $this->_dbUpdate2($data, 'table_order', " order_id=" . $order_id);

                            }

                        } // end of check order Id

                    }  // end of check retailer id, salesman id, distributor id

                } // end of flag tag

            } // check size of row read by fgetcsv function

            $row++;

        } // End of while loop

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }    // End of function

    /************************************* Start Upload Stockist ***************************************/

    function uploadStockistFile()

    {

//        $fields = array('Stockist Name*', 'Phone No1*', 'Phone No2', 'Phone No3', 'Stockist Address', 'State*', 'District*', 'City*', 'zipcode', 'Contact Person1*', 'contact Phone No1*', 'Contact Person2', 'contact Phone No2', 'Contact Person3', 'contact Phone No3', 'Email-ID1*', 'Email-ID2', 'Email-ID3', 'Number To Send SMS*', 'Stockist Class', 'Stockist Region', 'Stockist Code*', 'Username', 'Password');

        $fields = array($this->AliaseUsers['stockist'] . '  Name*', $this->AliaseUsers['stockist'] . ' Code*', 'Phone No1*', 'State*', 'District*',
            'City*', 'zipcode', $this->AliaseUsers['stockist'] . ' Address', 'Contact Person', 'Contact Phone No.', 'Email-ID1*', 'Username', 'Password');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[3]) || empty($arrFile[4]) || empty($arrFile[5])) {

                    if (empty($arrFile[0]) || $arrFile[0] == $this->AliaseUsers['stockist'] . " Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , " . $fields[0] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , " . $fields[1] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[2])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , " . $fields[2] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[3])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , " . $fields[3] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[4])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                            $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , " . $fields[4] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[5])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                            $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , " . $fields[5] . " shouldn't be empty  \n";

                    }
//                    else if (empty($arrFile[10])) {
//
//                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
//                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
//                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
//                            $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , " . $fields[10] . " shouldn't be empty  \n";
//
//                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // Stockist Check

                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . " AND stockist_phone_no='" .
                        mysql_escape_string(strtolower(trim($arrFile[2]))) . "' AND  LOWER(stockist_name)='" . mysql_escape_string($this->clean(strtolower(trim($arrFile[0])))) . "' AND status = 'A'";

                    $aDisRec = $this->_getSelectList('table_stockist', '*', '', $condi);

                    if (is_array($aDisRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                            $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ,already exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    if (!is_numeric(trim($arrFile[2]))) {

                        $$strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                            $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ,Please Provide the valid Phone Number. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $phnNo = trim($arrFile[2]);

                    $pattern = "/^[0-9+\-]*$/";

                    if (!preg_match($pattern, $phnNo)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . "," . $arrFile[21] . " ,Please Provide The Valid Phone Number. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }
                // State Check

                if ($flag) {

                    // Get State ID with the help of State Name

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower(trim($arrFile[3]))) . "' AND status = 'A' ";

                    $StateRec = $this->_getSelectList2('state', "state_id,country_id", '', $condi);

                    if (is_array($StateRec) && (count($StateRec) > 0)) {

                        $state_id = $StateRec[0]->state_id;

                        $country_id = $StateRec[0]->country_id;

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                            $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , State does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // District Check

                if ($flag) {

                    $condi = " LOWER(city_name)='" . mysql_escape_string(strtolower(trim($arrFile[4]))) . "' AND state_id='" . $state_id . "' AND status = 'A' ";

                    $CityRec = $this->_getSelectList2('city', "city_id", '', $condi);

                    if (is_array($CityRec) && (count($CityRec) > 0)) {

                        $city_id = $CityRec[0]->city_id;

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                            $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , District does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // City Check

                if ($flag) {

                    $condi = " LOWER(location_name)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", strtolower(trim($arrFile[5])))) . "' AND state_id='" . $state_id . "' AND city_id='" . $city_id . "' AND status = 'A'";

                    $locRec = $this->_getSelectList2('table_location', "location_id", '', $condi);
                    if (is_array($locRec) && (count($locRec) > 0)) {

                        $location_id = $locRec[0]->location_id;

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                            $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , City does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // 	Check Stockist Class Name '

//                if (!empty($arrFile[19])) {
//
//                    $condi = " LOWER(relationship_code)='" . mysql_escape_string(strtolower($arrFile[19])) . "' AND status = 'A'";
//
//                    $RelationRec = $this->_getSelectList('table_relationship', "relationship_id", '', $condi);
//
//                    if (is_array($RelationRec)) {
//
//                        $relationshipId = $RelationRec[0]->relationship_id;
//
//                    } else {
//
//                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . "," . $arrFile[21] . " ," . $arrFile[22] . "," . $arrFile[23] . " , Stockist Class does not exists. \n";
//
//                        $str_err_array = array($strErr);
//
//                        $flag = false;
//
//                    }
//
//                }

                // Check Stockist region

//                if (!empty($arrFile[20])) {
//
//                    $condi = " LOWER(region_name)='" . mysql_escape_string(strtolower($arrFile[20])) . "' AND status = 'A'";
//
//                    $RegionRec = $this->_getSelectList('table_region', "region_id", '', $condi);
//
//                    if (is_array($RegionRec)) {
//
//                        $regionId = $RegionRec[0]->region_id;
//
//                    } else {
//
////                        $region = array();
//
////                        $region['account_id'] = $this->clean($_SESSION['accountId']);
//
////                        $region['region_name'] = mysql_escape_string($this->clean($arrFile[20]));
//
////                        $region['status'] = 'A';
//
////                        $regionId = $this->_dbInsert($region, 'table_region');
//
//                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[18] . "," . $arrFile[19] . "," . $arrFile[20] . "," . $arrFile[21] . " ," . $arrFile[22] . "," . $arrFile[23] . " , Region does not exists. \n";
//
//                        $str_err_array = array($strErr);
//
//                        $flag = false;
//
//                    }
//
//                }

                if ($flag) {
                    $condi = " LOWER(country_id)='" . mysql_escape_string($country_id) . "' AND status = 'A' ";

                    $StRec = $this->_getSelectList2('country', "contact_max_length,contact_min_length", '', $condi);

                    if (is_array($StRec) && (count($StRec) > 0)) {
                        $cnt_1 = strlen(trim($arrFile[2]));
                        $cnt_2 = strlen(trim($arrFile[9]));

                        if ($cnt_1 >= $StRec[0]->contact_min_length && $cnt_1 <=
                            $StRec[0]->contact_max_length) {
                            $phone_no = trim($arrFile[2]);

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Phone number " . $arrFile[2] . " \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                        if (!empty($arrFile[9])) {
                            if ($cnt_2 >= $StRec[0]->contact_min_length && $cnt_2 <=
                                $StRec[0]->contact_max_length) {
                                $phone_no1 = trim($arrFile[9]);
                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[9] . "\n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        } else {
                            $phone_no1 = trim($arrFile[9]);
                        }

                    }
                }

                // Check for Stockist code

                if ($flag) {

                    $condi = " LOWER(stockist_code)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' AND status = 'A' ";

                    $aDisCode = $this->_getSelectList('table_stockist', '*', '', $condi);

                    if (is_array($aDisCode) && (count($aDisCode) > 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                            $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , Stockist code already exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //check username already exists or not

                if ($flag) {

                    if ((isset($arrFile[11]) && !empty($arrFile[11])) && (isset($arrFile[12]) && !empty($arrFile[12])
                        )) {

                        $condi = " LOWER(username)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "",
                                strtolower(trim($arrFile[11])))) . "' AND status = 'A' ";

                        $aDisCode = $this->_getSelectList2('table_web_users', '*', '', $condi);

                        if (is_array($aDisCode)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , Username already exists in the system. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                // Database Insert Query

                if ($flag) {

                    $data = array();

                    //$str = preg_replace('/[^A-Za-z0-9\. -]/', '', $str);

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['Stockist_name'] = mysql_escape_string($this->clean(trim($arrFile[0])));

                    $data['Stockist_address'] = mysql_escape_string($this->clean(trim($arrFile[7])));

                    $data['Stockist_location'] = mysql_escape_string($this->clean(trim($arrFile[5])));

                    /*add relationship class and region */

//                    $data['relationship_id'] = $relationshipId;
//
//                    $data['region_id'] = $regionId;

                    $data['country'] = $country_id;

                    $data['state'] = $this->clean($state_id);

                    $data['city'] = $this->clean($city_id);

                    $data['location'] = $this->clean($location_id);

                    $data['zipcode'] = mysql_escape_string(trim($arrFile[6]));

                    $data['Stockist_phone_no'] = mysql_escape_string($this->clean($phone_no));

//                    $data['Stockist_phone_no2'] = mysql_escape_string($this->clean($arrFile[2]));
//
//                    $data['Stockist_phone_no3'] = mysql_escape_string($this->clean($arrFile[3]));

                    $data['Stockist_email'] = mysql_escape_string(trim($arrFile[10]));

//                    $data['Stockist_email2'] = mysql_escape_string($arrFile[16]);
//
//                    $data['Stockist_email3'] = mysql_escape_string($arrFile[17]);

                    $data['contact_person'] = mysql_escape_string($this->clean(trim($arrFile[8])));

//                    $data['contact_person2'] = mysql_escape_string($this->clean($arrFile[11]));
//
//                    $data['contact_person3'] = mysql_escape_string($this->clean($arrFile[13]));

                    $data['contact_number'] = mysql_escape_string($this->clean($phone_no1));

//                    $data['contact_number2'] = mysql_escape_string($this->clean($arrFile[12]));
//
//                    $data['contact_number3'] = mysql_escape_string($this->clean($arrFile[14]));

//                    $data['sms_number'] = mysql_escape_string($this->clean($arrFile[18]));

                    $data['Stockist_code'] = mysql_escape_string($this->clean(trim($arrFile[1])));

                    $data['start_date'] = date('Y-m-d');

                    // $data['end_date'] = $this->clean($_SESSION['EndDate']); //commented by sachin as per dhavika's request

                    $data['status'] = 'A';

                    $stockist_id = $this->_dbInsert($data, 'table_stockist');

                    //Todo Start : sudhanshu 20 may 2024 : shiiping address insert in mapping table
                    if (trim($arrFile[7]) != '') {
                        $addr['stockist_id'] = $stockist_id;
                        $addr['account_id'] = $_SESSION['accountId'];
                        $addr['address'] = trim($arrFile[7]);
                        $addr['zipcode'] = mysql_escape_string(trim($arrFile[6]));
                        $addr['status'] = 'A';
                        $addr['created_at'] = date('Y-m-d H:i:s');
                        $addr['updated_at'] = date('Y-m-d H:i:s');
                        $adrId = $this->_dbInsert($addr, 'table_stockist_address');

                        $datat2['address_id'] = $adrId;
                        $this->_dbUpdate($datat2, 'table_stockist', " stockist_id=" . $stockist_id);

                    }
                    //Todo Start : sudhanshu 20 may 2024 : shiiping address insert in mapping table

                    if ($stockist_id > 0) {

                        //create login

                        if ((isset($arrFile[11]) && !empty($arrFile[11])) && (isset($arrFile[12]) && !empty
                                ($arrFile[12]))) {

                            $disLogin = [];

                            $disLogin['account_id'] = $_SESSION['accountId'];

                            $disLogin['username'] = trim($arrFile[11]);

                            $disLogin['password'] = md5($arrFile[12]);

                            $disLogin['email_id'] = trim($arrFile[10]);

                            $disLogin['stockist_id'] = $stockist_id;

                            $disLogin['user_type'] = 7;

                            $disLogin['start_date'] = $_SESSION['StartDate'];

                            // $disLogin['end_date'] = $_SESSION['EndDate']; //commented by sachin as per dhavika's request

                            $disLogin['status'] = 'A';

                            $this->_dbInsert($disLogin, 'table_web_users');

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /************************************* End Upload Stockist ***************************************/

    /*********************************** Import Stockist STOCK *************************************************/

    function uploadStockistStock_3april_sfa_code()

    {

        $fields = array('Stockist Code*', 'Item Code*', 'Bill No*', 'Bill Date*', 'Quantity*', 'Batch No', 'Rate', 'Invoice Value', 'Taxable Value', 'IGST Amount', 'CGST Amount', 'SGST Amount', 'Cess Amount');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $resultset = "";

        $row = 0;

        $check = true;

        $checkStockistStockFeature = $this->getAccountFeaturesList();

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                $stockist_code = mysql_escape_string(strtolower(trim($arrFile[0])));

                $item_code = mysql_escape_string(strtolower(trim($arrFile[1])));

                $bill_no_requested = trim($arrFile[2]);

                $bill_date_requested = trim($arrFile[3]);

                $stock_value = trim($arrFile[4]);

                $batch_no = mysql_escape_string(strtolower(trim($arrFile[5])));

                $price = trim($arrFile[6]);

                $invoice_value = trim($arrFile[7]);

                $taxable_value = trim($arrFile[8]);

                $igst_amount = trim($arrFile[9]);

                $cgst_amount = trim($arrFile[10]);

                $sgst_amount = trim($arrFile[11]);

                $cess_amount = trim($arrFile[12]);


                $billdatecondi = "";

                if (empty($arrFile[0]) || $arrFile[0] == "Stockist Code*" || empty($arrFile[1]) || $arrFile[1] == "Item Code*" || empty($arrFile[2]) || $arrFile[2] == "Bill No*" || empty($arrFile[3]) || $arrFile[3] == "Bill Date*" || empty($arrFile[4]) || $arrFile[4] == "Quantity*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "Stockist Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " ," . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Item Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " ," . $fields[1] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Bill No*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " ," . $fields[2] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[3]) || $arrFile[3] == "Bill Date*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " ," . $fields[3] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[4]) || $arrFile[4] == "Quantity*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " ," . $fields[4] . " shouldn't be empty. \n";

                    }

                    $flag = false;

                    $check = false;

                    $str_err_array = array($strErr);

                }

                if ($flag) {

                    if (!empty($bill_no_requested)) {

                        $bill_no = mysql_escape_string($bill_no_requested);

                        $billdatecondi .= "AND bill_no = '" . $bill_no . "'";

                    }

                    if (!empty($bill_date_requested)) {

                        $bill_date = date('Y-m-d', strtotime($bill_date_requested));

                        $billdatecondi .= "AND bill_date = '" . $bill_date . "'";

                    }

                }

                // Check Stockist Code exists in the system.

                if ($flag) {

                    $condi = " LOWER(stockist_code)='" . $stockist_code . "' AND status = 'A' ";

                    $resultset = $this->_getSelectList('table_stockist', 'stockist_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->stockist_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " , Stockist Code doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                        $check = false;

                    } else {

                        $stockist_id = $resultset[0]->stockist_id;

                    }

                }

                // Check category exists in the system.

                /*if($flag){

				$condi =" LOWER(category_name)='".$category_name."'";

				$resultset = $this->_getSelectList('table_category','category_id','',$condi);

				if(!is_array($resultset) && empty($resultset) && $resultset[0]->category_id == "") {

					$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4].",".$arrFile[5]." ,".$arrFile[6]." , Category doesn't exists in the system.\n";

					$str_err_array=array($strErr);

					$flag=false;

				} else {

					$category_id = $resultset[0]->category_id;

				}

			}*/

                // Check item exists in the system.

                if ($flag) {

                    $condi = " LOWER(item_code)='" . $item_code . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_item', 'item_id,category_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->item_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " , Item doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                        $check = false;

                    } else {

                        $item_id = $resultset[0]->item_id;

                        $category_id = $resultset[0]->category_id;

                    }

                }

                // Check attribute( cases size) exists in the system.

                if ($flag) {

                    $condi = "ic.item_id=" . $item_id;

                    $resultset = $this->_getSelectList('table_cases as c left join table_item_case_relationship as ic on ic.case_id=c.case_id', 'c.case_id,case_size', '', $condi);

                    $case_size = $resultset[0]->case_size;

                    $case_id = $resultset[0]->case_id;

                }

                // Check attribute( cases id) exists in the system.

                if ($flag) {

                    if (empty($batch_no)) {

                        $batch_no = 'No Batch';

                    }

                    $condi = " LOWER(color_code)='" . strtolower($batch_no) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('table_color', 'color_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->color_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " ,Batch No doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                        $check = false;

                    } else {

                        $color_id = $resultset[0]->color_id;

                    }

                }

                $data = array();

                // Insert/Update data in the table_item_stockist_stk_inprocess table , status = 'I'  unaccepted stock

                if ($flag) {

                    // $condi =" stockist_id = '".$stockist_id."' AND attribute_value_id ='".$case_id."' AND item_id ='".$item_id."' AND category_id ='".$category_id."' AND color_id = '".$color_id."' ".$billdatecondi;

                    $condi = " stockist_id = '" . $stockist_id . "' AND item_id ='" . $item_id . "' AND category_id ='" . $category_id . "' AND color_id = '" . $color_id . "' " . $billdatecondi;

                    $resultset = $this->_getSelectList('table_item_stockist_stk_inprocess', 'stockist_stk_inpro_id, rec_stock_value', '', $condi . " AND status = 'I' ");

                    if (is_array($resultset) && sizeof($resultset) > 0) {

                        $stockist_stk_inpro_id = $resultset[0]->stockist_stk_inpro_id;

                        $Cond = "stockist_stk_inpro_id = '" . $stockist_stk_inpro_id . "' ";

                        $data['rec_stock_value'] = $stock_value;

                        $data['price'] = $price;

                        $data['invoice_value'] = $invoice_value;

                        $data['taxable_value'] = $taxable_value;

                        $data['igst_amount'] = $igst_amount;

                        $data['cgst_amount'] = $cgst_amount;

                        $data['sgst_amount'] = $sgst_amount;

                        $data['cess_amount'] = $cess_amount;

                        $data['last_update_datetime'] = date('Y-m-d H:i:s');

                        $result = $this->_dbUpdate($data, 'table_item_stockist_stk_inprocess', $Cond);

                    } else {

                        $asRes = $this->_getSelectList('table_item_stockist_stk_inprocess', 'stockist_stk_inpro_id, rec_stock_value, acpt_stock_value', '', $condi . " AND status = 'A' ");

                        if (is_array($asRes) && sizeof($asRes) > 0) {

                            // $Cond = " stockist_id = '".$stockist_id."' AND item_id = '".$item_id."' AND category_id = '".$category_id."' AND attribute_value_id = '".$case_id."' AND color_id = '".$color_id."' ";

                            $Cond = " stockist_id = '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "' ";

                            $resultRes = $this->_getSelectList2('table_item_stockist_stock', 'stockist_stk_id, stockist_stock_value', '', $Cond);

                            $data = array();

                            if (is_array($resultRes) && sizeof($resultRes) > 0) {

                                $data['stockist_stock_value'] = ($resultRes[0]->stockist_stock_value - $asRes[0]->acpt_stock_value);

                                $data['last_updated_date'] = date('Y-m-d');

                                $data['last_update_datetime'] = date('Y-m-d H:i:s');

                                $whereCond = "stockist_stk_id = '" . $resultRes[0]->stockist_stk_id . "'";

                                $this->_dbUpdate($data, 'table_item_stockist_stock', $whereCond);

                            }

                            // $ndcCond = "item_id = '".$item_id."' AND category_id = '".$category_id."' AND attribute_value_id = '".$case_id."' AND color_id = '".$color_id."'";

                            $ndcCond = "item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";

                            $resultNDC = $this->_getSelectList2('table_item_ndc_stock', 'stock_id, stock_value', '', $ndcCond);

                            $data = array();

                            if (is_array($resultNDC) && sizeof($resultNDC) > 0) {

                                $data['stock_value'] = ($resultNDC[0]->stock_value + $asRes[0]->acpt_stock_value);

                                $data['last_updated_date'] = date('Y-m-d');

                                $data['last_update_datetime'] = date('Y-m-d H:i:s');

                                $whereCond = "stock_id = '" . $resultNDC[0]->stock_id . "'";

                                $this->_dbUpdate($data, 'table_item_ndc_stock', $whereCond);

                            }

                            // $ndcActCond = $ndcCond." AND stock_id = '".$resultNDC[0]->stock_id."' AND stockist_stk_inpro_id = '".$asRes[0]->stockist_stk_inpro_id."' AND status = 'GRN' ";

                            // mysql_query("DELETE FROM table_item_ndc_stock_activity WHERE ".$ndcActCond);

                            $data = array();

                            $data['rec_stock_value'] = $stock_value;

                            $data['acpt_stock_value'] = 0;

                            $data['last_update_datetime'] = date('Y-m-d H:i:s');

                            $data['created_datetime'] = date('Y-m-d H:i:s');

                            $data['status'] = 'I';

                            $data['price'] = $price;

                            $data['invoice_value'] = $invoice_value;

                            $data['taxable_value'] = $taxable_value;

                            $data['igst_amount'] = $igst_amount;

                            $data['cgst_amount'] = $cgst_amount;

                            $data['sgst_amount'] = $sgst_amount;

                            $data['cess_amount'] = $cess_amount;

                            $whereCnd = "stockist_stk_inpro_id = '" . $asRes[0]->stockist_stk_inpro_id . "'";

                            $result = $this->_dbUpdate($data, 'table_item_stockist_stk_inprocess', $whereCnd);

                        } else {

                            $data = array();

                            $data['account_id'] = $this->clean($_SESSION['accountId']);

                            $data['stockist_id'] = $this->clean($stockist_id);

                            $data['item_id'] = $this->clean($item_id);

                            $data['category_id'] = $this->clean($category_id);

                            //$data['attribute_value_id']= $this->clean($case_id);

                            $data['color_id'] = $this->clean($color_id);

                            $data['bill_date'] = $this->clean($bill_date);

                            $data['bill_no'] = $this->clean($bill_no);

                            $data['rec_stock_value'] = $stock_value;

                            $data['last_update_datetime'] = date('Y-m-d H:i:s');

                            $data['created_datetime'] = date('Y-m-d H:i:s');

                            $data['status'] = 'I';

                            $data['price'] = $price;

                            $data['invoice_value'] = $invoice_value;

                            $data['taxable_value'] = $taxable_value;

                            $data['igst_amount'] = $igst_amount;

                            $data['cgst_amount'] = $cgst_amount;

                            $data['sgst_amount'] = $sgst_amount;

                            $data['cess_amount'] = $cess_amount;

                            $this->_dbInsert($data, 'table_item_stockist_stk_inprocess');


                            $condi = "stockist_id ='" . $stockist_id . "' and item_id='" . $item_id . "' and category_id ='" .
                                $category_id . "' and color_id='" . $color_id . "'";

                            $resultstk = $this->_getSelectList('table_item_stockist_stock', 'stockist_stk_id', '',
                                $condi);

                            if (is_array($resultstk) && !empty($resultstk) && count($resultstk) > 0) {

                                $stockist_stk_id = $resultstk[0]->stockist_stk_id;

                                $stockist_stock_value = $resultstk[0]->stockist_stock_value;

                                $total_stock = ($stock_value + $stockist_stock_value);

                                //  Update Stockist stock

                                $data1['stockist_stock_value'] = $total_stock;

                                $data1['last_updated_date'] = date('Y-m-d');

                                $data1['last_update_datetime'] = date('Y-m-d H:i:s');

                                $WhereCond = "stockist_stk_id = '" . $stockist_stk_id . "' ";

                                $this->_dbUpdate($data1, 'table_item_stockist_stock', $WhereCond);

                            } else {

                                // insert Stockist stock

                                $data1['account_id'] = $this->clean($_SESSION['accountId']);

                                $data1['stockist_id'] = $stockist_id;

                                $data1['item_id'] = $item_id;

                                $data1['category_id'] = $category_id;

                                //$data['attribute_value_id'] = $attribute_value_id;

                                $data1['color_id'] = $color_id;

                                $data1['stockist_stock_value'] = 0;

                                $data1['last_updated_date'] = date('Y-m-d');

                                $data1['last_update_datetime'] = date('Y-m-d H:i:s');

                                $result = $this->_dbInsert($data1, 'table_item_stockist_stock');

                            }


                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        // if ($check) {
        if ($check && in_array(173, $checkStockistStockFeature)) {

            $this->getStockistStock();

        }


        // }

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    function uploadStockistStock()
    {
        $fields = array('Stockist Code*', 'Item Code*', 'Bill No*', 'Bill Date*', 'Quantity*', 'Rate', 'Invoice Value', 'Taxable Value', 'IGST Amount', 'CGST Amount', 'SGST Amount', 'Cess Amount');
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $resultset = "";
        $row = 0;
        $check = true;
        $_objAdmin = new Admin();
        $checkStockistStockFeature = $this->getAccountFeaturesList();
        while (!feof($file)) {
            $arrFile = fgetcsv($file);
            $flag = true;
            if ($row > 0 && is_array($arrFile)) {
                $stockist_code = mysql_escape_string(strtolower(trim($arrFile[0])));
                $item_code = mysql_escape_string(strtolower(trim($arrFile[1])));
                $bill_no_requested = trim($arrFile[2]);
                $bill_date_requested = trim($arrFile[3]);
                $stock_value = trim($arrFile[4]);
                //$batch_no 				= mysql_escape_string(strtolower(trim($arrFile[5])));
                $batch_no = '';
                $bill_type = "Invoice";
                $price = trim($arrFile[5]);
                $invoice_value = trim($arrFile[6]);
                $taxable_value = trim($arrFile[7]);
                $igst_amount = trim($arrFile[8]);
                $cgst_amount = trim($arrFile[9]);
                $sgst_amount = trim($arrFile[10]);
                $cess_amount = trim($arrFile[11]);


                $billdatecondi = "";
                if (empty($arrFile[0]) || $arrFile[0] == "Stockist Code*" || empty($arrFile[1]) || $arrFile[1] == "Item Code*" || empty($arrFile[2]) || $arrFile[2] == "Bill No*" || empty($arrFile[3]) || $arrFile[3] == "Bill Date*" || empty($arrFile[4]) || $arrFile[4] == "Quantity*") {
                    if (empty($arrFile[0]) || $arrFile[0] == "Stockist Code*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " ," . $fields[0] . " shouldn't be empty. \n";
                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Item Code*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " ," . $fields[1] . " shouldn't be empty. \n";
                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Bill No*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " ," . $fields[2] . " shouldn't be empty. \n";
                    } elseif (empty($arrFile[3]) || $arrFile[3] == "Bill Date*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " ," . $fields[3] . " shouldn't be empty. \n";
                    } elseif (empty($arrFile[4]) || $arrFile[4] == "Quantity*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " ," . $fields[4] . " shouldn't be empty. \n";
                    }
                    $flag = false;
                    $check = false;
                    $str_err_array = array($strErr);
                }
                if ($flag) {
                    if (!empty($bill_no_requested)) {
                        $bill_no = mysql_escape_string($bill_no_requested);
                        $billdatecondi .= " AND bill_no = '" . $bill_no . "'";
                    }
                    if (!empty($bill_date_requested)) {
                        $bill_date = date('Y-m-d', strtotime($bill_date_requested));
                        $billdatecondi .= " AND bill_date = '" . $bill_date . "'";

                        //Tood Start : Sudhanshu 05 April 2024 : add validation for Import Distributor Stock  user can upload last month to current date
                        $lastMonth = date('Y-m', strtotime('last month'));
                        $curretDate = date('Y-m-d');
                        $billMonth = date('Y-m', strtotime($bill_date));

                        if (($billMonth >= $lastMonth) && ($bill_date <= $curretDate)) {

                            $billDateValidate = true;

                        }

                        if (!$billDateValidate) {
                            $strErr .= "Error in Row" . $row . ", " . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . ", " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . ", bill date should be last month to current date.\n";
                            $str_err_array = array($strErr);
                            $flag = false;

                        }

                        //Tood End : Sudhanshu 05 April 2024 : add validation for Import Distributor Stock  user can upload last month to current date


                    }
                }
                // Check existing invoice no.
                if ($flag) {
                    $condi = " bill_no = '" . $bill_no . "' AND bill_date != '" . $bill_date . "' AND YEAR(bill_date)= '" . date('Y', strtotime($bill_date)) . "'";
                    $resultset = $this->_getSelectList('table_item_stockist_stk_inprocess', 'stockist_stk_inpro_id', '', $condi);
                    if (is_array($resultset) && !empty($resultset) && $resultset[0]->stockist_stk_inpro_id != "") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " , Duplicate Bill Number.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        $check = false;
                    }
                }
                // Check Stockist Code exists in the system.
                if ($flag) {
                    $condi = " LOWER(stockist_code)='" . $stockist_code . "' AND status = 'A' ";
                    $resultset = $this->_getSelectList('table_stockist', 'stockist_id', '', $condi);
                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->stockist_id == "") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " , Stockist Code doesn't exists in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        $check = false;
                    } else {
                        $stockist_id = $resultset[0]->stockist_id;
                    }
                }

                // Check category exists in the system.
                /*if($flag){
				$condi =" LOWER(category_name)='".$category_name."'";
				$resultset = $this->_getSelectList('table_category','category_id','',$condi);
				if(!is_array($resultset) && empty($resultset) && $resultset[0]->category_id == "") {
					$strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1]." ,".$arrFile[2].",".$arrFile[3]."  ,".$arrFile[4].",".$arrFile[5]." ,".$arrFile[6]." , Category doesn't exists in the system.\n";
					$str_err_array=array($strErr);
					$flag=false;
				} else {
					$category_id = $resultset[0]->category_id;
				}
			}*/
                // Check item exists in the system.
                if ($flag) {
                    $condi = " LOWER(item_code)='" . $item_code . "' AND status = 'A'";
                    $resultset = $this->_getSelectList('table_item', 'item_id,category_id', '', $condi);
                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->item_id == "") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " , Item doesn't exists in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        $check = false;
                    } else {
                        $item_id = $resultset[0]->item_id;
                        $category_id = $resultset[0]->category_id;
                    }
                }
                // Check attribute( cases size) exists in the system.
                if ($flag) {
                    $condi = "ic.item_id=" . $item_id;
                    $resultset = $this->_getSelectList('table_cases as c left join table_item_case_relationship as ic on ic.case_id=c.case_id', 'c.case_id,case_size', '', $condi);
                    $case_size = $resultset[0]->case_size;
                    $case_id = $resultset[0]->case_id;
                }
                // Check attribute( cases id) exists in the system.
                if ($flag) {
                    if (empty($batch_no)) {
                        $batch_no = 'NA';
                    }
                    $condi = " color_code='" . mysql_escape_string($batch_no) . "' and account_id=" . $this->clean($_SESSION['accountId']);
                    $resultset = $this->_getSelectList('table_color', 'color_id', '', $condi);
                    if (!is_array($resultset) && empty($resultset)) {
                        $dataclr['account_id'] = $this->clean($_SESSION['accountId']);
                        $dataclr['color_code'] = $batch_no;
                        $dataclr['color_desc'] = $batch_no;
                        $dataclr['last_update_date'] = date('Y-m-d');
                        $dataclr['last_update_status'] = 'New';
                        $dataclr['status'] = 'A';
                        $color_id = $this->_dbInsert($dataclr, 'table_color');
                    } else {
                        $color_id = $resultset[0]->color_id;
                    }
                }

                //Validate negative stock
                if ($flag) {
                    if (strtolower($bill_type) == 'return') {
                        $stockCheck = " stockist_id= '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                        $DistStk = $this->_getSelectList2('table_item_stockist_stock', 'stockist_stk_id, stockist_stock_value', '', $stockCheck);

                        if ((!is_array($DistStk) || count($DistStk) == 0 || $DistStk[0]->stockist_stock_value < $stock_value)) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " , Stockist doesn't have the enough stock to adjust.\n";

                            $str_err_array = array($strErr);
                            $flag = false;
                            $check = false;
                        }
                    } else {


                        $condi = " ip.stockist_id = '" . $stockist_id . "' AND ip.item_id ='" . $item_id . "' AND ip.category_id ='" . $category_id . "' 
					AND ip.color_id = '" . $color_id . "' AND ip.status = 'A' AND ip.bill_no = '" . $bill_no . "' AND ip.bill_date = '" . $bill_date . "'";

                        $asRes = $this->_getSelectList('table_item_stockist_stk_inprocess as ip
					left join table_item_stockist_stock as st on st.stockist_id=ip.stockist_id 
					AND st.item_id=ip.item_id AND st.category_id=ip.category_id AND st.color_id=ip.color_id
					', 'ip.stockist_stk_inpro_id, ip.rec_stock_value, ip.acpt_stock_value,st.stockist_stock_value', '', $condi);

                        if (is_array($asRes) && count($asRes) > 0 && intval($asRes[0]->rec_stock_value) > intval($asRes[0]->stockist_stock_value)) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", " . $arrFile[9] . ", " . $arrFile[10] . ", " . $arrFile[11] . ", " . $arrFile[12] . " , Stockist doesn't have the enough stock to adjust.\n";
                            $str_err_array = array($strErr);
                            $flag = false;
                            $check = false;
                        }
                    }
                }
                $data = array();
                // Insert/Update data in the table_item_stockist_stk_inprocess table , status = 'I'  unaccepted stock
                if ($flag) {
                    // $condi =" stockist_id = '".$stockist_id."' AND attribute_value_id ='".$case_id."' AND item_id ='".$item_id."' AND category_id ='".$category_id."' AND color_id = '".$color_id."' ".$billdatecondi;
                    $condi = " stockist_id = '" . $stockist_id . "' AND item_id ='" . $item_id . "' AND category_id ='" . $category_id . "' AND color_id = '" . $color_id . "' " . $billdatecondi;
                    $resultset = $this->_getSelectList('table_item_stockist_stk_inprocess', 'account_id,stockist_stk_inpro_id, rec_stock_value', '', $condi . " AND status = 'I' ");
                    if (is_array($resultset) && sizeof($resultset) > 0) {
                        $stockist_stk_inpro_id = $resultset[0]->stockist_stk_inpro_id;
                        $Cond = "stockist_stk_inpro_id  = '" . $stockist_stk_inpro_id . "' ";

                        $data['rec_stock_value'] = $stock_value;
                        $data['price'] = $price;
                        $data['invoice_value'] = $invoice_value;
                        $data['taxable_value'] = $taxable_value;
                        $data['igst_amount'] = $igst_amount;
                        $data['cgst_amount'] = $cgst_amount;
                        $data['sgst_amount'] = $sgst_amount;
                        $data['cess_amount'] = $cess_amount;
                        $data['last_update_datetime'] = date('Y-m-d H:i:s');
                        $result = $this->_dbUpdate($data, 'table_item_stockist_stk_inprocess', $Cond);
                        /***********Manage Stockist Stock******************/
                        $newStock = 0;
                        /**Find margin of the stock to manage from stockist stock**/
                        $remainStock = ($stock_value - $resultset[0]->rec_stock_value);

                        $stockistCondi = " account_id = '" . $resultset[0]->account_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                        $stockistResult = $this->_getSelectList2('table_item_ndc_stock', '*', '', $stockistCondi);
                        $stockistData = array();
                        $stockistActivity = array();
                        if (is_array($stockistResult) && !empty($stockistResult) && count($stockistResult) > 0) {
                            $stockist_stk_id = $stockistResult[0]->stock_id;
                            $stockist_stock_value = $stockistResult[0]->stock_value;
                            if (strtolower($bill_type) == 'return') {
                                $newStock = $stockist_stock_value + ($remainStock);
                            } else {
                                $newStock = $stockist_stock_value - ($remainStock);
                            }

                            $stockistData['stock_value'] = $newStock;
                            $stockistData['last_updated_date'] = date('Y-m-d');
                            $stockistData['last_update_datetime'] = date('Y-m-d H:i:s');
                            $ndcWhereCond1 = "stock_id = '" . $stockist_stk_id . "' ";
                            $this->_dbUpdate($stockistData, 'table_item_ndc_stock', $ndcWhereCond1);

                            //  insert NDC stock activity
                            $stockistActivity['account_id'] = $this->clean($_SESSION['accountId']);
                            $stockistActivity['stockist_id'] = $stockist_id;
                            $stockistActivity['stock_id'] = $stockist_stk_id;
                            $stockistActivity['item_id'] = $item_id;
                            $stockistActivity['category_id'] = $category_id;
                            $stockistActivity['attribute_value_id'] = $color_id;
                            $stockistActivity['color_id'] = $color_id;
                            $stockistActivity['stock_value'] = $remainStock;
                            $stockistActivity['created_datetime'] = date('Y-m-d H:i:s');
                            $stockistActivity['status'] = 'N';
                            $this->_dbInsert($stockistActivity, 'table_item_ndc_stock_activity');
                        }
                        /**************************************************/


                    } else {
                        // Check if existing record with accepted status.
                        $asRes = $this->_getSelectList('table_item_stockist_stk_inprocess', 'stockist_stk_inpro_id, rec_stock_value, acpt_stock_value', '', $condi . " AND status = 'A' ");
                        if (is_array($asRes) && sizeof($asRes) > 0) {
                            // $Cond = " stockist_id = '".$stockist_id."' AND item_id = '".$item_id."' AND category_id = '".$category_id."' AND attribute_value_id = '".$case_id."' AND color_id = '".$color_id."' ";
                            $Cond = " stockist_id = '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "' ";
                            $resultRes = $this->_getSelectList2('table_item_stockist_stock', 'stockist_stk_id, stockist_stock_value', '', $Cond);


                            $data = array();
                            if (is_array($resultRes) && sizeof($resultRes) > 0) {
                                $finalStock = 0;
                                if (strtolower($bill_type) == 'return') {
                                    $finalStock = ($resultRes[0]->stockist_stock_value + $asRes[0]->acpt_stock_value);
                                    $_objAdmin->revertStockistQtySummary('ret_rct_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), intval(date('Y', strtotime($bill_date))), $asRes[0]->acpt_stock_value);
                                } else {
                                    $_objAdmin->revertStockistQtySummary('rct_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), intval(date('Y', strtotime($bill_date))), $asRes[0]->acpt_stock_value);
                                    $finalStock = ($resultRes[0]->stockist_stock_value - $asRes[0]->acpt_stock_value);
                                }

                                $data['stockist_stock_value'] = $finalStock;
                                $data['last_updated_date'] = date('Y-m-d');
                                $data['last_update_datetime'] = date('Y-m-d H:i:s');
                                $whereCond = " stockist_stk_id 	= '" . $resultRes[0]->stockist_stk_id . "'";
                                $this->_dbUpdate($data, 'table_item_stockist_stock', $whereCond);
                            }
                            // $ndcCond = "item_id = '".$item_id."' AND category_id = '".$category_id."' AND attribute_value_id = '".$case_id."' AND color_id = '".$color_id."'";
                            $ndcCond = "item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                            $resultNDC = $this->_getSelectList2('table_item_ndc_stock', 'stock_id, stock_value', '', $ndcCond);
                            $data = array();
                            if (is_array($resultNDC) && sizeof($resultNDC) > 0) {
                                $stkfinalStock = 0;
                                if (strtolower($bill_type) == 'return') {
                                    $stkfinalStock = ($resultNDC[0]->stock_value - $asRes[0]->acpt_stock_value);
                                } else {
                                    $stkfinalStock = ($resultNDC[0]->stock_value + $asRes[0]->acpt_stock_value);
                                }

                                $data['stock_value'] = $stkfinalStock;
                                $data['last_updated_date'] = date('Y-m-d');
                                $data['last_update_datetime'] = date('Y-m-d H:i:s');
                                $whereCond = "stock_id = '" . $resultNDC[0]->stock_id . "'";
                                $this->_dbUpdate($data, 'table_item_ndc_stock', $whereCond);
                            }

                            /***********Manage Stockist Stock******************/
                            $newStock = 0;

                            $stockistCondi = " account_id = '" . $resultset[0]->account_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                            $stockistResult = $this->_getSelectList2('table_item_ndc_stock', '*', '', $stockistCondi);
                            $stockistData = array();
                            $stockistActivity = array();
                            if (is_array($stockistResult) && !empty($stockistResult) && count($stockistResult) > 0) {
                                $stockist_stk_id = $stockistResult[0]->stock_id;
                                $stockist_stock_value = $stockistResult[0]->stock_value;
                                if (strtolower($bill_type) == 'return') {
                                    $newStock = $stockist_stock_value + ($stock_value);
                                } else {
                                    $newStock = $stockist_stock_value - ($stock_value);
                                }

                                $stockistData['stock_value'] = $newStock;
                                $stockistData['last_updated_date'] = date('Y-m-d');
                                $stockistData['last_update_datetime'] = date('Y-m-d H:i:s');
                                $ndcWhereCond1 = "stock_id = '" . $stockist_stk_id . "' ";
                                $this->_dbUpdate($stockistData, 'table_item_ndc_stock', $ndcWhereCond1);

                                //  insert NDC stock activity
                                $stockistActivity['account_id'] = $this->clean($_SESSION['accountId']);
                                $stockistActivity['stockist_id'] = $stockist_id;
                                $stockistActivity['stock_id'] = $stockist_stk_id;
                                $stockistActivity['item_id'] = $item_id;
                                $stockistActivity['category_id'] = $category_id;
                                $stockistActivity['attribute_value_id'] = $color_id;
                                $stockistActivity['color_id'] = $color_id;
                                $stockistActivity['stock_value'] = $remainStock;
                                $stockistActivity['created_datetime'] = date('Y-m-d H:i:s');
                                $stockistActivity['status'] = 'N';
                                $this->_dbInsert($stockistActivity, 'table_item_ndc_stock_activity');
                            }
                            /**************************************************/
                            $data = array();
                            $data['rec_stock_value'] = $stock_value;
                            $data['acpt_stock_value'] = 0;
                            $data['last_update_datetime'] = date('Y-m-d H:i:s');
                            $data['created_datetime'] = date('Y-m-d H:i:s');
                            $data['status'] = 'I';
                            $data['price'] = $price;
                            $data['invoice_value'] = $invoice_value;
                            $data['taxable_value'] = $taxable_value;
                            $data['igst_amount'] = $igst_amount;
                            $data['cgst_amount'] = $cgst_amount;
                            $data['sgst_amount'] = $sgst_amount;
                            $data['cess_amount'] = $cess_amount;
                            $whereCnd = "stockist_stk_inpro_id = '" . $asRes[0]->stockist_stk_inpro_id . "'";
                            $result = $this->_dbUpdate($data, 'table_item_stockist_stk_inprocess', $whereCnd);
                        } else {
                            // new records inserted


                            $data = array();
                            $data['account_id'] = $this->clean($_SESSION['accountId']);
                            $data['stockist_id'] = $this->clean($stockist_id);
                            $data['item_id'] = $this->clean($item_id);
                            $data['category_id'] = $this->clean($category_id);
                            //$data['attribute_value_id']	= $this->clean($case_id);
                            $data['color_id'] = $this->clean($color_id);
                            $data['bill_date'] = $this->clean($bill_date);
                            $data['bill_no'] = $this->clean($bill_no);
                            $data['rec_stock_value'] = $stock_value;
                            $data['last_update_datetime'] = date('Y-m-d H:i:s');
                            $data['created_datetime'] = date('Y-m-d H:i:s');
                            $data['status'] = 'I';
                            $data['bill_status'] = 'A';
                            $data['bill_type'] = $bill_type;
                            $data['price'] = $price;
                            $data['invoice_value'] = $invoice_value;
                            $data['taxable_value'] = $taxable_value;
                            $data['igst_amount'] = $igst_amount;
                            $data['cgst_amount'] = $cgst_amount;
                            $data['sgst_amount'] = $sgst_amount;
                            $data['cess_amount'] = $cess_amount;
                            $result = $this->_dbInsert($data, 'table_item_stockist_stk_inprocess');

                            /***********Manage Stockist Stock******************/
                            $newStock = 0;

                            $stockistCondi = " account_id = '" . $this->clean($_SESSION['accountId']) . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                            $stockistResult = $this->_getSelectList2('table_item_ndc_stock', '*', '', $stockistCondi);
                            $stockistData = array();
                            $stockistActivity = array();
                            if (is_array($stockistResult) && !empty($stockistResult) && count($stockistResult) > 0) {
                                $stockist_stk_id = $stockistResult[0]->stock_id;
                                $stockist_stock_value = $stockistResult[0]->stock_value;
                                if (strtolower($bill_type) == 'return') {
                                    $newStock = $stockist_stock_value + ($stock_value);
                                } else {
                                    $newStock = $stockist_stock_value - ($stock_value);
                                }

                                $stockistData['stock_value'] = $newStock;
                                $stockistData['last_updated_date'] = date('Y-m-d');
                                $stockistData['last_update_datetime'] = date('Y-m-d H:i:s');
                                $ndcWhereCond1 = "stock_id = '" . $stockist_stk_id . "' ";
                                $this->_dbUpdate($stockistData, 'table_item_ndc_stock', $ndcWhereCond1);

                                //  insert NDC stock activity
                                $stockistActivity['account_id'] = $this->clean($_SESSION['accountId']);
                                $stockistActivity['stockist_id'] = $stockist_id;
                                $stockistActivity['stock_id'] = $stockist_stk_id;
                                $stockistActivity['item_id'] = $item_id;
                                $stockistActivity['category_id'] = $category_id;
                                $stockistActivity['attribute_value_id'] = $color_id;
                                $stockistActivity['color_id'] = $color_id;
                                $stockistActivity['stock_value'] = $remainStock;
                                $stockistActivity['created_datetime'] = date('Y-m-d H:i:s');
                                $stockistActivity['status'] = 'N';
                                $this->_dbInsert($stockistActivity, 'table_item_ndc_stock_activity');
                            }
                            /**************************************************/

                        }
                    }
                }
            }
            $row++;
        }
        fclose($file);
        // if ($check) {
        if ($check && in_array(173, $checkStockistStockFeature)) {
            $this->getStockistStock();
        }
        // }
        if ($row <= 2)
            return "no";
        else
            return $str_err_array;
    }

    function getStockistStock_3april24_sfa_file()

    {

        //echo "comming here";die;

        $condi = "status = 'I'";

        $resultset = $this->_getSelectList('table_item_stockist_stk_inprocess ', '*', '', $condi);

        if (is_array($resultset) && !empty($resultset) && count($resultset) > 0) {

            foreach ($resultset as $key => $value) {

                $rec_stock_value = 0;

                $newNdcStock = 0;

                $stockist_stk_inpro_id = $this->clean($value->stockist_stk_inpro_id);

                $stockist_id = $this->clean($value->stockist_id);

                $item_id = $this->clean($value->item_id);

                $category_id = $this->clean($value->category_id);

                //$attribute_value_id = $this->clean($value->attribute_value_id);

                $color_id = $this->clean($value->color_id);

                $rec_stock_value = $this->clean($value->rec_stock_value);

                $Cond = " stockist_id = '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";

                $result = $this->_getSelectList('table_item_stockist_stock', '*', '', $Cond);

                $data = array();

                $data1 = array();

                $ndcData = array();

                $ndcDataActivity = array();

                if (is_array($result) && !empty($result) && count($result) > 0) {

                    $stockist_stk_id = $result[0]->stockist_stk_id;

                    $stockist_stock_value = $result[0]->stockist_stock_value;

                    $total_stock = ($rec_stock_value + $stockist_stock_value);

                    //  Update Stockist stock

                    $data['stockist_stock_value'] = $total_stock;

                    $data['last_updated_date'] = date('Y-m-d');

                    $data['last_update_datetime'] = date('Y-m-d H:i:s');

                    $WhereCond = "stockist_stk_id = '" . $stockist_stk_id . "' ";

                    $this->_dbUpdate($data, 'table_item_stockist_stock', $WhereCond);

                } else {

                    // insert Stockist stock

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['stockist_id'] = $stockist_id;

                    $data['item_id'] = $item_id;

                    $data['category_id'] = $category_id;

                    //$data['attribute_value_id'] = $attribute_value_id;

                    $data['color_id'] = $color_id;

                    $data['stockist_stock_value'] = $rec_stock_value;

                    $data['last_updated_date'] = date('Y-m-d');

                    $data['last_update_datetime'] = date('Y-m-d H:i:s');

                    $result = $this->_dbInsert($data, 'table_item_stockist_stock');

                }

                //  Update Stockist inprocess stock

                $data1['acpt_stock_value'] = $rec_stock_value;

                $data1['last_update_datetime'] = date('Y-m-d H:i:s');

                $data1['status'] = 'A';

                $WhereCond1 = "stockist_stk_inpro_id = '" . $stockist_stk_inpro_id . "' ";

                $this->_dbUpdate($data1, 'table_item_stockist_stk_inprocess', $WhereCond1);

                //  select ndc stock for update company stock when transfer stock to stockist

                // $ndcCondi =  " item_id = '".$item_id."' AND category_id = '".$category_id."' AND attribute_value_id = '".$attribute_value_id."' AND color_id = '".$color_id."'";

                $ndcCondi = " item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";

                $ndcResult = $this->_getSelectList('table_item_ndc_stock', '*', '', $ndcCondi);

                if (is_array($ndcResult) && !empty($ndcResult) && count($ndcResult) > 0) {

                    $stock_id = $ndcResult[0]->stock_id;

                    $stock_value = $ndcResult[0]->stock_value;

                    $newNdcStock = $stock_value - $rec_stock_value;

                    $ndcData['stock_value'] = $newNdcStock;

                    $ndcData['last_updated_date'] = date('Y-m-d');

                    $ndcData['last_update_datetime'] = date('Y-m-d H:i:s');

                    $ndcWhereCond1 = "stock_id = '" . $stock_id . "' ";

                    $this->_dbUpdate($ndcData, 'table_item_ndc_stock', $ndcWhereCond1);

                    //  insert NDC stock activity

                    $ndcDataActivity['account_id'] = $this->clean($_SESSION['accountId']);

                    $ndcDataActivity['stockist_id'] = $stockist_id;

                    $ndcDataActivity['stock_id'] = $stock_id;

                    $ndcDataActivity['item_id'] = $item_id;

                    $ndcDataActivity['category_id'] = $category_id;

                    //$ndcDataActivity['attribute_value_id'] = $attribute_value_id;

                    $ndcDataActivity['color_id'] = $color_id;

                    $ndcDataActivity['created_datetime'] = date('Y-m-d H:i:s');

                    $ndcDataActivity['status'] = 'GRN';

                    $ndcDataActivity['stock_value'] = $rec_stock_value;

                    $this->_dbInsert($ndcDataActivity, 'table_item_ndc_stock_activity');

                }

            }

        }

    }

    /***********************************STOCKIST STOCK *************************************************/
    function getStockistStock()
    {
        $_objAdmin = new Admin();
        //echo "comming here";die;
        $condi = "status = 'I'";
        $resultset = $this->_getSelectList('table_item_stockist_stk_inprocess ', '*', '', $condi);
        if (is_array($resultset) && !empty($resultset) && count($resultset) > 0) {
            foreach ($resultset as $key => $value) {
                $billDate = $value->bill_date;
                $rec_stock_value = 0;
                $newNdcStock = 0;
                $stockist_stk_inpro_id = $this->clean($value->stockist_stk_inpro_id);
                $stockist_id = $this->clean($value->stockist_id);
                $item_id = $this->clean($value->item_id);
                $category_id = $this->clean($value->category_id);
                //$attribute_value_id = $this->clean($value->attribute_value_id);
                $color_id = $this->clean($value->color_id);
                $rec_stock_value = $this->clean($value->rec_stock_value);

                $Cond = " stockist_id = '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                $result = $this->_getSelectList('table_item_stockist_stock', '*', '', $Cond);
                $data = array();
                $data1 = array();
                $ndcData = array();
                $ndcDataActivity = array();
                if (is_array($result) && !empty($result) && count($result) > 0) {
                    $stockist_stk_id = $result[0]->stockist_stk_id;
                    $stockist_stock_value = $result[0]->stockist_stock_value;
                    $total_stock = ($rec_stock_value + $stockist_stock_value);
                    //  Update Stockist stock
                    $data['stockist_stock_value'] = $total_stock;
                    $data['last_updated_date'] = date('Y-m-d');
                    $data['last_update_datetime'] = date('Y-m-d H:i:s');
                    $WhereCond = "stockist_stk_id = '" . $stockist_stk_id . "' ";
                    $this->_dbUpdate($data, 'table_item_stockist_stock', $WhereCond);
                } else {
                    // insert Stockist stock
                    $data['account_id'] = $this->clean($_SESSION['accountId']);
                    $data['stockist_id'] = $stockist_id;
                    $data['item_id'] = $item_id;
                    $data['category_id'] = $category_id;
                    //$data['attribute_value_id'] = $attribute_value_id;
                    $data['color_id'] = $color_id;
                    $data['stockist_stock_value'] = $rec_stock_value;
                    $data['last_updated_date'] = date('Y-m-d');
                    $data['last_update_datetime'] = date('Y-m-d H:i:s');
                    $result = $this->_dbInsert($data, 'table_item_stockist_stock');
                }
                //  Update Stockist inprocess stock
                $data1['acpt_stock_value'] = $rec_stock_value;
                $data1['last_update_datetime'] = date('Y-m-d H:i:s');
                $data1['status'] = 'A';
                $WhereCond1 = "stockist_stk_inpro_id = '" . $stockist_stk_inpro_id . "' ";
                $this->_dbUpdate($data1, 'table_item_stockist_stk_inprocess', $WhereCond1);
                $_objAdmin->updateStockistQtySummary('rct_qty', $stockist_id, $item_id, intval(date('m', strtotime($billDate))), date('Y', strtotime($billDate)), $rec_stock_value);
            }
        }
    }

    /***********************************Market Items **************************/

    function uploadMarketItemListFile()

    {

        $fields = array('Category Name*', 'Item Name*', 'Item Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2])) {

                    $flag = false;

                }

                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(category_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND cat_type = 'C' AND type = 'M' AND status = 'A' ";

                    //echo "<pre>";print_r($condi);die;

                    $catRec = $this->_getSelectList('table_category', "category_id,category_code", '', $condi);

                    if (!is_array($catRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . ", " . $fields[0] . " Invalid. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(item_code)='" . mysql_escape_string(strtolower(trim($arrFile[2]))) . "' AND  LOWER(item_name)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "'";

                    $aCatRec = $this->_getSelectList('table_item', '*', '', $condi);

                    if (is_array($aCatRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[1] . " already exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['category_id'] = $catRec[0]->category_id;

                    $data['item_code'] = mysql_escape_string(preg_replace('/[^A-Za-z0-9\- -]/', '', trim($arrFile[2])));

                    $data['item_name'] = mysql_escape_string(preg_replace('/[^A-Za-z0-9\- -]/', '', trim($arrFile[1])));

                    $data['item_type'] = "M";

                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'New';

                    $data['status'] = 'A';

                    $item_id = $this->_dbInsert($data, 'table_item');

                }

                if ($flag) {

                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['item_id'] = $this->clean($item_id);

                    $data['item_mrp'] = "1.00";

                    //$data['item_dp']= mysql_escape_string($arrFile[5]);

                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'New';

                    $data['start_date'] = $this->clean($_SESSION['StartDate']);

                    $data['end_date'] = $this->clean($_SESSION['EndDate']);

                    $data['status'] = 'A';

                    $item_price_id = $this->_dbInsert($data, 'table_price');

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /***********************************Market Items **************************/

    /*************************Integration from here****************************************************************/

//Todo: Sagar: 12 April 2021

//import must sell products

    function uploadMustSellItemImportFile()

    {

        $fields = array('State Name*', 'Product Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if (($row > 0) && (is_array($arrFile))) {

                if (empty($arrFile[0]) || empty($arrFile[1])) {

                    if (empty($arrFile[0]) || $arrFile[0] == "State Name*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . " ," . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Product Code*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . " ," . $fields[1] . " shouldn't be empty. \n";

                    }

                    $flag = false;

                    $str_err_array = array($strErr);

                }

                if ($flag) {

                    $stateId = 0;

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower($arrFile[0])) . "' AND status = 'A'";

                    $stateRec = $this->_getSelectList2('state', "state_id", '', $condi);

                    if (is_array($stateRec) && (count($stateRec) > 0)) {

                        $stateId = $stateRec[0]->state_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $fields[0] . " State does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($stateId > 0)) {

                    $itemId = 0;

                    $condi2 = " account_id=" . $_SESSION['accountId'] . " AND LOWER(item_code)='" . mysql_escape_string(strtolower($arrFile[1])) . "' AND status = 'A'";

                    $itmRec = $this->_getSelectList('table_item', 'item_id', '', $condi2);

                    if (is_array($itmRec) && (count($itmRec) > 0)) {

                        $itemId = $itmRec[0]->item_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $fields[1] . " Product does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($stateId > 0) && ($itemId > 0)) {

                    $condi3 = " account_id=" . $_SESSION['accountId'] . " AND state_id = $stateId AND item_id = $itemId AND status = 'A'";

                    $auRec = $this->_getSelectList('table_must_sell_items', "*", '', $condi3);

                    if (!is_array($auRec) && (count($auRec) <= 0)) {

                        $data = [];

                        $data['state_id'] = $stateId;

                        $data['item_id'] = $itemId;

                        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                        $data['created_at'] = date('Y-m-d H:i:s');

                        $data['status'] = mysql_escape_string('A');

                        $this->_dbInsert($data, 'table_must_sell_items');

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", Already Exists!  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//import statewise_minimum_item_price

    function uploadMinItemPriceImportFile()

    {

        $fields = array('State Name*', 'Product Code*', 'Minimum Price*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if (($row > 0) && (is_array($arrFile))) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2])) {

                    if (empty($arrFile[0]) || $arrFile[0] == "State Name*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Product Code*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[1] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Minimum Price*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[2] . " shouldn't be empty. \n";

                    }

                    $flag = false;

                    $str_err_array = array($strErr);

                }

                if ($flag) {

                    $stateId = 0;
                    $state = mysql_escape_string(strtolower(trim($arrFile[0])));

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND status = 'A'";

                    if ($state == 'all') {
                        $condi = " ";
                    }


                    $stateRec = $this->_getSelectList2('state', "state_id", '', $condi);

                    if (is_array($stateRec) && (count($stateRec) > 0)) {

                        $stateId = $stateRec[0]->state_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[0] . " State does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($stateId > 0)) {

                    $itemId = 0;

                    $condi2 = " account_id=" . $_SESSION['accountId'] . " AND LOWER(item_code)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' AND status = 'A' ";

                    $itmRec = $this->_getSelectList('table_item', 'item_id', '', $condi2);

                    if (is_array($itmRec) && (count($itmRec) > 0)) {

                        $itemId = $itmRec[0]->item_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[1] . " Product does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($stateId > 0) && ($itemId > 0)) {

                    $minPrice = trim($arrFile[2]);

                    if (!is_numeric($minPrice) || ($minPrice <= 0)) {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[2] . " Invalid Price \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($stateId > 0) && ($itemId > 0)) {

                    $itemPrice = $this->_getSelectList('table_price', "*", '', " item_id='" . $itemId . "' ");
                    $price = $itemPrice[0]->item_mrp;
                    if ($minPrice > $price) {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ",  Min price can't be greater than MRP \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($stateId > 0) && ($itemId > 0) && ($minPrice > 0)) {

                    if ($state == 'all') {
                        $objArrayList = new ArrayList();
                        $accWiseStateIds = $objArrayList->getAccountWiseStateIds();
                        if (is_array($accWiseStateIds) && (count($accWiseStateIds) > 0)) {
                            $stateIds = implode(',', $accWiseStateIds);
                            $stateCondi = " AND state_id IN($stateIds) ";
                        }
                        $stateRec = $this->_getSelectList2('state', "state_id", '', " status = 'A' AND state_name != '' $stateCondi ");

                        if (is_array($stateRec)) {

                            foreach ($stateRec as $st) {
                                $state_id = $st->state_id;
                                $condi3 = " account_id=" . $_SESSION['accountId'] . " AND state_id = $state_id AND item_id = $itemId AND status = 'A'";

                                $auRec = $this->_getSelectList('table_minimum_item_price', "*", '', $condi3);

                                if (!is_array($auRec) && (count($auRec) <= 0)) {

                                    $data = [];

                                    $data['state_id'] = $state_id;

                                    $data['item_id'] = $itemId;

                                    $data['min_price'] = $minPrice;

                                    $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                                    $data['created_at'] = date('Y-m-d H:i:s');

                                    $data['status'] = mysql_escape_string('A');

                                    $this->_dbInsert($data, 'table_minimum_item_price');

                                } else {
                                    $data = [];
                                    $data['min_price'] = $minPrice;

                                    $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                                    $data['updated_at'] = date('Y-m-d H:i:s');

                                    $data['status'] = mysql_escape_string('A');

                                    $this->_dbUpdate($data, 'table_minimum_item_price', "state_id = $state_id AND item_id = $itemId ");
                                }
                            }
                        }

                    } else {

                        $condi3 = " account_id=" . $_SESSION['accountId'] . " AND state_id = $stateId AND item_id = $itemId ";

                        $auRec = $this->_getSelectList('table_minimum_item_price', "*", '', $condi3);

                        if (!is_array($auRec) && (count($auRec) <= 0)) {

                            $data = [];

                            $data['state_id'] = $stateId;

                            $data['item_id'] = $itemId;

                            $data['min_price'] = $minPrice;

                            $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                            $data['created_at'] = date('Y-m-d H:i:s');

                            $data['status'] = mysql_escape_string('A');

                            $this->_dbInsert($data, 'table_minimum_item_price');

                        } else {

                            $data = [];
                            $data['min_price'] = $minPrice;

                            $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                            $data['updated_at'] = date('Y-m-d H:i:s');

                            $data['status'] = mysql_escape_string('A');

                            $this->_dbUpdate($data, 'table_minimum_item_price', "state_id = $stateId AND item_id = $itemId ");

                        }

                    }


                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /*     * *********************** Start Upload Retailer Credit/Debit Invoices ***************************** */

    function uploadCreditDebitInvoices()

    {

        $fields = array('Distributor Code*', 'Retailer Code*', 'Voucher No', 'Date*', 'Amount*', 'Invoice Type(Credit|Debit)*', 'Remarks', 'Invoice By(Pepup)*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        $rplc = array("'", '"', '`', '&', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Distributor Code*" || empty($arrFile[1]) || $arrFile[1] == "Retailer Code*" || empty($arrFile[3]) || $arrFile[3] == "Date*" || empty($arrFile[4]) || $arrFile[4] == "Amount*" || empty($arrFile[5]) || $arrFile[5] == "Invoice Type(Credit|Debit)*" || empty($arrFile[7]) || $arrFile[7] == "Invoice By(Pepup)*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "Distributor Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . "," . $fields[0] . " shouldn't be empty \n";

                    } else if (empty($arrFile[1]) || $arrFile[1] == "Retailer Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . "," . $fields[1] . " shouldn't be empty \n";

                    } /* else if (empty($arrFile[2]) || $arrFile[2] == "Voucher No*")

                      {

                      $strErr .= "Error in Row".$row." ,".$arrFile[0].",".$arrFile[1].",".$arrFile[2].",".$arrFile[3].",".$arrFile[4].",".$arrFile[5].",".$arrFile[6].",,".$arrFile[7].",".$fields[2]." shouldn't be empty \n";

                      } */ else if (empty($arrFile[3]) || $arrFile[3] == "Date*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . "," . $fields[3] . " shouldn't be empty \n";

                    } else if (empty($arrFile[4]) || $arrFile[4] == "Amount*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . "," . $fields[4] . " shouldn't be empty \n";

                    } else if (empty($arrFile[5]) || $arrFile[5] == "Invoice Type(Credit|Debit)*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . "," . $fields[5] . " shouldn't be empty \n";

                    } else if (empty($arrFile[7]) || $arrFile[7] == "Invoice By(Pepup)*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . "," . $fields[7] . " shouldn't be empty \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " LOWER(distributor_code)='" . (trim(strtolower($arrFile[0]))) . "' AND status = 'A'";

                    $aGrpDis = $this->_getSelectList('table_distributors', 'distributor_id, distributor_code', '', $condi);

                    if (!is_array($aGrpDis) && sizeof($aGrpDis) <= 0) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . ", Distributor doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $distributor_id = $aGrpDis[0]->distributor_id;

                        $distributor_code = $aGrpDis[0]->distributor_code;

                    }

                }

                if ($flag) {

                    $condi = " LOWER(retailer_code)='" . (trim(strtolower($arrFile[1]))) . "' AND status = 'A'";

                    $aGrpRec = $this->_getSelectList('table_retailer', 'retailer_id', '', $condi);

                    if (!is_array($aGrpRec) && sizeof($aGrpRec) <= 0) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . $condi . ", Retailer doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $retailer_id = $aGrpRec[0]->retailer_id;

                    }

                }

                if ($flag) {

                    $invoice_type = '';

                    $InvoiceTypeArray = array('credit', 'debit');

                    if (in_array(strtolower(trim($arrFile[5])), $InvoiceTypeArray)) {

                        $invoice_type = trim($arrFile[5]);

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . ", Invoice Type should be in (Credit|Debit).\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $invoice_by = '';

                    $InvoiceByArray = array('pepup');

                    if (in_array(strtolower(trim($arrFile[7])), $InvoiceByArray)) {

                        $invoice_by = trim($arrFile[7]);

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . ", Invoice By should be in (Pepup).\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    if (date('m', strtotime($arrFile[3])) >= 04) {

                        $financialYear = date('Y', strtotime($arrFile[3]));

                    } else {

                        $financialYear = date('Y', strtotime($arrFile[3] . '-1 years'));

                    }

                }

                if ($flag) {

                    switch (strtolower(trim($invoice_type))) {

                        case 'credit':

                            $note_type = 'C';

                            $Type = 'CR';

                            break;

                        case 'debit':

                            $note_type = 'D';

                            $Type = 'DR';

                            break;

                    }

                    if ($invoice_by != '' && strtolower($invoice_by) == 'pepup') {

                        $document_no = $this->getCreditDebitinvoiceNo($distributor_id, $note_type, $financialYear);

                    }

                    $checkNote = $this->_getSelectList('table_credit_debit_note', "note_id", "", " distributor_id='" . $distributor_id . "'  AND retailer_id='" . $retailer_id . "' AND note_type='" . $note_type . "' AND financial_year='" . $financialYear . "' AND document_no ='" . $document_no . "' ");

                    if (is_array($checkNote) && count($checkNote) > 0) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $arrFile[6] . ", " . $arrFile[7] . ",  Invoice already exists in the system. Contact to administrator!.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $data = array();

                        if ($note_type == 'D') {

                            $note_date = date('Y-m-d', strtotime($arrFile[3]));

                            $data['due_date'] = date('Y-m-d', strtolower($note_date . ' +1 day'));

                        }

                        $data['account_id'] = $_SESSION['accountId'];

                        $data['distributor_id'] = $distributor_id;

                        $data['retailer_id'] = $retailer_id;

                        $data['tag_id'] = 33;

                        $data['note_type'] = str_replace($rplc, ' ', $note_type);

                        $data['document_no'] = str_replace($rplc, ' ', $document_no);

                        $data['total_amount'] = $this->clean($arrFile[4]);

                        $data['description'] = str_replace($rplc, ' ', $this->clean($arrFile[6]));

                        $data['financial_year'] = $financialYear;

                        $data['date_of_note'] = date('Y-m-d', strtotime($arrFile[3]));

                        $data['time_of_note'] = date('H:i:s');

                        $data['last_update_date'] = date('Y-m-d');

                        $data['last_update_status'] = 'New';

                        $data['note_created_by'] = str_replace($rplc, ' ', strtolower($invoice_by));

                        $data['doc_source'] = 'Imported';

                        $note_id = $this->_dbInsert($data, 'table_credit_debit_note');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    function getFinancialYear()

    {

        if (date('m') >= 04) {

            $financialYear = date('Y');

        } else {

            $financialYear = date('Y', strtotime(date('Y-m-d', strtotime('-1 years'))));

        }

        return $financialYear;

    }

    function getAdvancePaymentBillNO($distributor_id, $financialYear)

    {

        $payHistory = $this->_getSelectList2('table_retailer_advance', "MAX(bill_no) as bill_no", '', " distributor_id='" . $distributor_id . "' AND financial_year='" . $financialYear . "' GROUP BY distributor_id ");

        if (is_array($payHistory) && count($payHistory) > 0 && $payHistory[0]->bill_no > 0) {

            $bill_no = $payHistory[0]->bill_no;

        } else {

            $bill_no = 9000000000;

        }

        return $bill_no;

    }

    function getCreditDebitinvoiceNo($distributor_id, $note_type, $financialYear)

    {

        $distributor = $this->_getSelectList('table_distributors', "distributor_id, distributor_code", "", " distributor_id='" . $distributor_id . "' ");

        if (strtolower($note_type) == 'c') {

            $checkInv = $this->_getSelectList('table_credit_debit_note', "note_id", "", " distributor_id='" . $distributor_id . "' AND note_type='" . $note_type . "' AND financial_year='" . $financialYear . "' ");

            if (is_array($checkInv) && count($checkInv) > 0) {

                $getLastInvNumber = $this->_getSelectList('table_credit_debit_note', "MAX((SUBSTRING( document_no,-10))) as invoice_no", "", " distributor_id='" . $distributor_id . "' AND note_type='" . $note_type . "' AND financial_year='" . $financialYear . "' ");

            } else {

                $getLastInvNumber = $this->_getSelectList2('table_distributor_last_invoice_no', "last_invoice_no as invoice_no", "", " distributor_id='" . $distributor_id . "' AND invoice_type='Credit' ");

            }

            if ($getLastInvNumber[0]->invoice_no > 0) {

                $invoice_no = ($getLastInvNumber[0]->invoice_no - 4000000000) + 1;

            } else {

                $invoice_no = 1;

            }

            $Type = 'CR';

            $InvoiceSeries = 4000000000;

        } else {

            $checkInv = $this->_getSelectList('table_credit_debit_note', "note_id", "", " distributor_id='" . $distributor_id . "' AND note_type='" . $note_type . "' AND financial_year='" . $financialYear . "' ");

            if (is_array($checkInv) && count($checkInv) > 0) {

                $getLastInvNumber = $this->_getSelectList('table_credit_debit_note', "MAX((SUBSTRING( document_no,-10))) as invoice_no", "", " distributor_id='" . $distributor_id . "' AND note_type='" . $note_type . "' AND financial_year='" . $financialYear . "' ");

            } else {

                $getLastInvNumber = $this->_getSelectList2('table_distributor_last_invoice_no', "last_invoice_no as invoice_no", "", " distributor_id='" . $distributor_id . "' AND invoice_type='Debit' ");

            }

            if ($getLastInvNumber[0]->invoice_no > 0) {

                $invoice_no = ($getLastInvNumber[0]->invoice_no - 5000000000) + 1;

            } else {

                $invoice_no = 1;

            }

            $Type = 'DR';

            $InvoiceSeries = 5000000000;

        }

        //$document_no = $distributor_code.'-'.$invoiceType.'-'.$invoice_no;

        $document_no = $distributor[0]->distributor_code . '-' . $Type . '-' . $financialYear . '-' . ($InvoiceSeries + $invoice_no);

        return $document_no;

    }

    /*     * ********************* End Upload Retailer Credit/Debit Invoices ******************************** */

//Todo Start: Sagar : 21 July - import state master

    function uploadStateListFile()

    {

        $fields = array('Country Name*', 'State Name*', 'State Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Country Name*" || empty($arrFile[1]) || $arrFile[1] == "State Name*" || empty($arrFile[2]) || $arrFile[2] == "State Code*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "Country Name*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "State Name*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[2] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "State Code*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                            $arrFile[2] . "," . $fields[2] . " shouldn't be empty. \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " LOWER(country_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND status = 'A'";

                    $aCatRec = $this->_getSelectList2('country', 'country_id', '', $condi);

                    $countryId = 0;

                    if (is_array($aCatRec) && (count($aCatRec) > 0)) {

                        $countryId = $aCatRec[0]->country_id;

                    } else {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[0] . " , does not exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

//                if ($flag) {
//
//                    if (isset($arrFile[1]) && !empty($arrFile[1])) {
//
//                        $condi2 = " LOWER(region_name)='" . mysql_escape_string(strtolower($arrFile[1])) . "' AND status = 'A' ";
//
//                        $regRec = $this->_getSelectList2('table_region', 'region_id', '', $condi2);
//
//                        $regionId = 0;
//
//                        if (is_array($regRec) && (count($regRec) > 0)) {
//
//                            $regionId = $regRec[0]->region_id;
//
//                        } else {
//
//                            $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . ", " . $arrFile[3] . " ," . $fields[1] . " , does not exists in the system  \n";
//
//                            $str_err_array = array($strErr);
//
//                            $flag = false;
//
//                        }
//
//                    }
//
//                }

                if ($flag) {

                    $condi = " country_id = $countryId AND LOWER(state_code)='" . mysql_escape_string(strtolower
                        (trim($arrFile[2]))) . "' AND LOWER(state_name)='" . mysql_escape_string(strtolower
                        (trim($arrFile[1]))) . "'";


                    $aStRec = $this->_getSelectList2('state', 'state_id', '', $condi);

                    if (is_array($aStRec) && (count($aStRec) > 0)) {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $fields[1] . " , already exists in the system  \n";

                        $str_err_array = array($strErr);

//                        $flag = false;

                    } else {

                        $data = array();

                        $data['country_id'] = mysql_escape_string($countryId);

//                        $data['region_id'] = ($regionId > 0) ? mysql_escape_string($regionId) : 0;

                        $data['state_name'] = mysql_escape_string($this->clean(trim($arrFile[1])));

                        $data['state_code'] = mysql_escape_string($this->clean(trim($arrFile[2])));

                        $data['last_update_date'] = date('Y-m-d');

                        $data['last_update_status'] = 'New';

                        $data['status'] = 'A';

                        $this->_dbInsert($data, 'state');

                    }

                }

            }

            $row++;

        }

        //print_r($str_err_array);

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//Todo End: Sagar : 21 July - import state master

    //Todo Start: Sagar : 19 Aug 2021 - import market category master

    function uploadMarketCategoryFile()

    {

        $fields = array('Category Name*', 'Category Code');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Category Name*") {

                    $strErr .= "Error in Row" . $row . " ," . $fields[0] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " type = 'M' AND account_id=" . $_SESSION['accountId'] . "  AND  LOWER(category_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "'";

                    $aCatRec = $this->_getSelectList('table_category', '*', '', $condi);

                    if (is_array($aCatRec)) {

                        $strErr .= " Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,already exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['parent_id'] = '0';

                    $data['category_name'] = mysql_escape_string($this->clean(trim($arrFile[0])));

                    $data['category_code'] = mysql_escape_string($this->clean(trim($arrFile[1])));

                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'New';

                    $data['type'] = 'M';

                    $data['status'] = 'A';

                    $id = $this->_dbInsert($data, 'table_category');

                }

            }

            $row++;

        }

        //print_r($str_err_array);

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    //Todo End: Sagar : 19 Aug 2021 - import market category master

    //Todo Start: Sagar : 31st Aug 2021 - import Retailer Wise Product Price

    function uploadRetailerWiseItemPriceFile()

    {

        $fields = array('Retailer Code*', 'Item Code*', 'Price*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if (($row > 0) && (is_array($arrFile))) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || trim($arrFile[2]) == '') {

                    if (empty($arrFile[0]) || $arrFile[0] == "Retailer Code*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Item Code*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[1] . " shouldn't be empty. \n";

                    } elseif (trim($arrFile[2]) == "" || $arrFile[2] == "Price*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[2] . " shouldn't be empty. \n";

                    }

                    $flag = false;

                    $str_err_array = array($strErr);

                }

                if ($flag) {

                    $retId = 0;

                    $condi = " LOWER(retailer_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND status = 'A'";

                    $retRec = $this->_getSelectList('table_retailer', "retailer_id", '', $condi);

                    if (is_array($retRec) && (count($retRec) > 0)) {

                        $retId = $retRec[0]->retailer_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[0] . " does not exists.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($retId > 0)) {

                    $itemId = 0;

                    $condi2 = " status='A' AND LOWER(item_code)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "'";

                    $itmRec = $this->_getSelectList('table_item', 'item_id', '', $condi2);

                    if (is_array($itmRec) && (count($itmRec) > 0)) {

                        $itemId = $itmRec[0]->item_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[1] . " does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($retId > 0) && ($itemId > 0)) {

                    $minPrice = trim($arrFile[2]);

                    if (!is_numeric($minPrice) || ($minPrice < 0)) {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[2] . " Invalid Price \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($retId > 0) && ($itemId > 0)) { //&& ($minPrice > 0)

                    $condi3 = " retailer_id = $retId AND item_id = $itemId AND status = 'A'";

                    $auRec = $this->_getSelectList('table_retailer_wise_item_price', "*", '', $condi3);

                    if (is_array($auRec) && (count($auRec) > 0)) {

                        $data = [];

                        $data['price'] = trim($minPrice);

                        $data['updated_at'] = date('Y-m-d H:i:s');

                        $this->_dbUpdate($data, 'table_retailer_wise_item_price', " $condi3 ");

                    } else {

                        $data = [];

                        $data['retailer_id'] = trim($retId);

                        $data['item_id'] = trim($itemId);

                        $data['price'] = trim($minPrice);

                        $data['account_id'] = $_SESSION['accountId'];

                        $data['created_at'] = date('Y-m-d H:i:s');

                        $data['updated_at'] = date('Y-m-d H:i:s');

                        $data['status'] = 'A';

                        $this->_dbInsert($data, 'table_retailer_wise_item_price');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    //Todo End: Sagar : 31st Aug 2021 - import Retailer Wise Product Price

    //Todo Start: Sagar : 2nd Sep 2021 - import Enquiry

    function uploadEnquiryDetails()
    {

        $fields = array('Customer Name*', 'Customer Channel*', 'Customer Phone No*', 'State*', 'City*', 'Area*', 'Enquiry*', 'Enquiry Source', 'Enquiry Type', 'Enquiry Status', 'Salesman Code*', 'Quantity Enquired');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if (($row > 0) && (is_array($arrFile))) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[3]) || empty($arrFile[4]) || empty($arrFile[5]) || empty($arrFile[6]) || empty($arrFile[10])) {

                    if (empty($arrFile[0]) || $arrFile[0] == "Customer Name*") {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";

//                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Customer Channel*") {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Customer Phone No*") {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[3]) || $arrFile[3] == "State*") {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[4]) || $arrFile[4] == "City*") {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[4] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[5]) || $arrFile[5] == "Area*") {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[5] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[6]) || $arrFile[6] == "Enquiry*") {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[6] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[10]) || $arrFile[10] == "Salesman Code*") {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[10] . " shouldn't be empty. \n";

                    }

                    $flag = false;

                    $str_err_array = array($strErr);

                }

                $customer_name = mysql_escape_string(strtolower(trim($arrFile[0])));

                $channel_id = 0;

                $customer_phone = mysql_escape_string(trim($arrFile[2]));

                $state_id = 0;

                $city_id = 0;

                $area = mysql_escape_string(strtolower(trim($arrFile[5])));

                $enquiry = mysql_escape_string(strtolower(trim($arrFile[6])));

                $enquiry_source_id = 0;

                $enquiry_type_id = 0;

                $enquiry_status_id = 0;

                $salesman_id = 0;

                $qty_enqur = mysql_escape_string(trim($arrFile[11]));

                // Check Channel name exists in the system.

                if ($flag) {

                    $condi = " LOWER(channel_name)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('table_retailer_channel_master', 'channel_id', '', $condi);

                    if (is_array($resultset) && (count($resultset) > 0)) {

                        $channel_id = $resultset[0]->channel_id;

                    } else {

//                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[0] . " does not exists.\n";

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[1] . " does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //check state

                if ($flag) {

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower(trim($arrFile[3]))) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('state', 'state_id', '', $condi);

                    if (is_array($resultset) && (count($resultset) > 0)) {

                        $state_id = $resultset[0]->state_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[3] . " does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // check city

                if ($flag) {

                    $condi = " LOWER(city_name)='" . mysql_escape_string(strtolower(trim($arrFile[4]))) . "' and state_id='" . $state_id . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('city', 'city_id', '', $condi);

                    if (is_array($resultset) && (count($resultset) > 0)) {

                        $city_id = $resultset[0]->city_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[4] . " does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // enquery source

                if ($flag) {

                    $condi = " LOWER(source_name)='" . mysql_escape_string(strtolower(trim($arrFile[7]))) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('table_enquiry_source', 'source_id,source_name', '', $condi);

                    if (is_array($resultset) && (count($resultset) > 0)) {

                        $enquiry_source_id = $resultset[0]->source_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[7] . " does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // enquery type

                if ($flag) {

                    $condi = " LOWER(enqury_type)='" . mysql_escape_string(strtolower(trim($arrFile[8]))) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('table_enquiry_type', 'enquiry_type_id,enqury_type', '', $condi);

                    if (is_array($resultset) && (count($resultset) > 0)) {

                        $enquiry_type_id = $resultset[0]->enquiry_type_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[8] . " does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // enquery status

                if ($flag) {

                    $condi = " LOWER(enqury_status)='" . mysql_escape_string(strtolower(trim($arrFile[9]))) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('table_enquiry_status', 'enquiry_status_id,enqury_status', '', $condi);

                    if (is_array($resultset) && (count($resultset) > 0)) {

                        $enquiry_status_id = $resultset[0]->enquiry_status_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[9] . " does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // check salesman

                if ($flag) {

                    $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($arrFile[10]))) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('table_salesman', 'salesman_id', '', $condi);

                    if (is_array($resultset) && (count($resultset) > 0)) {

                        $salesman_id = $resultset[0]->salesman_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= 11; $i++) {

                            $strErr .= "," . $arrFile[$i];

                        }

                        $strErr .= " ," . $fields[10] . " does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $data = array();

                    $data['account_id'] = $_SESSION['accountId'];

                    $data['retailer_name'] = $customer_name;

                    $data['channel_id'] = $channel_id;

                    $data['retailer_phone_no'] = $customer_phone;

                    $data['state_id'] = $state_id;

                    $data['city_id'] = $city_id;

                    $data['retailer_location'] = $area;

                    $data['enquiry_text'] = $enquiry;

                    $data['source_id'] = $enquiry_source_id;

                    $data['enquiry_type_id'] = $enquiry_type_id;

                    $data['salesman_id'] = $salesman_id;

                    $data['added_salesman_id'] = $_SESSION['salesmanId'];

                    $data['qty_enqur'] = $qty_enqur;

                    $data['status'] = 'A';

                    $data['created_date'] = date('Y-m-d');

//                    $data['last_update_date']= date('Y-m-d');

                    $enqId = $this->_dbInsert($data, 'table_enquiry');

                    if ($enqId > 0) {

                        $data1 = [];

                        $data1['enquiry_id'] = $enqId;

                        $data1['salesman_id'] = $salesman_id;

                        $data1['enquiry_status_id'] = $enquiry_status_id;

                        $data1['feedback'] = '';

                        $data1['reminder'] = '0000-00-00';

                        $data1['transfer_status'] = 1;

                        $data1['last_update_date'] = date('Y-m-d');

                        $data1['last_update_time'] = date('H:i:s');

                        $this->_dbInsert($data1, 'table_enquiry_details');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    //Todo End: Sagar : 2nd Sep 2021 - import Enquiry

    //Todo Start: Sagar : 2nd Sep 2021 - import Project

    function uploadProjectListFile()

    {

        $fields = array('Project Name*,Project Type*,Customer Code,Dealer Code,Zone*,Project Zone,Specification Month,Maturity Date,Salesman Code*,Project Location,Department Code,Project Category,Projected Qty,Specification Type,Product Type,Item Code,Brand Name,Order Qty');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            //echo "<pre>"; print_r($arrFile);die;

            $flag = true;

            if ($row >= 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Project Name*" || empty($arrFile[1]) || empty($arrFile[4]) || empty($arrFile[8])) {

                    if (empty($arrFile[0]) || $arrFile[0] == "Project Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "," . $arrFile[0] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "," . $arrFile[1] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[4])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "," . $arrFile[4] . " shouldn't be empty  \n";

                    } else if (empty($arrFile[8])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "," . $arrFile[8] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // Check for dealer/customer code

                $customer_codes = '';

                $dealer_codes = '';

                if ($flag && (!empty($arrFile[2]) || !empty($arrFile[3]))) {

                    $customer_codes = '';

                    $dealer_codes = '';

                    if (empty($arrFile[2]) && empty($arrFile[3])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . " ," . $arrFile[2] . "," . $arrFile[3] . " , Input atleast Customer or Dealer Codes. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $customer_codes = mysql_escape_string(strtolower($arrFile[2]));

                        $dealer_codes = mysql_escape_string(strtolower($arrFile[3]));

                        if (!empty($customer_codes)) {

                            $customer_codes = implode(',', explode('/', $customer_codes));

                            $customer_codes = str_replace(',', "','", $customer_codes);

                            $customer_codes = "'" . $customer_codes . "'";

                            $condi = " retailer_code IN (" . strtoupper($customer_codes) . " )";

                            $retailerArr = $this->_getSelectList('table_retailer', 'retailer_id', '', $condi);

                            $retailerArr = json_decode(json_encode($retailerArr), True);

                            if (is_array($retailerArr)) {

                                $retailerIds = array_column($retailerArr, 'retailer_id');

                                $retailerId = implode(',', $retailerIds);

                            } else {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[2] . " ,Invalid Customer. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        }

                        if (!empty($dealer_codes)) {

                            $dealer_codes = implode(',', explode('/', $dealer_codes));

                            $dealer_codes = str_replace(',', "','", $dealer_codes);

                            $dealer_codes = "'" . $dealer_codes . "'";

                            $condi = " distributor_code IN (" . strtoupper($dealer_codes) . " )";

                            $distArr = $this->_getSelectList('table_distributors', 'distributor_id', '', $condi);

                            $distArr = json_decode(json_encode($distArr), True);

                            if (is_array($distArr)) {

                                $distIds = array_column($distArr, 'distributor_id');

                                $distId = implode(',', $distIds);

                            } else {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[3] . " ,Invalid Dealer. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        }

                    }

                    /*echo "<pre>";

                     print_r($retailerArr);

                    print_r($distArr);

                    echo $retailerId."<br>";

                    echo $distId."<br>";die;*/

                }

                /*

                echo $arrFile[2]."<br>";

                echo $arrFile[3]."<br>";

                echo $arrFile[4]."<br>";

                die;

                */
                if ($flag && !empty($arrFile[4])) {

                    $condi = " zone_name=" . "'" . mysql_escape_string(strtolower($arrFile[4])) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('table_zone', 'zone_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->zone_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[4] . " , Zone does not exist. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $zone_id = $resultset[0]->zone_id;

                    }

                }

                $project_zone_id = '';

                if ($flag && !empty($arrFile[5])) {

                    $condi = " zone_name=" . "'" . mysql_escape_string(strtolower($arrFile[5])) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('table_zone', 'zone_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->zone_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[5] . " , Project Zone does not exist. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $project_zone_id = $resultset[0]->zone_id;

                    }

                }

                if ($flag) {

                    $condi = " employee_code=" . "'" . mysql_escape_string(strtolower($arrFile[8])) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_salesman', 'salesman_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->salesman_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[8] . " , Salesman Name does not exist. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $salesman_id = $resultset[0]->salesman_id;

                    }

                }

                $department_id = '';

                if ($flag && !empty($arrFile[10])) {

                    $condi = " dept_code=" . "'" . mysql_escape_string(strtolower($arrFile[10])) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_department', 'dept_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->dept_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[10] . " , Department does not exist. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $department_id = $resultset[0]->dept_id;

                    }

                }

                $category_id = '';

                if ($flag && !empty($arrFile[11])) {

                    $condi = " category_name=" . "'" . mysql_escape_string(strtolower($arrFile[11])) . "'  AND status = 'A' ";

                    $resultset = $this->_getSelectList2('table_project_category', 'category_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->category_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[11] . " , Project Category does not exist. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $category_id = $resultset[0]->category_id;

                    }

                }

                $specification_type_id = '';

                if ($flag && !empty($arrFile[13])) {

                    $condi = " specification_name=" . "'" . mysql_escape_string(strtolower($arrFile[13])) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList2('table_specification_type', 'specification_type_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->specification_type_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[13] . " , Specification Type does not exist. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $specification_type_id = $resultset[0]->specification_type_id;

                    }

                }

                $product_type_id = '';

                if ($flag && !empty($arrFile[14])) {

                    $condi = " product_type_name=" . "'" . mysql_escape_string(strtolower($arrFile[14])) . "' AND status = 'A' ";

                    $resultset = $this->_getSelectList2('table_product_type_master', 'product_type_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->product_type_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[14] . " , Product Type does not exist. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $product_type_id = $resultset[0]->product_type_id;

                    }

                }

                $item_id = '';

                if ($flag && !empty($arrFile[15])) {

                    $condi = " item_name=" . "'" . mysql_escape_string(strtolower($arrFile[15])) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_item', 'item_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->item_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[15] . " , Item does not exist. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $item_id = $resultset[0]->item_id;

                    }

                }

                $brand_id = '';

                if ($flag && !empty($arrFile[16])) {

                    $condi = " brand_name=" . "'" . mysql_escape_string(strtolower($arrFile[16])) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_brands', 'brand_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->brand_id == "") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " ," . $arrFile[16] . "," . $arrFile[17] . "  ," . $arrFile[16] . " , Brand does not exist. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $brand_id = $resultset[0]->brand_id;

                    }

                }

                // Database Insert Query

                if ($flag) {

                    $data = array();

                    //$str = preg_replace('/[^A-Za-z0-9\. -]/', '', $str);

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    //$data['project_code']= date("Y").'_'.uniqid();

                    $data['retailer_id'] = $retailerId;

                    $data['distributor_id'] = $distId;

                    $data['project_name'] = mysql_escape_string($arrFile[0]);

                    $data['zone_id'] = $zone_id;

                    $data['project_zone'] = $project_zone_id;

                    /*add relationship class and region */

                    $type = mysql_escape_string(strtolower($arrFile[1]));

                    if ($type == "customer") {

                        $CusType = "R";

                    } else {

                        $CusType = "D";

                    }

                    $data['type'] = $CusType;

                    $data['enquiry_month'] = date('F');

                    $data['specification_month'] = mysql_escape_string($arrFile[6]);

                    $data['maturity_date'] = date('Y-m-d', strtotime($arrFile[7]));

                    $data['salesman_id'] = $salesman_id;

                    $data['project_location'] = mysql_escape_string($arrFile[9]);

                    $data['department_id'] = $department_id;

                    $data['category_id'] = $category_id;

                    //$data['builder_name']= mysql_escape_string($this->clean($arrFile[12]));

                    //$data['builder_address']= mysql_escape_string($this->clean($arrFile[13]));

                    $data['specification_type_id'] = $specification_type_id;

                    $data['projected_qty'] = mysql_escape_string($arrFile[12]);

                    $data['item_id'] = $item_id;

                    $data['brand_id'] = $brand_id;

                    $data['product_type_id'] = $product_type_id;

                    $data['specification_stage_status_id'] = 1;

                    $data['order_qty'] = mysql_escape_string($this->clean($arrFile[17]));

                    $data['created_date'] = date('Y-m-d');

                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = "New";

                    $data['status'] = "A";

                    $project_id = $this->_dbInsert($data, 'table_project');

                    if ($project_id != '') {

                        /*Updated Project Code*/

                        $new_ins_data = array();
                        $append_zone = '';

                        if (!empty($data['project_zone'])) {
                            $append_zone = '_' . $data['project_zone'];
                        }

                        $new_ins_data['project_code'] = date("Y") . '_' . date("M") . $append_zone . '_' . $project_id;

                        $this->_dbUpdate2($new_ins_data, "table_project", "project_Id = '" . $project_id . "'");

                        $data['project_code'] = $new_ins_data['project_code'];

                        $data['project_Id'] = $project_id;

                        $project_log_id = $this->_dbInsert($data, 'table_project_update_log');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    //Todo End: Sagar : 2nd Sep 2021 - import Project

    function uploadMonthWiseRouteList($salesman)

    {

        $fields = array($AliaseUsers['route'].' Name*', 'Salesman Code*', 'Year*', 'Month*', 'day1', 'day2', 'day3', 'day4', 'day5', 'day6', 'day7', 'day8', 'day9', 'day10', 'day11', 'day12', 'day13', 'day14', 'day15', 'day16', 'day17', 'day18', 'day19', 'day20', 'day21', 'day22', 'day23', 'day24', 'day25', 'day26', 'day27', 'day28', 'day29', 'day30', 'day31');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

//        $resultset = "";

        $row = 0;

        $salesman_id = "";

//        $route_name = "";

//        $division_id = "";

//        $year = "";

//        $month = "";   $day1 = "";        $day2 = "";        $day3 = "";        $day4 = "";         $day5 = "";

//        $day6 = "";    $day7 = "";        $day8 = "";        $day9 = "";        $day10 = "";        $day11 = "";

//        $day12 = "";   $day13 = "";       $day14 = "";      $day15 = "";        $day16 = "";        $day17 = "";

//        $day18 = "";   $day19 = "";       $day20 = "";      $day21 = "";        $day22 = "";        $day23 = "";

//        $day24 = "";   $day25 = "";       $day26 = "";      $day27 = "";        $day28 = "";        $day29 = "";

//        $day30 = "";   $day31 = "";

        while (!feof($file)) {

            $data = array();

//            $data2 = array();

            $arrFile = fgetcsv($file);

            $flag = true;

//            $day1 = trim($arrFile[4]);

//            $day2 = trim($arrFile[5]);

//            $day3 = trim($arrFile[6]);

//            $day4 = trim($arrFile[7]);

//            $day5 = trim($arrFile[8]);

//            $day6 = trim($arrFile[9]);

//            $day7 = trim($arrFile[10]);

//            $day8 = trim($arrFile[11]);

//            $day9 = trim($arrFile[12]);

//            $day10 = trim($arrFile[13]);

//            $day11 = trim($arrFile[14]);

//            $day12 = trim($arrFile[15]);

//            $day13 = trim($arrFile[16]);

//            $day14 = trim($arrFile[17]);

//            $day15 = trim($arrFile[18]);

//            $day16 = trim($arrFile[19]);

//            $day17 = trim($arrFile[20]);

//            $day18 = trim($arrFile[21]);

//            $day19 = trim($arrFile[22]);

//            $day20 = trim($arrFile[23]);

//            $day21 = trim($arrFile[24]);

//            $day22 = trim($arrFile[25]);

//            $day23 = trim($arrFile[26]);

//            $day24 = trim($arrFile[27]);

//            $day25 = trim($arrFile[28]);

//            $day26 = trim($arrFile[29]);

//            $day27 = trim($arrFile[30]);

//            $day28 = trim($arrFile[31]);

//            $day29 = trim($arrFile[32]);

//            $day30 = trim($arrFile[33]);

//            $day31 = trim($arrFile[34]);

            // $salesman_name    =trim($arrFile[0]);

            // $route_name   =trim($arrFile[1]);

            $route_name = (strtolower(trim($arrFile[0])));

            $salesman_code = (trim($arrFile[1]));

            // $division_name = mysql_escape_string(strtolower(trim($arrFile[2])));

            $year = trim($arrFile[2]);

            $month = trim($arrFile[3]);

            // $assignDay = mysql_escape_string(trim($arrFile[3]));

            $route_schedule_id = 0;

//            $division_id = 0;

            $route_id = 0;

//            $route_division_id = 0;

//            $salesman_division_id = 0;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == $AliaseUsers['route']." Name*" || empty($arrFile[1]) || $arrFile[1] == "Salesman Code*" || empty($arrFile[2]) || $arrFile[2] == "Year*" || empty($arrFile[3]) || $arrFile[3] == "Month*") {

                    if (empty($arrFile[0]) || $arrFile[0] == $AliaseUsers['route']." Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= ", " . $fields[0] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Salesman Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= ", " . $fields[1] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Year*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= ", " . $fields[2] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[3]) || $arrFile[3] == "Month*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= ", " . $fields[3] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // Check Route Name exists in the system.

                if ($flag) {

                    $condi = " LOWER(route_name)='" . strtolower($route_name) . "' AND status = 'A' ";

                    $resultset = $this->_getSelectList('table_route', 'route_id, account_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= $condi . "-" . $route_name . "-" . $arrFile[0] . ", ".$AliaseUsers['route']." Name doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $route_id = $resultset[0]->route_id;

                        // $route_division_id = $resultset[0]->division_id;

                    }

                }

                // Check Salesman exists in the system or not.

                if ($flag) {

                    $condi = " s.employee_code='" . $salesman_code . "' AND s.status = 'A' ";

                    $resultset = $this->_getSelectList('table_salesman as s', 's.salesman_id,s.account_id', '', $condi .
                        $salesman);

                    if (!is_array($resultset) && empty($resultset)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= ",  Salesman doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $salesman_id = $resultset[0]->salesman_id;

                    }

                }

                $monthsArr = array('January' => 1, 'February' => 2, 'March' => 3, 'April' => 4, 'May' => 5, 'June' => 6, 'July' => 7, 'August' => 8, 'September' => 9, 'October' => 10, 'November' => 11, 'December' => 12);

                if ($flag) {

                    $current_month = date('n');

                    $monthValue = $monthsArr[ucwords($month)];

                    if ($monthValue < $current_month && $year <= date('Year')) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= ", " . $month . " Month and Year could not be less than the current year.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // Insert/Update data in the system

                if ($flag) {

                    /* Find Already exits route plans */

                    // $monthValue = date("m", strtotime($month));

                    $monthValue = $monthsArr[ucwords($month)];

                    $condi = " salesman_id='" . $salesman_id . "' and  month='" . $monthValue . "' and year='" . $year . "' ";

                    $route_exits = $this->_getSelectList('table_route_scheduled', 'salesman_id,month,year,route_schedule_id', '', $condi);

                    /* echo '<pre>';

                      print_r($route_exits);

                      echo sizeof($route_exits); */

                    if (sizeof($route_exits) > 0 && $route_exits[0]->route_schedule_id != "") {

                        $route_schedule_id = $route_exits[0]->route_schedule_id;

                    } else {

                        //$monthValue = date("m", strtotime($month));

                        if ($route_id != '') {

                            $data['account_id'] = $_SESSION['accountId'];

                            $data['salesman_id'] = $salesman_id;

                            $data['month'] = $monthValue;

                            $data['year'] = $year;

                            $data['created_date'] = date('Y-m-d');

                            $data['status'] = 'A';

                            $route_schedule_id = $this->_dbInsert($data, 'table_route_scheduled');

                        }

                    }

                    if ($route_schedule_id != "") {

//                        $current_month = date('n');

//                        $dayValue = date('d');

                        /* Already Exits Route details have been first delete */

//                        $excondi = " route_id='" . $route_id . "' and route_schedule_id='" . $route_schedule_id . "' ";

//                        $route_detaild_exits = $this->_getSelectList2('table_route_schedule_details', 'route_id,route_schedule_id', '', $excondi);

//                        if (is_array($route_detaild_exits)) {

//                            $this->mysql_query("delete from table_route_schedule_details where " . $excondi);

//                        }

                        for ($i = 4; $i < sizeof($arrFile); $i++) {

                            if ($arrFile[$i] != "") {

                                $key = $i;

                                $assign_day = $key - 3;

                                if ($route_id != '') {

                                    $data2 = [];

                                    $data2['route_id'] = $route_id;   // promo_desc

                                    $data2['assign_day'] = $assign_day;

                                    $data2['route_schedule_id'] = $route_schedule_id;

                                    $data2['status'] = 'A';

                                    $this->_dbInsert($data2, 'table_route_schedule_details');

                                }

                            }

                        }  // ends loop

                    } // ends route_schedule_id condition

                } // ends flag

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    //Todo Start: Sagar: 28th Sep 2021: import Customer Wise Route

    function uploadMonthlySalesmanRetailerAssignmentList()
    {
        if ($_SESSION['MonthSession'] != "") {
            $month = $_SESSION['MonthSession'];
        }
        if ($_SESSION['YearSession'] != "") {
            $year = $_SESSION['YearSession'];
        }
        $days = cal_days_in_month(CAL_GREGORIAN, $month, $year);
        $fields = array('Salesman Code*', 'Customer Code*', 'Year*', 'Month*');
        for ($i = 1; $i <= $days; $i++) {
            $dayName = date('Y-m-d', strtotime($year . '-' . $month . '-' . $i));
            $dayValue = 'day' . $i . '(' . date('D', strtotime($dayName)) . ')';
            $fields[] = $dayValue;
        }
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $row = 0;
        while (!feof($file)) {
            $arrFile = fgetcsv($file);
            $flag = true;
            $salesman_code = mysql_escape_string(strtolower(trim($arrFile[0])));
            $customer_code = mysql_escape_string(strtolower(trim($arrFile[1])));
            $year = trim($arrFile[2]);
            $month = trim($arrFile[3]);
            if ($row > 0 && is_array($arrFile)) {
                if (empty($arrFile[0]) || $arrFile[0] == "Salesman Code*" || empty($arrFile[1]) || $arrFile[1] == "Customer Code*" || empty($arrFile[2]) || $arrFile[2] == "Year*" || empty($arrFile[3]) || $arrFile[3] == "Month*") {
                    if (empty($arrFile[0]) || $arrFile[0] == "Salesman Code*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[1] . "," . $arrFile[2] . " ," . $arrFile[3];
                        for ($i = 4; $i < count($fields); $i++) {
                            $strErr .= ", " . $arrFile[$i];
                        }
                        $strErr .= ", " . $fields[0] . " shouldn't be empty  \n";
                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Customer Code*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[1] . "," . $arrFile[2] . " ," . $arrFile[3];
                        for ($i = 4; $i < count($fields); $i++) {
                            $strErr .= ", " . $arrFile[$i];
                        }
                        $strErr .= ", " . $fields[1] . " shouldn't be empty  \n";
                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Year*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[1] . "," . $arrFile[2] . " ," . $arrFile[3];
                        for ($i = 4; $i < count($fields); $i++) {
                            $strErr .= ", " . $arrFile[$i];
                        }
                        $strErr .= ", " . $fields[2] . " shouldn't be empty  \n";
                    } elseif (empty($arrFile[3]) || $arrFile[3] == "Month*") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[1] . "," . $arrFile[2] . " ," . $arrFile[3];
                        for ($i = 4; $i < count($fields); $i++) {
                            $strErr .= ", " . $arrFile[$i];
                        }
                        $strErr .= ", " . $fields[3] . " shouldn't be empty  \n";
                    }
                    $str_err_array = array($strErr);
                    $flag = false;
                }
                // All days should not be empty
                // Check Salesman exists in the system or not.
                if ($flag) {
                    $condi = " LOWER(s.employee_code) = '" . $salesman_code . "' AND s.status='A' ";
                    $resultset = $this->_getSelectList('table_salesman as s', "s.salesman_id", '', $condi);
                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->salesman_id == "") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3];
                        for ($i = 4; $i < count($fields); $i++) {
                            $strErr .= ", " . $arrFile[$i];
                        }
                        $strErr .= ", Salesman doesn't exists in the system\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    } else {
                        $salesman_id = $resultset[0]->salesman_id;
                    }
                }
                if ($flag) {
                    $condi = " LOWER(r.retailer_code)='" . $customer_code . "' AND r.status='A' ";
//                    $resultset = $this->_getSelectList('table_retailer','retailer_id, salesman_id','',$condi);
                    $resultset = $this->_getSelectList('table_retailer as r ', "r.retailer_id", '', " $condi ");
                    if (!is_array($resultset) && empty($resultset)) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3];
                        for ($i = 4; $i < count($fields); $i++) {
                            $strErr .= ", " . $arrFile[$i];
                        }
                        $strErr .= ", Customer Code doesn't exists in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    } else {
                        $retailer_id = $resultset[0]->retailer_id;
                    }
                }
                if ($flag) {
                    $current_month = date('n');
                    $monthValue = date("n", strtotime($month));
                    if ($monthValue < $current_month && $year <= date('Year')) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3];
                        for ($i = 4; $i < count($fields); $i++) {
                            $strErr .= ", " . $arrFile[$i];
                        }
                        $strErr .= ", " . $month . " Month and Year could not be less than the current Month and Year.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                $monthsArr = array('January' => 1, 'February' => 2, 'March' => 3, 'April' => 4, 'May' => 5, 'June' => 6, 'July' => 7, 'August' => 8, 'September' => 9, 'October' => 10, 'November' => 11, 'December' => 12);
                if ($flag) {
                    $monthValue = $monthsArr[ucwords($month)];
                    $condi = " LOWER(salesman_id)='" . $salesman_id . "' and  month='" . $monthValue . "' and year='" . $year . "' ";
                    $route_exits = $this->_getSelectList('table_salesman_retailer_assignment', 'salesman_id,month,year,route_schedule_id', '', $condi);
                    if ((count($route_exits) > 0) && !empty($route_exits[0]->route_schedule_id)) {
                        $route_schedule_id = $route_exits[0]->route_schedule_id;
                        $data = [];
                        $data['last_update_date'] = date('Y-m-d H:i:s');
                        $this->_dbUpdate2($data, 'table_salesman_retailer_assignment', "route_schedule_id=" . $route_schedule_id);
                    } else {
                        $monthValue = $monthsArr[ucwords($month)];
                        if ($retailer_id != '') {
                            $data = [];
                            $data['account_id'] = $_SESSION['accountId'];   // promo_desc
                            $data['salesman_id'] = $salesman_id;
                            $data['month'] = $monthValue;
                            $data['year'] = $year;
                            $data['created_date'] = date('Y-m-d H:i:s');
                            $data['last_update_date'] = date('Y-m-d H:i:s');
                            $data['status'] = 'A';
                            $route_schedule_id = $this->_dbInsert($data, 'table_salesman_retailer_assignment');
                        }
                    }
                    if ($route_schedule_id != "") {
//                        $current_month   =date('n');
//                        $dayValue = date('d');
//                        /* Already Exits Route details have been first delete */
//                        $excondi =" retailer_id ='".$retailer_id."' and route_schedule_id='".$route_schedule_id."'";
//                        $route_detaild_exits = $this->_getSelectList2('table_salesman_retailer_assignment_details','details_id','',$excondi);
//
//                        if(is_array($route_detaild_exits) && (count($route_detaild_exits) > 0)) {
//                            $this->mysql_query("DELETE FROM table_salesman_retailer_assignment_details WHERE " .$excondi . " and assign_day > $dayValue ");
//                        }
//
//
//                        for($i=4;$i<sizeof($arrFile); $i++) {
//                            if(!empty($arrFile[$i])) {
//                                $key=$i;
//                                $assign_day = $key-3;
//                                if(!empty($retailer_id) && ($assign_day > $dayValue))
//                                {
//                                    $data2['retailer_id'] = $retailer_id;   // promo_desc
//                                    $data2['assign_day'] = $assign_day;
//                                    $data2['route_schedule_id'] = $route_schedule_id;
//                                    $data2['status'] = 'A';
//                                    $this->_dbInsert($data2,'table_salesman_retailer_assignment_details');
//                                }
//                            }
//                        }  // ends loop
                        for ($i = 4; $i < sizeof($arrFile); $i++) {
                            if (isset($arrFile[$i]) && !empty($arrFile[$i])) {
                                $key = $i;
                                $assign_day = $key - 3;
                                if (!empty($retailer_id)) {
                                    $excondi = " retailer_id ='" . $retailer_id . "' and route_schedule_id='" . $route_schedule_id . "' AND assign_day = '" . $assign_day . "' ";
                                    $route_detaild_exits = $this->_getSelectList2('table_salesman_retailer_assignment_details', 'details_id', '', $excondi);
                                    if (!is_array($route_detaild_exits) && (count($route_detaild_exits) <= 0)) {
                                        $data2 = [];
                                        $data2['retailer_id'] = $retailer_id;
                                        $data2['assign_day'] = $assign_day;
                                        $data2['route_schedule_id'] = $route_schedule_id;
                                        $data2['status'] = 'A';
                                        $this->_dbInsert($data2, 'table_salesman_retailer_assignment_details');
                                    }
                                }
                            }
                        }
                    } // ends route_schedule_id condition
                } // ends flag
            }
            $row++;
        }
        fclose($file);
        if ($row <= 2)
            return "no";
        else
            return $str_err_array;
    }

    //Todo End: Sagar: 28th Sep 2021: import Customer Wise Route

    //Todo Start: Sagar: 11th Oct 2021 : import Campaign Customer File

    function uploadCampaignCustomerFile($camp_id)
    {

        ob_clean();

        $fields = array('Customer Code*');

        $file = fopen($_FILES['campForCustFile']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if (($row > 0) && (is_array($arrFile))) {

                if (empty($arrFile[0])) {

                    if (empty($arrFile[0]) || $arrFile[0] == "Customer Code*") {

                        $strErr .= "Error in Row - " . $row . " ," . $fields[0] . " shouldn't be empty. \n";

                    }

                    $flag = false;

                }

                if ($flag) {

                    $retId = 0;

                    $condi = " LOWER(retailer_code) LIKE '" . mysql_escape_string(strtolower($arrFile[0])) . "' AND status = 'A' ";

                    $retRec = $this->_getSelectList2('table_retailer', "retailer_id", '', $condi);

                    if (is_array($retRec) && (count($retRec) > 0)) {

                        $retId = $retRec[0]->retailer_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", Invalid " . $fields[0] . " \n";

                        $flag = false;

                    }

                }

                if ($flag && ($retId > 0)) {

                    $condi3 = " retailer_id = " . $retId . " AND campaign_id = $camp_id ";

                    $auRec = $this->_getSelectList2('table_campaign_party', "*", '', $condi3);

                    if (!is_array($auRec) && (count($auRec) <= 0)) {

                        $data = [];

                        $data['campaign_id'] = $camp_id;

                        $data['retailer_id'] = $retId;

                        $this->_dbInsert($data, 'table_campaign_party');

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", Already Exists!  \n";

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2) {

            return "no";

        } else {

            return $strErr;

        }

    }

    //Todo End: Sagar: 11th Oct 2021 : import Campaign Customer File

    //Todo Start: Ankit: 09th nov 2021 : import brands File

    function uploadbrands()

    {

        $fields = array('Brands Name*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Brands Name*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "Brands Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $fields[0] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }
$arrFile[0] = $this->toCamelCase($arrFile[0]);
                if ($flag) {

                    $condi = " LOWER(brand_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "'";

                    $BrandRec = $this->_getSelectList2('table_brands', "brand_id", '', $condi);

                    if (is_array($BrandRec) && (count($BrandRec) > 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " , Brand already exists. \n";

                        $str_err_array = array($strErr);

                    } else {

                        $brand = array();

                        $brand['account_id'] = mysql_escape_string($this->clean($_REQUEST['account_id']));

                        $brand['brand_name'] = mysql_escape_string($this->clean(trim($arrFile[0])));

                        $brand['create_date'] = date('Y-m-d');

                        $this->_dbInsert($brand, 'table_brands');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    //Todo END: Ankit: 09th nov 2021 : import brands File

//Todo Start: Sagar: 14th Feb 2022 : Import Salesman & Customer Mapping

    function uploadCustomerSalesmanMappingFile($salesman)
    {

        $fields = array('Customer Code*', 'Salesman Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Customer Code*") {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $fields[0] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if (empty($arrFile[1]) || $arrFile[1] == "Salesman Code*") {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $fields[1] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $custId = 0;

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(retailer_code)='" . mysql_escape_string(strtolower($arrFile[0])) . "' and status = 'A' ";

                    $custRec = $this->_getSelectList('table_retailer', 'retailer_id', '', $condi);

                    if (is_array($custRec) && (count($custRec) > 0)) {

                        $custId = $custRec[0]->retailer_id;

                    } else {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,Customer does not exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $salesmanId = 0;

                    $condi = " s.account_id=" . $_SESSION['accountId'] . "  AND  LOWER(s.employee_code)='" . mysql_escape_string(strtolower($arrFile[1])) . "'";

                    $salesmanRec = $this->_getSelectList('table_salesman as s', 's.salesman_id', '', $condi . $salesman);

                    if (is_array($salesmanRec) && (count($salesmanRec) > 0)) {

                        $salesmanId = $salesmanRec[0]->salesman_id;

                    } else {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,Salesman does not exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($custId > 0) && ($salesmanId > 0)) {

                    $mappingRec = $this->_getSelectList('table_customer_salesman_mapping', 'mapping_id', '', "retailer_id = $custId AND salesman_id = $salesmanId");

                    if (is_array($mappingRec) && (count($mappingRec) > 0)) {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,Mapping already exists in the system  \n";

                        $str_err_array = array($strErr);

                    } else {

                        $data = [];

                        $data['account_id'] = $_SESSION['accountId'];

                        $data['retailer_id'] = $custId;

                        $data['salesman_id'] = $salesmanId;

                        $data['created_date'] = date('Y-m-d H:i:s');

                        $this->_dbInsert($data, 'table_customer_salesman_mapping');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//Todo End: Sagar: 14th Feb 2022 : Import Salesman & Customer Mapping

    /****************************Upload customer contact by sachin on 2 march 22*******************************************/

    function uploadCustomerContact()
    {

        $fields = array('Retailer Code*', 'Contact Name*', 'Phone No1*', 'Designation*', 'email id', 'Phone No2');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Retailer Code*") {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . " ," . $fields[0] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if (empty($arrFile[1]) || $arrFile[1] == "Contact Name*") {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . " ," . $fields[1] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if (empty($arrFile[2]) || $arrFile[2] == "Phone No1*") {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . " ," . $fields[2] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if (empty($arrFile[3]) || $arrFile[3] == "Designation*") {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . " ," . $fields[3] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $phnNo = trim($arrFile[2]);

                    $pattern = "/^[0-9+\-]*$/";

                    if (!preg_match($pattern, $phnNo)) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Please Provide the valid Phone Number.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $custId = 0;

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(retailer_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' and status = 'A' ";

                    $custRec = $this->_getSelectList('table_retailer', 'retailer_id,country', '', $condi);

                    if (is_array($custRec) && (count($custRec) > 0)) {

                        $custId = $custRec[0]->retailer_id;

                        $country_id = $custRec[0]->country;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . " ,Customer does not exists in the system \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $desgId = 0;

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(designation_name)='" . mysql_escape_string(strtolower(trim($arrFile[3]))) . "' and status = 'A' ";

                    $custRec = $this->_getSelectList('table_designation', 'designation_id', '', $condi);

                    if (is_array($custRec) && (count($custRec) > 0)) {

                        $desgId = $custRec[0]->designation_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . " ,Designation does not exists in the system \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $exists = 0;

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND retailer_id=" . $custId . " and customer_phone_no='" . mysql_escape_string(trim($arrFile[2])) . "'";

                    $custRec = $this->_getSelectList('table_customer', 'customer_id', '', $condi);

                    if (is_array($custRec) && (count($custRec) > 0)) {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . " ,Customer Contact already exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {
                    $condi = " LOWER(country_id)='" . mysql_escape_string($country_id) . "' AND status = 'A' ";

                    $StRec = $this->_getSelectList2('country', "contact_min_length,contact_max_length", '', $condi);

                    if (is_array($StRec) && (count($StRec) > 0)) {
                        $cnt_1 = strlen(trim($arrFile[2]));
                        $cnt_2 = strlen(trim($arrFile[5]));

                        if ($cnt_1 >= $StRec[0]->contact_min_length && $cnt_1 <=
                            $StRec[0]->contact_max_length) {

                            $phone_no = trim($arrFile[2]);

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Phone number " . $arrFile[2] . " \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                        if (!empty($arrFile[5])) {
                            if ($cnt_2 >= $StRec[0]->contact_min_length && $cnt_2 <=
                                $StRec[0]->contact_max_length) {
                                $phone_no1 = trim($arrFile[3]);

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[5] . "\n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        } else {
                            $phone_no1 = trim($arrFile[5]);
                        }

                    }
                }

                if ($flag && ($custId > 0) && ($desgId > 0)) {

                    $data = [];

                    $data['account_id'] = $_SESSION['accountId'];

                    $data['retailer_id'] = $custId;

                    $data['designation_id'] = $desgId;

                    $data['customer_name'] = mysql_escape_string(trim($arrFile[1]));

                    $data['customer_phone_no'] = mysql_escape_string(trim($phone_no));

                    $data['customer_email'] = mysql_escape_string(trim($arrFile[4]));

                    $data['customer_phone_no2'] = mysql_escape_string(trim($phone_no1));

                    $data['server_date'] = date('Y-m-d');

                    $data['server_time'] = date('H:i:s');

                    $data['status'] = 'A';

                    $this->_dbInsert($data, 'table_customer');

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//Todo Start : Ankit : 05th Apr 2022 Route Mapping

    function uploadNewRouteList()
    {

        $fields = array('Retailer Code*', $AliaseUsers['route'].' Name*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $resultset = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            $retailer_code = mysql_escape_string(strtolower(trim($arrFile[0])));

            $route_name = mysql_escape_string(strtolower(trim($arrFile[1])));

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Retailer Code*" || empty($arrFile[1]) || $arrFile[1] == $AliaseUsers['route']." Name*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "Retailer Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == $AliaseUsers['route']." Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[1] . " shouldn't be empty. \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $custId = 0;

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(retailer_code)='" . $retailer_code . "' and status = 'A' ";

                    $custRec = $this->_getSelectList('table_retailer', 'retailer_id,state,city', '', $condi);

                    if (is_array($custRec) && (count($custRec) > 0)) {

                        $custId = $custRec[0]->retailer_id;

                        $stateId = $custRec[0]->state;

                        $cityId = $custRec[0]->city;

                        if (empty($stateId) && empty($cityId)) {

                            $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,Customer's State/City does not exists in the system \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,Customer Code does not exists in the system \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // Check Route Name exists in the system.

                if ($flag) {

                    $condi = " LOWER(route_name)='" . $route_name . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_route', 'route_id,state_id,city_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset)) {

                        $data = [];

                        $data['account_id'] = $_SESSION['accountId'];

                        $data['state_id'] = $stateId;

                        $data['city_id'] = $cityId;

                        $data['route_name'] = $route_name;

                        $data['status'] = 'A';
                        //Todo Start : Sudhanshu 20 may 2024 : add upadted and created date
                        $data['created_at'] = date('Y-m-d H:i:s');
                        $data['updated_at'] = date('Y-m-d H:i:s');
                        //Todo End : Sudhanshu 20 may 2024 : add upadted and created date

                        $route_id = $this->_dbInsert($data, 'table_route');

                    } else {

                        $route_id = $resultset[0]->route_id;

                        $stateArr = array_filter(explode(',', $resultset[0]->state_id));

                        $cityArr = array_filter(explode(',', $resultset[0]->city_id));

                        array_push($stateArr, $stateId);

                        array_push($cityArr, $cityId);

                        $comma_separated_state = implode(",", array_unique($stateArr));

                        $comma_separated_city = implode(",", array_unique($cityArr));

                        $data3 = array();

                        $data3['state_id'] = $comma_separated_state;

                        $data3['city_id'] = $comma_separated_city;
                        //Todo Start : Sudhanshu 20 may 2024 : add upadted and created date

                        $data3['updated_at'] = date('Y-m-d H:i:s');
                        //Todo End : Sudhanshu 20 may 2024 : add upadted and created date

                        $this->_dbUpdate($data3, 'table_route', " route_id='" . $route_id . "'");

                    }

                }

                if ($flag) {

                    $exists = 0;

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND retailer_id=" . $custId . " and route_id='" . $route_id . "'";

                    $custRec = $this->_getSelectList('table_route_retailer', '*', '', $condi);

                    if (is_array($custRec) && (count($custRec) > 0)) {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . ", Customer ". $AliaseUsers['route']." already exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($custId > 0) && ($route_id > 0)) {

                    $data = [];

                    $data['account_id'] = $_SESSION['accountId'];

                    $data['retailer_id'] = $custId;

                    $data['route_id'] = $route_id;

                    $data['sort_order'] = 0;

                    $this->_dbInsert($data, 'table_route_retailer');

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//Todo End : Ankit : 05th Apr 2022 Route Mapping

    //Todo Start: Ankit : 11th Apr 2022 Route Assignment By Month with Designation wise

    function uploadDesigantionWiseMonthWiseRouteList()

    {

        $fields = array('Route Name*', 'Salesman Pepup Code*', 'Year*', 'Month*', 'day1', 'day2', 'day3', 'day4', 'day5', 'day6', 'day7', 'day8', 'day9', 'day10', 'day11', 'day12', 'day13', 'day14', 'day15', 'day16', 'day17', 'day18', 'day19', 'day20', 'day21', 'day22', 'day23', 'day24', 'day25', 'day26', 'day27', 'day28', 'day29', 'day30', 'day31');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        $salesman_id = "";

        while (!feof($file)) {

            $data = array();

            $arrFile = fgetcsv($file);

            $flag = true;

            $route_name = (strtolower(trim($arrFile[0])));

            $salesman_code = (trim($arrFile[1]));

            $year = trim($arrFile[2]);

            $month = trim($arrFile[3]);

            $route_schedule_id = 0;

            $route_id = 0;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Route Name*" || empty($arrFile[1]) || $arrFile[1] == "Salesman Pepup Code*" || empty($arrFile[2]) || $arrFile[2] == "Year*" || empty($arrFile[3]) || $arrFile[3] == "Month*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "Route Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= ", " . $fields[0] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Salesman Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= ", " . $fields[1] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Year*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= ", " . $fields[2] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[3]) || $arrFile[3] == "Month*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= ", " . $fields[3] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // Check Route Name exists in the system.

                if ($flag) {

                    $condi = " LOWER(route_name)='" . strtolower($route_name) . "' AND status = 'A' ";

                    $resultset = $this->_getSelectList('table_route', 'route_id, account_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= $condi . "-" . $route_name . "-" . $arrFile[0] . ", Route Name doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $route_id = $resultset[0]->route_id;

                        // $route_division_id = $resultset[0]->division_id;

                    }

                }

                // Check Salesman exists in the system or not.

                $_objArrayList = new ArrayList();

                $lowerHierSalesmanIdsArr = $_objArrayList->SalesmanArrayList(); // For Admin and Salesman Login

                if ($flag) {

                    $condi = " employee_code='" . $salesman_code . "' AND status = 'A' ";

                    $resultset = $this->_getSelectList('table_salesman', 'salesman_id,account_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= ",  Salesman doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $salesman_id = $resultset[0]->salesman_id;

                        if ($salesman_id > 0) {

                            if (!in_array($salesman_id, $lowerHierSalesmanIdsArr)) {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3];

                                for ($i = 4; $i < count($fields); $i++) {

                                    $strErr .= ", " . $arrFile[$i];

                                }

                                $strErr .= ", This employee is not reporting to you. You cannot Plan PJP for this user.\n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        }

                    }

                }

                $monthsArr = array('January' => 1, 'February' => 2, 'March' => 3, 'April' => 4, 'May' => 5, 'June' => 6, 'July' => 7, 'August' => 8, 'September' => 9, 'October' => 10, 'November' => 11, 'December' => 12);

                if ($flag) {

                    $current_month = date('n');

                    $monthValue = $monthsArr[ucwords($month)];

                    if ($monthValue < $current_month && $year <= date('Y')) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3];

                        for ($i = 4; $i < count($fields); $i++) {

                            $strErr .= ", " . $arrFile[$i];

                        }

                        $strErr .= ", " . $month . " Month and Year could not be less than the current year.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // Insert/Update data in the system

                if ($flag) {

                    /* Find Already exits route plans */

                    // $monthValue = date("m", strtotime($month));

                    $monthValue = $monthsArr[ucwords($month)];

                    $condi = " salesman_id='" . $salesman_id . "' and  month='" . $monthValue . "' and year='" . $year . "' ";

                    $route_exits = $this->_getSelectList('table_route_scheduled', 'salesman_id,month,year,route_schedule_id', '', $condi);

                    if (sizeof($route_exits) > 0 && $route_exits[0]->route_schedule_id != "") {

                        $route_schedule_id = $route_exits[0]->route_schedule_id;

                    } else {

                        if ($route_id != '') {

                            $data['account_id'] = $_SESSION['accountId'];

                            $data['salesman_id'] = $salesman_id;

                            $data['month'] = $monthValue;

                            $data['year'] = $year;

                            $data['created_date'] = date('Y-m-d');

                            $data['status'] = 'A';

                            $route_schedule_id = $this->_dbInsert($data, 'table_route_scheduled');

                        }

                    }

                    if ($route_schedule_id != "") {

                        for ($i = 4; $i < sizeof($arrFile); $i++) {

                            if ($arrFile[$i] != "") {

                                $key = $i;

                                $assign_day = $key - 3;

                                if ($route_id != '') {

                                    $data2 = [];

                                    $data2['route_id'] = $route_id;   // promo_desc

                                    $data2['assign_day'] = $assign_day;

                                    $data2['route_schedule_id'] = $route_schedule_id;

                                    $data2['status'] = 'A';

                                    $this->_dbInsert($data2, 'table_route_schedule_details');

                                }

                            }

                        }  // ends loop

                    } // ends route_schedule_id condition

                } // ends flag

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//Todo End: Ankit : 11th Apr 2022 Route Assignment By Month with Designation wise

    //Todo Start: Ankit : 13th Apr 2022 Retailer Target

    function uploadRetailerTarget()

    {

        $fields = array('Retailer Code*', 'Month*', 'Year*', 'Target Value*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $data = array();

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                $retailer_code = trim($arrFile[0]);

                $month = trim($arrFile[1]);

                $year = trim($arrFile[2]);

                $target_value = trim($arrFile[3]);

                $monthsArr = array('January' => 1, 'February' => 2, 'March' => 3, 'April' => 4, 'May' => 5, 'June' => 6, 'July' => 7, 'August' => 8, 'September' => 9, 'October' => 10, 'November' => 11, 'December' => 12);

                $monthValue = $monthsArr[ucwords($month)];

                if (empty($arrFile[0]) || $arrFile[0] == "Retailer Code*" || empty($arrFile[1]) || $arrFile[1] == "Month*" || empty($arrFile[2]) || $arrFile[3] == "Year*" || empty($arrFile[3]) || $arrFile[3] == "Target Value*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "Retailer Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        $strErr .= ", " . $fields[0] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Month*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        $strErr .= ", " . $fields[1] . " shouldn't be empty \n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Year*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        $strErr .= ", " . $fields[2] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[3]) || $arrFile[3] == "Target Value*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        $strErr .= ", " . $fields[3] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }// ends

                if ($flag) {

                    if (strpos($arrFile[3], '.')) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        $strErr .= ", " . $fields[3] . " shouldn't be decimal number   \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // Check Retailer Code exists in the system.

                if ($flag) {

                    $condi = " LOWER(retailer_code)='" . strtolower($retailer_code) . "'";

                    $resultset = $this->_getSelectList('table_retailer', 'retailer_id, account_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3];

                        $strErr .= ", Retailer doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $retailer_id = $resultset[0]->retailer_id;

                    }

                }

                if ($flag) {

                    $condi = " retailer_id='" . $retailer_id . "' AND target_month = '" . $monthValue . "' AND target_year = '" . $year . "' ";

                    $resultsets = $this->_getSelectList('table_retailer_target', 'target_id,account_id', '', $condi);

                    if (!empty($resultsets)) {

                        $id = $resultsets[0]->target_id;

                        $data2 = [];

                        $data2['target_value'] = mysql_escape_string($target_value);

                        $data2['updated_at'] = date('Y-m-d H:i:s');

                        $this->_dbUpdate($data2, 'table_retailer_target', " target_id=" . $id);

                    } else {

                        $current_month = date('n');

                        if ($monthValue < $current_month && $year <= date('Y')) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3];

                            $strErr .= ", " . $month . " Month and Year could not be less than the current year.\n";

                            $str_err_array = array($strErr);

                        } else {

                            $data['account_id'] = $_SESSION['accountId'];

                            $data['retailer_id'] = mysql_escape_string($retailer_id);

                            $data['target_value'] = mysql_escape_string($target_value);

                            $data['target_month'] = $monthValue;

                            $data['target_year'] = $year;

                            $data['created_at'] = date('Y-m-d H:i:s');

                            $data['updated_at'] = date('Y-m-d H:i:s');

                            $this->_dbInsert($data, 'table_retailer_target');

                        }

                    }

                } // ends flag

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    //Todo End: Ankit : 13th Apr 2022 Retailer Target

    //Todo Start: Sagar : 18th May 2022 : Import MGB Norms

    function uploadMGBNormsFileRetailer()

    {

        $fields = array('Retailer Code*', 'Product Code*', 'Norms*', 'Start Date*', 'End Date');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Retailer Code*" || empty($arrFile[1]) || $arrFile[1] == "Product Code*" || empty($arrFile[2]) || $arrFile[2] == "Norms*" || $arrFile[2] == "" || empty($arrFile[3]) || $arrFile[3] == "Start Date*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "Retailer Code*") {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ",  " . $fields[0] . " shouldn't be empty\n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Product Code*") {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ",  " . $fields[1] . " shouldn't be empty\n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Norms*" || $arrFile[2] == "") {

                        $strErr .= "Error in Row" . $row . ", " . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ",  " . $fields[2] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[3]) || $arrFile[3] == "Start Date*") {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ",  " . $fields[3] . " shouldn't be empty\n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if (strtotime(date('Y-m-d', strtotime(trim($arrFile[3])))) < strtotime(date('Y-m-d'))) {

                    $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . " , Start date shouldn't be less than current date \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $end_date = '';

                    if (!empty($arrFile[4])) {

                        if (strtotime(date('Y-m-d', strtotime(trim($arrFile[4])))) < strtotime(date('Y-m-d', strtotime(trim($arrFile[3]))))) {

                            $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ", End Date shouldn't be less than Start Date \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $end_date = date('Y-m-d', strtotime(trim($arrFile[4])));

                        }

                    }

                }

                if ($flag) {

                    $ret_id = 0;

                    $condi = " LOWER(retailer_code)='" . mysql_escape_string(strtolower($arrFile[0])) . "' AND status = 'A' ";

                    $RetRec = $this->_getSelectList('table_retailer', "retailer_id", '', $condi);

                    if (!is_array($RetRec) && sizeof($RetRec) <= 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ",Retailer doesn't exists in the system \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $ret_id = $RetRec[0]->retailer_id;

                    }

                }

                if ($flag) {

                    $item_id = 0;

                    $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower($arrFile[1])) . "'  AND status = 'A' ";

                    $ItemRec = $this->_getSelectList('table_item', "item_id", '', $condi);

                    if (!is_array($ItemRec) && sizeof($ItemRec) <= 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ",Product doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $item_id = $ItemRec[0]->item_id;

                    }

                }

                //Check Norms data exist with greater date

                if ($flag) {

                    $start_date = date('Y-m-d', strtotime(trim($arrFile[3])));

                    $condCheck = " retailer_id = '" . $ret_id . "' AND item_id = '" . $item_id . "' AND state_id <= 0 AND location_id <= 0 AND relationship_id <= 0 AND start_date > '" . $start_date . "' and end_date > '" . $start_date . "'  ";

                    $checkNormsDate = $this->_getSelectList('table_mgb_norms', '*', '', $condCheck);

                    if (is_array($checkNormsDate) && sizeof($checkNormsDate) > 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ",Norm Already exists in MGB \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $start_date = date('Y-m-d', strtotime(trim($arrFile[3])));

                    $checkFlag = true;

                    if (($ret_id > 0) && ($item_id > 0)) {

                        $cond1 = " retailer_id ='" . $ret_id . "' AND item_id = '" . $item_id . "' AND state_id <= 0 AND location_id <= 0 AND relationship_id <= 0 AND end_date = '" . $start_date . "' ";

                        $checkNorms1 = $this->_getSelectList('table_mgb_norms', '*', '', $cond1);

                        if (is_array($checkNorms1) && (sizeof($checkNorms1) > 0)) {

                            foreach ($checkNorms1 as $valueS) {

                                $data = array();

                                $norms_id = $valueS->norms_id;

                                $cond = " norms_id = '" . $norms_id . "'";

                                $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[2])));

                                $data['last_updated_date'] = date('Y-m-d H:i:s');

                                $data['last_update_status'] = 'Update';

                                $this->_dbUpdate($data, 'table_mgb_norms', $cond);

                                $checkFlag = false;

                            }

                        } else {

                            $cond = " retailer_id = '" . $ret_id . "' AND item_id = '" . $item_id . "' AND state_id <= 0 AND location_id <= 0 AND relationship_id <= 0 AND end_date > '" . $start_date . "' ";

                            $checkNorms = $this->_getSelectList('table_mgb_norms', '*', '', $cond);

                            if (is_array($checkNorms) && sizeof($checkNorms) > 0) {

                                foreach ($checkNorms as $valueS) {

                                    if (strtotime($start_date) == strtotime($valueS->start_date)) {

                                        $data = array();

                                        $norms_id = $valueS->norms_id;

                                        $cond = " norms_id = '" . $norms_id . "'";

                                        $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[2])));

                                        $data['last_updated_date'] = date('Y-m-d H:i:s');

                                        $data['last_update_status'] = 'Update';

                                        $this->_dbUpdate($data, 'table_mgb_norms', $cond);

                                        $checkFlag = false;

                                    } else {

                                        $data = array();

                                        $norms_id = $valueS->norms_id;

                                        $cond = " norms_id = '" . $norms_id . "'";

                                        $data['end_date'] = date('Y-m-d', strtotime($start_date . ' - 1 day'));

                                        $data['last_updated_date'] = date('Y-m-d H:i:s');

                                        $data['last_update_status'] = 'Update';

                                        $this->_dbUpdate($data, 'table_mgb_norms', $cond);

                                    }

                                }

                                if ($checkFlag) {

                                    $data = array();

                                    $data['account_id'] = $_SESSION['accountId'];

                                    $data['retailer_id'] = $ret_id;

                                    $data['item_id'] = $item_id;

                                    $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[2])));

                                    $data['start_date'] = date('Y-m-d', strtotime($start_date));

                                    if ($end_date != '') {

                                        $data['end_date'] = date('Y-m-d', strtotime($end_date));

                                    } else {

                                        $data['end_date'] = date('Y-m-d', strtotime($_SESSION['EndDate']));

                                    }

                                    $data['created_date'] = date('Y-m-d H:i:s');

                                    $data['last_updated_date'] = date('Y-m-d H:i:s');

                                    $data['last_update_status'] = 'New';

                                    $data['norms_status'] = 'A';

                                    $this->_dbInsert($data, 'table_mgb_norms');

                                }

                            } else {

                                $data = array();

                                $data['account_id'] = $_SESSION['accountId'];

                                $data['retailer_id'] = $ret_id;

                                $data['item_id'] = $item_id;

                                $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[2])));

                                $data['start_date'] = date('Y-m-d', strtotime($start_date));

                                if ($end_date != '') {

                                    $data['end_date'] = date('Y-m-d', strtotime($end_date));

                                } else {

                                    $data['end_date'] = date('Y-m-d', strtotime($_SESSION['EndDate']));

                                }

                                $data['created_date'] = date('Y-m-d H:i:s');

                                $data['last_updated_date'] = date('Y-m-d H:i:s');

                                $data['last_update_status'] = 'New';

                                $data['norms_status'] = 'A';

                                $this->_dbInsert($data, 'table_mgb_norms');

                            }

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    function uploadMGBNormsFileState()

    {

        $fields = array('State Name*', 'Classification Code', 'Product Code*', 'Norms*', 'Start Date*', 'End Date');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "State Name*" || empty($arrFile[2]) || $arrFile[2] == "Product Code*" || empty($arrFile[3]) || $arrFile[3] == "Norms*" || $arrFile[3] == "" || empty($arrFile[4]) || $arrFile[4] == "Start Date*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "State Name*") {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[0] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Product Code*") {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[2] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[3]) || $arrFile[3] == "Norms*" || (trim($arrFile[3]) == "")) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[3] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[4]) || $arrFile[4] == "Start Date*") {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[4] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if (strtotime(date('Y-m-d', strtotime(trim($arrFile[4])))) < strtotime(date('Y-m-d'))) {

                    $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Start date shouldn't be less than current date \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                $end_date = '';

                if ($flag) {

                    if (!empty($arrFile[5])) {

                        if (strtotime(date('Y-m-d', strtotime(trim($arrFile[5])))) < strtotime(date('Y-m-d', strtotime(trim($arrFile[4]))))) {

                            $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",End Date shouldn't be less than Start Date \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $end_date = date('Y-m-d', strtotime(trim($arrFile[5])));

                        }

                    }

                }

                if ($flag) {

                    $state_id = 0;

                    $condi = " LOWER(state_name)='" . mysql_escape_string($this->clean(strtolower($arrFile[0]))) . "' AND status = 'A' ";

                    $StateRec = $this->_getSelectList2('state', "state_id", '', $condi);

                    if (!is_array($StateRec) && sizeof($StateRec) <= 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",State doesn't exists in the system \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $state_id = $StateRec[0]->state_id;

                    }

                }

                $relationship_code = mysql_escape_string($this->clean(strtolower($arrFile[1])));

                $relationship_id = 0;

                if ($flag && !empty($relationship_code)) {

                    $condi = " LOWER(relationship_code)='" . $relationship_code . "'  AND status = 'A' ";

                    $RelRec = $this->_getSelectList('table_relationship', "relationship_id", '', $condi);

                    if (!is_array($RelRec) && sizeof($RelRec) <= 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Classification doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $relationship_id = $RelRec[0]->relationship_id;

                    }

                }

                if ($flag) {

                    $item_id = 0;

                    $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower($arrFile[2])) . "' AND status = 'A' ";

                    $ItemRec = $this->_getSelectList('table_item', "item_id", '', $condi);

                    if (!is_array($ItemRec) && sizeof($ItemRec) <= 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Product doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $item_id = $ItemRec[0]->item_id;

                    }

                }

                $start_date = date('Y-m-d', strtotime(trim($arrFile[4])));

                $classCondi = '';

                if (isset($relationship_id) && !empty($relationship_id) && ($relationship_id > 0)) {

                    $classCondi = " AND relationship_id = '" . $relationship_id . "' ";

                } else {

                    $classCondi = " AND relationship_id <= 0 ";

                }

                //Check Norms data exist with greater date

                if ($flag) {

                    $condCheck = " state_id ='" . $state_id . "' $classCondi AND item_id = '" . $item_id . "' AND location_id <= 0 AND retailer_id <= 0 AND start_date > '" . $start_date . "' AND end_date > '" . $start_date . "' ";

                    $checkNormsDate = $this->_getSelectList('table_mgb_norms', '*', '', $condCheck);

                    if (is_array($checkNormsDate) && sizeof($checkNormsDate) > 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ", Norms already exists in MGB. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $checkFlag = true;

                    if (($state_id > 0) && ($item_id > 0)) {

                        $cond1 = " state_id ='" . $state_id . "' $classCondi AND item_id = '" . $item_id . "' AND location_id <= 0 AND retailer_id <= 0 AND end_date = '" . $start_date . "' ";

                        $checkNorms1 = $this->_getSelectList('table_mgb_norms', '*', '', $cond1);

                        if (is_array($checkNorms1) && sizeof($checkNorms1) > 0) {

                            foreach ($checkNorms1 as $valueS) {

                                $data = array();

                                $norms_id = $valueS->norms_id;

                                $cond = " norms_id = '" . $norms_id . "'";

                                $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[3])));

                                $data['last_updated_date'] = date('Y-m-d H:i:s');

                                $data['last_update_status'] = 'Update';

                                $this->_dbUpdate($data, 'table_mgb_norms', $cond);

                                $checkFlag = false;

                            }

                        } else {

                            $cond = " state_id ='" . $state_id . "' $classCondi AND item_id = '" . $item_id . "' AND location_id <= 0 AND retailer_id <= 0 AND end_date > '" . $start_date . "' ";

                            $checkNorms = $this->_getSelectList('table_mgb_norms', '*', '', $cond);

                            if (is_array($checkNorms) && sizeof($checkNorms) > 0) {

                                foreach ($checkNorms as $valueS) {

                                    if (strtotime($start_date) == strtotime($valueS->start_date)) {

                                        $data = array();

                                        $norms_id = $valueS->norms_id;

                                        $cond = " norms_id = '" . $norms_id . "'";

                                        $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[3])));

                                        $data['last_updated_date'] = date('Y-m-d H:i:s');

                                        $data['last_update_status'] = 'Update';

                                        $this->_dbUpdate($data, 'table_mgb_norms', $cond);

                                        $checkFlag = false;

                                    } else {

                                        $data = array();

                                        $norms_id = $valueS->norms_id;

                                        $cond = " norms_id = '" . $norms_id . "'";

                                        $data['end_date'] = date('Y-m-d', strtotime($start_date . ' - 1 day'));

                                        $data['last_updated_date'] = date('Y-m-d H:i:s');

                                        $data['last_update_status'] = 'Update';

                                        $this->_dbUpdate($data, 'table_mgb_norms', $cond);

                                    }

                                }

                                if ($checkFlag) {

                                    $data = array();

                                    $data['account_id'] = $_SESSION['accountId'];

                                    $data['state_id'] = $state_id;

                                    $data['relationship_id'] = $relationship_id;

                                    $data['item_id'] = $item_id;

                                    $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[3])));

                                    $data['start_date'] = date('Y-m-d', strtotime($start_date));

                                    if ($end_date != '') {

                                        $data['end_date'] = date('Y-m-d', strtotime($end_date));

                                    } else {

                                        $data['end_date'] = date('Y-m-d', strtotime($_SESSION['EndDate']));

                                    }

                                    $data['created_date'] = date('Y-m-d H:i:s');

                                    $data['last_updated_date'] = date('Y-m-d H:i:s');

                                    $data['last_update_status'] = 'New';

                                    $data['norms_status'] = 'A';

                                    $this->_dbInsert($data, 'table_mgb_norms');

                                }

                            } else {

                                $data = array();

                                $data['account_id'] = $_SESSION['accountId'];

                                $data['state_id'] = $state_id;

                                $data['relationship_id'] = $relationship_id;

                                $data['item_id'] = $item_id;

                                $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[3])));

                                $data['start_date'] = date('Y-m-d', strtotime($start_date));

                                if ($end_date != '') {

                                    $data['end_date'] = date('Y-m-d', strtotime($end_date));

                                } else {

                                    $data['end_date'] = date('Y-m-d', strtotime($_SESSION['EndDate']));

                                }

                                $data['created_date'] = date('Y-m-d H:i:s');

                                $data['last_updated_date'] = date('Y-m-d H:i:s');

                                $data['last_update_status'] = 'New';

                                $data['norms_status'] = 'A';

                                $this->_dbInsert($data, 'table_mgb_norms');

                            }

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    function uploadMGBNormsFileCity()

    {

        $fields = array('City Name*', 'Classification Code', 'Product Code*', 'Norms*', 'Start Date*', 'End Date');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "City Name*" || empty($arrFile[2]) || $arrFile[2] == "Product Code*" || empty($arrFile[3]) || $arrFile[3] == "Norms*" || $arrFile[3] == "" || empty($arrFile[4]) || $arrFile[4] == "Start Date*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "City Name*") {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[0] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Product Code*") {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[2] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[3]) || $arrFile[3] == "Norms*" || (trim($arrFile[3]) == "")) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[3] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[4]) || $arrFile[4] == "Start Date*") {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[4] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if (strtotime(date('Y-m-d', strtotime(trim($arrFile[4])))) < strtotime(date('Y-m-d'))) {

                    $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Start date shouldn't be less than current date \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                $end_date = '';

                if ($flag) {

                    if (!empty($arrFile[5])) {

                        if (strtotime(date('Y-m-d', strtotime(trim($arrFile[5])))) < strtotime(date('Y-m-d', strtotime(trim($arrFile[4]))))) {

                            $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",End Date shouldn't be less than Start Date \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $end_date = date('Y-m-d', strtotime(trim($arrFile[5])));

                        }

                    }

                }

                if ($flag) {

                    $location_id = 0;

                    $condi = " LOWER(location_name)='" . mysql_escape_string($this->clean(strtolower($arrFile[0]))) . "' AND status = 'A' ";

                    $locRec = $this->_getSelectList2('table_location', "location_id", '', $condi);

                    if (!is_array($locRec) && sizeof($locRec) <= 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",City doesn't exists in the system \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $location_id = $locRec[0]->location_id;

                    }

                }

                $relationship_code = mysql_escape_string($this->clean(strtolower($arrFile[1])));

                $relationship_id = 0;

                if ($flag && !empty($relationship_code)) {

                    $condi = " LOWER(relationship_code)='" . $relationship_code . "' AND status = 'A' ";

                    $RelRec = $this->_getSelectList('table_relationship', "relationship_id", '', $condi);

                    if (!is_array($RelRec) && sizeof($RelRec) <= 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Classification doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $relationship_id = $RelRec[0]->relationship_id;

                    }

                }

                if ($flag) {

                    $item_id = 0;

                    $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower($arrFile[2])) . "' AND status = 'A' ";

                    $ItemRec = $this->_getSelectList('table_item', "item_id", '', $condi);

                    if (!is_array($ItemRec) && sizeof($ItemRec) <= 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Product doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $item_id = $ItemRec[0]->item_id;

                    }

                }

                $start_date = date('Y-m-d', strtotime(trim($arrFile[4])));

                $classCondi = '';

                if (isset($relationship_id) && !empty($relationship_id) && ($relationship_id > 0)) {

                    $classCondi = " AND relationship_id = '" . $relationship_id . "' ";

                } else {

                    $classCondi = " AND relationship_id <= 0 ";

                }

                //Check Norms data exist with greater date

                if ($flag) {

                    $condCheck = " location_id ='" . $location_id . "' $classCondi AND item_id = '" . $item_id . "' AND state_id <= 0  AND retailer_id <= 0  AND start_date > '" . $start_date . "' AND end_date > '" . $start_date . "' ";

                    $checkNormsDate = $this->_getSelectList('table_mgb_norms', '*', '', $condCheck);

                    if (is_array($checkNormsDate) && sizeof($checkNormsDate) > 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ", Norms already exists in MGB. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $checkFlag = true;

                    if (($location_id > 0) && ($item_id > 0)) {

                        $cond1 = " location_id = '" . $location_id . "' $classCondi AND item_id = '" . $item_id . "' AND state_id <= 0  AND retailer_id <= 0 AND end_date = '" . $start_date . "' ";

                        $checkNorms1 = $this->_getSelectList('table_mgb_norms', '*', '', $cond1);

                        if (is_array($checkNorms1) && sizeof($checkNorms1) > 0) {

                            foreach ($checkNorms1 as $valueS) {

                                $data = array();

                                $norms_id = $valueS->norms_id;

                                $cond = " norms_id = '" . $norms_id . "'";

                                $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[3])));

                                $data['last_updated_date'] = date('Y-m-d H:i:s');

                                $data['last_update_status'] = 'Update';

                                $this->_dbUpdate($data, 'table_mgb_norms', $cond);

                                $checkFlag = false;

                            }

                        } else {

                            $cond = " location_id = '" . $location_id . "' $classCondi AND item_id = '" . $item_id . "' AND state_id <= 0  AND retailer_id <= 0 AND end_date > '" . $start_date . "' ";

                            $checkNorms = $this->_getSelectList('table_mgb_norms', '*', '', $cond);

                            if (is_array($checkNorms) && sizeof($checkNorms) > 0) {

                                foreach ($checkNorms as $valueS) {

                                    if (strtotime($start_date) == strtotime($valueS->start_date)) {

                                        $data = array();

                                        $norms_id = $valueS->norms_id;

                                        $cond = " norms_id = '" . $norms_id . "'";

                                        $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[3])));

                                        $data['last_updated_date'] = date('Y-m-d H:i:s');

                                        $data['last_update_status'] = 'Update';

                                        $this->_dbUpdate($data, 'table_mgb_norms', $cond);

                                        $checkFlag = false;

                                    } else {

                                        $data = array();

                                        $norms_id = $valueS->norms_id;

                                        $cond = " norms_id = '" . $norms_id . "'";

                                        $data['end_date'] = date('Y-m-d', strtotime($start_date . ' - 1 day'));

                                        $data['last_updated_date'] = date('Y-m-d H:i:s');

                                        $data['last_update_status'] = 'Update';

                                        $this->_dbUpdate($data, 'table_mgb_norms', $cond);

                                    }

                                }

                                if ($checkFlag) {

                                    $data = array();

                                    $data['account_id'] = $_SESSION['accountId'];

                                    $data['location_id'] = $location_id;

                                    $data['relationship_id'] = $relationship_id;

                                    $data['item_id'] = $item_id;

                                    $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[3])));

                                    $data['start_date'] = date('Y-m-d', strtotime($start_date));

                                    if ($end_date != '') {

                                        $data['end_date'] = date('Y-m-d', strtotime($end_date));

                                    } else {

                                        $data['end_date'] = date('Y-m-d', strtotime($_SESSION['EndDate']));

                                    }

                                    $data['created_date'] = date('Y-m-d H:i:s');

                                    $data['last_updated_date'] = date('Y-m-d H:i:s');

                                    $data['last_update_status'] = 'New';

                                    $data['norms_status'] = 'A';

                                    $this->_dbInsert($data, 'table_mgb_norms');

                                }

                            } else {

                                $data = array();

                                $data['account_id'] = $_SESSION['accountId'];

                                $data['location_id'] = $location_id;

                                $data['relationship_id'] = $relationship_id;

                                $data['item_id'] = $item_id;

                                $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[3])));

                                $data['start_date'] = date('Y-m-d', strtotime($start_date));

                                if ($end_date != '') {

                                    $data['end_date'] = date('Y-m-d', strtotime($end_date));

                                } else {

                                    $data['end_date'] = date('Y-m-d', strtotime($_SESSION['EndDate']));

                                }

                                $data['created_date'] = date('Y-m-d H:i:s');

                                $data['last_updated_date'] = date('Y-m-d H:i:s');

                                $data['last_update_status'] = 'New';

                                $data['norms_status'] = 'A';

                                $this->_dbInsert($data, 'table_mgb_norms');

                            }

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    function uploadMGBNormsFileItem()

    {

        $fields = array('Product Code*', 'Classification Code', 'Norms*', 'Start Date*', 'End Date');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Product Code*" || empty($arrFile[2]) || $arrFile[2] == "Norms*" || $arrFile[2] == "" || empty($arrFile[3]) || $arrFile[3] == "Start Date*") {

                    if (empty($arrFile[0]) || $arrFile[0] == "Product Code*") {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[0] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Norms*" || (trim($arrFile[2]) == "")) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[2] . " shouldn't be empty  \n";

                    } elseif (empty($arrFile[3]) || $arrFile[3] == "Start Date*") {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[3] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if (strtotime(date('Y-m-d', strtotime(trim($arrFile[3])))) < strtotime(date('Y-m-d'))) {

                    $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ",Start date shouldn't be less than current date \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                $end_date = '';

                if ($flag) {

                    if (!empty($arrFile[4])) {

                        if (strtotime(date('Y-m-d', strtotime(trim($arrFile[4])))) < strtotime(date('Y-m-d', strtotime(trim($arrFile[3]))))) {

                            $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ",End Date shouldn't be less than Start Date \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $end_date = date('Y-m-d', strtotime(trim($arrFile[4])));

                        }

                    }

                }

                $relationship_code = mysql_escape_string($this->clean(strtolower($arrFile[1])));

                $relationship_id = 0;

                if ($flag && !empty($relationship_code)) {

                    $condi = " LOWER(relationship_code)='" . $relationship_code . "' AND status = 'A' ";

                    $RelRec = $this->_getSelectList('table_relationship', "relationship_id", '', $condi);

                    if (!is_array($RelRec) && sizeof($RelRec) <= 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ",Classification doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $relationship_id = $RelRec[0]->relationship_id;

                    }

                }

                if ($flag) {

                    $item_id = 0;

                    $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower($arrFile[0])) . "' AND status = 'A' ";

                    $ItemRec = $this->_getSelectList('table_item', "item_id", '', $condi);

                    if (!is_array($ItemRec) && sizeof($ItemRec) <= 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ",Product doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $item_id = $ItemRec[0]->item_id;

                    }

                }

                $start_date = date('Y-m-d', strtotime(trim($arrFile[3])));

                $classCondi = '';

                if (isset($relationship_id) && !empty($relationship_id) && ($relationship_id > 0)) {

                    $classCondi = " AND relationship_id = '" . $relationship_id . "' ";

                } else {

                    $classCondi = " AND relationship_id <= 0 ";

                }

                //Check Norms data exist with greater date

                if ($flag) {

                    $condCheck = " item_id = '" . $item_id . "'  $classCondi AND state_id <= 0 AND location_id <= 0 AND retailer_id <= 0  AND start_date > '" . $start_date . "' AND end_date > '" . $start_date . "' ";

                    $checkNormsDate = $this->_getSelectList('table_mgb_norms', '*', '', $condCheck);

                    if (is_array($checkNormsDate) && sizeof($checkNormsDate) > 0) {

                        $strErr .= "Error in Row" . $row . "," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ", Norms already exists in MGB. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $checkFlag = true;

                    if ($item_id > 0) {

                        $cond1 = " item_id = '" . $item_id . "' $classCondi AND state_id <= 0 AND location_id <= 0 AND retailer_id <= 0 AND end_date = '" . $start_date . "' ";

                        $checkNorms1 = $this->_getSelectList('table_mgb_norms', '*', '', $cond1);

                        if (is_array($checkNorms1) && sizeof($checkNorms1) > 0) {

                            foreach ($checkNorms1 as $valueS) {

                                $data = array();

                                $norms_id = $valueS->norms_id;

                                $cond = " norms_id = '" . $norms_id . "'";

                                $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[2])));

                                $data['last_updated_date'] = date('Y-m-d H:i:s');

                                $data['last_update_status'] = 'Update';

                                $this->_dbUpdate($data, 'table_mgb_norms', $cond);

                                $checkFlag = false;

                            }

                        } else {

                            $cond = " item_id = '" . $item_id . "' $classCondi AND state_id <= 0 AND location_id <= 0 AND retailer_id <= 0 AND end_date > '" . $start_date . "' ";

                            $checkNorms = $this->_getSelectList('table_mgb_norms', '*', '', $cond);

                            if (is_array($checkNorms) && sizeof($checkNorms) > 0) {

                                foreach ($checkNorms as $valueS) {

                                    if (strtotime($start_date) == strtotime($valueS->start_date)) {

                                        $data = array();

                                        $norms_id = $valueS->norms_id;

                                        $cond = " norms_id = '" . $norms_id . "'";

                                        $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[2])));

                                        $data['last_updated_date'] = date('Y-m-d H:i:s');

                                        $data['last_update_status'] = 'Update';

                                        $this->_dbUpdate($data, 'table_mgb_norms', $cond);

                                        $checkFlag = false;

                                    } else {

                                        $data = array();

                                        $norms_id = $valueS->norms_id;

                                        $cond = " norms_id = '" . $norms_id . "'";

                                        $data['end_date'] = date('Y-m-d', strtotime($start_date . ' - 1 day'));

                                        $data['last_updated_date'] = date('Y-m-d H:i:s');

                                        $data['last_update_status'] = 'Update';

                                        $this->_dbUpdate($data, 'table_mgb_norms', $cond);

                                    }

                                }

                                if ($checkFlag) {

                                    $data = array();

                                    $data['account_id'] = $_SESSION['accountId'];

                                    $data['relationship_id'] = $relationship_id;

                                    $data['item_id'] = $item_id;

                                    $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[2])));

                                    $data['start_date'] = date('Y-m-d', strtotime($start_date));

                                    if ($end_date != '') {

                                        $data['end_date'] = date('Y-m-d', strtotime($end_date));

                                    } else {

                                        $data['end_date'] = date('Y-m-d', strtotime($_SESSION['EndDate']));

                                    }

                                    $data['created_date'] = date('Y-m-d H:i:s');

                                    $data['last_updated_date'] = date('Y-m-d H:i:s');

                                    $data['last_update_status'] = 'New';

                                    $data['norms_status'] = 'A';

                                    $this->_dbInsert($data, 'table_mgb_norms');

                                }

                            } else {

                                $data = array();

                                $data['account_id'] = $_SESSION['accountId'];

                                $data['relationship_id'] = $relationship_id;

                                $data['item_id'] = $item_id;

                                $data['norms'] = mysql_escape_string($this->clean(strtolower($arrFile[2])));

                                $data['start_date'] = date('Y-m-d', strtotime($start_date));

                                if ($end_date != '') {

                                    $data['end_date'] = date('Y-m-d', strtotime($end_date));

                                } else {

                                    $data['end_date'] = date('Y-m-d', strtotime($_SESSION['EndDate']));

                                }

                                $data['created_date'] = date('Y-m-d H:i:s');

                                $data['last_updated_date'] = date('Y-m-d H:i:s');

                                $data['last_update_status'] = 'New';

                                $data['norms_status'] = 'A';

                                $this->_dbInsert($data, 'table_mgb_norms');

                            }

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    //Todo End: Sagar : 18th May 2022 : Import MGB Norms

    //Todo Start: Sagar : 1st June 2022 : Import Stock to Salesman

    function uploadSalesmanStockFile()
    {

        $fields = array('Salesman Code*', 'Item Code*', 'Batch No', 'Stock Volume*', 'UOM Type (Qty/Cases)*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty(trim($arrFile[0])) || empty(trim($arrFile[1])) || empty(trim($arrFile[3])) || empty(trim($arrFile[4]))) {

                    if (empty(trim($arrFile[0]))) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";

                    } else if (empty(trim($arrFile[1]))) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";

                    } else if (empty(trim($arrFile[3]))) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";

                    } else if (empty(trim($arrFile[4]))) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[4] . " shouldn't be empty. \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                //Validate Stock in (Qty/Cases)

                if ($flag) {

                    $validStockInType = ['qty', 'cases'];

                    if (!in_array(strtolower($arrFile[4]), $validStockInType)) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Invalid UOM Type (Qty/Cases) \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //Validate Stock Value

                if ($flag) {

                    if (!is_numeric(trim($arrFile[3])) || (trim($arrFile[3]) <= 0)) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Invalid Stock Volume. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //get salesman id

                if ($flag) {

                    $salesman_id = 0;

                    $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_salesman', 'salesman_id', '', $condi);

                    if (is_array($resultset) && (count($resultset) > 0)) {

                        $salesman_id = $resultset[0]->salesman_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                   

                }

                //get item id
             

                if ($flag) {

                    $item_id = 0;

                    $category_id = 0;

                    $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower($arrFile[1])) . "'  AND status = 'A' ";

                    $ItemRec = $this->_getSelectList('table_item', "item_id,category_id", '', $condi);

                    if (is_array($ItemRec) && (count($ItemRec) > 0)) {

                        $item_id = $ItemRec[0]->item_id;

                        $category_id = $ItemRec[0]->category_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[1] . " does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //get color id

                if ($flag) {
                    $color_code = trim($arrFile[2]);

                    if (empty($color_code)) {
                        $color_code = 'NA';
                    }

                    //$color_id = 0;

                    $condi = " LOWER(color_code)='" . mysql_escape_string(strtolower($color_code)) . "'  AND status = 'A' ";

                    $colorRec = $this->_getSelectList('table_color', "color_id", '', $condi);

                    if (is_array($colorRec) && (count($colorRec) > 0)) {

                        $color_id = $colorRec[0]->color_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i <= count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[2] . " does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //get Stock Value

                if ($flag) {

                    $stockValue = 0;

                    if (isset($arrFile[4]) && !empty($arrFile[4]) && (strtolower($arrFile[4]) == 'qty')) {

                        $stockValue = $arrFile[3];

                    } else {

                        //get case size of the item to convert it into qty

                        $caseSizeRec = $this->_getSelectList2('table_item_case_relationship as icr

LEFT JOIN table_cases as cs ON cs.case_id = icr.case_id', "icr.item_id,cs.case_size", '', "icr.item_id = $item_id");

                        if (is_array($caseSizeRec) && (count($caseSizeRec) > 0)) {

                            $stockValue = ($caseSizeRec[0]->case_size * $arrFile[3]);

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i <= count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Case Size for the given Item does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                //get stock availability
                $type = 'load_in';
                $userType = '';
                $done_by = '0';
                if ($_SESSION['userLoginType'] == 1) {
                    $userType = 'Admin';
                    $done_by = '0';
                } elseif ($_SESSION['userLoginType'] == 5) {
                    $userType = 'Salesman';
                    $done_by = $_SESSION['salesmanId'];
                }
                // echo "<pre>";
                // print_r($_SESSION);
                // die();

                if ($flag) {

                    if (($item_id > 0) && ($color_id > 0) && ($stockValue > 0)) {

                        $stckAvlRec = $this->_getSelectList('table_item_ndc_stock', "stock_id,item_id,attribute_value_id,stock_value", '', "item_id = $item_id AND color_id = $color_id AND '" . $stockValue . "' <= stock_value  AND status = 'A' ");

                        if (is_array($stckAvlRec) && (count($stckAvlRec) > 0)) {

                            $stockId = $stckAvlRec[0]->stock_id;

                            $attribute_value_id = $stckAvlRec[0]->attribute_value_id;

                            $distStockValue = $stckAvlRec[0]->stock_value;

                            $conditionsalesman = " salesman_id='" . $salesman_id . "' AND item_id='" . $item_id . "' AND category_id='" . $category_id . "' AND attribute_value_id = '" . $color_id . "' ";

                            $stockRec = $this->_getSelectList('table_item_salesman_stock', '*', '', $conditionsalesman);

                            $data = array();

                            if (is_array($stockRec) && (count($stockRec) > 0)) {

                                // updated last saved record

                                $last_stock = $stockRec[0]->sal_stock_value;

                                $new_stock = $last_stock + $stockValue;

                                $data['sal_stock_value'] = $new_stock;

                                $data['last_updated_date'] = date('Y-m-d');

                                $data['last_update_datetime'] = date('Y-m-d H:i:s');

                                $this->_dbUpdate($data, 'table_item_salesman_stock', $conditionsalesman);

                                $salesman_stk_id = true;

                            } else {

                                // Insert new record

                                $data['account_id'] = $_SESSION['accountId'];

                                $data['salesman_id'] = $salesman_id;

                                $data['item_id'] = $item_id;

                                $data['category_id'] = $category_id;

                                $data['attribute_value_id'] = $color_id;

                                $data['sal_stock_value'] = $stockValue;

                                $data['last_updated_date'] = date('Y-m-d');

                                $data['last_update_datetime'] = date('Y-m-d H:i:s');

                                $data['status'] = 'A';

                                $this->_dbInsert($data, 'table_item_salesman_stock');

                                $salesman_stk_id = true;

                            }

                            ////////////////////////////////
// echo "<pre>";
//                 print_r($_SESSION);
//                 die();

                            if ($salesman_stk_id) {
                                $data6 = array();

                                // Saved salesman activity
                              
                                $last_stock = $stockRec[0]->sal_stock_value;

                                $new_stock = $last_stock + $stockValue;


                                $data6['account_id'] = $_SESSION['accountId'];

                                $data6['salesman_id'] = $salesman_id;

                                $data6['distributor_id'] = 0;

                             

                                $data6['item_id'] = $item_id;                       

                                $data6['stock_before_activity'] = $last_stock;
                                     $data6['stock_qty'] = $stockValue;
                                          $data6['stock_after_activity'] = $new_stock;    


                                $data6['app_date'] = date('Y-m-d');

                                $data6['app_time'] = date('H:i:s');;

                                $data6['updated_at'] = date('Y-m-d H:i:s');

                                $data6['created_at'] = date('Y-m-d H:i:s');

                                $data6['activity_done_by_user_type'] = $userType;

                                $data6['activity_done_by'] = $done_by;


                                $data6['activity_type'] = $type;
                //                 echo "<pre>";
                // print_r($data6);
                // die();
                                
                                // $this->_dbInsert($data2, 'table_salesman_stock_activity');
                                $this->_dbInsert($data6, 'table_salesman_stock_activity');
                            }

                            /////////////////////////////////

                            if ($salesman_stk_id) {

                                $data2 = array();

                                // Saved salesman activity

                                $data2['account_id'] = $_SESSION['accountId'];

                                $data2['salesman_id'] = $salesman_id;

                                $data2['distributor_id'] = 0;

                                $data2['truck_id'] = 0;

                                $data2['item_id'] = $item_id;

                                $data2['category_id'] = $category_id;

                                $data2['attribute_value_id'] = $color_id;

                                $data2['rec_stock_value'] = $stockValue;

                                $data2['date_of_app'] = date('Y-m-d');

                                $data2['time_of_app'] = date('H:i:s');;

                                $data2['last_update_datetime'] = date('Y-m-d H:i:s');

                                $data2['created_datetime'] = date('Y-m-d H:i:s');

                                $data2['activity_done_by_user_type'] = $userType;

                                $data2['activity_done_by'] = $done_by;


                                $data2['status'] = 'LI';
                                // $this->_dbInsert($data2, 'table_salesman_stock_activity');
                                $this->_dbInsert($data2, 'table_item_salesman_stock_activity');

                                // Saved salesman attribute_value_id

                                // Update distributor stock

                                if ($stockId > 0) {

                                    // updated last saved record

                                    $data3 = array();

                                    $dis_stock_value = $distStockValue - $stockValue;  // decrease distributor stock

                                    $data3['stock_value'] = $dis_stock_value;

                                    $data3['last_updated_date'] = date('Y-m-d');

                                    $data3['last_update_datetime'] = date('Y-m-d H:i:s');

                                    $this->_dbUpdate($data3, 'table_item_ndc_stock', " stock_id = $stockId ");

                                    // updated last saved record

                                    // Saved distributor activity

                                    $data4 = array();

                                    $data4['account_id'] = $_SESSION['accountId'];

                                    $data4['stock_id'] = $stockId;

                                    $data4['salesman_id'] = $salesman_id;

                                    $data4['item_id'] = $item_id;

                                    $data4['category_id'] = $category_id;

                                    $data4['attribute_value_id'] = $attribute_value_id;

                                    $data4['color_id'] = $color_id;

                                    $data4['stock_value'] = $stockValue;

                                    $data4['created_datetime'] = date('Y-m-d H:i:s');

                                    $data4['status'] = 'GRN';

                                    $this->_dbInsert($data4, 'table_item_ndc_stock_activity');

                                }

                            }

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i <= count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Stock not available. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    //Todo End: Sagar : 1st June 2022 : Import Stock to Salesman


    //import statewise_minimum_item_price

    function uploadStateWiseItemPriceImportFile()

    {


        $fields = array('State Name*', 'Product Code*', 'Price*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if (($row > 0) && (is_array($arrFile))) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || trim($arrFile[2]) == '') {

                    if (empty($arrFile[0]) || $arrFile[0] == "State Name*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Product Code*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[1] . " shouldn't be empty. \n";

                    } elseif (trim($arrFile[2]) == '' || $arrFile[2] == "Price*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[2] . " shouldn't be empty. \n";

                    }

                    $flag = false;

                    $str_err_array = array($strErr);

                }

                if ($flag) {

                    $stateId = 0;

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower($arrFile[0])) . "' AND status = 'A'";

                    $stateRec = $this->_getSelectList2('state', "state_id", '', $condi);

                    if (is_array($stateRec) && (count($stateRec) > 0)) {

                        $stateId = $stateRec[0]->state_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[0] . " State does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($stateId > 0)) {

                    $itemId = 0;

                    $condi2 = " account_id=" . $_SESSION['accountId'] . " AND LOWER(item_code)='" . mysql_escape_string(strtolower($arrFile[1])) . "' AND status = 'A' ";

                    $itmRec = $this->_getSelectList('table_item', 'item_id', '', $condi2);

                    if (is_array($itmRec) && (count($itmRec) > 0)) {

                        $itemId = $itmRec[0]->item_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[1] . " Product does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($stateId > 0) && ($itemId > 0)) {

                    $minPrice = trim($arrFile[2]);

                    if (!is_numeric($minPrice) || ($minPrice < 0)) {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[2] . " Invalid Price \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($stateId > 0) && ($itemId > 0)) { //&& ($minPrice > 0)
                    //Todo start : sudhanshu : 05 march 2024 ; Condition change in the state wise product price. When the admin upload data with same details in that case it should update on previous details

                    $condi3 = " account_id=" . $_SESSION['accountId'] . " AND state_id = $stateId AND item_id = $itemId ";

                    $auRec = $this->_getSelectList('table_state_wise_item_price', "*", '', $condi3);
                    $price_id = $auRec[0]->id;

                    //Todo end : sudhanshu : 05 march 2024 ; Condition change in the state wise product price. When the
                    // admin upload data with same details in that case it should update on previous details
                    if (!is_array($auRec) && (count($auRec) <= 0)) {

                        $data = [];

                        $data['state_id'] = $stateId;

                        $data['item_id'] = $itemId;

                        $data['price'] = $minPrice;

                        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                        $data['created_at'] = date('Y-m-d H:i:s');

                        $data['status'] = mysql_escape_string('A');

                        $this->_dbInsert($data, 'table_state_wise_item_price');

                    } else {

                        //Todo start : sudhanshu : 05 march 2024 ; Condition change in the state wise product price. When the admin upload data with same details in that case it should update on previous details
                        $data2['price'] = $minPrice;
                        $data2['updated_at'] = date('Y-m-d H:i:s');
                        $data2['status'] = 'A';

                        $this->_dbUpdate($data2, 'table_state_wise_item_price', " id = $price_id ");

                        //Todo End : sudhanshu : 05 march 2024 ; Condition change in the state wise product price. When the admin upload data with same details in that case it should update on previous details

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//Todo Start : Sagar : 10th June 2022 : Import Salesman & Distributor Mapping

    function uploadSalesmanDistributorMappingFile()
    {

        $fields = array('Salesman Code*', 'Distributor Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Salesman Code*") {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $fields[0] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if (empty($arrFile[1]) || $arrFile[1] == "Distributor Code*") {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $fields[1] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $salesmanId = 0;

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(employee_code)='" . mysql_escape_string(strtolower($arrFile[0])) . "'";

                    $salesmanRec = $this->_getSelectList('table_salesman', 'salesman_id', '', $condi);

                    if (is_array($salesmanRec) && (count($salesmanRec) > 0)) {

                        $salesmanId = $salesmanRec[0]->salesman_id;

                    } else {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,Salesman does not exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $custId = 0;

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(distributor_code)='" . mysql_escape_string(strtolower($arrFile[1])) . "' and status = 'A' ";

                    $custRec = $this->_getSelectList('table_distributors', 'distributor_id', '', $condi);

                    if (is_array($custRec) && (count($custRec) > 0)) {

                        $custId = $custRec[0]->distributor_id;

                    } else {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,Distributor does not exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($custId > 0) && ($salesmanId > 0)) {

                    $mappingRec = $this->_getSelectList('table_salesman_distributor_mapping', 'mapping_id', '', "distributor_id = $custId AND salesman_id = $salesmanId");

                    if (is_array($mappingRec) && (count($mappingRec) > 0)) {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,Mapping already exists in the system  \n";

                        $str_err_array = array($strErr);

                    } else {

                        $data = [];

                        $data['account_id'] = $_SESSION['accountId'];

                        $data['distributor_id'] = $custId;

                        $data['salesman_id'] = $salesmanId;

                        $data['created_date'] = date('Y-m-d H:i:s');

                        $this->_dbInsert($data, 'table_salesman_distributor_mapping');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//Todo End: Sagar: 14th Feb 2022 : Import Salesman & Distributor Mapping

    //Todo Start : Sagar : 17th June 2022 : Import Leads
    function uploadLeadsFile() {

        $fields = array('Title*', 'Validation Status*', 'Lead Source*', 'Lead Status*', 'Reason', 'Lead Type', 'Next Step', 'Sales Cycle Code', 'Order Qty', 'Order Value', 'Remarks','Landmark', 'Customer/Organisation Name*', 'Customer Type', 'Customer Channel', 'Customer Mobile No.', 'Customer Email', 'State*', 'District*', 'City*', 'Address', 'Assigned ' . $this->AliaseUsers['salesman'] . ' Code', 'Contact Person Name*', 'Contact Phone No.*', 'Contact Email', 'Contact Designation');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[3]) || empty($arrFile[12]) || empty($arrFile[17]) || empty($arrFile[18]) || empty($arrFile[19]) || empty($arrFile[22]) || empty($arrFile[23])) {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[2])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[3])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[11])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[11] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[16])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[16] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[17])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[17] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[18])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[18] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[21])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[21] . " shouldn't be empty. \n";

                    } else if (empty($arrFile[22])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[22] . " shouldn't be empty. \n";

                    }

                    $flag = false;
                    $str_err_array = array($strErr);
                }

                //Validation Status*

                if ($flag) {

                    $validStatusId = 0;

                    $condi = " LOWER(description)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' AND status = 'A' ";

                    $rec = $this->_getSelectList('table_validation_status_master', 'id', '', $condi);

                    if (is_array($rec) && (count($rec) > 0)) {

                        $validStatusId = $rec[0]->id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , $fields[1] does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $leadSourceId = 0;

                    $condi = " LOWER(source_name)='" . mysql_escape_string(strtolower(trim($arrFile[2]))) . "' AND status = 'A' ";

                    $rec = $this->_getSelectList('table_enquiry_source', 'source_id', '', $condi);

                    if (is_array($rec) && (count($rec) > 0)) {

                        $leadSourceId = $rec[0]->source_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , $fields[2] does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //Lead Status*
                if ($flag) {

                    $leadStatusId = 0;

                    $condi = " LOWER(enqury_status)='" . mysql_escape_string(strtolower(trim($arrFile[3]))) . "' AND status = 'A' ";

                    $rec = $this->_getSelectList('table_enquiry_status', 'enquiry_status_id', '', $condi);

                    if (is_array($rec) && (count($rec) > 0)) {

                        $leadStatusId = $rec[0]->enquiry_status_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , $fields[3] does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //Reason
                if ($flag) {
                    $leadReasonId = 0;
                    if (isset($arrFile[4]) && !empty(trim($arrFile[4]))) {
                        $condi = " LOWER(reason)='" . mysql_escape_string(strtolower(trim($arrFile[4]))) . "' AND status = 'A' ";
                        $rec = $this->_getSelectList('table_lead_reason_master', 'id', '', $condi);

                        if (is_array($rec) && (count($rec) > 0)) {
                            $leadReasonId = $rec[0]->id;
                        } else {
                            $strErr .= "Error in Row - " . $row;
                            for ($i = 0; $i < count($fields); $i++) {
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                            }

                            $strErr .= " , $fields[4] does not exists. \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                }

                //Lead Type
                if ($flag) {
                    $leadTypeId = 0;
                    if (isset($arrFile[5]) && !empty(trim($arrFile[5]))) {
                        $condi = " LOWER(enqury_type)='" . mysql_escape_string(strtolower(trim($arrFile[5]))) . "' AND status = 'A' ";
                        $rec = $this->_getSelectList('table_enquiry_type', 'enquiry_type_id', '', $condi);

                        if (is_array($rec) && (count($rec) > 0)) {
                            $leadTypeId = $rec[0]->enquiry_type_id;
                        } else {
                            $strErr .= "Error in Row - " . $row;
                            for ($i = 0; $i < count($fields); $i++) {
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                            }

                            $strErr .= " , $fields[5] does not exists. \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                }

                //Next Step
                if ($flag) {
                    $leadNextStepId = 0;
                    if (isset($arrFile[6]) && !empty(trim($arrFile[6]))) {
                        $condi = " LOWER(next_step)='" . mysql_escape_string(strtolower(trim($arrFile[6]))) . "' AND status = 'A' ";
                        $rec = $this->_getSelectList('table_lead_next_step_master', 'id', '', $condi);

                        if (is_array($rec) && (count($rec) > 0)) {
                            $leadNextStepId = $rec[0]->id;
                        } else {
                            $strErr .= "Error in Row - " . $row;
                            for ($i = 0; $i < count($fields); $i++) {
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                            }

                            $strErr .= " , $fields[6] does not exists. \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                }

                

                //Sales Cycle Code
                $salesCylceCode = $arrFile[7];
                $salesCylceCodeField = $fields[7];

                if ($flag) {
                    $leadSalesCycleCodeId = 0;
                    if (isset($salesCylceCode) && !empty(trim($salesCylceCode))) {
                        $condi = " LOWER(cycle_code)='" . mysql_escape_string(strtolower(trim($salesCylceCode))) . "' AND status = 'A' ";
                        $rec = $this->_getSelectList('table_lead_sales_cycle_codes', 'id', '', $condi);

                        if (is_array($rec) && (count($rec) > 0)) {
                            $leadSalesCycleCodeId = $rec[0]->id;
                        } else {
                            $strErr .= "Error in Row - " . $row;
                            for ($i = 0; $i < count($fields); $i++) {
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                            }

                            $strErr .= " , $salesCylceCodeField does not exists. \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                }

                //Order Qty
                $OrderQty = $arrFile[8];
                $OrderQtyField = $fields[8];
                if ($flag) {

                    if (isset($OrderQty) && !empty(trim($OrderQty))) {

                        if (!is_numeric(trim($OrderQty))) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid $OrderQtyField \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                //Order Value
                $OrderValue = $arrFile[9];
                $OrderValueField = $fields[9];
                if ($flag) {

                    if (isset($OrderValue) && !empty(trim($OrderValue))) {

                        if (!is_numeric(trim($OrderValue))) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid $OrderValueField \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                //Customer Type
                $CustomerType = $arrFile[13];
                $CustomerTypeField = $fields[13];
                if ($flag) {

                    $retailerTypeId = 0;

                    if (isset($CustomerType) && !empty(trim($CustomerType))) {

                        $condi = " LOWER(type_name)='" . mysql_escape_string(strtolower(trim($CustomerType))) . "' AND status = 'A' ";

                        $rec = $this->_getSelectList('table_retailer_type_master', 'type_id', '', $condi);

                        if (is_array($rec) && (count($rec) > 0)) {

                            $retailerTypeId = $rec[0]->type_id;

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , $CustomerTypeField does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                //Customer Channel
                $CustomerChannel = $arrFile[14];
                $CustomerChannelField = $fields[14];
                if ($flag) {
                    $leadCustomerChannelId = 0;
                    if (isset($CustomerChannel) && !empty(trim($CustomerChannel))) {
                        $condi = " LOWER(channel_name)='" . mysql_escape_string(strtolower(trim($CustomerChannel))) . "' AND status = 'A' ";
                        $rec = $this->_getSelectList('table_lead_customer_channel_master', 'id', '', $condi);

                        if (is_array($rec) && (count($rec) > 0)) {
                            $leadCustomerChannelId = $rec[0]->id;
                        } else {
                            $strErr .= "Error in Row - " . $row;
                            for ($i = 0; $i < count($fields); $i++) {
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                            }

                            $strErr .= " , $CustomerChannelField does not exists. \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                }


                //Customer Mobile No.
                $custPhnNo = trim($arrFile[15]);
                $custPhnNoField = trim($fields[15]);
                if ($flag) {
                    $isDuplicate = 'no';
                    if (isset($custPhnNo) && !empty(trim($custPhnNo))) {
                        $custPhnNoLength = strlen($custPhnNo);

                        if (!is_numeric(trim($custPhnNo)) || ($custPhnNoLength > 10)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , $custPhnNoField should be numeric value of 10 digits only.\n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $retPhnNo = $custPhnNo;

                            if (isset($retPhnNo) && !empty($retPhnNo)) {

                                $checkDuplicate = $this->_getSelectList('table_lead', 'lead_id', '', " retailer_phone_no = '" . $retPhnNo . "' ");

                                if (is_array($checkDuplicate) && (count($checkDuplicate) > 0)) {

                                    $isDuplicate = 'yes';

                                }

                            } else {

                                $isDuplicate = 'no';

                            }

                        }

                    }

                }

                //State

                if ($flag) {

                    $state_id = 0;

                    // Get State ID with the help of State Name

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower(trim($arrFile[17]))) . "' AND status = 'A'";

                    $StateRec = $this->_getSelectList2('state', "state_id,country_id", '', $condi);

                    if (is_array($StateRec) && (count($StateRec) > 0)) {

                        $state_id = $StateRec[0]->state_id;

                        $country_id = $StateRec[0]->country_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , State does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //District

                if ($flag) {

                    $city_id = 0;

                    $condi = " LOWER(city_name)='" . mysql_escape_string($this->clean(strtolower(trim($arrFile[18])))) . "' AND state_id='" . $state_id . "' AND status = 'A'";

                    $CityRec = $this->_getSelectList2('city', "city_id", '', $condi);

                    if (is_array($CityRec) && (count($CityRec) > 0)) {

                        $city_id = $CityRec[0]->city_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , District does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //City

                if ($flag) {

                    $location_id = 0;

                    $condi = " LOWER(location_name)='" . mysql_escape_string($this->clean(strtolower(trim($arrFile[19])))) . "' AND state_id='" . $state_id . "' AND city_id='" . $city_id . "' AND status = 'A' ";

                    $locRec = $this->_getSelectList2('table_location', "location_id", '', $condi);

                    if (is_array($locRec) && (count($locRec) > 0)) {

                        $location_id = $locRec[0]->location_id;

                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , City does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                //Assigned Salesman
                $assignedSalesman = $arrFile[21];
                $assignedSalesmanField = $fields[21];
                if ($flag) {

                    $assignedSalesmanId = 0;

                    if (isset($assignedSalesman) && !empty(trim($assignedSalesman))) {

                        $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($assignedSalesman))) . "' AND status = 'A' ";

                        $rec = $this->_getSelectList('table_salesman', 'salesman_id', '', $condi);

                        if (is_array($rec) && (count($rec) > 0)) {

                            $assignedSalesmanId = $rec[0]->salesman_id;

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , $assignedSalesmanField does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }


                //Contact Designation
                $ContactDesignation = trim($arrFile[25]);
                $ContactDesignationField = $fields[25];
                if ($flag) {
                    $contactDesignationId = 0;
                    if (isset($ContactDesignation) && !empty(trim($ContactDesignation))) {
                        $condi = " LOWER(designation_name)='" . mysql_escape_string(strtolower(trim($ContactDesignation))) . "' AND status = 'A' ";
                        $rec = $this->_getSelectList('table_designation', 'designation_id', '', $condi);

                        if (is_array($rec) && (count($rec) > 0)) {
                            $contactDesignationId = $rec[0]->designation_id;
                        } else {
                            $strErr .= "Error in Row - " . $row;
                            for ($i = 0; $i < count($fields); $i++) {
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                            }

                            $strErr .= " , $ContactDesignationField does not exists. \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                }

                // Add phone number validation in condition

                if ($flag) {
                    $condi = " LOWER(country_id)='" . mysql_escape_string($country_id) . "' AND status = 'A' ";

                    $StRec = $this->_getSelectList2('country', "contact_max_length,contact_min_length", '', $condi);

                    if (is_array($StRec) && (count($StRec) > 0)) {
                        $cnt_1 = strlen($arrFile[15]);
                        $cnt_2 = strlen($arrFile[23]);

                        if ($cnt_2 >= $StRec[0]->contact_min_length && $cnt_2 <=
                            $StRec[0]->contact_max_length) {
                            $phone_no = $arrFile[23];

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Phone number " . $arrFile[23] . " \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                        if (!empty($arrFile[15])) {
                            if ($cnt_1 >= $StRec[0]->contact_min_length && $cnt_1 <=
                                $StRec[0]->contact_max_length) {

                                $phone_no1 = $arrFile[15];

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[15] . "\n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        } else {
                            $phone_no1 = $arrFile[15];
                        }

                    }
                }

                // Add phone number validation in condition**

                if ($flag) {
                    $title = trim($arrFile[0]);
                    $remark = trim($arrFile[10]);

                    $landmark = trim($arrFile[11]);
                    $retailer_name = trim($arrFile[12]);
                    $retailer_email = trim($arrFile[16]);
                    $address = trim($arrFile[20]);
                    $data = [];

                    //Lead Info :
                    $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
                    $data['title'] = mysql_escape_string($this->clean($title));
                    $data['validation_status_id'] = mysql_escape_string($validStatusId);
                    $data['validated_by_id'] = mysql_escape_string($_SESSION['salesmanId']);
                    $data['lead_start_date'] = mysql_escape_string(date('Y-m-d'));
                    $data['lead_start_time'] = mysql_escape_string(date('H:i:s'));
//                    $data['recieved_by_id']=mysql_escape_string($recievedById);

                    $data['lead_source_id'] = mysql_escape_string($leadSourceId);
                    $data['lead_type_id'] = mysql_escape_string($leadTypeId);
                    $data['lead_status_id'] = mysql_escape_string($leadStatusId);
                    $data['reason_id'] = mysql_escape_string($leadReasonId);
                    $data['next_step_id'] = mysql_escape_string($leadNextStepId);
//                    $data['priority_status_id']   =   mysql_escape_string($leadPriorityStatusId);
                    $data['cycle_code_id'] = mysql_escape_string($leadSalesCycleCodeId);

                    $data['remark'] = mysql_escape_string($this->clean($remark));


                    $data['landmark']= mysql_escape_string($this->clean($landmark));


                    $data['order_qty'] = mysql_escape_string($this->getNumber($OrderQty));
                    $data['order_value'] = mysql_escape_string($this->getNumber($OrderValue));
                    //Customer Info :
                    $data['retailer_name'] = mysql_escape_string($this->clean($retailer_name));
                    $data['retailer_type_id'] = mysql_escape_string($retailerTypeId);
                    $data['channel_id'] = mysql_escape_string($leadCustomerChannelId);
//                    $data['class_id']           =   mysql_escape_string($leadCustomerClassificationId);
//                    $data['retailer_phone_no'] = mysql_escape_string($this->clean($custPhnNo));
                    $data['retailer_phone_no'] = mysql_escape_string($this->clean($phone_no));
                    $data['retailer_email'] = mysql_escape_string($this->clean($retailer_email));
                    $data['contact_person'] = mysql_escape_string($this->clean(trim($arrFile[21])));
                    $data['state_id'] = mysql_escape_string($state_id);
                    $data['city_id'] = mysql_escape_string($city_id);
                    $data['location_id'] = mysql_escape_string($location_id);
                    $data['address'] = mysql_escape_string($this->clean($address));
                    $data['assign_to_id'] = mysql_escape_string($assignedSalesmanId);
                    $data['lead_created_by_id'] = mysql_escape_string($_SESSION['salesmanId']);
                    $data['is_duplicate'] = mysql_escape_string($isDuplicate);
                    $data['created_at'] = date("Y-m-d H:i:s");
                    $data['updated_at'] = date("Y-m-d H:i:s");
                    $id = $this->_dbInsert($data, 'table_lead');

                    //generate unique lead code and update

                    if ($id > 0) {

                        $leadIdLength = strlen($id);

                        $lengthReq = (8 - $leadIdLength);



                        if ($lengthReq > 0) {

                            $LeadCode = 'PEPUP-' . sprintf("%08s", $id);

                        } else {

                            $LeadCode = 'PEPUP-' . $id;

                        }

                        //insert contact details and map with lead
                        $dataLeadContact = [];
                        $dataLeadContact['account_id'] = mysql_escape_string($_SESSION['accountId']);
                        $dataLeadContact['lead_id'] = $id;
                        $dataLeadContact['salesman_id'] = $assignedSalesmanId;
                        $dataLeadContact['contact_person_name'] = mysql_escape_string($this->clean($arrFile[21]));
                        $dataLeadContact['email'] = mysql_escape_string($this->clean($arrFile[23]));
                        $dataLeadContact['designation_id'] = mysql_escape_string($contactDesignationId);
//                        $dataLeadContact['phoneno'] = mysql_escape_string($this->clean($arrFile[22]));
                        $dataLeadContact['phoneno'] = mysql_escape_string($this->clean($phone_no1));
                        $dataLeadContact['is_default'] = '1';
                        $dataLeadContact['created_on'] = date('Y-m-d H:i:s');
                        $dataLeadContact['updated_on'] = date('Y-m-d H:i:s');
                        $dataLeadContact['app_date'] = date('Y-m-d');
                        $dataLeadContact['app_time'] = date('H:i:s');
                        $leadContactId = $this->_dbInsert($dataLeadContact, 'table_lead_contact_person');


                        $dataLeadCode = [];
                        $dataLeadCode['lead_code'] = $LeadCode;
                        $dataLeadCode['contact_person_id'] = $leadContactId;
                        $this->_dbUpdate($dataLeadCode, 'table_lead', " lead_id=" . $id);
                    }

                    //add lead history

                    if ($id > 0) {

                        $data2 = [];

                        //Lead Info :

                        $data2['lead_id'] = mysql_escape_string($id);

                        $data2['account_id'] = mysql_escape_string($_SESSION['accountId']);

                        $data2['validation_status_id'] = mysql_escape_string($validStatusId);

                        $data2['validated_by_id'] = mysql_escape_string($_SESSION['salesmanId']);

                        $data2['lead_start_date'] = mysql_escape_string(date('Y-m-d'));

                        $data2['lead_start_time'] = mysql_escape_string(date('H:i:s'));

//                        $data2['recieved_by_id']=mysql_escape_string($recievedById);

                        $data2['lead_type_id'] = mysql_escape_string($leadTypeId);
                        $data2['lead_status_id'] = mysql_escape_string($leadStatusId);
                        $data2['reason_id'] = mysql_escape_string($leadReasonId);
                        $data2['next_step_id'] = mysql_escape_string($leadNextStepId);
//                        $data2['priority_status_id']  =   mysql_escape_string($leadPriorityStatusId);
                        $data2['cycle_code_id'] = mysql_escape_string($leadSalesCycleCodeId);
                        $data2['remark'] = mysql_escape_string($this->clean($remark));

                        $data2['landmark'] = mysql_escape_string($this->clean($landmark));


                        $data2['order_qty'] = mysql_escape_string($this->getNumber($OrderQty));
                        $data2['order_value'] = mysql_escape_string($this->getNumber($OrderValue));
                        //Customer Info :
                        $data2['retailer_name'] = mysql_escape_string($this->clean($retailer_name));
                        $data2['retailer_type_id'] = mysql_escape_string($retailerTypeId);
                        $data2['channel_id'] = mysql_escape_string($leadCustomerChannelId);
//                        $data2['class_id']           =   mysql_escape_string($leadCustomerClassificationId);
//                        $data2['retailer_phone_no'] = mysql_escape_string($this->clean($custPhnNo));
                        $data2['retailer_phone_no'] = mysql_escape_string($this->clean($phone_no));
                        $data2['retailer_email'] = mysql_escape_string($this->clean($retailer_email));
//                        $data2['contact_person']  =   mysql_escape_string($this->clean($arrFile[18]));
                        $data2['state_id'] = mysql_escape_string($state_id);
                        $data2['city_id'] = mysql_escape_string($city_id);
                        $data2['location_id'] = mysql_escape_string($location_id);
                        $data2['address'] = mysql_escape_string($this->clean($address));
                        $data2['assign_to_id'] = mysql_escape_string($assignedSalesmanId);
                        $data2['last_updated_at'] = date("Y-m-d H:i:s");
                        $data2['last_updated_by_id'] = $_SESSION['salesmanId'];
                        $this->_dbInsert($data2, 'table_lead_details');

                        //Todo: Sagar: 16th Jan 2023 : send notif. to the assigned salesman
                        $assign_to_id = $assignedSalesmanId;

                        $account_id = $_SESSION['accountId'];

                        $valStsMstr = $this->_getSelectList2('table_validation_status_master', 'id', '', " account_id = $account_id AND LOWER(description) IN('validate','language barrier') AND status = 'A' ");

                        $validStatusIdArr = [];

                        if (is_array($valStsMstr) && (count($valStsMstr) > 0)) {

                            foreach ($valStsMstr as $keyv => $valStsData) {

                                $validStatusIdArr[] = $valStsData->id;

                            }

                        }


                        if (isset($assign_to_id) && !empty($assign_to_id) && (intval($assign_to_id) > 0) && (in_array($validStatusId, $validStatusIdArr))) {

                            $auSal = $this->_getSelectList('table_salesman as s 

            LEFT JOIN table_pepup_app_version as v ON v.salesman_id = s.salesman_id', "s.salesman_id,s.salesman_name,s.gcm_regid,v.app_type", '', " s.salesman_id='" . $assign_to_id . "' ");


                            $deviceToken = $auSal[0]->gcm_regid;

                            $appType = $auSal[0]->app_type;

                            $msgid = $id;

                            $read_status = 0;

                            $msg_type = 'lead';

                            //msg body for ios apps

                            $subject = $data['title'];

                            $imgReq = 'No';


                            $messageStr = (isset($data['remark']) && !empty($data['remark'])) ? preg_replace("/[[:blank:]]+/", " ", str_replace(["<br>", "<br />", "<br/>"], "\n", preg_replace('/[^a-zA-Z0-9., <>\/:\']/', '', $data['remark']))) : preg_replace("/[[:blank:]]+/", " ", str_replace(["<br>", "<br />", "<br/>"], "\n", preg_replace('/[^a-zA-Z0-9., <>\/:\']/', '', $data['retailer_name'])));


                            $date = date('Y-m-d');

                            $time = date('H:i:s');


                            $message = $msgid . "|@|" . $auSal[0]->salesman_id . "|@|" . $date . "|@|" . $time . "|@|" . $imgReq . "|@|" . preg_replace("/[[:blank:]]+/", " ", $subject) . "|@|" . preg_replace("/[[:blank:]]+/", " ", $messageStr) . "|@|" . $read_status . "|@|" . $msg_type;


                            $message = array("message" => $message);


                            $url = 'https://fcm.googleapis.com/fcm/send';


                            if (strtolower($appType) == 'android') {

                                $fields = array(

                                    'to' => $deviceToken,

                                    'data' => $message

                                );

                            } else {

                                $fields = array(

                                    'to' => $deviceToken,

                                    'notification' => [

                                        'body' => $messageStr,

                                        'title' => $subject

                                    ],

                                    'data' => [

                                        'msgId' => $msgid,

                                        'salesmanId' => $auSal[0]->salesman_id,

                                        'retailerId' => '',

                                        'distributorId' => '',

                                        'date' => $date,

                                        'time' => $time,

                                        'imgReq' => $imgReq,

                                        'readStatus' => $read_status,

                                        'msg_type' => $msg_type

                                    ]

                                );

                            }


                            $headers = array(

                                'Authorization: key=' . "AAAAxD6Ve-4:APA91bGm9IV8ZcgUCD5uDA4SJMHR15LOfaUidJ5D2DsJ7QB1ZfMhLQ_tGUlo0ce6cUnObUeNgQGxEyMYuz0dPlcwh29niQutzRQFEluHHMbGrEYgqDtgU9OK53pPfVa8THhSZOiBN1xQ",

                                'Content-Type: application/json'

                            );


                            $ch = curl_init();

                            curl_setopt($ch, CURLOPT_URL, $url);

                            curl_setopt($ch, CURLOPT_POST, true);

                            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

                            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

                            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));

                            curl_exec($ch);

                            curl_close($ch);


                            //set is_notification_sent to 1 for the lead

                            $dataNotif = [];

                            $dataNotif['is_notification_sent'] = '1';

                            $this->_dbUpdate($dataNotif, 'table_lead', " lead_id=" . $id);

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    //Todo End : Sagar : 17th June 2022 : Import Leads

    function uploadNewRetDistRouteList()
    {

        $fields = array('Customer Type* (Retailer/Distributor)', 'Customer Code*', 'Route Name*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0])) {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . " ," . $fields[0] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if (empty($arrFile[1]) || $arrFile[1] == "Customer Code*") {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . " ," . $fields[1] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if (empty($arrFile[2]) || $arrFile[2] == "Route Name*") {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . " ," . $fields[2] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                $custType = trim(strtolower($arrFile[0]));

                if ($flag) {

                    $custId = 0;

                    $retDistStateId = [];

                    $retDistDistrictId = [];

                    $retDistCityId = [];

                    if ($custType == 'retailer') {

//                        $customerType = 'C';

                        $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(retailer_code)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' and status = 'A' ";

                        $custRec = $this->_getSelectList('table_retailer', 'retailer_id,distributor_id,state,city,location_id', '', $condi);

                        if (is_array($custRec) && (count($custRec) > 0)) {

                            $custId = $custRec[0]->retailer_id;

                            $distributorId = $custRec[0]->distributor_id;

                            $retDistStateId[] = $custRec[0]->state;

                            $retDistDistrictId[] = $custRec[0]->city;

                            $retDistCityId[] = $custRec[0]->location_id;

                            if ($distributorId > 0) {

                                $distRec = $this->_getSelectList('table_distributors', 'distributor_id,state,city,location', '', " distributor_id = $distributorId");

                                if (is_array($distRec) && (count($distRec) > 0)) {

                                    $retDistStateId[] = $distRec[0]->state;

                                    $retDistDistrictId[] = $distRec[0]->city;

                                    $retDistCityId[] = $distRec[0]->location;

                                }

                            }

                        } else {

                            $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . " ,Customer does not exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    if ($custType == 'distributor') {

//                        $customerType = 'D';

                        $condi = " account_id=" . $_SESSION['accountId'] . "  AND LOWER(distributor_code)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' and status = 'A' ";

                        $custRec = $this->_getSelectList('table_distributors', 'distributor_id,state,city,location', '', $condi);

                        if (is_array($custRec) && (count($custRec) > 0)) {

                            $custId = $custRec[0]->distributor_id;

                            $retDistStateId[] = $custRec[0]->state;

                            $retDistDistrictId[] = $custRec[0]->city;

                            $retDistCityId[] = $custRec[0]->location;

                        } else {

                            $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . " ,Dealer does not exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                // Check Route Name exists in the system.

                if ($flag) {

                    $route_name = mysql_escape_string(strtolower(trim($arrFile[2])));

                    $condi = " LOWER(route_name)='" . $route_name . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_route', 'route_id,state_id,city_id,locations', '', $condi);

                    if (!is_array($resultset) && empty($resultset)) {

                        $data = [];

                        $data['account_id'] = $_SESSION['accountId'];

                        $data['state_id'] = implode(",", array_unique($retDistStateId));

                        $data['city_id'] = implode(",", array_unique($retDistDistrictId));

                        $data['locations'] = implode(",", array_unique($retDistCityId));

                        $data['route_name'] = $route_name;

                        $data['status'] = 'A';

                        $data['new'] = '1';
                        //Todo Start : sudhanshu 04 june 2024 : add ceated date and updated date
                        $data['created_at'] = date('Y-m-d H:i:s');
                        $data['updated_at'] = date('Y-m-d H:i:s');
                        //Todo End : sudhanshu 04 june 2024 : add ceated date and updated date
                        $route_id = $this->_dbInsert($data, 'table_route');

                    } else {

                        $route_id = $resultset[0]->route_id;

                        $stateArr = array_filter(explode(',', $resultset[0]->state_id));

                        $districtArr = array_filter(explode(',', $resultset[0]->city_id));

                        $cityArr = array_filter(explode(',', $resultset[0]->locations));

                        $stateArr1 = array_merge($stateArr, $retDistStateId);

                        $districtArr1 = array_merge($districtArr, $retDistDistrictId);

                        $cityArr1 = array_merge($cityArr, $retDistCityId);

                        $comma_separated_state = implode(",", array_unique($stateArr1));

                        $comma_separated_district = implode(",", array_unique($districtArr1));

                        $comma_separated_city = implode(",", array_unique($cityArr1));

                        $data3 = array();

                        $data3['state_id'] = $comma_separated_state;

                        $data3['city_id'] = $comma_separated_district;

                        $data3['locations'] = $comma_separated_city;

                        $data3['updated_at'] = date('Y-m-d H:i:s');

                        $this->_dbUpdate($data3, 'table_route', " route_id='" . $route_id . "'");

                    }

                }

                if ($flag && ($custId > 0) && ($route_id > 0)) {

                    $checkCondi = '';

                    if ($custType == 'retailer') {

                        $checkCondi = " AND distributor_id = $distributorId AND retailer_id = $custId ";

                    }

                    if ($custType == 'distributor') {

                        $checkCondi = " AND distributor_id = $custId ";

                    }

                    $mappingRec = $this->_getSelectList('table_route_retailer', 'id', '', "route_id = $route_id  $checkCondi");

                    if (!is_array($mappingRec) && (count($mappingRec) <= 0)) {

                        $data = [];

                        $data['account_id'] = $_SESSION['accountId'];

                        $data['route_id'] = $route_id;

                        if ($custType == 'retailer') {

                            $data['distributor_id'] = $distributorId;

                            $data['retailer_id'] = $custId;

                        }

                        if ($custType == 'distributor') {

                            $data['distributor_id'] = $custId;

                            $data['retailer_id'] = 0;

                        }

                        $this->_dbInsert($data, 'table_route_retailer');

                    }

                }

            }

            $row++;

        }

        //print_r($str_err_array);

        fclose($file);

        if ($row <= 1)

            return "no";

        else

            return $str_err_array;

    }

//Todo Start : Sagar : 30th Sep 2022 : Import Item Update Sheet for Name & Prices

  

    // function uploadItemUpdateFile()
    // {

    //     $fields = array('Item Code*', 'Item Description', 'Brand', 'Category', 'Sub Category' ,'Cases Size', 'Grams', 'Tax Rate', 'Item PTR*', 'Item MRP*', 'Distributor Price', 'Stockist Price', 'Grade', 'HSN Code');

    //     $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

    //     $strErr = "";
    //     $fErr = "no";
    //     $row = 0;

    //     $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

    //     $remove = array("\n", "\r\n", "\r", '"', ',');

    //     while (!feof($file)) {

    //         $arrFile = fgetcsv($file);

    //         $flag = true;

    //         if ($row == 0) {
    //             if (count($arrFile) == 14 && trim($arrFile[0]) == "Item Code*" && trim($arrFile[1]) == "Item Description" && trim($arrFile[2]) == "Brand" && trim($arrFile[3]) == "Category" &&  trim($arrFile[4]) == "Sub Category" && trim($arrFile[5]) == "Cases Size" && trim($arrFile[6]) == "Grams" && trim($arrFile[7]) == "Tax Rate" && trim($arrFile[8]) == "Item PTR" && trim($arrFile[9]) == "Item MRP" && trim($arrFile[10]) == "Distributor Price" && trim($arrFile[11]) == "Stockist Price" && trim($arrFile[12]) == "Grade" && trim($arrFile[13]) == "HSN Code") {
    //                 $flag2 = true;

    //             } else {

    //                 $flag2 = false;
    //                 $fErr = "fnot";
    //             }
    //         }


    //         if ($flag2 && $row > 0 && is_array($arrFile)) {

    //             if (empty(trim($arrFile[0]))) {

    //                 if (empty(trim($arrFile[0]))) {

    //                     $strErr .= "Error in Row - " . $row;

    //                     for ($i = 0; $i < count($fields); $i++) {

    //                         $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

    //                     }

    //                     $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";

    //                 }

    //                 $str_err_array = array($strErr);

    //                 $flag = false;

    //             }

    //             $pattern = "/^[0-9.]*$/";

    //             if ($flag) {

    //                 $itmPtr = mysqli_real_escape_string($this->db_connect_id, $this->getNumber(trim($arrFile[8])));

    //                 if (isset($itmPtr) && !empty($itmPtr)) {
    //                     if (!preg_match($pattern, $itmPtr)) {

    //                         $strErr .= "Error in Row - " . $row;

    //                         for ($i = 0; $i < count($fields); $i++) {

    //                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

    //                         }

    //                         $strErr .= " , Invalid Item PTR. \n";

    //                         $str_err_array = array($strErr);

    //                         $flag = false;

    //                     }
    //                 }


    //             }

    //             if ($flag) {

    //                 $itmMrp = mysqli_real_escape_string($this->db_connect_id, $this->getNumber(trim($arrFile[9])));

    //                 if (isset($itmMrp) && !empty($itmMrp)) {

    //                     if (!preg_match($pattern, $itmMrp)) {

    //                         $strErr .= "Error in Row - " . $row;

    //                         for ($i = 0; $i < count($fields); $i++) {

    //                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

    //                         }

    //                         $strErr .= " , Invalid Item MRP. \n";

    //                         $str_err_array = array($strErr);

    //                         $flag = false;

    //                     }
    //                 }


    //             }

    //             if ($flag) {

    //                 $itmDp = trim($arrFile[10]);

    //                 if (isset($itmDp) && !empty($itmDp)) {

    //                     if (!preg_match($pattern, $itmDp)) {

    //                         $strErr .= "Error in Row - " . $row;

    //                         for ($i = 0; $i < count($fields); $i++) {

    //                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

    //                         }

    //                         $strErr .= " , Invalid Distributor Price. \n";

    //                         $str_err_array = array($strErr);

    //                         $flag = false;

    //                     }

    //                 }

    //             }

    //             if ($flag) {

    //                 $itmSp = trim($arrFile[11]);

    //                 if (isset($itmSp) && !empty($itmSp)) {

    //                     if (!preg_match($pattern, $itmSp)) {

    //                         $strErr .= "Error in Row - " . $row;

    //                         for ($i = 0; $i < count($fields); $i++) {

    //                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

    //                         }

    //                         $strErr .= " , Invalid Stockist Price. \n";

    //                         $str_err_array = array($strErr);

    //                         $flag = false;

    //                     }

    //                 }

    //             }

    //             if ($flag) {

    //                 $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(item_code)='" . mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", strtolower(str_replace("'", "\'", $arrFile[0]))), ENT_IGNORE)) . "'";

    //                 $itemRec = $this->_getSelectList('table_item', 'item_id', '', $condi);

    //                 if (!is_array($itemRec) && (count($itemRec) <= 0)) {

    //                     $strErr .= "Error in Row - " . $row;

    //                     for ($i = 0; $i < count($fields); $i++) {

    //                         $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

    //                     }

    //                     $strErr .= " ," . $fields[0] . " Not Found. \n";

    //                     $str_err_array = array($strErr);

    //                     $flag = false;

    //                 } else {

    //                     $itemId = $itemRec[0]->item_id;

    //                 }

    //             }
    //             // check brands

    //             if ($flag) {
    //                 if (trim($arrFile[2]) != '') {
    //                     $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(brand_name)= '" . trim($arrFile[2]) . "'";
    //                     $brandRec = $this->_getSelectList('table_brands', "brand_name,brand_id", '', $condi);

    //                     if (!is_array($brandRec) && (count($brandRec) <= 0)) {

    //                         $strErr .= "Error in Row - " . $row;

    //                         for ($i = 0; $i < count($fields); $i++) {

    //                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

    //                         }

    //                         $strErr .= " , Brand doesn't exists. \n";

    //                         $str_err_array = array($strErr);

    //                         $flag = false;

    //                     } else {

    //                         $brandId = $brandRec[0]->brand_id;

    //                     }
    //                 }
    //             }

    //             // check category
    //             if ($flag) {
    //                 if (trim($arrFile[3]) != '') {
    //                     $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(category_name)= '" . trim($arrFile[3]) . "'";
    //                     $catRec = $this->_getSelectList('table_category', "category_id", '', $condi);

    //                     if (!is_array($catRec) && (count($catRec) <= 0)) {

    //                         $strErr .= "Error in Row - " . $row;

    //                         for ($i = 0; $i < count($fields); $i++) {

    //                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

    //                         }

    //                         $strErr .= " , Category doesn't exists. \n";

    //                         $str_err_array = array($strErr);

    //                         $flag = false;

    //                     } else {

    //                         $categoryId = $catRec[0]->category_id;

    //                     }
    //                 }
    //             }


    //             // check SUbcategory
    //             // if ($flag) {
    //             //     if(trim($arrFile[3]) != ''){
    //             //         $condi = "account_id=" . $_SESSION['accountId'] . " AND subcategory_name='" . mysql_escape_string($arrFile[4]) . "' AND status = 'A'";
    //             //         $subcatRec = $this->_getSelectList('table_subcategory', "subcategory_id, category_id", '', $condi);               

    //             //         if(trim($arrFile[4]) != ''){
    //             //             if ($subcatRec) {
    //             //                 if ($subcatRec[0]->category_id) {
    //             //                     // Check if the category exists for the given subcategory
    //             //                     $condicheck = "account_id=" . $_SESSION['accountId'] . " AND category_id='" . mysql_escape_string($subcatRec[0]->category_id) . "' AND status = 'A'";
    //             //                     $catRecCheck = $this->_getSelectList('table_category', "category_id, category_name", '', $condicheck);
                        
    //             //                     // Validate if the category matches the expected value
    //             //                     if (trim($arrFile[3]) == trim($catRecCheck[0]->category_name)) {
    //             //                         // If subcategory exists, retrieve its ID
    //             //                         if (is_array($subcatRec) && count($subcatRec) > 0) {
    //             //                             $subcategoryId = $subcatRec[0]->subcategory_id;
    //             //                         } else {
    //             //                             // Error handling for subcategory not existing in the system
    //             //                             $strErr .= "Error in Row - " . $row;
    //             //                             for ($i = 0; $i < count($fields); $i++) {
    //             //                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    //             //                             }
    //             //                             $subcatfields = $fields[4];
    //             //                             $strErr .= " , $subcatfields does not exist in the system.\n";
    //             //                             $str_err_array = array($strErr);
    //             //                             $flag = false;
    //             //                         }
    //             //                     } else {
    //             //                         // Error if category doesn't match
    //             //                         $strErr .= "Error in Row - " . $row;
    //             //                         for ($i = 0; $i < count($fields); $i++) {
    //             //                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    //             //                         }
    //             //                         $subcatfields = $fields[4];
    //             //                         $strErr .= " , Please enter a valid Sub Category.\n";
    //             //                         $str_err_array = array($strErr);
    //             //                         $flag = false;
    //             //                     }
    //             //                 }
    //             //             } else {
    //             //                 // Error if subcategory doesn't exist in the system
    //             //                 $strErr .= "Error in Row - " . $row;
    //             //                 for ($i = 0; $i < count($fields); $i++) {
    //             //                     $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    //             //                 }
    //             //                 $subcatfields = $fields[4];
    //             //                 $strErr .= " , Please enter a valid Sub Category.\n";
    //             //                 $str_err_array = array($strErr);
    //             //                 $flag = false;
    //             //             }
    //             //         }
    //             //         else{
    //             //             $subcategoryId = $subcatRec[0]->subcategory_id;
    //             //         }
                       
                        
    //             //     }
    //             //     else{
                      
    //             //         $categoryId = $catRec[0]->category_id;
    //             //     }
                  


    //             // }



    //             if ($flag) {
    //                 if (trim($arrFile[4]) != '') {
    //                     // Check if subcategory exists
    //                     $condi = "account_id=" . $_SESSION['accountId'] . " AND subcategory_name='" . mysql_escape_string($arrFile[4]) . "' AND status = 'A'";
    //                     $subcatRec = $this->_getSelectList('table_subcategory', "subcategory_id, category_id", '', $condi);               
                
    //                     if (trim($arrFile[4]) != '') {
    //                         if ($subcatRec) {
    //                             if ($subcatRec[0]->category_id) {
    //                                 // Check if the category exists for the given subcategory
    //                                 $condicheck = "account_id=" . $_SESSION['accountId'] . " AND category_id='" . mysql_escape_string($subcatRec[0]->category_id) . "' AND status = 'A'";
    //                                 $catRecCheck = $this->_getSelectList('table_category', "category_id, category_name", '', $condicheck);
                                    
    //                                 // Validate if the category matches the expected value
    //                                 if (trim($arrFile[3]) == trim($catRecCheck[0]->category_name)) {
    //                                     // If subcategory exists, retrieve its ID
    //                                     if (is_array($subcatRec) && count($subcatRec) > 0) {
    //                                         $subcategoryId = $subcatRec[0]->subcategory_id;
    //                                     } else {
    //                                         // Error handling for subcategory not existing in the system
    //                                         $strErr .= "Error in Row - " . $row;
    //                                         for ($i = 0; $i < count($fields); $i++) {
    //                                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    //                                         }
    //                                         $subcatfields = $fields[4];
    //                                         $strErr .= " , $subcatfields does not exist in the system.\n";
    //                                         $str_err_array = array($strErr);
    //                                         $flag = false;
    //                                     }
    //                                 } else {
    //                                     // Error if category doesn't match
    //                                     $strErr .= "Error in Row - " . $row;
    //                                     for ($i = 0; $i < count($fields); $i++) {
    //                                         $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    //                                     }
    //                                     $subcatfields = $fields[4];
    //                                     $strErr .= " , Please enter a valid Sub Category.\n";
    //                                     $str_err_array = array($strErr);
    //                                     $flag = false;
    //                                 }
    //                             }
    //                         } else {
    //                             // Error if subcategory doesn't exist in the system
    //                             $strErr .= "Error in Row - " . $row;
    //                             for ($i = 0; $i < count($fields); $i++) {
    //                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    //                             }
    //                             $subcatfields = $fields[4];
    //                             $strErr .= " , Please enter a valid Sub Category.\n";
    //                             $str_err_array = array($strErr);
    //                             $flag = false;
    //                         }
    //                     } else {
    //                         // If no subcategory value is provided, keep existing subcategory ID in DB
    //                         $subcategoryId = $subcatRec[0]->subcategory_id;
                                   

    //                     }
    //                 } else {
    //                     $condicaa = " account_id=" . $_SESSION['accountId'] . " AND LOWER(item_code)='" . mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", strtolower(str_replace("'", "\'", $arrFile[0]))), ENT_IGNORE)) . "'";

    //                     $itemReccaa = $this->_getSelectList('table_item', 'item_id,category_id', '', $condicaa);
    //                     $categoryId = $itemRec[0]->category_id;
    //                 }
    //             }
                
    //             // for cases

    //             if ($flag) {

    //                 $caseSize = trim($arrFile[5]);
    //                 if ($caseSize != '') {

    //                     $pattern = "/^[0-9]*$/";

    //                     if (!preg_match($pattern, $caseSize)) {

    //                         $strErr .= "Error in Row - " . $row;

    //                         for ($i = 0; $i < count($fields); $i++) {

    //                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

    //                         }

    //                         $strErr .= " , Please Provide Valid Case Size. \n";

    //                         $str_err_array = array($strErr);

    //                         $flag = false;

    //                     }
    //                 }


    //             }
    //             // check grams
    //             if ($flag) {

    //                 $grams = trim($arrFile[6]);
    //                 if ($grams != '') {

    //                     $pattern = "/^[0-9]*$/";

    //                     if (!preg_match($pattern, $grams)) {

    //                         $strErr .= "Error in Row - " . $row;

    //                         for ($i = 0; $i < count($fields); $i++) {

    //                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

    //                         }

    //                         $strErr .= " , Please Provide Valid item  Size. \n";

    //                         $str_err_array = array($strErr);

    //                         $flag = false;

    //                     }
    //                 }


    //             }

    //             // check tax ratet
    //             if ($flag) {

    //                 $tax = trim($arrFile[7]);
    //                 if ($tax != '') {

    //                     $pattern = "/^[0-9]*$/";

    //                     if (!preg_match($pattern, $tax)) {

    //                         $strErr .= "Error in Row - " . $row;

    //                         for ($i = 0; $i < count($fields); $i++) {

    //                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

    //                         }

    //                         $strErr .= " , Please Provide Valid Tax Rate. \n";

    //                         $str_err_array = array($strErr);

    //                         $flag = false;

    //                     }
    //                 }


    //             }

    //             //  check grade

    //             if ($flag && trim($arrFile[12]) != '') {

    //                 $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(grade_name)='" . mysql_escape_string(strtolower($arrFile[12])) . "' AND status = 'A'";

    //                 $gradeRec = $this->_getSelectList('table_grade', "grade_name,grade_id", '', $condi);

    //                 $gradeId = ((is_array($gradeRec) && count($gradeRec) > 0) ? $gradeRec[0]->grade_id : 0);

    //                 if (!is_array($gradeRec) || count($gradeRec) <= 0) {

    //                     $strErr .= "Error in Row - " . $row;

    //                     for ($i = 0; $i < count($fields); $i++) {

    //                         $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    //                         //echo $arrFile[$i].'-'.$i.'<br>';
    //                     }

    //                     $strErr .= ",grade name doesn't exists. \n";
    //                     //  echo $arrFile[$i].' '.$strErr;die;
    //                     $str_err_array = array($strErr);

    //                     $flag = false;


    //                 }

    //             }

    //             if ($flag) {

    //                 $hsnid = mysqli_real_escape_string($this->db_connect_id, $this->getNumber(trim($arrFile[13])));

    //                 if (!preg_match($pattern, $hsnid)) {

    //                     $strErr .= "Error in Row - " . $row;

    //                     for ($i = 0; $i < count($fields); $i++) {

    //                         $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

    //                     }

    //                     $strErr .= " , Invalid HSN Code. \n";

    //                     $str_err_array = array($strErr);

    //                     $flag = false;

    //                 }

    //             }

    //             if ($flag) {

    //                 if (isset($arrFile[13]) && !empty(trim($arrFile[13]))) {

    //                     $resultset = $this->_getSelectList2('table_HSN_code_master', '*', '', ' HSN_Code = "' . mysql_escape_string(trim($arrFile[13])) . '"');
    //                     if (!empty($resultset)) {
    //                         $hsn_id = $resultset[0]->hsn_id;
    //                     } else {
    //                         $data1['HSN_Code'] = mysql_escape_string(trim($arrFile[13]));
    //                         $data1['created_at'] = date('Y-m-d H:i:s');
    //                         $hsn_id = $this->_dbInsert($data1, 'table_HSN_code_master');
    //                     }

    //                 }

    //             }

    //             if ($flag) {

    //                 //Update Item Name First

    //                 $data = array();

    //                 if ($_SESSION['accountId'] == 14) {

    //                     if (isset($arrFile[1]) && !empty(trim($arrFile[1]))) {

    //                         $data['item_name'] = mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", str_replace("'", "\'", $arrFile[1])), ENT_IGNORE));

    //                     }

    //                 } else {

    //                     if (isset($arrFile[1]) && !empty(trim($arrFile[1]))) {

    //                         $data['item_name'] = mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", $arrFile[1]), ENT_IGNORE));

    //                     }

    //                 }
    //                 if (trim($arrFile[2]) != '') {
    //                     $data['brand_id'] = $brandId;
    //                 }
    //                 if (trim($arrFile[3]) != '') {
    //                     $data['category_id'] = $categoryId;
    //                 }
    //                 if (trim($arrFile[4]) != '') {
    //                     $data['subcategory_id'] = $subcategoryId;
    //                 }
    //                 if (trim($arrFile[6]) != '') {
    //                     $data['item_size'] = trim($arrFile[6]);
    //                 }
    //                 if (trim($arrFile[12]) != '') {
    //                     $data['grade_id'] = $gradeId;
    //                 }
    //                 if (isset($hsn_id) && !empty($hsn_id)) {
    //                     $data['HSN_id'] = mysqli_real_escape_string($this->db_connect_id, $hsn_id);
    //                 }
    //                 $data['last_update_date'] = date('Y-m-d');

    //                 $data['last_update_status'] = 'Update';

    //                 $this->_dbUpdate($data, 'table_item', " item_id = $itemId ");


    //                 //Now Update Item Prices

    //                 $dataPrice = array();
    //                 if (isset($itmPtr) && !empty($itmPtr)) {
    //                     $dataPrice['item_mrp'] = $itmPtr;
    //                 }
    //                 if (isset($itmMrp) && !empty($itmMrp)) {
    //                     $dataPrice['item_dp'] = $itmMrp;
    //                 }


    //                 if (isset($itmDp) && !empty($itmDp)) {

    //                     $dataPrice['dist_price'] = $itmDp;

    //                 }

    //                 if (isset($itmSp) && !empty($itmSp)) {

    //                     $dataPrice['stockist_price'] = $itmSp;

    //                 }

    //                 $dataPrice['last_update_date'] = date('Y-m-d');

    //                 $dataPrice['last_update_status'] = 'Update';

    //                 $this->_dbUpdate($dataPrice, 'table_price', " item_id = $itemId ");

    //                 //  tax
    //                 if ($flag) {

    //                     $taxrate = 0;

    //                     if (!empty($arrFile[7]) && is_numeric($arrFile[7])) {

    //                         $taxrate = $arrFile[7];

    //                     }
    //                     if ($taxrate > 0) {
    //                         $taxdata['tax'] = $taxrate;
    //                         $this->_dbUpdate2($taxdata, 'table_item_gst', " item_id = $itemId ");

    //                     }


    //                 }

    //                 // now update case size
    //                 if ($caseSize != '' && $caseSize > 0) {
    //                     $caseRec = $this->_getSelectList2('table_item_case_relationship', "case_id", '', " item_id = '" . $itemId . "'");

    //                     if (is_array($caseRec) && count($caseRec) > 0) {
    //                         $case_id = $caseRec[0]->case_id;

    //                         $case['case_size'] = $caseSize;
    //                         if (isset($itmPtr) && $itmPtr != '') {
    //                             $caseptr = ($itmPtr * $caseSize);
    //                         } else {
    //                             $pRec = $this->_getSelectList('table_price', "item_mrp as item_ptr", '', " item_id = '" . $itemId . "'");
    //                             $caseptr = ($pRec[0]->item_ptr * $caseSize);
    //                         }
    //                         if (isset($itmMrp) && $itmMrp != '') {
    //                             $caseMRP = ($itmMrp * $caseSize);
    //                         } else {
    //                             $pRec = $this->_getSelectList('table_price', "item_dp as item_mrp", '', " item_id = '" . $itemId . "'");
    //                             $caseMRP = ($pRec[0]->item_mrp * $caseSize);
    //                         }
    //                         if (isset($itmDp) && $itmDp != '') {
    //                             $caseDP = ($itmDp * $caseSize);
    //                         } else {
    //                             $pRec = $this->_getSelectList('table_price', "dist_price ", '', " item_id = '" . $itemId . "'");
    //                             $caseDP = ($pRec[0]->dist_price * $caseSize);
    //                         }
    //                         if (isset($itmSp) && $itmSp != '') {
    //                             $caseSP = ($itmSp * $caseSize);
    //                         } else {
    //                             $pRec = $this->_getSelectList('table_price', "stockist_price", '', " item_id = '" . $itemId . "'");
    //                             $caseSP = ($pRec[0]->stockist_price * $caseSize);
    //                         }
    //                         $case['case_price_ptr'] = $caseptr;
    //                         $case['case_price_mrp'] = $caseMRP;
    //                         $case['case_price_distributor'] = $caseDP;
    //                         $case['case_price_stockist'] = $caseSP;

    //                         $case['updated_date'] = date('Y-m-d H:i:s');

    //                         $id = $this->_dbUpdate($case, 'table_cases', " case_id = $case_id ");

    //                     }


    //                 }
    //                 //echo $caseSize;die;
    //                 if ($caseSize == '') {
    //                     if ($itemId > 0) {

    //                         $itemCaseRec = $this->_getSelectList2('table_item_case_relationship as icr
    
    //                         INNER JOIN table_cases as cs ON cs.case_id = icr.case_id', 'icr.item_id,cs.case_id,cs.case_size', '', " icr.item_id = $itemId AND cs.case_id > 0 ");

    //                         if (is_array($itemCaseRec) && (count($itemCaseRec) > 0)) {

    //                             $caseId = $itemCaseRec[0]->case_id;

    //                             $caseSize = $itemCaseRec[0]->case_size;

    //                             $case = [];
    //                             if ($itmPtr > 0) {
    //                                 $case['case_price_ptr'] = ($itmPtr * $caseSize);
    //                             }
    //                             if ($itmMrp > 0) {
    //                                 $case['case_price_mrp'] = ($itmMrp * $caseSize);
    //                             }


    //                             $case['case_price_distributor'] = (isset($itmDp) && !empty($itmDp) && (intval($itmDp) > 0)) ? ($itmDp * $caseSize) : '';

    //                             $case['case_price_stockist'] = (isset($itmSp) && !empty($itmSp) && (intval($itmSp) > 0)) ? ($itmSp * $caseSize) : '';

    //                             $case['updated_date'] = date('Y-m-d H:i:s');

    //                             $case['status'] = 'A';

    //                             $this->_dbUpdate($case, 'table_cases', " case_id = $caseId ");

    //                         }

    //                     }
    //                 }


    //             }

    //         }
    //         $row++;
    //     }

    //     fclose($file);

    //     if ($row <= 2 || $fErr == 'fnot')

    //         return $fErr;

    //     else

    //         return $str_err_array;

    // }


    function uploadItemUpdateFile_15_feb_2025()
    {

        $fields = array('Item Code*', 'Item Description', 'Brand', 'Category', 'Sub Category' ,'Cases Size', 'Grams', 'Tax Rate', 'Item PTR', 'Item MRP', 'Distributor Price', 'Stockist Price', 'Grade', 'HSN Code','Item Rank Name');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;
           

            if ($row == 0) {
                if (count($arrFile) == 15 && trim($arrFile[0]) == "Item Code*" && trim($arrFile[1]) == "Item Description" && trim($arrFile[2]) == "Brand" && trim($arrFile[3]) == "Category" &&  trim($arrFile[4]) == "Sub Category" && trim($arrFile[5]) == "Cases Size" && trim($arrFile[6]) == "Grams" && trim($arrFile[7]) == "Tax Rate" && trim($arrFile[8]) == "Item PTR" && trim($arrFile[9]) == "Item MRP" && trim($arrFile[10]) == "Distributor Price" && trim($arrFile[11]) == "Stockist Price" && trim($arrFile[12]) == "Grade" && trim($arrFile[13]) == "HSN Code" && trim($arrFile[14]) == "Item Rank Name") {
                    $flag2 = true;
                 

                } else {
                    
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }
           

            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty(trim($arrFile[0]))) {

                    if (empty(trim($arrFile[0]))) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                $pattern = "/^[0-9.]*$/";

                if ($flag) {

                    $itmPtr = mysqli_real_escape_string($this->db_connect_id, $this->getNumber(trim($arrFile[8])));

                    if (isset($itmPtr) && !empty($itmPtr)) {
                        if (!preg_match($pattern, $itmPtr)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Item PTR. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                }

                if ($flag) {

                    $itmMrp = mysqli_real_escape_string($this->db_connect_id, $this->getNumber(trim($arrFile[9])));

                    if (isset($itmMrp) && !empty($itmMrp)) {

                        if (!preg_match($pattern, $itmMrp)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Item MRP. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                }

                if ($flag) {

                    $itmDp = trim($arrFile[10]);

                    if (isset($itmDp) && !empty($itmDp)) {

                        if (!preg_match($pattern, $itmDp)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Distributor Price. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                if ($flag) {

                    $itmSp = trim($arrFile[11]);

                    if (isset($itmSp) && !empty($itmSp)) {

                        if (!preg_match($pattern, $itmSp)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Stockist Price. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(item_code)='" . mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", strtolower(str_replace("'", "\'", $arrFile[0]))), ENT_IGNORE)) . "'";

                    $itemRec = $this->_getSelectList('table_item', 'item_id, category_id,subcategory_id', '', $condi);

                    if (!is_array($itemRec) && (count($itemRec) <= 0)) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " Not Found. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $itemId = $itemRec[0]->item_id;

                    }

                }
                // check brands

                if ($flag) {
                    if (trim($arrFile[2]) != '') {
                        $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(brand_name)= '" . trim($arrFile[2]) . "'";
                        $brandRec = $this->_getSelectList('table_brands', "brand_name,brand_id", '', $condi);

                        if (!is_array($brandRec) && (count($brandRec) <= 0)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Brand doesn't exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $brandId = $brandRec[0]->brand_id;

                        }
                    }
                }

               
                // if ($flag) {
                //     if (trim($arrFile[3]) != '') {
                //         $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(category_name)= '" . trim($arrFile[3]) . "'";
                //         $catRec = $this->_getSelectList('table_category', "category_id", '', $condi);

                //         if (!is_array($catRec) && (count($catRec) <= 0)) {

                //             $strErr .= "Error in Row - " . $row;

                //             for ($i = 0; $i < count($fields); $i++) {

                //                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                //             }
                //             $catfields = $fields[3];
                //             $strErr .= " ,  $catfields doesn't exists. \n";

                //             $str_err_array = array($strErr);

                //             $flag = false;

                //         } else {

                //             $categoryId = $catRec[0]->category_id;

                //         }
                      
                //         if(!empty($catRec)){
                //             $condi = "account_id=" . $_SESSION['accountId'] . " AND category_id='" . ($itemRec[0]->category_id) . "' AND status = 'A'";
                //             $catRecCheck = $this->_getSelectList('table_category', "category_id", '', $condi); 
                           
                //             $condisubcheck = "account_id=" . $_SESSION['accountId'] . " AND category_id='" . ($catRecCheck[0]->category_id) . "' AND status = 'A'";
                //         $subcatRec = $this->_getSelectList('table_subcategory', "subcategory_id, category_id", '', $condisubcheck);
                       
                //         $isSubcategoryFound = 0;
                        
                //         foreach ($subcatRec as $subcat) {
                            
                //             if ($itemRec[0]->subcategory_id == $subcat->subcategory_id) {
                //                 $isSubcategoryFound = 1;
                //                 break; 
                //             }
                //         }
                       

                //            if($isSubcategoryFound == 1){
                //             $strErr .= "Error in Row - " . $row;
                //             for ($i = 0; $i < count($fields); $i++) {
                //                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                //             }
                          
                //             $catfields = $arrFile[3];
                //             $strErr .= " , $catfields is not Valid\n";
                //             $str_err_array = array($strErr);
                //             $flag = false;
                //            }
                //         }
                //     }
                // }


                if ($flag && trim($arrFile[3]) != '') {
                    $categoryName = trim($arrFile[3]);
                
                    // Check if the category exists in the database
                    $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(category_name) = '" . $categoryName . "'";
                    $catRec = $this->_getSelectList('table_category', "category_id,category_name", '', $condi);
                    

                    if (empty($catRec)) {
                       
                        $strErr .= "Error in Row - " . $row;

                                    for ($i = 0; $i < count($fields); $i++) {
        
                                        $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
        
                                    }
                                    $catfields = $fields[3];
                                    $strErr .= " ,  $catfields doesn't exists. \n";
        
                                    $str_err_array = array($strErr);
        
                                    $flag = false;
                    }
                
                    // $categoryId = $catRec[0]->category_id;
                 $ft = "";
                    // Check if the category's subcategory exists
                    $condiCheck = "account_id=" . $_SESSION['accountId'] . " AND category_name = '".trim($arrFile[3])."' AND status = 'A'";
                    $catRecCheck = $this->_getSelectList('table_category', "category_id,category_name", '', $condiCheck);
                    
                    if (!empty($catRecCheck)) {
                        $condisubcheck = "account_id=" . $_SESSION['accountId'] . " AND category_id = '" . $catRecCheck[0]->category_id . "' AND status = 'A'";
                        $subcatRec = $this->_getSelectList('table_subcategory', "subcategory_id, category_id", '', $condisubcheck);
                     
                        $isSubcategoryFound = false;
                        foreach ($subcatRec as $subcat) {
                            if ($itemRec[0]->subcategory_id != $subcat->subcategory_id) {
                                $isSubcategoryFound = true;
                                break; 
                            }
                            else{

                            }
                        }                       
                       
                        // echo"<pre>";
                        // print_r($subcatRec);
                        // die();
                        $subcategoryid = "";
                        if ($isSubcategoryFound) {    
                                                if($itemRec[0]->category_id != $catRecCheck[0]->category_id){
                                                    $categoryId = $catRecCheck[0]->category_id;                                                    
                                                    $subcategoryid = 0;                                        
                                                } 
                                               else if($itemRec[0]->category_id = $catRecCheck[0]->category_id){
                                                    $categoryId = $catRecCheck[0]->category_id; 
                                                    $subcategoryid = $itemRec[0]->subcategory_id;
                                                    // echo"<pre>";
                                                    // print_r($ft);
                                                    // print_r("grou");
                                                    // die();                                          
                                                } 

                                                else{

                                                    $strErr .= "Error in Row - " . $row;

                                                    for ($i = 0; $i < count($fields); $i++) {
    
                                                        $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                                                    }
                                                    $catfields = $fields[3];
                                                    $strErr .= " ,  $catfields doesn't exists. \n";
    
                                                    $str_err_array = array($strErr);
    
                                                    $flag = false;
                                                } 
                           
                                
                           
                        }

                       

                      
                    }
                }
                

                if ($flag) {
                    if(trim($arrFile[4]) != ''){
                        
                        $condi = "account_id=" . $_SESSION['accountId'] . " AND subcategory_name='" . mysql_escape_string($arrFile[4]) . "' AND status = 'A'";
                        $subcatRec = $this->_getSelectList('table_subcategory', "subcategory_id, category_id", '', $condi);                   
                       
                        if ($subcatRec) {    
                                               
                            if ($subcatRec[0]->category_id) {                             
                                $condicheck = "account_id=" . $_SESSION['accountId'] . " AND category_id='" . mysql_escape_string($subcatRec[0]->category_id) . "' AND status = 'A'";
                                $catRecCheck = $this->_getSelectList('table_category', "category_id, category_name", '', $condicheck);
                               

                                if(trim($arrFile[3]) != ""){
                                    $condicheckCat = "account_id=" . $_SESSION['accountId'] . " AND category_name='" . trim($arrFile[3]) . "' AND status = 'A'";
                                    $catRecCheckCat = $this->_getSelectList('table_category', "category_id, category_name", '', $condicheckCat);
                                   if($catRecCheckCat[0]->category_id != $catRecCheck[0]->category_id){
                                    
                                    $strErr .= "Error in Row - " . $row;
                                    for ($i = 0; $i < count($fields); $i++) {
                                        $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                                    }
                                   
                                    $strErr .= " , Category Invalid.\n";
                                    $str_err_array = array($strErr);
                                    $flag = false; 
    
                                   }  
                                }                              

                                if (trim($catRecCheck[0]->category_id)) {   
                                    
                                  
                                    if (is_array($subcatRec) && count($subcatRec) > 0) {
                                        $subcategoryId = $subcatRec[0]->subcategory_id;
                                        
                                        $categoryId = $catRecCheck[0]->category_id;
                                      
                                    } else {
                                        
                                        $strErr .= "Error in Row - " . $row;
                                        for ($i = 0; $i < count($fields); $i++) {
                                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                                        }
                                        $subcatfields = $fields[4];
                                        $strErr .= " , $subcatfields does not exist in the system.\n";
                                        $str_err_array = array($strErr);
                                        $flag = false;
                                    }
                                } else {
                                    
                                    $strErr .= "Error in Row - " . $row;
                                    for ($i = 0; $i < count($fields); $i++) {
                                        $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                                    }
                                    $subcatfields = $fields[4];
                                    $strErr .= " , Please enter a valid Sub Category.\n";
                                    $str_err_array = array($strErr);
                                    $flag = false;
                                }
                            }

                           
                        } else {
                          
                            $strErr .= "Error in Row - " . $row;
                            for ($i = 0; $i < count($fields); $i++) {
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                            }
                            $subcatfields = $fields[4];
                            $strErr .= " , $subcatfields does not exist in the system.\n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                   
                }
                

                if ($flag) {
                    $caseSize = trim($arrFile[5]);
                    if ($caseSize != '') {

                        $pattern = "/^[0-9]*$/";

                        if (!preg_match($pattern, $caseSize)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Please Provide Valid Case Size. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                }
                // check grams
                if ($flag) {

                    $grams = trim($arrFile[6]);
                    if ($grams != '') {

                        $pattern = "/^[0-9]*$/";

                        if (!preg_match($pattern, $grams)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Please Provide Valid item  Size. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                }

                // check tax ratet
                if ($flag) {

                    $tax = trim($arrFile[7]);
                    if ($tax != '') {

                        $pattern = "/^[0-9]*$/";

                        if (!preg_match($pattern, $tax)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Please Provide Valid Tax Rate. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                }

                //  check grade

                if ($flag && trim($arrFile[12]) != '') {

                    $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(grade_name)='" . mysql_escape_string(strtolower($arrFile[12])) . "' AND status = 'A'";

                    $gradeRec = $this->_getSelectList('table_grade', "grade_name,grade_id", '', $condi);

                    $gradeId = ((is_array($gradeRec) && count($gradeRec) > 0) ? $gradeRec[0]->grade_id : 0);

                    if (!is_array($gradeRec) || count($gradeRec) <= 0) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                            //echo $arrFile[$i].'-'.$i.'<br>';
                        }

                        $strErr .= ",grade name doesn't exists. \n";
                        //  echo $arrFile[$i].' '.$strErr;die;
                        $str_err_array = array($strErr);

                        $flag = false;


                    }

                }

                if ($flag) {

                    $hsnid = mysqli_real_escape_string($this->db_connect_id, $this->getNumber(trim($arrFile[13])));

                    if (!preg_match($pattern, $hsnid)) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Invalid HSN Code. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    if (isset($arrFile[13]) && !empty(trim($arrFile[13]))) {

                        $resultset = $this->_getSelectList2('table_HSN_code_master', '*', '', ' HSN_Code = "' . mysql_escape_string(trim($arrFile[13])) . '"');
                        if (!empty($resultset)) {
                            $hsn_id = $resultset[0]->hsn_id;
                        } else {
                            $data1['HSN_Code'] = mysql_escape_string(trim($arrFile[13]));
                            $data1['created_at'] = date('Y-m-d H:i:s');
                            $hsn_id = $this->_dbInsert($data1, 'table_HSN_code_master');
                        }

                    }

                }




                  // check item rank name

                  if ($flag) {
                    if (trim($arrFile[14]) != '') {
                        $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(item_rank_name)= '" . trim($arrFile[14]) . "'";
                        $itemRankRec = $this->_getSelectList('table_item_ranking', "item_rank_name,item_rank_id", '', $condi);

                        if (!is_array($itemRankRec) && (count($itemRankRec) <= 0)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Item Rank Name doesn't exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $itemRankId = $itemRankRec[0]->item_rank_id;

                        }
                    }
                }







                if ($flag) {

                    $data = array();

                    if ($_SESSION['accountId'] == 14) {

                        if (isset($arrFile[1]) && !empty(trim($arrFile[1]))) {

                            $data['item_name'] = mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", str_replace("'", "\'", $arrFile[1])), ENT_IGNORE));

                        }

                    } else {

                        if (isset($arrFile[1]) && !empty(trim($arrFile[1]))) {

                            $data['item_name'] = mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", $arrFile[1]), ENT_IGNORE));

                        }

                    }                   
                   
                    if (trim($arrFile[2]) != '') {
                        $data['brand_id'] = $brandId;
                    }
                    if (trim($arrFile[3]) != '') {
                        $data['category_id'] = $categoryId;
                        $data['subcategory_id'] = $subcategoryid ;  

                    }
                    if (trim($arrFile[4]) != '') {
                        $data['category_id'] = $categoryId;
                        $data['subcategory_id'] = $subcategoryId;
                    }
                    if (trim($arrFile[6]) != '') {
                        $data['item_size'] = trim($arrFile[6]);
                    }
                   
                    if (trim($arrFile[12]) != '') {
                        $data['grade_id'] = $gradeId;
                    }
                    if (isset($hsn_id) && !empty($hsn_id)) {
                        $data['HSN_id'] = mysqli_real_escape_string($this->db_connect_id, $hsn_id);
                    }
                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'Update';

                    if (trim($arrFile[14]) != '') {
                    $data['rank_id'] = $itemRankId;
                    }

                    $this->_dbUpdate($data, 'table_item', " item_id = $itemId ");

                    $dataPrice = array();
                    if (isset($itmPtr) && !empty($itmPtr)) {
                        $dataPrice['item_mrp'] = $itmPtr;
                    }
                    if (isset($itmMrp) && !empty($itmMrp)) {
                        $dataPrice['item_dp'] = $itmMrp;
                    }


                    if (isset($itmDp) && !empty($itmDp)) {

                        $dataPrice['dist_price'] = $itmDp;

                    }

                    if (isset($itmSp) && !empty($itmSp)) {

                        $dataPrice['stockist_price'] = $itmSp;

                    }

                    $dataPrice['last_update_date'] = date('Y-m-d');

                    $dataPrice['last_update_status'] = 'Update';

                    $this->_dbUpdate($dataPrice, 'table_price', " item_id = $itemId ");

                    if ($flag) {

                        $taxrate = 0;

                        if (!empty($arrFile[7]) && is_numeric($arrFile[7])) {

                            $taxrate = $arrFile[7];
                        }
                        if ($taxrate > 0) {
                            $taxdata['tax'] = $taxrate;
                            $this->_dbUpdate2($taxdata, 'table_item_gst', " item_id = $itemId ");

                        }
                    }

                    // now update case size
                    if ($caseSize != '' && $caseSize > 0) {
                        $caseRec = $this->_getSelectList2('table_item_case_relationship', "case_id", '', " item_id = '" . $itemId . "'");

                        if (is_array($caseRec) && count($caseRec) > 0) {
                            $case_id = $caseRec[0]->case_id;

                            $case['case_size'] = $caseSize;
                            if (isset($itmPtr) && $itmPtr != '') {
                                $caseptr = ($itmPtr * $caseSize);
                            } else {
                                $pRec = $this->_getSelectList('table_price', "item_mrp as item_ptr", '', " item_id = '" . $itemId . "'");
                                $caseptr = ($pRec[0]->item_ptr * $caseSize);
                            }
                            if (isset($itmMrp) && $itmMrp != '') {
                                $caseMRP = ($itmMrp * $caseSize);
                            } else {
                                $pRec = $this->_getSelectList('table_price', "item_dp as item_mrp", '', " item_id = '" . $itemId . "'");
                                $caseMRP = ($pRec[0]->item_mrp * $caseSize);
                            }
                            if (isset($itmDp) && $itmDp != '') {
                                $caseDP = ($itmDp * $caseSize);
                            } else {
                                $pRec = $this->_getSelectList('table_price', "dist_price ", '', " item_id = '" . $itemId . "'");
                                $caseDP = ($pRec[0]->dist_price * $caseSize);
                            }
                            if (isset($itmSp) && $itmSp != '') {
                                $caseSP = ($itmSp * $caseSize);
                            } else {
                                $pRec = $this->_getSelectList('table_price', "stockist_price", '', " item_id = '" . $itemId . "'");
                                $caseSP = ($pRec[0]->stockist_price * $caseSize);
                            }
                            $case['case_price_ptr'] = $caseptr;
                            $case['case_price_mrp'] = $caseMRP;
                            $case['case_price_distributor'] = $caseDP;
                            $case['case_price_stockist'] = $caseSP;

                            $case['updated_date'] = date('Y-m-d H:i:s');

                            $id = $this->_dbUpdate($case, 'table_cases', " case_id = $case_id ");

                        }


                    }
                   
                    if ($caseSize == '') {
                        if ($itemId > 0) {

                            $itemCaseRec = $this->_getSelectList2('table_item_case_relationship as icr
    
                            INNER JOIN table_cases as cs ON cs.case_id = icr.case_id', 'icr.item_id,cs.case_id,cs.case_size', '', " icr.item_id = $itemId AND cs.case_id > 0 ");

                            if (is_array($itemCaseRec) && (count($itemCaseRec) > 0)) {

                                $caseId = $itemCaseRec[0]->case_id;

                                $caseSize = $itemCaseRec[0]->case_size;

                                $case = [];
                                if ($itmPtr > 0) {
                                    $case['case_price_ptr'] = ($itmPtr * $caseSize);
                                }
                                if ($itmMrp > 0) {
                                    $case['case_price_mrp'] = ($itmMrp * $caseSize);
                                }


                                $case['case_price_distributor'] = (isset($itmDp) && !empty($itmDp) && (intval($itmDp) > 0)) ? ($itmDp * $caseSize) : '';

                                $case['case_price_stockist'] = (isset($itmSp) && !empty($itmSp) && (intval($itmSp) > 0)) ? ($itmSp * $caseSize) : '';

                                $case['updated_date'] = date('Y-m-d H:i:s');

                                $case['status'] = 'A';

                                $this->_dbUpdate($case, 'table_cases', " case_id = $caseId ");

                            }

                        }
                    }


                }

            }
            $row++;
        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }


    function uploadItemUpdateFile()
    {

        // $fields = array('Item Code*', 'Item Description', 'Brand', 'Category', 'Sub Category' ,'Cases Size', 'Grams', 'Tax Rate', 'Item PTR', 'Item MRP', 'Distributor Price', 'Stockist Price', 'Grade', 'HSN Code','Item Rank Name');
        $fields = array('Item Code*', 'Item Description', 'Brand', 'Category', 'Sub Category' ,'Cases Size', 'Grams', 'Tax Rate', 'Item PTR', 'Item MRP', 'Distributor Price', 'Stockist Price', 'Grade', 'HSN Code','FOC Item(Yes/No)');
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

          
            $flag = true;
           

            // if ($row == 0) {
            //     if (count($arrFile) == 15 && trim($arrFile[0]) == "Item Code*" && trim($arrFile[1]) == "Item Description" && trim($arrFile[2]) == "Brand" && trim($arrFile[3]) == "Category" &&  trim($arrFile[4]) == "Sub Category" && trim($arrFile[5]) == "Cases Size" && trim($arrFile[6]) == "Grams" && trim($arrFile[7]) == "Tax Rate" && trim($arrFile[8]) == "Item PTR" && trim($arrFile[9]) == "Item MRP" && trim($arrFile[10]) == "Distributor Price" && trim($arrFile[11]) == "Stockist Price" && trim($arrFile[12]) == "Grade" && trim($arrFile[13]) == "HSN Code" && trim($arrFile[14]) == "Item Rank Name") {
            //         $flag2 = true;
                 

            //     } else {
                    
            //         $flag2 = false;
            //         $fErr = "fnot";
            //     }
            // }

            if ($row == 0) {
               
                if (count($arrFile) == 15 && trim($arrFile[0]) == "Item Code*" && trim($arrFile[1]) == "Item Description" && trim($arrFile[2]) == "Brand" && trim($arrFile[3]) == "Category" &&  trim($arrFile[4]) == "Sub Category" && trim($arrFile[5]) == "Cases Size" && trim($arrFile[6]) == "Grams" && trim($arrFile[7]) == "Tax Rate" && trim($arrFile[8]) == "Item PTR" && trim($arrFile[9]) == "Item MRP" && trim($arrFile[10]) == "Distributor Price" && trim($arrFile[11]) == "Stockist Price" && trim($arrFile[12]) == "Grade" && trim($arrFile[13]) == "HSN Code" && trim($arrFile[14]) == "FOC Item(Yes/No)") {
                    
                    $flag2 = true;
                 

                } else {
                    
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }
           
         
            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty(trim($arrFile[0]))) {

                    if (empty(trim($arrFile[0]))) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                $pattern = "/^[0-9.]*$/";

                if ($flag) {

                    $itmPtr = mysqli_real_escape_string($this->db_connect_id, $this->getNumber(trim($arrFile[8])));

                    if (isset($itmPtr) && !empty($itmPtr)) {
                        if (!preg_match($pattern, $itmPtr)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Item PTR. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                }

                if ($flag) {

                    $itmMrp = mysqli_real_escape_string($this->db_connect_id, $this->getNumber(trim($arrFile[9])));

                    if (isset($itmMrp) && !empty($itmMrp)) {

                        if (!preg_match($pattern, $itmMrp)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Item MRP. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                }

                if ($flag) {

                    $itmDp = trim($arrFile[10]);

                    if (isset($itmDp) && !empty($itmDp)) {

                        if (!preg_match($pattern, $itmDp)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Distributor Price. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                if ($flag) {

                    $itmSp = trim($arrFile[11]);

                    if (isset($itmSp) && !empty($itmSp)) {

                        if (!preg_match($pattern, $itmSp)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Stockist Price. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(item_code)='" . mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", strtolower(str_replace("'", "\'", $arrFile[0]))), ENT_IGNORE)) . "'";

                    $itemRec = $this->_getSelectList('table_item', 'item_id, category_id,subcategory_id', '', $condi);

                    if (!is_array($itemRec) && (count($itemRec) <= 0)) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " Not Found. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $itemId = $itemRec[0]->item_id;

                    }

                }
                // check brands

                if ($flag) {
                    if (trim($arrFile[2]) != '') {
                        $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(brand_name)= '" . trim($arrFile[2]) . "'";
                        $brandRec = $this->_getSelectList('table_brands', "brand_name,brand_id", '', $condi);

                        if (!is_array($brandRec) && (count($brandRec) <= 0)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Brand doesn't exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $brandId = $brandRec[0]->brand_id;

                        }
                    }
                }

               
                // if ($flag) {
                //     if (trim($arrFile[3]) != '') {
                //         $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(category_name)= '" . trim($arrFile[3]) . "'";
                //         $catRec = $this->_getSelectList('table_category', "category_id", '', $condi);

                //         if (!is_array($catRec) && (count($catRec) <= 0)) {

                //             $strErr .= "Error in Row - " . $row;

                //             for ($i = 0; $i < count($fields); $i++) {

                //                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                //             }
                //             $catfields = $fields[3];
                //             $strErr .= " ,  $catfields doesn't exists. \n";

                //             $str_err_array = array($strErr);

                //             $flag = false;

                //         } else {

                //             $categoryId = $catRec[0]->category_id;

                //         }
                      
                //         if(!empty($catRec)){
                //             $condi = "account_id=" . $_SESSION['accountId'] . " AND category_id='" . ($itemRec[0]->category_id) . "' AND status = 'A'";
                //             $catRecCheck = $this->_getSelectList('table_category', "category_id", '', $condi); 
                           
                //             $condisubcheck = "account_id=" . $_SESSION['accountId'] . " AND category_id='" . ($catRecCheck[0]->category_id) . "' AND status = 'A'";
                //         $subcatRec = $this->_getSelectList('table_subcategory', "subcategory_id, category_id", '', $condisubcheck);
                       
                //         $isSubcategoryFound = 0;
                        
                //         foreach ($subcatRec as $subcat) {
                            
                //             if ($itemRec[0]->subcategory_id == $subcat->subcategory_id) {
                //                 $isSubcategoryFound = 1;
                //                 break; 
                //             }
                //         }
                       

                //            if($isSubcategoryFound == 1){
                //             $strErr .= "Error in Row - " . $row;
                //             for ($i = 0; $i < count($fields); $i++) {
                //                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                //             }
                          
                //             $catfields = $arrFile[3];
                //             $strErr .= " , $catfields is not Valid\n";
                //             $str_err_array = array($strErr);
                //             $flag = false;
                //            }
                //         }
                //     }
                // }


                if ($flag && trim($arrFile[3]) != '') {
                    $categoryName = trim($arrFile[3]);
                  
                    // Check if the category exists in the database
                    $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(category_name) = '" . $categoryName . "'";
                    $catRec = $this->_getSelectList('table_category', "category_id,category_name", '', $condi);
                   

                    if (empty($catRec)) {
                       
                        $strErr .= "Error in Row - " . $row;

                                    for ($i = 0; $i < count($fields); $i++) {
        
                                        $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
        
                                    }
                                    $catfields = $fields[3];
                                    $strErr .= " ,  $catfields doesn't exists. \n";
        
                                    $str_err_array = array($strErr);
        
                                    $flag = false;
                    }
                
                    // $categoryId = $catRec[0]->category_id;
                 $ft = "";  $categoryId = "";
                    // Check if the category's subcategory exists
                    $condiCheck = "account_id=" . $_SESSION['accountId'] . " AND category_name = '".trim($arrFile[3])."' AND status = 'A'";
                    $catRecCheck = $this->_getSelectList('table_category', "category_id,category_name", '', $condiCheck);
                  
                    if (!empty($catRecCheck)) {
                        $condisubcheck = "account_id=" . $_SESSION['accountId'] . " AND category_id = '" . $catRecCheck[0]->category_id . "' AND status = 'A'";
                        $subcatRec = $this->_getSelectList('table_subcategory', "subcategory_id, category_id", '', $condisubcheck);
                     
                        $isSubcategoryFound = false;
                        foreach ($subcatRec as $subcat) {
                            if ($itemRec[0]->subcategory_id != $subcat->subcategory_id) {
                                $isSubcategoryFound = true;
                                break; 
                            }
                            else{

                            }
                        }                       
                       
                       
                        // die();
                        $subcategoryid = "";
                        if ($isSubcategoryFound) {    
                                                if($itemRec[0]->category_id != $catRecCheck[0]->category_id){
                                                    $categoryId = $catRecCheck[0]->category_id;                                                    
                                                    $subcategoryid = 0;                                        
                                                } 
                                               else if($itemRec[0]->category_id = $catRecCheck[0]->category_id){
                                                    $categoryId = $catRecCheck[0]->category_id; 
                                                    $subcategoryid = $itemRec[0]->subcategory_id;
                                                    // echo"<pre>";
                                                    // print_r($ft);
                                                    // print_r("grou");
                                                    // die();                                          
                                                } 

                                                else{

                                                    $strErr .= "Error in Row - " . $row;

                                                    for ($i = 0; $i < count($fields); $i++) {
    
                                                        $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                                                    }
                                                    $catfields = $fields[3];
                                                    $strErr .= " ,  $catfields doesn't exists. \n";
    
                                                    $str_err_array = array($strErr);
    
                                                    $flag = false;
                                                } 
                           
                                
                           
                        }

                        else{
                          
                            $categoryId = $catRecCheck[0]->category_id;
                         
                        }
                     
                      
                    }
                  
                }
               
                if ($flag) {
                    if(trim($arrFile[4]) != ''){
                        
                        $condi = "account_id=" . $_SESSION['accountId'] . " AND subcategory_name='" . mysql_escape_string($arrFile[4]) . "' AND status = 'A'";
                        $subcatRec = $this->_getSelectList('table_subcategory', "subcategory_id, category_id", '', $condi);                   
                       
                        if ($subcatRec) {    
                                               
                            if ($subcatRec[0]->category_id) {                             
                                $condicheck = "account_id=" . $_SESSION['accountId'] . " AND category_id='" . mysql_escape_string($subcatRec[0]->category_id) . "' AND status = 'A'";
                                $catRecCheck = $this->_getSelectList('table_category', "category_id, category_name", '', $condicheck);
                               

                                if(trim($arrFile[3]) != ""){
                                    $condicheckCat = "account_id=" . $_SESSION['accountId'] . " AND category_name='" . trim($arrFile[3]) . "' AND status = 'A'";
                                    $catRecCheckCat = $this->_getSelectList('table_category', "category_id, category_name", '', $condicheckCat);
                                   if($catRecCheckCat[0]->category_id != $catRecCheck[0]->category_id){
                                    
                                    $strErr .= "Error in Row - " . $row;
                                    for ($i = 0; $i < count($fields); $i++) {
                                        $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                                    }
                                   
                                    $strErr .= " , Category Invalid.\n";
                                    $str_err_array = array($strErr);
                                    $flag = false; 
    
                                   }  
                                }                              

                                if (trim($catRecCheck[0]->category_id)) {   
                                    
                                  
                                    if (is_array($subcatRec) && count($subcatRec) > 0) {
                                        $subcategoryId = $subcatRec[0]->subcategory_id;
                                        
                                        $categoryId = $catRecCheck[0]->category_id;
                                      
                                    } else {
                                        
                                        $strErr .= "Error in Row - " . $row;
                                        for ($i = 0; $i < count($fields); $i++) {
                                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                                        }
                                        $subcatfields = $fields[4];
                                        $strErr .= " , $subcatfields does not exist in the system.\n";
                                        $str_err_array = array($strErr);
                                        $flag = false;
                                    }
                                } else {
                                    
                                    $strErr .= "Error in Row - " . $row;
                                    for ($i = 0; $i < count($fields); $i++) {
                                        $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                                    }
                                    $subcatfields = $fields[4];
                                    $strErr .= " , Please enter a valid Sub Category.\n";
                                    $str_err_array = array($strErr);
                                    $flag = false;
                                }
                            }

                           
                        } else {
                          
                            $strErr .= "Error in Row - " . $row;
                            for ($i = 0; $i < count($fields); $i++) {
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                            }
                            $subcatfields = $fields[4];
                            $strErr .= " , $subcatfields does not exist in the system.\n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                   
                }
                

                if ($flag) {
                    $caseSize = trim($arrFile[5]);
                    if ($caseSize != '') {

                        $pattern = "/^[0-9]*$/";

                        if (!preg_match($pattern, $caseSize)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Please Provide Valid Case Size. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                }
                // check grams
                if ($flag) {

                    $grams = trim($arrFile[6]);
                    if ($grams != '') {

                        $pattern = "/^[0-9]*$/";

                        if (!preg_match($pattern, $grams)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Please Provide Valid item  Size. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                }

                // check tax ratet
                if ($flag) {

                    $tax = trim($arrFile[7]);
                    if ($tax != '') {

                        $pattern = "/^[0-9]*$/";

                        if (!preg_match($pattern, $tax)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Please Provide Valid Tax Rate. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                }

                //  check grade

                if ($flag && trim($arrFile[12]) != '') {

                    $condi = " account_id=" . $_SESSION['accountId'] . " AND LOWER(grade_name)='" . mysql_escape_string(strtolower($arrFile[12])) . "' AND status = 'A'";

                    $gradeRec = $this->_getSelectList('table_grade', "grade_name,grade_id", '', $condi);

                    $gradeId = ((is_array($gradeRec) && count($gradeRec) > 0) ? $gradeRec[0]->grade_id : 0);

                    if (!is_array($gradeRec) || count($gradeRec) <= 0) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
                            //echo $arrFile[$i].'-'.$i.'<br>';
                        }

                        $strErr .= ",grade name doesn't exists. \n";
                        //  echo $arrFile[$i].' '.$strErr;die;
                        $str_err_array = array($strErr);

                        $flag = false;


                    }

                }

                if ($flag) {

                    $hsnid = mysqli_real_escape_string($this->db_connect_id, $this->getNumber(trim($arrFile[13])));

                    if (!preg_match($pattern, $hsnid)) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Invalid HSN Code. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    if (isset($arrFile[13]) && !empty(trim($arrFile[13]))) {

                        $resultset = $this->_getSelectList2('table_HSN_code_master', '*', '', ' HSN_Code = "' . mysql_escape_string(trim($arrFile[13])) . '"');
                        if (!empty($resultset)) {
                            $hsn_id = $resultset[0]->hsn_id;
                        } else {
                            $data1['HSN_Code'] = mysql_escape_string(trim($arrFile[13]));
                            $data1['created_at'] = date('Y-m-d H:i:s');
                            $hsn_id = $this->_dbInsert($data1, 'table_HSN_code_master');
                        }

                    }

                }




                  // check item rank name

                //   if ($flag) {
                //     if (trim($arrFile[14]) != '') {
                //         $condi = "account_id=" . $_SESSION['accountId'] . " AND status = 'A' AND LOWER(item_rank_name)= '" . trim($arrFile[14]) . "'";
                //         $itemRankRec = $this->_getSelectList('table_item_ranking', "item_rank_name,item_rank_id", '', $condi);

                //         if (!is_array($itemRankRec) && (count($itemRankRec) <= 0)) {

                //             $strErr .= "Error in Row - " . $row;

                //             for ($i = 0; $i < count($fields); $i++) {

                //                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                //             }

                //             $strErr .= " , Item Rank Name doesn't exists. \n";

                //             $str_err_array = array($strErr);

                //             $flag = false;

                //         } else {

                //             $itemRankId = $itemRankRec[0]->item_rank_id;

                //         }
                //     }
                //     }







                if ($flag) {

                    $data = array();

                    if ($_SESSION['accountId'] == 14) {

                        if (isset($arrFile[1]) && !empty(trim($arrFile[1]))) {

                            $data['item_name'] = mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", str_replace("'", "\'", $arrFile[1])), ENT_IGNORE));

                        }

                    } else {

                        if (isset($arrFile[1]) && !empty(trim($arrFile[1]))) {

                            $data['item_name'] = mysqli_real_escape_string($this->db_connect_id, htmlspecialchars(preg_replace($regex, "", $arrFile[1]), ENT_IGNORE));

                        }

                    }                   
                   
                    if (trim($arrFile[2]) != '') {
                        $data['brand_id'] = $brandId;
                    }
                    if (trim($arrFile[3]) != '') {
                        $data['category_id'] = $categoryId;
                        $data['subcategory_id'] = $subcategoryid ;  

                    }
                    if (trim($arrFile[4]) != '') {
                        $data['category_id'] = $categoryId;
                        $data['subcategory_id'] = $subcategoryId;
                    }
                    if (trim($arrFile[6]) != '') {
                        $data['item_size'] = trim($arrFile[6]);
                    }
                   
                    if (trim($arrFile[12]) != '') {
                        $data['grade_id'] = $gradeId;
                    }
                    if (isset($hsn_id) && !empty($hsn_id)) {
                        $data['HSN_id'] = mysqli_real_escape_string($this->db_connect_id, $hsn_id);
                    }
                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'Update';

                    // if (trim($arrFile[14]) != '') {
                    // $data['rank_id'] = $itemRankId;
                    // }
                    // print_r($data); echo "fdhk";
                  
                    // die;

                    if(empty($arrFile[14]) || 'No' ==  ucwords(strtolower($arrFile[14]))){
                        $data['item_type'] = 'I';
                      }else if('Yes' == ucwords(strtolower($arrFile[15]))){
                          $data['item_type'] = 'F';
                      }
  

                    $this->_dbUpdate($data, 'table_item', " item_id = $itemId ");

                    $dataPrice = array();
                    if (isset($itmPtr) && !empty($itmPtr)) {
                        $dataPrice['item_mrp'] = $itmPtr;
                    }
                    if (isset($itmMrp) && !empty($itmMrp)) {
                        $dataPrice['item_dp'] = $itmMrp;
                    }


                    if (isset($itmDp) && !empty($itmDp)) {

                        $dataPrice['dist_price'] = $itmDp;

                    }

                    if (isset($itmSp) && !empty($itmSp)) {

                        $dataPrice['stockist_price'] = $itmSp;

                    }

                    $dataPrice['last_update_date'] = date('Y-m-d');

                    $dataPrice['last_update_status'] = 'Update';

                    $this->_dbUpdate($dataPrice, 'table_price', " item_id = $itemId ");

                    if ($flag) {

                        $taxrate = 0;

                        if (!empty($arrFile[7]) && is_numeric($arrFile[7])) {

                            $taxrate = $arrFile[7];
                        }
                        if ($taxrate > 0) {
                            $taxdata['tax'] = $taxrate;
                            $this->_dbUpdate2($taxdata, 'table_item_gst', " item_id = $itemId ");

                        }
                    }

                    // now update case size
                    if ($caseSize != '' && $caseSize > 0) {
                        $caseRec = $this->_getSelectList2('table_item_case_relationship', "case_id", '', " item_id = '" . $itemId . "'");

                        if (is_array($caseRec) && count($caseRec) > 0) {
                            $case_id = $caseRec[0]->case_id;

                            $case['case_size'] = $caseSize;
                            if (isset($itmPtr) && $itmPtr != '') {
                                $caseptr = ($itmPtr * $caseSize);
                            } else {
                                $pRec = $this->_getSelectList('table_price', "item_mrp as item_ptr", '', " item_id = '" . $itemId . "'");
                                $caseptr = ($pRec[0]->item_ptr * $caseSize);
                            }
                            if (isset($itmMrp) && $itmMrp != '') {
                                $caseMRP = ($itmMrp * $caseSize);
                            } else {
                                $pRec = $this->_getSelectList('table_price', "item_dp as item_mrp", '', " item_id = '" . $itemId . "'");
                                $caseMRP = ($pRec[0]->item_mrp * $caseSize);
                            }
                            if (isset($itmDp) && $itmDp != '') {
                                $caseDP = ($itmDp * $caseSize);
                            } else {
                                $pRec = $this->_getSelectList('table_price', "dist_price ", '', " item_id = '" . $itemId . "'");
                                $caseDP = ($pRec[0]->dist_price * $caseSize);
                            }
                            if (isset($itmSp) && $itmSp != '') {
                                $caseSP = ($itmSp * $caseSize);
                            } else {
                                $pRec = $this->_getSelectList('table_price', "stockist_price", '', " item_id = '" . $itemId . "'");
                                $caseSP = ($pRec[0]->stockist_price * $caseSize);
                            }
                            $case['case_price_ptr'] = $caseptr;
                            $case['case_price_mrp'] = $caseMRP;
                            $case['case_price_distributor'] = $caseDP;
                            $case['case_price_stockist'] = $caseSP;

                            $case['updated_date'] = date('Y-m-d H:i:s');

                            $id = $this->_dbUpdate($case, 'table_cases', " case_id = $case_id ");

                        }


                    }
                   
                    if ($caseSize == '') {
                        if ($itemId > 0) {

                            $itemCaseRec = $this->_getSelectList2('table_item_case_relationship as icr
    
                            INNER JOIN table_cases as cs ON cs.case_id = icr.case_id', 'icr.item_id,cs.case_id,cs.case_size', '', " icr.item_id = $itemId AND cs.case_id > 0 ");

                            if (is_array($itemCaseRec) && (count($itemCaseRec) > 0)) {

                                $caseId = $itemCaseRec[0]->case_id;

                                $caseSize = $itemCaseRec[0]->case_size;

                                $case = [];
                                if ($itmPtr > 0) {
                                    $case['case_price_ptr'] = ($itmPtr * $caseSize);
                                }
                                if ($itmMrp > 0) {
                                    $case['case_price_mrp'] = ($itmMrp * $caseSize);
                                }


                                $case['case_price_distributor'] = (isset($itmDp) && !empty($itmDp) && (intval($itmDp) > 0)) ? ($itmDp * $caseSize) : '';

                                $case['case_price_stockist'] = (isset($itmSp) && !empty($itmSp) && (intval($itmSp) > 0)) ? ($itmSp * $caseSize) : '';

                                $case['updated_date'] = date('Y-m-d H:i:s');

                                $case['status'] = 'A';

                                $this->_dbUpdate($case, 'table_cases', " case_id = $caseId ");

                            }

                        }
                    }


                }

            }
            $row++;
        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

//Todo End : Sagar : 30th Sep 2022 : Import Item Update Sheet for Name & Prices


    function uploadItemDiscountFile()

    {

        $fields = array('Item Code*', 'Discount%*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Item Code*" || empty($arrFile[1]) || $arrFile[1] == "Discount%*") {

                    //$strErr .="Error in Row".$row." ";

                    if (empty($arrFile[0]) && empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $fields[0] . " and " . $fields[1] . "  shouldn't be empty \n";

                    } else if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $fields[0] . " shouldn't be empty \n";

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $fields[1] . " shouldn't be empty \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                $itemid = 0;

                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND status='A' AND LOWER(item_code)='" . mysql_escape_string(strtolower($arrFile[0])) . "'";

                    $aCatRec = $this->_getSelectList('table_item', 'item_id', '', $condi);

                    if (is_array($aCatRec) && count($aCatRec) > 0) {

                        $itemid = $aCatRec[0]->item_id;

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ,item does not exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {


                    if (empty($arrFile[1]) || $arrFile[1] == 0 || $arrFile[1] < 0 || $arrFile[1] > 100) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ,Invalid Discount Percentage. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {


                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  item_id='" . $itemid . "'";

                    $aCatRec = $this->_getSelectList('table_item_discount', '*', '', $condi);

                    if (is_array($aCatRec) && count($aCatRec) > 0) {

                        $data = array();

                        $data['discount_percentage'] = mysql_escape_string($this->clean($arrFile[1]));

                        $id = $this->_dbInsert($data, 'table_item_discount');

                        $this->_dbUpdate($data, 'table_item_discount', " item_id =" . $itemid);

                    } else {

                        $data = array();

                        $data['account_id'] = $this->clean($_SESSION['accountId']);

                        $data['item_id'] = mysql_escape_string($itemid);

                        $data['discount_percentage'] = mysql_escape_string($this->clean($arrFile[1]));

                        $data['created_on'] = date('Y-m-d');

                        $id = $this->_dbInsert($data, 'table_item_discount');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }


//Todo Start : Sagar : 16th Dec 2022 : Import Retailer & Distributor Mapping

    function uploadRetailerDistributorMappingFile()
    {

        $fields = array($this->AliaseUsers['retailer'] . ' Code*', $this->AliaseUsers['distributor'] . ' Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0])) {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $fields[0] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if (empty($arrFile[1])) {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $fields[1] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }


                if ($flag) {

                    $retId = 0;

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(retailer_code)='" . mysql_escape_string(strtolower($arrFile[0])) . "'";

                    $retRec = $this->_getSelectList('table_retailer', 'retailer_id', '', $condi);

                    if (is_array($retRec) && (count($retRec) > 0)) {

                        $retId = $retRec[0]->retailer_id;

                    } else {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $fields[0] . " does not exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $custId = 0;

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(distributor_code)='" . mysql_escape_string(strtolower($arrFile[1])) . "' and status = 'A' ";

                    $custRec = $this->_getSelectList('table_distributors', 'distributor_id', '', $condi);

                    if (is_array($custRec) && (count($custRec) > 0)) {

                        $custId = $custRec[0]->distributor_id;

                    } else {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $fields[1] . " does not exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag && ($custId > 0) && ($retId > 0)) {

                    $mappingRec = $this->_getSelectList('table_retailer', 'retailer_id', '', "distributor_id = $custId AND retailer_id = $retId");

                    if (is_array($mappingRec) && (count($mappingRec) > 0)) {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,Mapping already exists in the system  \n";

                        $str_err_array = array($strErr);

                    } else {

                        $data = [];

                        $data['distributor_id'] = $custId;

                        $data['last_update_date'] = date('Y-m-d');

                        $data['last_update_status'] = 'Update';

                        $this->_dbUpdate($data, 'table_retailer', " retailer_id = $retId ");

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//Todo End: Sagar: 16th Dec 2022 : Import Retailer & Distributor Mapping


//Todo Start:Sagar : 4th Jan 2023 : Import Retailer Type Wise Item Price

    function uploadRetailerTypeItemPriceFile()

    {

        $fields = array('Item Code*', $this->AliaseUsers['retailer'] . ' Type*', 'Price*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || trim($arrFile[2]) == '') {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[0] . " shouldn't be empty \n";


                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[1] . " shouldn't be empty \n";


                    } else if (trim($arrFile[2]) == '') {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[2] . " shouldn't be empty \n";


                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }


                if ($flag) {

                    $condi = " LOWER(i.item_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND c.status='A' AND i.status = 'A' AND i.item_type='I'";

                    $ItemRec = $this->_getSelectList('table_item as i 

                    LEFT JOIN table_category as c on i.category_id = c.category_id', "i.item_id", '', $condi);

                    $item_id = $ItemRec[0]->item_id;

                    if (!is_array($ItemRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Invalid Item Code \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $condi = " LOWER(type_name)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' AND status='A'";

                    $retTypeRec = $this->_getSelectList('table_retailer_type_master', "type_id", '', $condi);

                    $retTypeId = $retTypeRec[0]->type_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Invalid " . $this->AliaseUsers['retailer'] . " Type \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    if (!is_numeric(trim($arrFile[2])) || trim($arrFile[2]) == '') {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Invalid Price\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                $updateFlg = 0;
                $mappingId = 0;
                if ($flag) {

                    $condi = " item_id='" . $item_id . "' and retailer_type_id = '" . $retTypeId . "'";
                    $mapRec = $this->_getSelectList2('table_retailer_type_item_price_mapping', "mapping_id", '', $condi);

                    if (is_array($mapRec) && (count($mapRec) > 0)) {
                        $updateFlg = 1;
                        $mappingId = $mapRec[0]->mapping_id;
                        /*$strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Price already exists in the system. \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        */

                    }

                }


                if ($flag) {
                    if ($updateFlg > 0 && $mappingId > 0) {
                        $updCondi = " mapping_id=" . $mappingId;
                        $data = array();
                        $data['price'] = mysql_escape_string(trim($arrFile[2]));
                        $data['updated_at'] = date('Y-m-d H:i:s');
                        $this->_dbUpdate($data, 'table_retailer_type_item_price_mapping', $updCondi);

                    } else {
                        $data['retailer_type_id'] = mysql_escape_string($retTypeId);
                        $data['item_id'] = mysql_escape_string($item_id);
                        $data['price'] = mysql_escape_string(trim($arrFile[2]));
                        $data['status'] = mysql_escape_string('A');
                        $data['created_at'] = date('Y-m-d H:i:s');
                        $data['updated_at'] = date('Y-m-d H:i:s');
                        $this->_dbInsert($data, 'table_retailer_type_item_price_mapping');
                    }
                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//Todo End:Sagar : 4th Jan 2023 : Import Retailer Type Wise Item Price


//Todo Start:Sagar : 5th Jan 2023 : Import Distributor Type Wise Item Price

    function uploadDistributorTypeItemPriceFile()

    {

        $fields = array('Item Code*', $this->AliaseUsers['distributor'] . ' Type*', 'Price*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2])) {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[0] . " shouldn't be empty \n";


                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[1] . " shouldn't be empty \n";


                    } else if (empty($arrFile[2])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[2] . " shouldn't be empty \n";


                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }


                if ($flag) {

                    $condi = " LOWER(i.item_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND c.status='A' AND i.status = 'A' AND i.item_type='I'";

                    $ItemRec = $this->_getSelectList('table_item as i 

                    LEFT JOIN table_category as c on i.category_id = c.category_id', "i.item_id", '', $condi);

                    $item_id = $ItemRec[0]->item_id;

                    if (!is_array($ItemRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Invalid Item Code \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $condi = " LOWER(dis_type_name)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' AND status='A'";

                    $retTypeRec = $this->_getSelectList('table_distributor_type_master', "dis_type_id", '', $condi);

                    $retTypeId = $retTypeRec[0]->dis_type_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Invalid " . $this->AliaseUsers['distributor'] . " Type \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    if (!is_numeric(trim($arrFile[2])) || (trim($arrFile[2]) <= 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Invalid Price\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                $updateFlag = 0;
                $mappingId = 0;
                if ($flag) {

                    $condi = " item_id='" . $item_id . "' and distributor_type_id = '" . $retTypeId . "'";

                    $mapRec = $this->_getSelectList2('table_distributor_type_item_price_mapping', "mapping_id", '', $condi);

                    if (is_array($mapRec) && (count($mapRec) > 0)) {
                        $updateFlag = 1;
                        $mappingId = $mapRec[0]->mapping_id;
                        // $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Price already exists in the system. \n";

                        // $str_err_array = array($strErr);

                        // $flag = false;


                    }

                }


                if ($flag) {

                    if ($updateFlag == 1 && $mappingId > 0) {

                        $data2['price'] = mysql_escape_string(trim($arrFile[2]));

                        $data2['status'] = mysql_escape_string('A');

                        $data2['updated_at'] = date('Y-m-d H:i:s');

                        $update = $this->_dbUpdate2($data2, 'table_distributor_type_item_price_mapping', " mapping_id=" . $mapRec[0]->mapping_id);

                    } else {

                        $data['distributor_type_id'] = mysql_escape_string($retTypeId);

                        $data['item_id'] = mysql_escape_string($item_id);

                        $data['price'] = mysql_escape_string(trim($arrFile[2]));

                        $data['status'] = mysql_escape_string('A');

                        $data['created_at'] = date('Y-m-d H:i:s');

                        $data['updated_at'] = date('Y-m-d H:i:s');

                        $this->_dbInsert($data, 'table_distributor_type_item_price_mapping');
                    }


                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//Todo End:Sagar : 5th Jan 2023 : Import Distributor Type Wise Item Price

//Todo Start : Jatin : 15th Feb 2023 : Import Salesman Category wise mapping
    function uploadNewSalCategoryList()

    {

        $fields = array($this->AliaseUsers['salesman'] . ' Code*', 'Category Code* ');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1])) {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . " shouldn't be empty \n";

                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . " shouldn't be empty \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }


                if ($flag) {

                    $condi = " LOWER(category_code)='" . mysql_escape_string(strtolower($arrFile[1])) . "' AND status='A'";

                    $ItemRec = $this->_getSelectList('table_category', "category_id", '', $condi);

                    $cat_id = $ItemRec[0]->category_id;

                    if (!is_array($ItemRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " Invalid Category Code \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower($arrFile[0])) . "' AND status='A'";

                    $retTypeRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);

                    $sal_id = $retTypeRec[0]->salesman_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " ," .
                            $arrFile[1] . "  Invalid " . $this->AliaseUsers['salesman'] . " Code \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $condi = " salesman_id='" . $sal_id . "' and category_id = '" . $cat_id . "'";

                    $mapRec = $this->_getSelectList2('table_salesman_category', "id", '', $condi);

                    if (is_array($mapRec) && (count($mapRec) > 0)) {

                        $strErr .= "Error in Row" . $row . "  already exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                    $data['salesman_id'] = mysql_escape_string($sal_id);

                    $data['category_id'] = mysql_escape_string($cat_id);

                    $data['created_on'] = date('Y-m-d H:i:s');

                    $data['updated_on'] = date('Y-m-d H:i:s');

                    $data['status'] = mysql_escape_string('A');

                    $this->_dbInsert($data, 'table_salesman_category');

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }
//Todo End : Jatin : 15th Feb 2023 : Import Salesman Category wise mapping

//Todo Start: Jatin : 9th March 2023 : Import Salesman State District City Mapping


    function uploadSalesmanCombinationMappingFile()
    {

        $fields = array($this->AliaseUsers('salesman') . ' Code*', 'State Name*', 'District Name*', 'City Name*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0])) {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . " ," . $fields[0] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }
                if (empty($arrFile[1])) {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . " ," . $fields[1] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }
                if (empty($arrFile[2])) {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . " ," . $fields[2] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }
                if (empty($arrFile[3])) {

                    $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . "," . $arrFile[3] . " ," . $fields[3] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // for Salesman
                if ($flag) {

                    //$salesmanId = 0;

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(employee_code)='" .
                        mysql_escape_string(strtolower($arrFile[0])) . "'";

                    $salesmanRec = $this->_getSelectList('table_salesman', 'salesman_id', '', $condi);

                    if (is_array($salesmanRec) && (count($salesmanRec) > 0)) {

                        $salesmanId = $salesmanRec[0]->salesman_id;

                    } else {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," .
                            $arrFile[2] . "," . $arrFile[3] . " ," . $this->AliaseUsers('salesman') . " does not exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }
                // for State
                if ($flag) {

                    //$stateId = 0;

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower($arrFile[1])) . "'";

                    $stateRec = $this->_getSelectList2('state', 'state_id', '', $condi);

                    if (is_array($stateRec) && (count($stateRec) > 0)) {

                        $stateId = $stateRec[0]->state_id;

                    } else {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . ",State Name does not exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }
                // For district
                if ($flag) {

                    //$districtId = 0;

                    $condi = " LOWER(city_name)='" . mysql_escape_string(strtolower($arrFile[2])) . "'";

                    $distRec = $this->_getSelectList2('city', 'city_id', '', $condi);

                    if (is_array($distRec) && (count($distRec) > 0)) {

                        $districtId = $distRec[0]->city_id;

                    } else {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . ",District Name does not exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }
                // For City
                if ($flag) {

                    //$cityId = 0;

                    $condi = " LOWER(location_name)='" . mysql_escape_string(strtolower($arrFile[3])) . "'";

                    $cityRec = $this->_getSelectList('table_location', 'location_id', '', $condi);

                    if (is_array($cityRec) && (count($cityRec) > 0)) {

                        $cityId = $cityRec[0]->location_id;

                    } else {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . ",City Name does not exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($salesmanId > 0) && ($stateId > 0) && ($districtId > 0) && ($cityId > 0)) {
                    $condi = "and status= 'A'";
                    $mappingRec = $this->_getSelectList('table_salesman_state_district_city_mapping', 'mapping_id',
                        '', " salesman_id = $salesmanId and state_id = $stateId and district_id = $districtId and city_id = $cityId " . $condi);

                    if (is_array($mappingRec) && (count($mappingRec) > 0)) {

                        $strErr .= " Error in Row - " . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . ",Mapping already exists in the system  \n";

                        $str_err_array = array($strErr);

                    } else {

                        $data = [];

                        $data['account_id'] = $_SESSION['accountId'];

                        $data['salesman_id'] = $salesmanId;

                        $data['state_id'] = $stateId;

                        $data['district_id'] = $districtId;

                        $data['city_id'] = $cityId;

                        $data['status'] = 'A';

                        $data['created_at'] = date('Y-m-d H:i:s');

                        $data['updated_at'] = date('Y-m-d H:i:s');

                        $this->_dbInsert($data, 'table_salesman_state_district_city_mapping');


                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }
//Todo End: Jatin : 9th March 2023 : Import Salesman State District City Mapping

//Todo Start: Jatin : 15th March 2023 : Import Distributor wise item price
    function uploadDistributorWiseItemPriceFile()

    {

        $fields = array($this->AliaseUsers('distributor') . ' Code*', 'Item Code*', 'Price*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if (($row > 0) && (is_array($arrFile))) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || trim($arrFile[2]) == '') {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1])) {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[1] . " shouldn't be empty. \n";

                    } elseif (trim($arrFile[2])) {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[2] . " shouldn't be empty. \n";

                    }

                    $flag = false;

                    $str_err_array = array($strErr);

                }

                if ($flag) {

                    $retId = 0;

                    $condi = " LOWER(distributor_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND status = 'A'";

                    $retRec = $this->_getSelectList('table_distributors', "distributor_id", '', $condi);

                    if (is_array($retRec) && (count($retRec) > 0)) {

                        $disId = $retRec[0]->distributor_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[0] . " does not exists.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($disId > 0)) {

                    $itemId = 0;

                    $condi2 = " status='A' AND LOWER(item_code)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "'";

                    $itmRec = $this->_getSelectList('table_item', 'item_id', '', $condi2);

                    if (is_array($itmRec) && (count($itmRec) > 0)) {

                        $itemId = $itmRec[0]->item_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[1] . " does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($disId > 0) && ($itemId > 0)) {

                    $minPrice = trim($arrFile[2]);

                    if (!is_numeric($minPrice) || ($minPrice < 0)) {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[2] . " Invalid Price \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($disId > 0) && ($itemId > 0)) { //&& ($minPrice > 0)

                    $condi3 = " distributor_id = $disId AND item_id = $itemId AND status = 'A'";

                    $auRec = $this->_getSelectList('table_distributor_wise_item_price', "*", '', $condi3);

                    if (is_array($auRec) && (count($auRec) > 0)) {

                        $data = [];

                        $data['price'] = $minPrice;

                        $data['updated_at'] = date('Y-m-d H:i:s');

                        $this->_dbUpdate($data, 'table_distributor_wise_item_price', " $condi3 ");

                    } else {

                        $data = [];

                        $data['distributor_id'] = $disId;

                        $data['item_id'] = $itemId;

                        $data['price'] = $minPrice;

                        $data['account_id'] = $_SESSION['accountId'];

                        $data['created_at'] = date('Y-m-d H:i:s');

                        $data['updated_at'] = date('Y-m-d H:i:s');

                        $data['status'] = 'A';

                        $this->_dbInsert($data, 'table_distributor_wise_item_price');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }
//Todo End: Jatin : 15th March 2023 : Import Distributor wise item price

//Todo Start: Jatin : 16th March 2023 : Import Distributor State wise item price
    function uploadStateWiseDisItemPriceImportFile()

    {


        $fields = array($this->AliaseUsers('distributor') . 'State Name*', 'Product Code*', 'Price*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if (($row > 0) && (is_array($arrFile))) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || trim($arrFile[2]) == '') {

                    if (empty($arrFile[0]) || $arrFile[0] == $this->AliaseUsers('distributor') . "State Name*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Product Code*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[1] . " shouldn't be empty. \n";

                    } elseif (trim($arrFile[2]) == '' || $arrFile[2] == "Price*") {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . " ," . $fields[2] . " shouldn't be empty. \n";

                    }

                    $flag = false;

                    $str_err_array = array($strErr);

                }

                if ($flag) {

                    $stateId = 0;

                    $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower($arrFile[0])) . "' AND status = 'A'";

                    $stateRec = $this->_getSelectList2('state', "state_id", '', $condi);

                    if (is_array($stateRec) && (count($stateRec) > 0)) {

                        $stateId = $stateRec[0]->state_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[0] . " State does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($stateId > 0)) {

                    $itemId = 0;

                    $condi2 = " account_id=" . $_SESSION['accountId'] . " AND LOWER(item_code)='" . mysql_escape_string(strtolower($arrFile[1])) . "' AND status = 'A' ";

                    $itmRec = $this->_getSelectList('table_item', 'item_id', '', $condi2);

                    if (is_array($itmRec) && (count($itmRec) > 0)) {

                        $itemId = $itmRec[0]->item_id;

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[1] . " Product does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($stateId > 0) && ($itemId > 0)) {

                    $minPrice = trim($arrFile[2]);

                    if (!is_numeric($minPrice) || ($minPrice < 0)) {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $arrFile[2] . ", " . $fields[2] . " Invalid Price \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag && ($stateId > 0) && ($itemId > 0)) { //&& ($minPrice > 0)

                    $condi3 = " account_id=" . $_SESSION['accountId'] . " AND dis_state_id = $stateId AND item_id = $itemId AND status = 'A'";

                    $auRec = $this->_getSelectList('table_distributor_state_wise_item_price', "*", '', $condi3);

                    if (!is_array($auRec) && (count($auRec) <= 0)) {

                        $data = [];

                        $data['dis_state_id'] = $stateId;

                        $data['item_id'] = $itemId;

                        $data['price'] = $minPrice;

                        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                        $data['created_at'] = date('Y-m-d H:i:s');

                        $data['updated_at'] = date('Y-m-d H:i:s');

                        $data['status'] = mysql_escape_string('A');

                        $this->_dbInsert($data, 'table_distributor_state_wise_item_price');

                    } else {

                        $strErr .= "Error in Row - " . $row . " ," . $arrFile[0] . "," . $arrFile[1] . "," . $arrFile[2] . ", Already Exists!  \n";

                        $str_err_array = array($strErr);

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//Todo End: Jatin : 16th March 2023 : Import Distributor State wise item price

// Todo Start : Jatin : 18th April 2023 : Import Retailer wise Item code

    function uploadRetailerItmCodeFile()

    {

        $fields = array($this->AliaseUsers['retailer'] . ' Code*', 'Item Code*', $this->AliaseUsers['retailer'] . ' Item Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2])) {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[0] . " shouldn't be empty \n";


                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[1] . " shouldn't be empty \n";


                    } else if (empty($arrFile[2])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[2] . " shouldn't be empty \n";


                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }


                //  To get Retailer
                if ($flag) {

                    $condi = " LOWER(retailer_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND status='A'";

                    $retTypeRec = $this->_getSelectList('table_retailer', "retailer_id", '', $condi);

                    $retId = $retTypeRec[0]->retailer_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "  ,Invalid " . $this->AliaseUsers['retailer'] . " Code \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // To get a Items
                if ($flag) {

                    $condi = " LOWER(i.item_code)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "'  AND i.status = 'A' AND i.item_type='I'";

                    $ItemRec = $this->_getSelectList('table_item as i 

                    ', "i.item_id", '', $condi);

                    $item_id = $ItemRec[0]->item_id;

                    if (!is_array($ItemRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Invalid Item Code \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // To Enter a retialer Item code
//                if ($flag) {
//
//                    if (!is_numeric($arrFile[2]) || ($arrFile[2] <= 0)) {
//
//                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
//                            $arrFile[2] . "  ,Invalid ". $this->AliaseUsers['retailer']  ." Item Code \n";
//
//                        $str_err_array = array($strErr);
//
//                        $flag = false;
//
//                    }
//
//                }


                if ($flag) {

                    $condi = " item_id='" . $item_id . "' and retailer_id = '" . $retId . "'";

                    $mapRec = $this->_getSelectList2('table_retailer_wise_item_code', "id", '', $condi);

                    if (is_array($mapRec) && (count($mapRec) > 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "  ," . $this->AliaseUsers('retailer') . " already exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {


                    $data['retailer_id'] = mysql_escape_string($retId);

                    $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                    $data['item_id'] = mysql_escape_string($item_id);

                    $data['ret_item_code'] = mysql_escape_string(trim($arrFile[2]));

                    $data['status'] = mysql_escape_string('A');

                    $data['created_at'] = date('Y-m-d H:i:s');

                    $data['updated_at'] = date('Y-m-d H:i:s');

                    $this->_dbInsert($data, 'table_retailer_wise_item_code');

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

// Todo End : Jatin : 18th April 2023 : Import Retailer wise Item code

// Todo Start : 6 May 2023 : Import Target

    function uploadTargetFile()

    {

        $fields = array('Target Name*', $this->AliaseUsers['salesman'] . ' Code*', 'Month*', 'Year*', 'Amount*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[3]) || empty
                    ($arrFile[4])) {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[0] . " shouldn't be empty \n";


                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[1] . " shouldn't be empty \n";


                    } else if (empty($arrFile[2])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[2] . " shouldn't be empty \n";


                    } else if (empty($arrFile[3])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[3] . " shouldn't be empty \n";

                    } else if (empty($arrFile[4])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[4] . " shouldn't be empty \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }


                $target_name = mysql_escape_string(trim($arrFile[0]));

                $month = mysql_escape_string(trim($arrFile[2]));

                $year = mysql_escape_string(trim($arrFile[3]));


                $amount = mysql_escape_string($arrFile[4]);

                if ($flag) {

                    $firstdate = date('Y-m-d', strtotime($year . '-' . $month . '-01'));

                    $present_month = date('Y-m-01');

                    if ($firstdate >= $present_month) {

                        $start_date = date('Y-m-d', strtotime($year . '-' . $month . '-01'));

                        $end_date = date('Y-m-t', strtotime($year . '-' . $month . '-01'));

                    } else {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ", Invalid month* you can enter only current or future month \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }
                }


                if ($flag) {

                    $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "'  AND  status = 'A' ";

                    $retTypeRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);
                    $salesman_id = $retTypeRec[0]->salesman_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $this->AliaseUsers['salesman'] . " Does not exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";

                    $retTypeRec = $this->_getSelectList('table_target_incentive', "target_incentive_id", '', $condi);

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ",," . $arrFile[0] . ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {


                    $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                    $data['description'] = mysql_escape_string($target_name);

                    $data['target_incentive_type'] = mysql_escape_string('1');

                    $data['target_for'] = mysql_escape_string('secondary');

                    $data['type_id'] = mysql_escape_string('12');

                    $data['dur_id'] = mysql_escape_string('4');

                    $data['primary_values'] = mysql_escape_string($amount);

                    $data['start_date'] = mysql_escape_string($start_date);

                    $data['end_date'] = mysql_escape_string($end_date);

                    $data['qualifiers_type'] = mysql_escape_string('1');

                    $data['last_update_date'] = date('Y-m-d H:i:s');

                    $data['last_update_status'] = "New";

                    $data['status'] = mysql_escape_string('A');

                    $id = $this->_dbInsert($data, 'table_target_incentive');

                    if ($id != '') {
                        $duration = mysql_escape_string('1');
//                        $start_date = date('Y-m-d', strtotime($_POST['from']));
//                        $end_date = date('Y-m-d', strtotime($_POST['end_date']));
//        $durationNumber = 0;
                        $durationNumber = 1;
                        $duration_dates = $this->_getDuration($duration, $start_date, $end_date);
//                        foreach ($duration_dates as $value) {
//                            //$duration_start_date = $value[0];
//                            //$duration_end_date = $value[1];
//                            $enddate = strtotime('-1 days', strtotime($duration_end_date));
//                            $enddate = date('Y-m-d', $enddate);
                        $data1['target_incentive_id'] = mysql_escape_string($id);
//            $durationNumber = ++$durationNumber;
                        $data1['duration_number'] = mysql_escape_string($durationNumber);
                        $durationNumber++;
                        $data1['primary_values'] = mysql_escape_string($amount);
                        $data['secondary_values'] = mysql_escape_string("");
                        //$data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
                        $data1['from_date'] = mysql_escape_string($start_date);

                        $data1['to_date'] = mysql_escape_string($end_date);

                        $data1['status'] = 'A';

                        $duration_id = $this->_dbInsert($data1, 'table_target_incentive_duration');

                        if ($duration != '') {

                            if ((count($arrFile[1]) > 0)) {
                                for ($i = 0; $i < count($arrFile[1]); $i++) {
                                    $data2 = [];
                                    //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                    $data2['salesman_id'] = $salesman_id;
                                    //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                    $data2['added_date'] = date('Y-m-d');
                                    $data2['duration_id'] = mysql_escape_string($duration_id);
                                    $data2['status'] = 'A';
                                    $this->_dbInsert($data2, 'table_target_incentive_salesman');

                                }
                            }

                        }
                    }


                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

// Todo End : 6 May 2023 : Import Target

// Todo Start : 6 May 2023 : Import Tertiary Target
    function uploadTertiaryTargetFile()

    {

        $fields = array('Target Name*', $this->AliaseUsers['salesman'] . ' Code*', 'Month*', 'Year*', 'Amount*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[3]) || empty
                    ($arrFile[4])) {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[0] . " shouldn't be empty \n";


                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[1] . " shouldn't be empty \n";


                    } else if (empty($arrFile[2])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[2] . " shouldn't be empty \n";


                    } else if (empty($arrFile[3])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[3] . " shouldn't be empty \n";

                    } else if (empty($arrFile[4])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $fields[4] . " shouldn't be empty \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }


                $target_name = mysql_escape_string(trim($arrFile[0]));

                $month = mysql_escape_string(trim($arrFile[2]));

                $year = mysql_escape_string(trim($arrFile[3]));

                $amount = mysql_escape_string(trim($arrFile[4]));


                if ($flag) {

                    $firstdate = date('Y-m-d', strtotime($year . '-' . $month . '-01'));

                    $present_month = date('Y-m-01');

                    if ($firstdate >= $present_month) {

                        $start_date = date('Y-m-d', strtotime($year . '-' . $month . '-01'));

                        $end_date = date('Y-m-t', strtotime($year . '-' . $month . '-01'));

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . ", Invalid month* you can enter only current or future month  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }
                }


                if ($flag) {

                    $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "'  AND  status = 'A' ";

                    $retTypeRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);
                    $salesman_id = $retTypeRec[0]->salesman_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $this->AliaseUsers['salesman'] . " Does not exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                 /*   $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";

                    $retTypeRec = $this->_getSelectList('table_target_incentive', "target_incentive_id", '', $condi); */

                     $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND primary_values!='" . mysql_escape_string(trim($amount)) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";

                    $retTypeRec = $this->_getSelectList('table_target_incentive', "target_incentive_id", '', $condi);

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[0] . ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }
                if ($flag) {

                 /*   $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";

                    $retTypeRec = $this->_getSelectList('table_target_incentive', "target_incentive_id", '', $condi); */

                     $condi = " d.description='" . mysql_escape_string(trim($arrFile[0])) . "' AND i.salesman_id='" . mysql_escape_string(trim($salesman_id)) . "' AND d.primary_values='" . mysql_escape_string(trim($amount)) . "' AND d.start_date = '" . $start_date . "' and d.end_date = '" . $end_date . "' ";


  $retTypeRec = $this->_getSelectList('table_target_incentive as d 
				left join table_target_incentive_duration as r on r.target_incentive_id=d.target_incentive_id 
                left join table_target_incentive_salesman as i on i.duration_id=r.duration_id ',
                " d.target_incentive_id", '', $condi, '');


                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {
                       
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[0] . ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;


                    }

                }


                if ($flag) {


                    $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                    $data['description'] = mysql_escape_string($target_name);

                    $data['target_incentive_type'] = mysql_escape_string('1');

                    $data['target_for'] = mysql_escape_string('tertiary');

                    $data['type_id'] = mysql_escape_string('12');

                    $data['dur_id'] = mysql_escape_string('4');

                    $data['primary_values'] = mysql_escape_string($amount);

                    $data['start_date'] = mysql_escape_string($start_date);

                    $data['end_date'] = mysql_escape_string($end_date);

                    $data['qualifiers_type'] = mysql_escape_string('1');

                    $data['last_update_date'] = date('Y-m-d H:i:s');

                    $data['last_update_status'] = "New";

                    $data['status'] = mysql_escape_string('A');

                    $id = $this->_dbInsert($data, 'table_target_incentive');

                    if ($id != '') {
                        $duration = mysql_escape_string('1');
//                        $start_date = date('Y-m-d', strtotime($_POST['from']));
//                        $end_date = date('Y-m-d', strtotime($_POST['end_date']));
//        $durationNumber = 0;
                        $durationNumber = 1;
                        $duration_dates = $this->_getDuration($duration, $start_date, $end_date);
//                        foreach ($duration_dates as $value) {
//                            //$duration_start_date = $value[0];
//                            //$duration_end_date = $value[1];
//                            $enddate = strtotime('-1 days', strtotime($duration_end_date));
//                            $enddate = date('Y-m-d', $enddate);
                        $data1['target_incentive_id'] = mysql_escape_string($id);
//            $durationNumber = ++$durationNumber;
                        $data1['duration_number'] = mysql_escape_string($durationNumber);
                        $durationNumber++;
                        $data1['primary_values'] = mysql_escape_string($amount);
                        $data['secondary_values'] = mysql_escape_string("");
                        //$data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
                        $data1['from_date'] = mysql_escape_string($start_date);

                        $data1['to_date'] = mysql_escape_string($end_date);

                        $data1['status'] = 'A';

                        $duration_id = $this->_dbInsert($data1, 'table_target_incentive_duration');

                        if ($duration != '') {

                            if ((count($arrFile[1]) > 0)) {
                                for ($i = 0; $i < count($arrFile[1]); $i++) {
                                    $data2 = [];
                                    // Todo Start : as discussed with ritu change salemsman code to salesman id : sudhanshu : 07 march 2024

                                    $data2['salesman_id'] = $salesman_id;
                                    // Todo End : as discussed with ritu change salemsman code to salesman id : sudhanshu : 07 march 2024
                                    $data2['added_date'] = date('Y-m-d');
                                    $data2['duration_id'] = mysql_escape_string($duration_id);
                                    $data2['status'] = 'A';
                                    $this->_dbInsert($data2, 'table_target_incentive_salesman');

                                }
                            }

                        }
                    }


                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

//Todo End : 6 May 2023 : Import Tertiary Target


// Todo Start : Jatin : 9 May 2023 : Import Retailer type wise Item code
    function checkDuplicacyRetWiseCode($id = 0, $retCode = '')
    {
        if (isset($id) && $id > 0) {
            $condi = " ret_item_code = '" . $retCode . "' AND id NOT IN($id)";

        } else {
            $condi = " LOWER(ret_item_code) = '" . $retCode . "' ";
        }

        $retTypeRec = $this->_getSelectList('table_retailer_type_wise_item_code', "type_id,id", '', $condi);

        return count($retTypeRec);
    }

    function uploadRetailertypeWiseItmCodeFile()

    {

        $fields = array($this->AliaseUsers['retailer'] . ' Type*', 'Item Code*', $this->AliaseUsers['retailer'] .
            ' Type Item Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2])) {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[0] . " shouldn't be empty \n";


                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[1] . " shouldn't be empty \n";


                    } else if (empty($arrFile[2])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[2] . " shouldn't be empty \n";


                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }


                //  To get Retailer
                if ($flag) {

                    $condi = " LOWER(type_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' AND status='A'";

                    $retTypeRec = $this->_getSelectList('table_retailer_type_master', "type_id", '', $condi);

                    $type_id = $retTypeRec[0]->type_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "  ,Invalid " . $this->AliaseUsers['retailer'] . " type \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // To get a Items
                if ($flag) {

                    $condi = " LOWER(i.item_code)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "'  AND i.status = 'A' AND i.item_type='I'";

                    $ItemRec = $this->_getSelectList('table_item as i 

                    ', "i.item_id", '', $condi);

                    $item_id = $ItemRec[0]->item_id;

                    if (!is_array($ItemRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Invalid Item Code \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }
                // check duplicacy
                //  if ($flag) {

                //     $condi = " LOWER(ret_item_code)='" . mysql_escape_string(strtolower(trim($arrFile[2]))) . "' ";

                //     $chkRec = $this->_getSelectList('table_retailer_type_wise_item_code', "type_id", '', $condi);

                //     if (is_array($chkRec) && count($chkRec) > 0) {

                //         $condi = " item_id='" . $item_id . "' and type_id = '" . $type_id . "'";

                //         $mapRec = $this->_getSelectList('table_retailer_type_wise_item_code', "id", '', $condi);

                //         if (is_array($mapRec) && (count($mapRec) > 0)) {

                //             $mapId  =  $mapRec[0]->id;
                //             $chkData = $this->checkDuplicacyRetWiseCode($mapId,trim($arrFile[2]));

                //             if($chkData > 0){

                //                 $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Retailer type wise itme code already exists in the system \n";

                //                 $str_err_array = array($strErr);

                //                 $flag = false;

                //             }else{

                //                 $data2['ret_item_code'] = trim($arrFile[2]);
                //                 $data2['updated_at'] = date('Y-m-d H:i:s');
                //                 $this->_dbUpdate($data2, 'table_retailer_type_wise_item_code', " id = " . $mapId);

                //             }


                //         }else{

                //             $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Retailer type wise itme code already exists in the system \n";

                //             $str_err_array = array($strErr);

                //             $flag = false;
                //         }


                //     }

                // }

                if ($flag) {

                    $condi = " item_id='" . $item_id . "' and type_id = '" . $type_id . "'";

                    $mapRec = $this->_getSelectList('table_retailer_type_wise_item_code', "id", '', $condi);

                    if (is_array($mapRec) && (count($mapRec) > 0)) {

                        $mapId = $mapRec[0]->id;
                        $chkData = $this->checkDuplicacyRetWiseCode($mapId, trim($arrFile[2]));

                        if ($chkData > 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Retailer type wise itme code already exists in the system \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    } else {

                        $chkData = $this->checkDuplicacyRetWiseCode(0, trim($arrFile[2]));

                        if ($chkData > 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Retailer type wise itme code already exists in the system \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }

                }

                //As discussed wth dhavika and ritu mam update ret itme code if item code and ret type alrady exist. : sudhanshu : 23 Nov 2023

                if ($flag) {

                    $condi = " item_id='" . $item_id . "' and type_id = '" . $type_id . "'";

                    $mapRec = $this->_getSelectList('table_retailer_type_wise_item_code', "id", '', $condi);

                    if (is_array($mapRec) && (count($mapRec) > 0)) {
                        $mapId = $mapRec[0]->id;
                        $data2['ret_item_code'] = trim($arrFile[2]);
                        $data2['updated_at'] = date('Y-m-d H:i:s');
                        $this->_dbUpdate($data2, 'table_retailer_type_wise_item_code', " id = " . $mapId);


                    } else {

                        $data['type_id'] = mysql_escape_string($type_id);

                        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                        $data['item_id'] = mysql_escape_string($item_id);

                        $data['ret_item_code'] = mysql_escape_string(trim($arrFile[2]));

                        $data['status'] = mysql_escape_string('A');

                        $data['created_at'] = date('Y-m-d H:i:s');

                        $data['updated_at'] = date('Y-m-d H:i:s');

                        $this->_dbInsert($data, 'table_retailer_type_wise_item_code');
                    }

                }


            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }
// Todo End : Jatin : 9 May 2023 : Import Retailer type wise Item code

// Todo Start : Sudhanshu : Distributor Bulk order
    function distributorBulkOrder($formData)
    {
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";

        $total_invoice_amount = 0;
        $distributor_id = $formData['distributor_id'];
        $resultset = "";
        $date = date('Y-m-d');
        $row = 0;
        $order_status = "A";
        $data = array();
        $flag = 0;
        $data2 = array();
        $itmCode = array();
        $pagetype = $formData['page_type'];
        $odrfrm = $formData['odrfrm'];
        $chkItem = '';
        $store_count_arr = array();
        $orderdArr = array();
        $errArr = array();
        while (!feof($file)) {

            $arrFile = fgetcsv($file);
            if ($row == 0) {
                if (count($arrFile) == 2 && trim($arrFile[0]) == "Item Code*" && trim($arrFile[1]) == "Quantity*") {
                    $flag2 = true;
                } else {

                    $flag2 = false;
                    $fErr = "no";
                }
            }

            if ($row > 0 && is_array($arrFile)) {

                if ($flag2) {
                    if (empty($arrFile[0]) && empty($arrFile[1])) {
                        $row++;
                    } else {
                        $itemCode = mysql_escape_string(strtolower(trim($arrFile[0])));
                        $qty = mysql_escape_string(strtolower(trim($arrFile[1])));
                        if ($qty > 0) {
                            $newarr = array(
                                'item_code' => $itemCode,
                                'qty' => $qty
                            );
                            if (!empty($itemCode)) {

                                if (array_key_exists($itemCode, $orderdArr)) {
//                                    $_SESSION['cntItmCode'] = count($orderdArr);
                                    $store_count_arr = count($orderdArr);

                                    $newerrArr = array(
                                        'item_code' => $itemCode,
                                        'qty' => $qty,
                                        'msg' => "Duplicate Item Code"
                                    );
                                    array_push($errArr, $newerrArr);
                                } else {
                                    $orderdArr[$itemCode] = $qty;
                                }

                            } else {
                                $newerrArr = array(
                                    'item_code' => $itemCode,
                                    'qty' => $qty,
                                    'msg' => "Item Code Can't be blank"
                                );
                                array_push($errArr, $newerrArr);
                            }

                        } else {
                            if ($qty <= 0 && empty($itemCode)) {
                                $newarr = array(
                                    'item_code' => $itemCode,
                                    'qty' => $qty,
                                    'msg' => "Item code should not be empty"
                                );
                                array_push($errArr, $newarr);
                            } else {
                                $where = "  LOWER(item_code)='" . $itemCode . "'";
                                $disData = $this->_getSelectList('table_item', "item_id", '', $where);
                                if ($disData[0]->item_id == '') {
                                    $newerrArr = array(
                                        'item_code' => $itemCode,
                                        'qty' => $qty,
                                        'msg' => array("Item code does not exist", "Invalid Quantity")
                                    );
                                    array_push($errArr, $newerrArr);
//                                    $newerrArr = array(
//                                        'item_code' => $itemCode,
//                                        'qty' => $qty,
//                                        'msg' => "Item code does not exist."
//                                    );
//                                    array_push($errArr, $newerrArr);

                                } else {
                                    // Check the existence of a item code
                                    if (array_key_exists($itemCode, $orderdArr)) {
                                        $store_count_arr = count($orderdArr);
                                    }
                                    if (!empty($store_count_arr) && $store_count_arr >= 1 && $qty <= 0) {
                                        $newerrArr = array(
                                            'item_code' => $itemCode,
                                            'qty' => $qty,
                                            'msg' => array("Duplicate Item Code", "Invalid Quantity")
                                        );
                                        array_push($errArr, $newerrArr);
//                                        $newerrArr = array(
//                                            'item_code' => $itemCode,
//                                            'qty' => $qty,
//                                            'msg' => "Invalid Quantity."
//                                        );
//                                        array_push($errArr, $newerrArr);
                                    } else {
                                        $newerrArr = array(
                                            'item_code' => $itemCode,
                                            'qty' => $qty,
                                            'msg' => "Invalid Quantity"
                                        );
                                        array_push($errArr, $newerrArr);
                                    }
                                }

                            }

                        }
                    }
                }

            }
            $row++;
            $flag++;
        }
//        echo "<pre>";
//        print_R($errArr);
//        die;
        if (empty($errArr)) {
            if (count($orderdArr) > 0) {

                $flag = 1;
                foreach ($orderdArr as $key => $val) {

                    $where = "  LOWER(item_code)='" . $key . "'";
                    $disData = $this->_getSelectList('table_item', "item_id", '', $where);

                    // Check count sheet item row and get item id
                    if (!empty($disData[0]->item_id)) {
                        $ItemData[] = $disData[0]->item_id;
                    }
                    $ItemKey[] = $key;
                }
                // Check Data row is equal or not
                if (count($ItemData) == count($ItemKey)) {
                    foreach ($orderdArr as $key => $val) {

                        $where = "  LOWER(item_code)='" . $key . "'";
                        $disData = $this->_getSelectList('table_item', "item_id", '', $where);
                        $condition = " I.item_id='" . $disData[0]->item_id . "'";
                        $result = $this->_getSelectList('table_item AS I 
                LEFT JOIN table_price AS TP ON TP.item_id = I.item_id AND TP.start_date <= "' . $date . '" AND TP.end_date >= "' . $date . '"
                LEFT JOIN table_item_gst AS ig ON ig.item_id = I.item_id
                left join table_item_discount AS D on D.item_id=I.item_id',
                            "I.item_id, I.item_name, I.item_code,ifnull(ig.tax,0) as tax, TP.item_mrp,TP.dist_price,
                TP.stockist_price, TP.item_dp,ifnull(D.discount_percentage,0) as discount_percentage,D.id as discount_id", '', "  
                 " . $condition);

                        if ($disData[0]->item_id != '' && $disData[0]->item_id > 0) {

                            if ($flag == 1) {
                                $data['account_id'] = $formData['account_id'];
                                $data['salesman_id'] = 0;
                                $data['distributor_id'] = $formData['distributor_id'];
                                $data['stockist_id'] = $formData['stockist_id'];
                                $data['retailer_id'] = 0;
                                $data['date_of_order'] = date('Y-m-d');
                                $data['time_of_order'] = date('H:i:s');
                                $data['lat'] = NULL;
                                $data['lng'] = NULL;
                                $data['accuracy_level'] = NULL;
                                $data['comments'] = NULL;
                                // $data['order_type']                   =   "Yes"; // Yes , No , Adhoc
                                $data['order_for'] = "D"; // D=> distributor , R=>retailer
                                $data['location_provider'] = NULL;
                                $data['tag_id'] = 0;
                                $data['tag_description'] = NULL;
                                $data['total_invoice_amount'] = 0;
                                $data['acc_total_invoice_amount'] = 0;
                                $data['last_update_date'] = $date;
                                $data['last_update_status'] = 'New';
                                $data['order_status'] = $order_status;  // A = New Order, I = Processed , D = Dispatched
                                // Actual Shceme Details
                                $data['discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage
                                $data['discount_amount'] = 0;
                                $data['dicount_percentage'] = NULL;
                                $data['free_item_id'] = 0;     // FOC Item ID If discount type FOC
                                $data['free_item_qty'] = NULL;     // How many FOC Item qty
                                $data['discount_id'] = NULL;     // Scheme ID
                                $data['discount_desc'] = NULL;     // Scheme Description
                                $data['acc_discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage
                                $data['acc_discount_amount'] = 0;
                                $data['acc_dicount_percentage'] = NULL;
                                $data['acc_free_item_id'] = 0;     // FOC Item ID If discount type FOC
                                $data['acc_free_item_qty'] = NULL;     // How many FOC Items
                                $data['acc_discount_id'] = 0;     // Scheme ID
                                $data['stock_id'] = 0;
                                $data['type'] = NULL;
                                // $data['due_date']                     =   $date; //date('0000-00-00');
                                $data['bill_no'] = NULL;
                                $data['voucher_number'] = 0;
                                $data['bill_type'] = NULL;
                                $data['invoice_status'] = NULL;
                                $data['against_invoice_no'] = NULL;
                                $data['return_type'] = 0;
                                $data['terms_id'] = 0;
                                $data['delivery_add'] = NULL;
                                $data['reason'] = NULL;
                                $data['reason_remark'] = NULL;
                                $data['clearing_status'] = NULL;
                                $data['payment_received'] = 0;
                                $data['adjusted_amount'] = 0;
                                $data['must_sell_reason_id'] = 0;
                                $data['cancel_by'] = 0;
                                $data['updated_by_app'] = 0;
                                $data['app_updated_by_salesman_id'] = 0;
                                $data['app_updated_by_distributor_id'] = 0;
                                if (strtolower($formData['order_type']) == 'yes' || strtolower($formData['order_type']) == 'adhoc') {
                                    $data['order_type'] = "Yes"; // Yes , No , Adhoc
                                } else {
                                    $data['order_type'] = "Return"; // Yes , No , Adhoc
                                    $data['return_type'] = 1;

                                }
                                // insert order
                                $order_id = $this->_dbInsert($data, 'table_distributor_order');
                                if (isset($formData['reason']) && $formData['reason'] > 0 && $order_id > 0) {
                                    $reason['reason_id'] = $formData['reason'];
                                    $reason['order_id'] = $order_id;
                                    $reason['created'] = date('Y-m-d H:i:s');
                                    $reason['updated'] = date('Y-m-d H:i:s');

                                    $resi_id = $this->_dbInsert($reason, 'table_distributor_order_return_reason');
                                }

                            }
                            $flag = 0;

                            if ($order_id > 0) {

                                $discount_id = NULL;
                                $discount_desc = NULL;
                                $discount_type = NULL;
                                $discount_amount = NULL;
                                $discount_percentage = NULL;
                                $free_item_id = 0;
                                $total_free_quantity = NULL;
                                $acc_discount_type = NULL;
                                $acc_discount_amount = NULL;
                                $acc_dicount_percentage = NULL;
                                $acc_free_item_id = NULL;
                                $acc_free_item_qty = NULL;
                                $acc_discount_id = NULL;
                                $distributor_id = $formData['distributor_id'];
                                $itmIdArr = [];
                                $itmIds = [];
                                $distTypeWiseItemPriceArr = [];

                                $getDistType = $this->_getSelectList('table_distributors', 'distributor_type_id', '', "distributor_id = $distributor_id");

                                if (is_array($getDistType) && (count($getDistType) > 0)) {
                                    $distTypeId = $getDistType[0]->distributor_type_id;

                                    if (intval($distTypeId) > 0) {
                                        foreach ($result as $key1 => $itmData) {
                                            $itmIdArr[] = $itmData->item_id;
                                        }

                                        $itmIds = implode(',', $itmIdArr);

                                        //now get the distributor type wise item price
                                        $getDistTypeWiseItemPrice = $this->_getSelectList2('table_distributor_type_item_price_mapping', 'item_id,price', '', "distributor_type_id = $distTypeId AND item_id IN($itmIds) AND status = 'A' ");

                                        if (is_array($getDistTypeWiseItemPrice) && (count($getDistTypeWiseItemPrice) > 0)) {
                                            foreach ($getDistTypeWiseItemPrice as $key2 => $distTypeWiseItemPrice) {
                                                $distTypeWiseItemPriceArr[$distTypeWiseItemPrice->item_id] = $distTypeWiseItemPrice->price;
                                            }

                                        }
                                    }
                                }

                                foreach ($result as $key => $row) {
                                    $tax = $row->tax;
                                    if (!empty($pagetype) && $pagetype == 'order') {
                                        $tax = 0;
                                    }
                                    $price = $row->item_mrp;
                                    if (!empty($odrfrm) && $odrfrm == 'dis') {

                                        if (isset($distTypeWiseItemPriceArr[$row->item_id]) && ($distTypeWiseItemPriceArr[$row->item_id] > 0)) {
                                            $price = $distTypeWiseItemPriceArr[$row->item_id];
                                            echo $price;
                                        } else if ($row->dist_price > 0) {
                                            $price = $row->dist_price;
                                        }
                                    } else if (!empty($odrfrm) && $odrfrm == 'stk' && $row->stockist_price > 0) {
                                        $price = $row->stockist_price;
                                    }


                                }


                                $item_id = trim($result[0]->item_id);
                                $item_price = trim($price);
                                $item_qty = trim($val);


                                /******Tax Info*******/
                                // $tax=10;
                                $gst_rate = (isset($tax) ? $tax : 0);
                                $gst_amt = ROUND(((($item_price * $item_qty) * $gst_rate) / 100), 2);
                                // echo $gst_amt;die;

                                /******Tax Info*******/

                                //***********discount info */
                                $dis_amt = 0;
                                if ($result[0]->discount_percentage > 0) {
                                    $dis_rate = $result[0]->discount_percentage;
                                    $dis_amt = ROUND(((($item_price * $item_qty) * $dis_rate) / 100), 2);
                                    $data1['discount_id'] = $result[0]->discount_id;

                                    $data1['discount_percentage'] = $result[0]->discount_percentage;
                                } else {
                                    $data1['discount_id'] = 0;

                                    $data1['discount_percentage'] = 0;
                                }
                                //***********discount info */
                                $data1['order_id'] = $order_id;
                                $data1['item_id'] = $item_id;
                                $data1['free_item_id'] = $free_item_id;

                                $data1['price'] = $item_price;
                                $data1['gst_rate'] = $gst_rate;
                                $data1['gst_amount'] = $gst_amt;
                                $data1['quantity'] = $item_qty;
                                $data1['total'] = ROUND((($data1['quantity'] * $data1['price']) + $gst_amt), 2);

                                $data1['discount_amount'] = 0;
                                $data1['acc_quantity'] = $data1['quantity'];
                                $data1['acc_total'] = $data1['total'];
                                $data1['color_id'] = 0;
                                $data1['color_type'] = NULL;
                                $data1['type'] = 1;     // 1 = Normal, 2 = Free Item
                                $data1['price_type'] = 1;     // 1 = MRP , 2 = DP , 3 = PTR
                                $data1['last_update_date'] = $date;
                                $data1['last_update_status'] = 'New';
                                $data1['order_detail_status'] = '2';   // 1 = New , 2 = Accepted, 3 = Rejected, 4 = Discount Applicable, 5 = Discount Not Applicable
                                $data1['unit_id'] = 0;
                                $data1['item_unit_type'] = NULL;
                                $data1['cgst_rate'] = 0;
                                $data1['cgst_amount'] = 0;
                                $data1['igst_rate'] = 0;
                                $data1['igst_amount'] = 0;
                                $data1['tax_amount'] = 0;
                                $data1['case_size'] = 0;
                                $data1['new_scheme_discount'] = 0;
                                $data1['is_processed'] = 0;
                                $data1['discount_desc'] = NULL;
                                $data1['discount_type'] = NULL;
                                $data1['total_free_quantity'] = NULL;
                                $data1['tag_id'] = 0;
                                $data1['acc_discount_type'] = NULL;
                                $data1['acc_discount_amount'] = 0;
                                $data1['acc_dicount_percentage'] = NULL;
                                $data1['acc_free_item_id'] = 0;
                                $data1['acc_free_item_qty'] = NULL;
                                $data1['reason'] = NULL;
                                $data1['acc_discount_id'] = 0;
                                $data1['reason_remark'] = NULL;
                                $data1['norms'] = 0;
                                $data1['stock'] = 0;
                                $data1['remarks'] = 0;
                                $data1['updated_by_app'] = 0;
                                $total_invoice_amount = $total_invoice_amount + $data1['total'];
                                $this->_dbInsert($data1, 'table_distributor_order_detail'); // Saved item detail

                            }

                        }
                    }

                    if (isset($total_invoice_amount) && $total_invoice_amount > 0) {
                        $OrderData['total_invoice_amount'] = $total_invoice_amount;
                        $OrderData['acc_total_invoice_amount'] = $total_invoice_amount;
                        $res = $this->_dbUpdate($OrderData, 'table_distributor_order', " order_id=" . $order_id);
                        $res = 1;
                    }

                } else {
                    foreach ($orderdArr as $key => $val) {

                        $where = "  LOWER(item_code)='" . $key . "'";
                        $disData = $this->_getSelectList('table_item', "item_id", '', $where);

                        // Check count sheet item row and get item id
                        if ($disData[0]->item_id != '' && $disData[0]->item_id > 0) {
                            array_push($itmCode, $itemCode);
                            $newerrArr = array(
                                'item_code' => $key,
                                'qty' => $val,
                                'msg' => "Data not inserted"
                            );
                            array_push($errArr, $newerrArr);
                        } else {
                            array_push($itmCode, $itemCode);
                            $newerrArr = array(
                                'item_code' => $key,
                                'qty' => $val,
                                'msg' => "Item Code does not exist"
                            );
                            array_push($errArr, $newerrArr);
                        }

                    }
                }


            }
        } else {
            // Check condition if get 0 qty
            foreach ($orderdArr as $key => $val) {

                $where = "  LOWER(item_code)='" . $key . "'";
                $disData = $this->_getSelectList('table_item', "item_id", '', $where);

                // Check count sheet item row and get item id
                if ($disData[0]->item_id != '' && $disData[0]->item_id > 0) {
                    array_push($itmCode, $itemCode);
                    $newerrArr = array(
                        'item_code' => $key,
                        'qty' => $val,
                        'msg' => "Data not inserted"
                    );
                    array_push($errArr, $newerrArr);
                } else {
                    array_push($itmCode, $itemCode);
                    $newerrArr = array(
                        'item_code' => $key,
                        'qty' => $val,
                        'msg' => "Item Code does not exist"
                    );
                    array_push($errArr, $newerrArr);
                }

            }
        }
        if ($row > 0 && count($errArr) > 0 && $res == 1) {
            return $errArr;
        } elseif ($res == 1) {
            return $res;
        } elseif ($fErr != '') {
            return $fErr;
        } else {
            return $errArr;
        }
    }
// Todo End : Sudhanshu : Distributor Bulk order

// Todo Start : Sudhanshu : Retailer Bulk order


    function uploadRetailerBulkupload($formData)

    {

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $fields = array($this->AliaseUsers['retailer'] . ' Code*', 'Item Code*', 'Quantity');

        $strErr = "";
        $total_invoice_amount = 0;
        $distributor_id = $formData['distributor_id'];
        $date = date('Y-m-d');
        $row = 0;
        $order_status = "A";
        $data = array();
        $flag = 0;
        $data2 = array();
        $itmCode = array();
        $pagetype = $formData['page_type'];
        $odrfrm = $formData['odrfrm'];
        $arr = array();
        $retArr = array();
        $error1 = array();
        $itemArr = array();

        $orderArr = array();
        $error_print = array();
        $error = array();
        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            if ($row == 0) {

                if (count($arrFile) == 3 && trim($arrFile[0]) == "Retailer Code*" && trim($arrFile[1]) == "Item Code*" && trim($arrFile[2]) == "Quantity*") {
                    $flag2 = true;
                } else {

                    $flag2 = false;
                    $fErr = "no";
                }
            }

            if ($row > 0 && is_array($arrFile)) {

                // When someone upload wrong file. It will give an error

                if ($flag2) {
                    if (empty($arrFile[0]) && empty($arrFile[1]) && empty($arrFile[2])) {

                        $row++;

                    } else {

                        $newarr = array(
                            'item_code' => $arrFile[1],
                            'qty' => $arrFile[2]
                        );
                        if ($arrFile[0] != '') {
                            $orderArr[$arrFile[0]][] = $newarr;
                        } else {
                            $itmerr = array(
                                'item_code' => $arrFile[1],
                                'qty' => $arrFile[2],
                                'err_msg' => $this->AliaseUsers['retailer'] . " Code Can't be Blank"
                            );
                            $error[$arrFile[0]][] = $itmerr;
                        }

                    }
                }

            }
            $row++;
            $flag++;
        }
        fclose($file);
        $newOrderArr = array();
        $RId = array();

        if (!empty($orderArr) && sizeof($orderArr) > 0) {


            $i = 0;
            foreach ($orderArr as $okey => $ovalue) {

                if ($okey != '') {

                    $retCond = "  LOWER(retailer_code)='" . $okey . "'";
                    $retData = $this->_getSelectList('table_retailer', "retailer_id,distributor_id", '', $retCond);

                    $ret_id = $retData[0]->retailer_id;
                    $dis_id = $retData[0]->distributor_id;

                    if ($_SESSION['distributorId'] != $retData[0]->distributor_id) {

                        foreach ($ovalue as $ok => $ov) {

                            $itmCond = "  LOWER(item_code)='" . $ov['item_code'] . "'";
                            $itmData = $this->_getSelectList('table_item', "item_id", '', $itmCond);

                            $nomap = array(
                                'ret_code' => $okey,
                                'item_code' => $ov['item_code'],
                                'qty' => $ov['qty'],
                                'err_msg' => $this->AliaseUsers['retailer'] . " not mapped",
                            );

                        }

                        $error[$okey][] = $nomap;

                    } else {

                        if ($ret_id > 0) {

                            foreach ($ovalue as $ok => $ov) {

                                $itmCond = "  LOWER(item_code)='" . $ov['item_code'] . "'";
                                $itmData = $this->_getSelectList('table_item', "item_id", '', $itmCond);
                                if ($itmData[0]->item_id > 0 && $ov['qty'] > 0) {

                                    $item_id = $itmData[0]->item_id;
                                    $qty = $ov['qty'];

                                    $oarr = array(
                                        'item_id' => $itmData[0]->item_id,
                                        'qty' => $ov['qty']
                                    );
                                    $newOrderArr[$ret_id][] = $oarr;
                                    array_push($error_print, $newOrderArr);
//                                    if (in_array($ret_id, $RId)) {
//                                        unset($newOrderArr[$ret_id]);
//                                    }

                                    // check item price
                                    $condition = " I.item_id='" . $item_id . "'";
                                    $result1 = $this->_getSelectList('table_item AS I 
                           LEFT JOIN table_price AS TP ON TP.item_id = I.item_id AND TP.start_date <= "' . $date . '" AND TP.end_date >= "' . $date . '"
                           LEFT JOIN table_item_gst AS ig ON ig.item_id = I.item_id
                           left join table_item_discount AS D on D.item_id=I.item_id',
                                        "I.item_id, I.item_name, I.item_code,ifnull(ig.tax,0) as tax, TP.item_mrp,TP.dist_price,
                           TP.stockist_price, TP.item_dp,ifnull(D.discount_percentage,0) as discount_percentage,D.id as discount_id", '', "  
                           " . $condition);
                                    if (count($result1)) {

                                        $price = $result1[0]->item_mrp;
                                        if (!empty($odrfrm) && $odrfrm == 'dis') {

                                            if ($result1[0]->dist_price > 0) {
                                                $price = $result1[0]->dist_price;
                                            }
                                        } else if (!empty($odrfrm) && $odrfrm == 'stk' && $result1[0]->stockist_price > 0) {
                                            $price = $result1[0]->stockist_price;
                                        }


                                    }
                                    if ($price == '' || $price == 0) {

                                        unset($newOrderArr[$ret_id]);
                                        $priceerr = array(
                                            'item_code' => $ov['item_code'],
                                            'qty' => $ov['qty'],
                                            'err_msg' => "Item Price not available"
                                        );
                                        $error[$okey][] = $priceerr;
                                    }
                                    // check item price
                                } else {

                                    if ($ov['qty'] <= 0 && $itmData[0]->item_id <= 0) {
                                        $msg = array("Item Code does not exist", "Invalid Quantity");
                                    } else if ($ov['qty'] <= 0) {
                                        $msg = "Invalid Quantity";
                                    } else {
                                        if (empty($ov['item_code'])) {
                                            $msg = "Item Code can't be blank";
                                        } else {
                                            $msg = "Item Code does not exist";
                                        }

                                    }
                                    $itmerr = array(
                                        'item_code' => $ov['item_code'],
                                        'qty' => $ov['qty'],
                                        'err_msg' => $msg
                                    );
                                    $error[$okey][] = $itmerr;
//                                    array_push($RId, $ret_id);
//                                    if (in_array($ret_id, $RId)) {
//                                        unset($newOrderArr[$ret_id]);
//                                    }
                                }
                            }

                            $i++;
                        }
                    }
                }
            }
        }

        $ordArr = array();
        $item_wise = array();
        $check_key = array();
        if (!empty($newOrderArr)) {
            foreach ($newOrderArr as $nokey => $noval) {
                foreach ($noval as $k => $v) {
                    $item_wise[$nokey][$v['item_id']][] = $v;
                }

                foreach ($noval as $k => $v) {
                    if (count($item_wise[$nokey][$v['item_id']]) > 1) {

                        $itmCond = "  LOWER(item_id)='" . $v['item_id'] . "'";
                        $itmData = $this->_getSelectList('table_item', "item_code", '', $itmCond);

                        $itmerr = array(
                            'item_code' => $itmData[0]->item_code,
                            'qty' => $v['qty'],
                            'err_msg' => "Duplicate Item code"
                        );

                        $error_dup[$nokey][] = $itmerr;
                        if (isset($error_dup)) {
                            $error[$nokey][] = $itmerr;
                        }

                        unset($ordArr[$nokey]);

                        foreach ($error_dup as $key => $value) {
                            foreach ($value as $key1 => $value1) {
                                array_push($check_key, $value1['item_code']);
                            }
                        }


                    } else {
                        $v['qty'] = $v['qty'];

                    }
                    if ($error[$nokey] <= 0) {
                        $ordArr[$nokey][$v['item_id']] = $v;
                    }

                }

            }
        }

        $_objScheme = new SchemeClass();
        if (isset($ordArr)) {
            foreach ($ordArr as $nkey => $nval) {
                $data['account_id'] = $formData['account_id'];
                $data['salesman_id'] = 0;
                $data['distributor_id'] = $formData['distributor_id'];

                $data['retailer_id'] = $nkey;
                $data['date_of_order'] = date('Y-m-d');
                $data['time_of_order'] = date('H:i:s');
                $data['lat'] = NULL;
                $data['lng'] = NULL;
                $data['accuracy_level'] = NULL;
                $data['comments'] = NULL;
                // $data['order_type']                   =   "Yes"; // Yes , No , Adhoc
                $data['order_for'] = "R"; // D=> distributor , R=>retailer
                $data['location_provider'] = NULL;
                $data['tag_id'] = 0;
                $data['tag_description'] = NULL;
                $data['total_invoice_amount'] = 0;
                $data['acc_total_invoice_amount'] = 0;
                $data['last_update_date'] = $date;
                $data['last_update_status'] = 'New';
                $data['order_status'] = $order_status;  // A = New Order, I = Processed , D = Dispatched
                // Actual Shceme Details
                $data['discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage
                $data['discount_amount'] = 0;
                $data['dicount_percentage'] = NULL;
                $data['free_item_id'] = 0;     // FOC Item ID If discount type FOC
                $data['free_item_qty'] = NULL;     // How many FOC Item qty
                $data['discount_id'] = NULL;     // Scheme ID
                $data['discount_desc'] = NULL;     // Scheme Description
                $data['acc_discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage
                $data['acc_discount_amount'] = 0;
                $data['acc_dicount_percentage'] = NULL;
                $data['acc_free_item_id'] = 0;     // FOC Item ID If discount type FOC
                $data['acc_free_item_qty'] = NULL;     // How many FOC Items
                $data['acc_discount_id'] = 0;     // Scheme ID

                $data['type'] = NULL;
                $data['updated_order_type'] = NuLL; //date('0000-00-00');
                $data['bill_no'] = NULL;
                $data['voucher_number'] = 0;
                $data['bill_type'] = NULL;
                $data['invoice_status'] = NULL;
                $data['against_invoice_no'] = NULL;
                $data['return_type'] = 0;
                $data['terms_id'] = 0;
                $data['delivery_add'] = NULL;
                $data['reason'] = NULL;
                $data['reason_remark'] = NULL;
                $data['clearing_status'] = NULL;
                $data['payment_received'] = 0;
                $data['adjusted_amount'] = 0;
                $data['must_sell_reason_id'] = 0;
                $data['cancel_by'] = 0;
                $data['updated_by_app'] = 0;
                $data['app_updated_by_salesman_id'] = 0;
                $data['app_updated_by_retailer_id'] = 0;

                if (strtolower($formData['order_type']) == 'yes' || strtolower($formData['order_type']) == 'adhoc') {
                    $data['order_type'] = "Yes"; // Yes , No , Adhoc
                } else {
                    $data['order_type'] = "Return"; // Yes , No , Adhoc
                    $data['return_type'] = 1;

                }

                $order_id = $this->_dbInsert($data, 'table_order');
                if (isset($formData['reason']) && $formData['reason'] > 0 && $order_id > 0) {
                    $reason['reason_id'] = $formData['reason'];
                    $reason['order_id'] = $order_id;
                    $reason['created'] = date('Y-m-d H:i:s');
                    $reason['updated'] = date('Y-m-d H:i:s');
                    $resi_id = $this->_dbInsert($reason, 'table_retailer_order_return_reason');
                }

                if ($order_id > 0) {

                    foreach ($nval as $nk => $nv) {

                        $condition = " I.item_id='" . $nv['item_id'] . "'";
                        $result = $this->_getSelectList('table_item AS I 
                        LEFT JOIN table_price AS TP ON TP.item_id = I.item_id AND TP.start_date <= "' . $date . '" AND TP.end_date >= "' . $date . '"
                        LEFT JOIN table_item_gst AS ig ON ig.item_id = I.item_id
                        left join table_item_discount AS D on D.item_id=I.item_id',
                            "I.item_id, I.item_name, I.item_code,ifnull(ig.tax,0) as tax, TP.item_mrp,TP.dist_price,
                        TP.stockist_price, TP.item_dp,ifnull(D.discount_percentage,0) as discount_percentage,D.id as discount_id", '', "  
                        " . $condition);

                        $discount_desc = NULL;
                        $discount_type = NULL;
                        $discount_amount = NULL;
                        $discount_percentage = NULL;
                        $free_item_id = 0;
                        $total_free_quantity = NULL;
                        $acc_discount_type = NULL;
                        $acc_discount_amount = NULL;
                        $acc_dicount_percentage = NULL;
                        $acc_free_item_id = NULL;
                        $acc_free_item_qty = NULL;
                        $acc_discount_id = NULL;
                        $itmIdArr = [];
                        $itmIds = [];
                        $distTypeWiseItemPriceArr = [];

                        $getDistType = $this->_getSelectList('table_distributors', 'distributor_type_id', '', "distributor_id = $distributor_id");

                        if (is_array($getDistType) && (count($getDistType) > 0)) {
                            $distTypeId = $getDistType[0]->distributor_type_id;

                            if (intval($distTypeId) > 0) {
                                foreach ($result as $key1 => $itmData) {
                                    $itmIdArr[] = $itmData->item_id;
                                }

                                $itmIds = implode(',', $itmIdArr);

                                //now get the distributor type wise item price
                                $getDistTypeWiseItemPrice = $this->_getSelectList2('table_distributor_type_item_price_mapping', 'item_id,price', '', "distributor_type_id = $distTypeId AND item_id IN($itmIds) AND status = 'A' ");

                                if (is_array($getDistTypeWiseItemPrice) && (count($getDistTypeWiseItemPrice) > 0)) {
                                    foreach ($getDistTypeWiseItemPrice as $key2 => $distTypeWiseItemPrice) {
                                        $distTypeWiseItemPriceArr[$distTypeWiseItemPrice->item_id] = $distTypeWiseItemPrice->price;
                                    }

                                }
                            }
                        }

                        foreach ($result as $key => $row) {
                            $tax = $row->tax;

                            if (!empty($pagetype) && $pagetype == 'order') {
                                $tax = 0;

                            }
                            $price = $row->item_mrp;
                            if (!empty($odrfrm) && $odrfrm == 'dis') {


                                if (isset($distTypeWiseItemPriceArr[$row->item_id]) && ($distTypeWiseItemPriceArr[$row->item_id] > 0)) {
                                    $price = $distTypeWiseItemPriceArr[$row->item_id];
                                } else if ($row->dist_price > 0) {
                                    $price = $row->dist_price;
                                }
                            } else if (!empty($odrfrm) && $odrfrm == 'stk' && $row->stockist_price > 0) {
                                $price = $row->stockist_price;
                            }


                        }
                        $item_id = trim($result[0]->item_id);
                        $item_price = trim($price);
                        $item_qty = $nv['qty'];


                        /******Tax Info*******/
                        // $tax=10;
                        $gst_rate = (isset($tax) ? $tax : 0);
                        $gst_amt = ROUND(((($item_price * $item_qty) * $gst_rate) / 100), 2);
                        // echo $gst_amt;die;

                        /******Tax Info*******/

                        //***********discount info */
                        $dis_amt = 0;
                        if ($result[0]->discount_percentage > 0) {
                            $dis_rate = $result[0]->discount_percentage;
                            $dis_amt = ROUND(((($item_price * $item_qty) * $dis_rate) / 100), 2);
                            $data1['discount_id'] = $result[0]->discount_id;
                            $data1['discount_amount'] = $dis_amt;
                            $data1['discount_percentage'] = $result[0]->discount_percentage;

                        } else {
                            $data1['discount_id'] = 0;
                            $data1['discount_amount'] = $dis_amt;
                            $data1['discount_percentage'] = 0;
                        }
                        //***********discount info */
                        $data1['order_id'] = $order_id;
                        $data1['item_id'] = $item_id;
                        $data1['free_item_id'] = $free_item_id;

                        $data1['price'] = $item_price;
                        $data1['gst_rate'] = $gst_rate;
                        $data1['gst_amount'] = $gst_amt;
                        $data1['quantity'] = $item_qty;
                        $data1['total'] = ROUND((($data1['quantity'] * $data1['price']) + $gst_amt), 2);
                        $data1['acc_quantity'] = $data1['quantity'];
                        $data1['acc_total'] = $data1['total'];
                        $data1['color_id'] = 0;
                        $data1['color_type'] = NULL;
                        $data1['type'] = 1;     // 1 = Normal, 2 = Free Item
                        $data1['price_type'] = 1;     // 1 = MRP , 2 = DP , 3 = PTR
                        $data1['last_update_date'] = $date;
                        $data1['last_update_status'] = 'New';
                        $data1['order_detail_status'] = '2';   // 1 = New , 2 = Accepted, 3 = Rejected, 4 = Discount Applicable, 5 = Discount Not Applicable
                        $data1['unit_id'] = 0;
                        $data1['item_unit_type'] = 'pcs';
                        $data1['cgst_rate'] = 0;
                        $data1['cgst_amount'] = 0;
                        $data1['igst_rate'] = 0;
                        $data1['igst_amount'] = 0;
                        $data1['tax_amount'] = 0;
                        $data1['case_size'] = 0;
                        $data1['new_scheme_discount'] = 0;
                        $data1['is_processed'] = 0;
                        $data1['discount_desc'] = NULL;
                        $data1['discount_type'] = NULL;
                        $data1['total_free_quantity'] = NULL;
                        $data1['tag_id'] = 0;
                        $data1['acc_discount_type'] = NULL;
                        $data1['acc_discount_amount'] = 0;
                        $data1['acc_dicount_percentage'] = NULL;
                        $data1['acc_free_item_id'] = 0;
                        $data1['acc_free_item_qty'] = NULL;
                        $data1['reason'] = NULL;
                        $data1['acc_discount_id'] = 0;
                        $data1['reason_remark'] = NULL;
                        $data1['norms'] = 0;
                        $data1['stock'] = 0;
                        $data1['remarks'] = 0;
                        $data1['updated_by_app'] = 0;
                        $data1['custom_discount_amount'] = 0;
                        $data1['custom_discount_percentage'] = 0;
                        $data1['must_sell_reason_id'] = 0;
                        $total_invoice_amount = $total_invoice_amount + $data1['total'];
                        $this->_dbInsert($data1, 'table_order_detail');

                    }
                }
                if (isset($total_invoice_amount) && $total_invoice_amount > 0) {
                    $OrderData['total_invoice_amount'] = $total_invoice_amount;
                    $OrderData['acc_total_invoice_amount'] = $total_invoice_amount;
                    $res = $this->_dbUpdate($OrderData, 'table_order', " order_id=" . $order_id);
                    $res = 1;
                    $total_invoice_amount = 0;
                }
            }
        } else {
            $msg = "Empty File";
        }

        foreach ($error_print as $key => $value) {
            foreach ($value as $i => $j) {
                $arr_data_Set[$i] = $j;
            }
        }

        if (is_array($arr_data_Set) && !empty($arr_data_Set)) {
            foreach ($arr_data_Set as $key1 => $value1) {

                if ($error[$key1] > 0) {
                    foreach ($value1 as $key3 => $value12) {
                        //foreach ($value12 as $Key2 => $val2) {

                        $itmCond = "  LOWER(item_id)='" . $value12['item_id'] . "'";
                        $itmData = $this->_getSelectList('table_item', "item_code", '', $itmCond);
                        $itmerr = array(
                            'item_code' => $itmData[0]->item_code,
                            'qty' => $value12['qty'],
                            'err_msg' => "Data not Inserted"
                        );
                        // }
                        if (isset($check_key) && !in_array($itmData[0]->item_code, $check_key)) {
                            $error[$key1][] = $itmerr;
                            $error1 = $error;
                        } else {
                            $error1 = $error;
                        }
                        if (!isset($check_key)) {
                            $error[$key1][] = $itmerr;
                            $error1 = $error;
                        }
                    }
                } else {
                    $error1 = $error;
                }
            }
        } else {
            $error1 = $error;
        }

        if ($row >= 1) {
            if (sizeof($error1) > 0) {
                return $error1;
            } elseif ($res > 0) {
                return $res;
            } elseif ($fErr == "no") {
                return $fErr;
            } else {
                return $msg;
            }

        } else {

            return $msg;
        }

    }

    function retailerBulkOrder($formData)

    {

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $total_invoice_amount = 0;
        $distributor_id = $formData['distributor_id'];
        $resultset = "";
        $date = date('Y-m-d');
        $row = 0;
        $order_status = "A";
        $data = array();
        $flag = 0;
        $data2 = array();
        $itmCode = array();
        $pagetype = $formData['page_type'];
        $odrfrm = $formData['odrfrm'];
        $chkItem = '';

        $Itm = 0;
        $arr = array();
        $retArr = array();
        $itemArr = array();

        $orderArr = array();
        //  print_r(feof($file));
        $error = array();
        while (!feof($file)) {

            $arrFile = fgetcsv($file);
            if ($row == 0) {

                if (count($arrFile) == 3 && trim($arrFile[0]) == "Retailer Code*" && trim($arrFile[1]) == "Item Code*" && trim($arrFile[2]) == "Quantity*") {
                    $flag2 = true;
                } else {

                    $flag2 = false;
                    $fErr = "no";
                }
            }

            if ($row > 0 && is_array($arrFile)) {

                $retCode = mysql_escape_string(strtolower(trim($arrFile[0])));
                $itemCode = mysql_escape_string(strtolower(trim($arrFile[1])));
                $qty = mysql_escape_string(trim($arrFile[2]));
                if ($flag2) {
//                    if (!empty($retCode) && !empty($itemCode) && !empty($qty)) {
//
//                        $row++;
//
//                    } else{
                    $cnt[] = $row;
                    $newarr = array(
                        'item_code' => $itemCode,
                        'qty' => $qty
                    );
                    if ($retCode !== '') {
                        $orderArr[$retCode][] = $newarr;
                    } else {
                        $itmerr = array(
                            'item_code' => $itemCode,
                            'qty' => $qty,
                            'err_msg' => "Retailer Code Can't be Blank"
                        );
                        $error[$retCode][] = $itmerr;
                    }

//                    }

                }

            }
            $row++;
            $flag++;
        }
        fclose($file);
        $newOrderArr = array();
        $RId = array();

        if (!empty($orderArr) && sizeof($orderArr) > 0) {
//            echo "<pre>";
//            print_R($orderArr);
            $i = 0;
            foreach ($orderArr as $okey => $ovalue) {
                //print_r($ovalue);
                if ($okey != '') {

                    $retCond = "  LOWER(retailer_code)='" . $okey . "'";
                    $retData = $this->_getSelectList('table_retailer', "retailer_id,distributor_id", '', $retCond);

                    $ret_id = $retData[0]->retailer_id;
                    $dis_id = $retData[0]->distributor_id;
                    if ($_SESSION['distributorId'] != $retData[0]->distributor_id) {
                        $nomap = array(
                            'ret_code' => $okey,
                            'err_msg' => "Distributor not mapped",
                        );

                        $error[$okey] = $nomap;

                    } else {
                        if ($ret_id > 0) {

                            foreach ($ovalue as $ok => $ov) {

                                $itmCond = "  LOWER(item_code)='" . $ov['item_code'] . "'";
                                $itmData = $this->_getSelectList('table_item', "item_id", '', $itmCond);
                                if ($itmData[0]->item_id > 0 && $ov['qty'] > 0) {

                                    $item_id = $itmData[0]->item_id;
                                    $qty = $ov['qty'];

                                    $oarr = array(
                                        'item_id' => $itmData[0]->item_id,
                                        'qty' => $ov['qty']
                                    );
                                    $newOrderArr[$ret_id][] = $oarr;

                                    if (isset($error)) {
                                        $itmerr = array(
                                            'item_code' => $ov['item_code'],
                                            'qty' => $ov['qty'],
                                            'err_msg' => "Data not Inserted 1"
                                        );
                                        $error[$okey][] = $itmerr;
                                    } else {
                                        unset($error);
                                    }

                                    if (in_array($ret_id, $RId)) {
                                        if (!empty($error) && $error <= 0) {
                                            $itmerr = array(
                                                'item_code' => $ov['item_code'],
                                                'qty' => $ov['qty'],
                                                'err_msg' => "Data not Inserted 2 "
                                            );
                                            $error[$okey][] = $itmerr;
                                        }

                                        unset($newOrderArr[$ret_id]);
                                    }
                                    //print_r($error);
                                    // check item price
                                    $condition = " I.item_id='" . $item_id . "'";
                                    $result1 = $this->_getSelectList('table_item AS I 
                           LEFT JOIN table_price AS TP ON TP.item_id = I.item_id AND TP.start_date <= "' . $date . '" AND TP.end_date >= "' . $date . '"
                           LEFT JOIN table_item_gst AS ig ON ig.item_id = I.item_id
                           left join table_item_discount AS D on D.item_id=I.item_id',
                                        "I.item_id, I.item_name, I.item_code,ifnull(ig.tax,0) as tax, TP.item_mrp,TP.dist_price,
                           TP.stockist_price, TP.item_dp,ifnull(D.discount_percentage,0) as discount_percentage,D.id as discount_id", '', "  
                           " . $condition);
                                    if (count($result1)) {

                                        $price = $result1[0]->item_mrp;
                                        if (!empty($odrfrm) && $odrfrm == 'dis') {

                                            if ($result1[0]->dist_price > 0) {
                                                $price = $result1[0]->dist_price;
                                            }
                                        } else if (!empty($odrfrm) && $odrfrm == 'stk' && $result1[0]->stockist_price > 0) {
                                            $price = $result1[0]->stockist_price;
                                        }


                                    }
                                    if ($price == '' || $price == 0) {

                                        unset($newOrderArr[$ret_id]);
                                        $priceerr = array(
                                            'item_code' => $ov['item_code'],
                                            'qty' => $ov['qty'],
                                            'err_msg' => "Item Price not available"
                                        );

                                        $error[$okey][] = $priceerr;
                                    }
                                    // check item price
                                } else {

                                    if ($ov['qty'] <= 0) {
                                        $msg = "Quantity can't be 0";
                                    } else {
                                        $msg = "Item Code does not exists.";
                                    }
                                    $itmerr = array(
                                        'item_code' => $ov['item_code'],
                                        'qty' => $ov['qty'],
                                        'err_msg' => $msg
                                    );
                                    $error[$okey][] = $itmerr;
                                    if ($error <= 0) {
                                        $itmerr = array(
                                            'item_code' => $ov['item_code'],
                                            'qty' => $ov['qty'],
                                            'err_msg' => "Data not Inserted 3"
                                        );
                                        $error[$okey][] = $itmerr;
                                    }

                                    array_push($RId, $ret_id);
                                    if (in_array($ret_id, $RId)) {
                                        unset($newOrderArr[$ret_id]);
                                    }
                                }
                            }

                            $i++;
                        }
                    }
                }
            }
        }
        echo "<pre>";

        print_r($error);
//        print_r($newOrderArr);
        die;
        $ordArr = array();
        $item_wise = array();
        if (!empty($newOrderArr)) {
            $arr2 = array();
            foreach ($newOrderArr as $nokey => $noval) {
                foreach ($noval as $k => $v) {
                    $item_wise[$nokey][$v['item_id']][] = $v;
                    if (count($item_wise[$nokey][$v['item_id']]) > 1) {
                        $sum = 0;
                        foreach ($item_wise[$nokey][$v['item_id']] as $iqty) {
                            $sum = $sum + $iqty['qty'];
                            $v['qty'] = $sum;
                        }
                    } else {
                        $v['qty'] = $v['qty'];
                    }
                    $ordArr[$nokey][$v['item_id']] = $v;

                }
            }
        }
        //die;
        $_objScheme = new SchemeClass();
        if (isset($ordArr)) {
            foreach ($ordArr as $nkey => $nval) {
                $data['account_id'] = $formData['account_id'];
                $data['salesman_id'] = 0;
                $data['distributor_id'] = $formData['distributor_id'];

                $data['retailer_id'] = $nkey;
                $data['date_of_order'] = date('Y-m-d');
                $data['time_of_order'] = date('H:i:s');
                $data['lat'] = NULL;
                $data['lng'] = NULL;
                $data['accuracy_level'] = NULL;
                $data['comments'] = NULL;
                // $data['order_type']                   =   "Yes"; // Yes , No , Adhoc
                $data['order_for'] = "R"; // D=> distributor , R=>retailer
                $data['location_provider'] = NULL;
                $data['tag_id'] = 0;
                $data['tag_description'] = NULL;
                $data['total_invoice_amount'] = 0;
                $data['acc_total_invoice_amount'] = 0;
                $data['last_update_date'] = $date;
                $data['last_update_status'] = 'New';
                $data['order_status'] = $order_status;  // A = New Order, I = Processed , D = Dispatched
                // Actual Shceme Details
                $data['discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage
                $data['discount_amount'] = 0;
                $data['dicount_percentage'] = NULL;
                $data['free_item_id'] = 0;     // FOC Item ID If discount type FOC
                $data['free_item_qty'] = NULL;     // How many FOC Item qty
                $data['discount_id'] = NULL;     // Scheme ID
                $data['discount_desc'] = NULL;     // Scheme Description
                $data['acc_discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage
                $data['acc_discount_amount'] = 0;
                $data['acc_dicount_percentage'] = NULL;
                $data['acc_free_item_id'] = 0;     // FOC Item ID If discount type FOC
                $data['acc_free_item_qty'] = NULL;     // How many FOC Items
                $data['acc_discount_id'] = 0;     // Scheme ID

                $data['type'] = NULL;
                $data['updated_order_type'] = NuLL; //date('0000-00-00');
                $data['bill_no'] = NULL;
                $data['voucher_number'] = 0;
                $data['bill_type'] = NULL;
                $data['invoice_status'] = NULL;
                $data['against_invoice_no'] = NULL;
                $data['return_type'] = 0;
                $data['terms_id'] = 0;
                $data['delivery_add'] = NULL;
                $data['reason'] = NULL;
                $data['reason_remark'] = NULL;
                $data['clearing_status'] = NULL;
                $data['payment_received'] = 0;
                $data['adjusted_amount'] = 0;
                $data['must_sell_reason_id'] = 0;
                $data['cancel_by'] = 0;
                $data['updated_by_app'] = 0;
                $data['app_updated_by_salesman_id'] = 0;
                $data['app_updated_by_retailer_id'] = 0;

                if (strtolower($formData['order_type']) == 'yes' || strtolower($formData['order_type']) == 'adhoc') {
                    $data['order_type'] = "Yes"; // Yes , No , Adhoc
                } else {
                    $data['order_type'] = "Return"; // Yes , No , Adhoc
                    $data['return_type'] = 1;

                }

                $order_id = $this->_dbInsert($data, 'table_order');
                if (isset($formData['reason']) && $formData['reason'] > 0 && $order_id > 0) {
                    $reason['reason_id'] = $formData['reason'];
                    $reason['order_id'] = $order_id;
                    $reason['created'] = date('Y-m-d H:i:s');
                    $reason['updated'] = date('Y-m-d H:i:s');
                    $resi_id = $this->_dbInsert($reason, 'table_retailer_order_return_reason');
                }

                if ($order_id > 0) {

                    foreach ($nval as $nk => $nv) {

                        $condition = " I.item_id='" . $nv['item_id'] . "'";
                        $result = $this->_getSelectList('table_item AS I 
                        LEFT JOIN table_price AS TP ON TP.item_id = I.item_id AND TP.start_date <= "' . $date . '" AND TP.end_date >= "' . $date . '"
                        LEFT JOIN table_item_gst AS ig ON ig.item_id = I.item_id
                        left join table_item_discount AS D on D.item_id=I.item_id',
                            "I.item_id, I.item_name, I.item_code,ifnull(ig.tax,0) as tax, TP.item_mrp,TP.dist_price,
                        TP.stockist_price, TP.item_dp,ifnull(D.discount_percentage,0) as discount_percentage,D.id as discount_id", '', "  
                        " . $condition);

                        $discount_desc = NULL;
                        $discount_type = NULL;
                        $discount_amount = NULL;
                        $discount_percentage = NULL;
                        $free_item_id = 0;
                        $total_free_quantity = NULL;
                        $acc_discount_type = NULL;
                        $acc_discount_amount = NULL;
                        $acc_dicount_percentage = NULL;
                        $acc_free_item_id = NULL;
                        $acc_free_item_qty = NULL;
                        $acc_discount_id = NULL;
                        $itmIdArr = [];
                        $itmIds = [];
                        $distTypeWiseItemPriceArr = [];

                        $getDistType = $this->_getSelectList('table_distributors', 'distributor_type_id', '', "distributor_id = $distributor_id");

                        if (is_array($getDistType) && (count($getDistType) > 0)) {
                            $distTypeId = $getDistType[0]->distributor_type_id;

                            if (intval($distTypeId) > 0) {
                                foreach ($result as $key1 => $itmData) {
                                    $itmIdArr[] = $itmData->item_id;
                                }

                                $itmIds = implode(',', $itmIdArr);

                                //now get the distributor type wise item price
                                $getDistTypeWiseItemPrice = $this->_getSelectList2('table_distributor_type_item_price_mapping', 'item_id,price', '', "distributor_type_id = $distTypeId AND item_id IN($itmIds) AND status = 'A' ");

                                if (is_array($getDistTypeWiseItemPrice) && (count($getDistTypeWiseItemPrice) > 0)) {
                                    foreach ($getDistTypeWiseItemPrice as $key2 => $distTypeWiseItemPrice) {
                                        $distTypeWiseItemPriceArr[$distTypeWiseItemPrice->item_id] = $distTypeWiseItemPrice->price;
                                    }

                                }
                            }
                        }

                        foreach ($result as $key => $row) {
                            $tax = $row->tax;

                            if (!empty($pagetype) && $pagetype == 'order') {
                                $tax = 0;

                            }
                            $price = $row->item_mrp;
                            if (!empty($odrfrm) && $odrfrm == 'dis') {


                                if (isset($distTypeWiseItemPriceArr[$row->item_id]) && ($distTypeWiseItemPriceArr[$row->item_id] > 0)) {
                                    $price = $distTypeWiseItemPriceArr[$row->item_id];
                                } else if ($row->dist_price > 0) {
                                    $price = $row->dist_price;
                                }
                            } else if (!empty($odrfrm) && $odrfrm == 'stk' && $row->stockist_price > 0) {
                                $price = $row->stockist_price;
                            }


                        }
                        $item_id = trim($result[0]->item_id);
                        $item_price = trim($price);
                        $item_qty = $nv['qty'];


                        /******Tax Info*******/
                        // $tax=10;
                        $gst_rate = (isset($tax) ? $tax : 0);
                        $gst_amt = ROUND(((($item_price * $item_qty) * $gst_rate) / 100), 2);
                        // echo $gst_amt;die;

                        /******Tax Info*******/

                        //***********discount info */
                        $dis_amt = 0;
                        if ($result[0]->discount_percentage > 0) {
                            $dis_rate = $result[0]->discount_percentage;
                            $dis_amt = ROUND(((($item_price * $item_qty) * $dis_rate) / 100), 2);
                            $data1['discount_id'] = $result[0]->discount_id;
                            $data1['discount_amount'] = $dis_amt;
                            $data1['discount_percentage'] = $result[0]->discount_percentage;

                        } else {
                            $data1['discount_id'] = 0;
                            $data1['discount_amount'] = $dis_amt;
                            $data1['discount_percentage'] = 0;
                        }
                        //***********discount info */
                        $data1['order_id'] = $order_id;
                        $data1['item_id'] = $item_id;
                        $data1['free_item_id'] = $free_item_id;

                        $data1['price'] = $item_price;
                        $data1['gst_rate'] = $gst_rate;
                        $data1['gst_amount'] = $gst_amt;
                        $data1['quantity'] = $item_qty;
                        $data1['total'] = ROUND((($data1['quantity'] * $data1['price']) + $gst_amt), 2);


                        $data1['acc_quantity'] = $data1['quantity'];
                        $data1['acc_total'] = $data1['total'];
                        $data1['color_id'] = 0;
                        $data1['color_type'] = NULL;
                        $data1['type'] = 1;     // 1 = Normal, 2 = Free Item
                        $data1['price_type'] = 1;     // 1 = MRP , 2 = DP , 3 = PTR
                        $data1['last_update_date'] = $date;
                        $data1['last_update_status'] = 'New';
                        $data1['order_detail_status'] = '2';   // 1 = New , 2 = Accepted, 3 = Rejected, 4 = Discount Applicable, 5 = Discount Not Applicable
                        $data1['unit_id'] = 0;
                        $data1['item_unit_type'] = 'pcs';
                        $data1['cgst_rate'] = 0;
                        $data1['cgst_amount'] = 0;
                        $data1['igst_rate'] = 0;
                        $data1['igst_amount'] = 0;
                        $data1['tax_amount'] = 0;
                        $data1['case_size'] = 0;
                        $data1['new_scheme_discount'] = 0;
                        $data1['is_processed'] = 0;
                        $data1['discount_desc'] = NULL;
                        $data1['discount_type'] = NULL;
                        $data1['total_free_quantity'] = NULL;
                        $data1['tag_id'] = 0;
                        $data1['acc_discount_type'] = NULL;
                        $data1['acc_discount_amount'] = 0;
                        $data1['acc_dicount_percentage'] = NULL;
                        $data1['acc_free_item_id'] = 0;
                        $data1['acc_free_item_qty'] = NULL;
                        $data1['reason'] = NULL;
                        $data1['acc_discount_id'] = 0;
                        $data1['reason_remark'] = NULL;
                        $data1['norms'] = 0;
                        $data1['stock'] = 0;
                        $data1['remarks'] = 0;
                        $data1['updated_by_app'] = 0;
                        $data1['custom_discount_amount'] = 0;
                        $data1['custom_discount_percentage'] = 0;
                        $data1['must_sell_reason_id'] = 0;
                        $total_invoice_amount = $total_invoice_amount + $data1['total'];
                        $this->_dbInsert($data1, 'table_order_detail');

                    }
                }
                if (isset($total_invoice_amount) && $total_invoice_amount > 0) {
                    $OrderData['total_invoice_amount'] = $total_invoice_amount;
                    $OrderData['acc_total_invoice_amount'] = $total_invoice_amount;
                    $res = $this->_dbUpdate($OrderData, 'table_order', " order_id=" . $order_id);
                    $res = 1;
                    $total_invoice_amount = 0;
                }
            }
        } else {
            $msg = "Empty File";
        }

        if ($row >= 1) {
            if (sizeof($error) > 0) {
                return $error;
            } elseif ($res > 0) {
                return $res;
            } elseif ($fErr == "no") {
                return $fErr;
            } else {
                return $msg;
            }

        } else {

            return $msg;
        }

    }

    function retailerBulkOrderbkpfunction($formData)

    {
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $total_invoice_amount = 0;
        $distributor_id = $formData['distributor_id'];
        $resultset = "";
        $date = date('Y-m-d');
        $row = 0;
        $order_status = "A";
        $data = array();
        $flag = 0;
        $data2 = array();
        $itmCode = array();
        $pagetype = $formData['page_type'];
        $odrfrm = $formData['odrfrm'];
        $chkItem = '';

        $Itm = 0;
        $arr = array();
        $retArr = array();
        $itemArr = array();

        $orderArr = array();

        $error = array();
        while (!feof($file)) {

            $arrFile = fgetcsv($file);
            if ($row == 0) {

                if (count($arrFile) == 3 && trim($arrFile[0]) == "Retailer Code*" && trim($arrFile[1]) == "Item Code*" && trim($arrFile[2]) == "Quantity*") {
                    $flag2 = true;
                } else {

                    $flag2 = false;
                    $fErr = "no";
                }
            }

            if ($row > 0 && is_array($arrFile)) {

                $retCode = mysql_escape_string(strtolower(trim($arrFile[0])));
                $itemCode = mysql_escape_string(strtolower(trim($arrFile[1])));
                $qty = mysql_escape_string(trim($arrFile[2]));
                if ($flag2) {
                    $newarr = array(
                        'item_code' => $itemCode,
                        'qty' => $qty
                    );
                    if ($retCode !== '') {
                        $orderArr[$retCode][] = $newarr;
                    } else {
                        $itmerr = array(
                            'item_code' => $itemCode,
                            'qty' => $qty,
                            'err_msg' => "Retailer Code Can't be Blank"
                        );
                        $error[$retCode][] = $itmerr;
                    }
                }

            }
            $row++;
            $flag++;
        }
        fclose($file);
        $newOrderArr = array();
        $RId = array();

        //echo "<pre>";
        if (!empty($orderArr) && sizeof($orderArr) > 0) {

            // Count row and retailer id
            foreach ($orderArr as $Ids => $Idvalues) {
                $retCond = "  LOWER(retailer_code)='" . $Ids . "'";
                $retData = $this->_getSelectList('table_retailer', "retailer_id,distributor_id", '', $retCond);


                if (!empty($retData[0]->retailer_id)) {
                    $countIds[] = $retData[0]->retailer_id;
                }
                $countRow[] = $Ids;

                foreach ($Idvalues as $ok => $ov) {
                    if ($_SESSION['distributorId'] != $retData[0]->distributor_id) {
                        $nomap = array(
                            'ret_code' => $Ids,
                            'item_code' => $ov['item_code'],
                            'qty' => $ov['qty'],
                            'err_msg' => "Distributor not mapped",
                        );
                        $error[$ok] = $nomap;
                    }
                }

            }
//            print_r(count($countIds));
//            print_r(count($countIds));
//            print_r($error);die;

            $i = 0;
            foreach ($orderArr as $okey => $ovalue) {

                if ($okey != '') {
                    $retCond = "  LOWER(retailer_code)='" . $okey . "'";


                    $retData = $this->_getSelectList('table_retailer', "retailer_id,distributor_id", '', $retCond);

                    $ret_id = $retData[0]->retailer_id;
                    $dis_id = $retData[0]->distributor_id;

//                    if ($_SESSION['distributorId'] != $retData[0]->distributor_id) {
//                        $nomap = array(
//                            'ret_code' => $okey,
//
//                            'err_msg' => "Distributor not mapped",
//                        );
//
//                        $error[$okey] = $nomap;
//                    } else {
                    if ($ret_id > 0) {

                        foreach ($ovalue as $ok => $ov) {

                            $itmCond = "  LOWER(item_code)='" . $ov['item_code'] . "'";
                            $itmData = $this->_getSelectList('table_item', "item_id", '', $itmCond);
                            if ($itmData[0]->item_id > 0 && $ov['qty'] > 0) {

                                $item_id = $itmData[0]->item_id;
                                $qty = $ov['qty'];

                                $oarr = array(
                                    'item_id' => $itmData[0]->item_id,
                                    'qty' => $ov['qty']
                                );
                                $newOrderArr[$ret_id][] = $oarr;
                                if (in_array($ret_id, $RId)) {
                                    unset($newOrderArr[$ret_id]);
                                }
                                // check item price
                                $condition = " I.item_id='" . $item_id . "'";
                                $result1 = $this->_getSelectList('table_item AS I 
                           LEFT JOIN table_price AS TP ON TP.item_id = I.item_id AND TP.start_date <= "' . $date . '" AND TP.end_date >= "' . $date . '"
                           LEFT JOIN table_item_gst AS ig ON ig.item_id = I.item_id
                           left join table_item_discount AS D on D.item_id=I.item_id',
                                    "I.item_id, I.item_name, I.item_code,ifnull(ig.tax,0) as tax, TP.item_mrp,TP.dist_price,
                           TP.stockist_price, TP.item_dp,ifnull(D.discount_percentage,0) as discount_percentage,D.id as discount_id", '', "  
                           " . $condition);
                                if (count($result1)) {

                                    $price = $result1[0]->item_mrp;
                                    if (!empty($odrfrm) && $odrfrm == 'dis') {

                                        if ($result1[0]->dist_price > 0) {
                                            $price = $result1[0]->dist_price;
                                        }
                                    } else if (!empty($odrfrm) && $odrfrm == 'stk' && $result1[0]->stockist_price > 0) {
                                        $price = $result1[0]->stockist_price;
                                    }


                                }
                                if ($price == '' || $price == 0) {

                                    unset($newOrderArr[$ret_id]);
                                    $priceerr = array(
                                        'item_code' => $ov['item_code'],
                                        'qty' => $ov['qty'],
                                        'err_msg' => "Item Price not available"
                                    );

                                    $error[$okey][] = $priceerr;
                                }
                                // check item price
                            } else {

                                if ($ov['qty'] <= 0 && $itmData[0]->item_id <= 0) {
                                    $msg = "Quantity can't be 0 & Item Code does not exists.";
                                } else if ($ov['qty'] <= 0) {
                                    $msg = "Quantity can't be 0";
                                } else {
                                    $msg = "Item Code does not exists.";
                                }
                                $itmerr = array(
                                    'item_code' => $ov['item_code'],
                                    'qty' => $ov['qty'],
                                    'err_msg' => $msg
                                );
                                $error[$okey][] = $itmerr;
                                array_push($RId, $ret_id);
                                if (in_array($ret_id, $RId)) {
                                    unset($newOrderArr[$ret_id]);
                                }
                            }


                        }
                        $i++;
                    }
//                    }
                }
            }

        }

        $ordArr = array();
        $item_wise = array();
        if (!empty($newOrderArr)) {
            $arr2 = array();
            foreach ($newOrderArr as $nokey => $noval) {

                foreach ($noval as $k => $v) {

                    $item_wise[$nokey][$v['item_id']][] = $v;

                    if (count($item_wise[$nokey][$v['item_id']]) > 1) {
                        $sum = 0;
                        foreach ($item_wise[$nokey][$v['item_id']] as $iqty) {
                            $sum = $sum + $iqty['qty'];
                            $v['qty'] = $sum;
                        }
                    } else {
                        $v['qty'] = $v['qty'];
                    }

                    $ordArr[$nokey][$v['item_id']] = $v;

                }
            }
        }
//print_r(count($countRow));
//print_r($error);
//print_r(count($countIds));die;

        if ((count($countRow) == count($countIds)) && empty($error)) {

            $_objScheme = new SchemeClass();
            if (isset($ordArr)) {
                foreach ($ordArr as $nkey => $nval) {
                    $data['account_id'] = $formData['account_id'];
                    $data['salesman_id'] = 0;
                    $data['distributor_id'] = $formData['distributor_id'];

                    $data['retailer_id'] = $nkey;
                    $data['date_of_order'] = date('Y-m-d');
                    $data['time_of_order'] = date('H:i:s');
                    $data['lat'] = NULL;
                    $data['lng'] = NULL;
                    $data['accuracy_level'] = NULL;
                    $data['comments'] = NULL;
                    // $data['order_type']                   =   "Yes"; // Yes , No , Adhoc
                    $data['order_for'] = "R"; // D=> distributor , R=>retailer
                    $data['location_provider'] = NULL;
                    $data['tag_id'] = 0;
                    $data['tag_description'] = NULL;
                    $data['total_invoice_amount'] = 0;
                    $data['acc_total_invoice_amount'] = 0;
                    $data['last_update_date'] = $date;
                    $data['last_update_status'] = 'New';
                    $data['order_status'] = $order_status;  // A = New Order, I = Processed , D = Dispatched
                    // Actual Shceme Details
                    $data['discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage
                    $data['discount_amount'] = 0;
                    $data['dicount_percentage'] = NULL;
                    $data['free_item_id'] = 0;     // FOC Item ID If discount type FOC
                    $data['free_item_qty'] = NULL;     // How many FOC Item qty
                    $data['discount_id'] = NULL;     // Scheme ID
                    $data['discount_desc'] = NULL;     // Scheme Description
                    $data['acc_discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage
                    $data['acc_discount_amount'] = 0;
                    $data['acc_dicount_percentage'] = NULL;
                    $data['acc_free_item_id'] = 0;     // FOC Item ID If discount type FOC
                    $data['acc_free_item_qty'] = NULL;     // How many FOC Items
                    $data['acc_discount_id'] = 0;     // Scheme ID

                    $data['type'] = NULL;
                    $data['updated_order_type'] = NuLL; //date('0000-00-00');
                    $data['bill_no'] = NULL;
                    $data['voucher_number'] = 0;
                    $data['bill_type'] = NULL;
                    $data['invoice_status'] = NULL;
                    $data['against_invoice_no'] = NULL;
                    $data['return_type'] = 0;
                    $data['terms_id'] = 0;
                    $data['delivery_add'] = NULL;
                    $data['reason'] = NULL;
                    $data['reason_remark'] = NULL;
                    $data['clearing_status'] = NULL;
                    $data['payment_received'] = 0;
                    $data['adjusted_amount'] = 0;
                    $data['must_sell_reason_id'] = 0;
                    $data['cancel_by'] = 0;
                    $data['updated_by_app'] = 0;
                    $data['app_updated_by_salesman_id'] = 0;
                    $data['app_updated_by_retailer_id'] = 0;

                    if (strtolower($formData['order_type']) == 'yes' || strtolower($formData['order_type']) == 'adhoc') {
                        $data['order_type'] = "Yes"; // Yes , No , Adhoc
                    } else {
                        $data['order_type'] = "Return"; // Yes , No , Adhoc
                        $data['return_type'] = 1;

                    }

                    $order_id = $this->_dbInsert($data, 'table_order');
                    if (isset($formData['reason']) && $formData['reason'] > 0 && $order_id > 0) {
                        $reason['reason_id'] = $formData['reason'];
                        $reason['order_id'] = $order_id;
                        $reason['created'] = date('Y-m-d H:i:s');
                        $reason['updated'] = date('Y-m-d H:i:s');
                        $resi_id = $this->_dbInsert($reason, 'table_retailer_order_return_reason');
                    }

                    if ($order_id > 0) {

                        foreach ($nval as $nk => $nv) {

                            $condition = " I.item_id='" . $nv['item_id'] . "'";
                            $result = $this->_getSelectList('table_item AS I 
                        LEFT JOIN table_price AS TP ON TP.item_id = I.item_id AND TP.start_date <= "' . $date . '" AND TP.end_date >= "' . $date . '"
                        LEFT JOIN table_item_gst AS ig ON ig.item_id = I.item_id
                        left join table_item_discount AS D on D.item_id=I.item_id',
                                "I.item_id, I.item_name, I.item_code,ifnull(ig.tax,0) as tax, TP.item_mrp,TP.dist_price,
                        TP.stockist_price, TP.item_dp,ifnull(D.discount_percentage,0) as discount_percentage,D.id as discount_id", '', "  
                        " . $condition);

                            $discount_desc = NULL;
                            $discount_type = NULL;
                            $discount_amount = NULL;
                            $discount_percentage = NULL;
                            $free_item_id = 0;
                            $total_free_quantity = NULL;
                            $acc_discount_type = NULL;
                            $acc_discount_amount = NULL;
                            $acc_dicount_percentage = NULL;
                            $acc_free_item_id = NULL;
                            $acc_free_item_qty = NULL;
                            $acc_discount_id = NULL;
                            $itmIdArr = [];
                            $itmIds = [];
                            $distTypeWiseItemPriceArr = [];

                            $getDistType = $this->_getSelectList('table_distributors', 'distributor_type_id', '', "distributor_id = $distributor_id");

                            if (is_array($getDistType) && (count($getDistType) > 0)) {
                                $distTypeId = $getDistType[0]->distributor_type_id;

                                if (intval($distTypeId) > 0) {
                                    foreach ($result as $key1 => $itmData) {
                                        $itmIdArr[] = $itmData->item_id;
                                    }

                                    $itmIds = implode(',', $itmIdArr);

                                    //now get the distributor type wise item price
                                    $getDistTypeWiseItemPrice = $this->_getSelectList2('table_distributor_type_item_price_mapping', 'item_id,price', '', "distributor_type_id = $distTypeId AND item_id IN($itmIds) AND status = 'A' ");

                                    if (is_array($getDistTypeWiseItemPrice) && (count($getDistTypeWiseItemPrice) > 0)) {
                                        foreach ($getDistTypeWiseItemPrice as $key2 => $distTypeWiseItemPrice) {
                                            $distTypeWiseItemPriceArr[$distTypeWiseItemPrice->item_id] = $distTypeWiseItemPrice->price;
                                        }

                                    }
                                }
                            }

                            foreach ($result as $key => $row) {
                                $tax = $row->tax;

                                if (!empty($pagetype) && $pagetype == 'order') {
                                    $tax = 0;

                                }
                                $price = $row->item_mrp;
                                if (!empty($odrfrm) && $odrfrm == 'dis') {


                                    if (isset($distTypeWiseItemPriceArr[$row->item_id]) && ($distTypeWiseItemPriceArr[$row->item_id] > 0)) {
                                        $price = $distTypeWiseItemPriceArr[$row->item_id];
                                    } else if ($row->dist_price > 0) {
                                        $price = $row->dist_price;
                                    }
                                } else if (!empty($odrfrm) && $odrfrm == 'stk' && $row->stockist_price > 0) {
                                    $price = $row->stockist_price;
                                }


                            }
                            $item_id = trim($result[0]->item_id);
                            $item_price = trim($price);
                            $item_qty = $nv['qty'];


                            /******Tax Info*******/
                            // $tax=10;
                            $gst_rate = (isset($tax) ? $tax : 0);
                            $gst_amt = ROUND(((($item_price * $item_qty) * $gst_rate) / 100), 2);
                            // echo $gst_amt;die;

                            /******Tax Info*******/

                            //***********discount info */
                            $dis_amt = 0;
                            if ($result[0]->discount_percentage > 0) {
                                $dis_rate = $result[0]->discount_percentage;
                                $dis_amt = ROUND(((($item_price * $item_qty) * $dis_rate) / 100), 2);
                                $data1['discount_id'] = $result[0]->discount_id;
                                $data1['discount_amount'] = $dis_amt;
                                $data1['discount_percentage'] = $result[0]->discount_percentage;
                            } else {
                                $data1['discount_id'] = 0;
                                $data1['discount_amount'] = $dis_amt;
                                $data1['discount_percentage'] = 0;
                            }
                            //***********discount info */
                            $data1['order_id'] = $order_id;
                            $data1['item_id'] = $item_id;
                            $data1['free_item_id'] = $free_item_id;

                            $data1['price'] = $item_price;
                            $data1['gst_rate'] = $gst_rate;
                            $data1['gst_amount'] = $gst_amt;
                            $data1['quantity'] = $item_qty;
                            $data1['total'] = ROUND((($data1['quantity'] * $data1['price']) + $gst_amt), 2);


                            $data1['acc_quantity'] = $data1['quantity'];
                            $data1['acc_total'] = $data1['total'];
                            $data1['color_id'] = 0;
                            $data1['color_type'] = NULL;
                            $data1['type'] = 1;     // 1 = Normal, 2 = Free Item
                            $data1['price_type'] = 1;     // 1 = MRP , 2 = DP , 3 = PTR
                            $data1['last_update_date'] = $date;
                            $data1['last_update_status'] = 'New';
                            $data1['order_detail_status'] = '2';   // 1 = New , 2 = Accepted, 3 = Rejected, 4 = Discount Applicable, 5 = Discount Not Applicable
                            $data1['unit_id'] = 0;
                            $data1['item_unit_type'] = 'pcs';
                            $data1['cgst_rate'] = 0;
                            $data1['cgst_amount'] = 0;
                            $data1['igst_rate'] = 0;
                            $data1['igst_amount'] = 0;
                            $data1['tax_amount'] = 0;
                            $data1['case_size'] = 0;
                            $data1['new_scheme_discount'] = 0;
                            $data1['is_processed'] = 0;
                            $data1['discount_desc'] = NULL;
                            $data1['discount_type'] = NULL;
                            $data1['total_free_quantity'] = NULL;
                            $data1['tag_id'] = 0;
                            $data1['acc_discount_type'] = NULL;
                            $data1['acc_discount_amount'] = 0;
                            $data1['acc_dicount_percentage'] = NULL;
                            $data1['acc_free_item_id'] = 0;
                            $data1['acc_free_item_qty'] = NULL;
                            $data1['reason'] = NULL;
                            $data1['acc_discount_id'] = 0;
                            $data1['reason_remark'] = NULL;
                            $data1['norms'] = 0;
                            $data1['stock'] = 0;
                            $data1['remarks'] = 0;
                            $data1['updated_by_app'] = 0;
                            $data1['custom_discount_amount'] = 0;
                            $data1['custom_discount_percentage'] = 0;
                            $data1['must_sell_reason_id'] = 0;
                            $total_invoice_amount = $total_invoice_amount + $data1['total'];

                            //echo  $total_invoice_amount.'<br>'; // echo "<pre>";
                            //  print_r($data1);die;
                            $this->_dbInsert($data1, 'table_order_detail');

                            //check schemes

                            //end check scheme
                        }
                    }
                    if (isset($total_invoice_amount) && $total_invoice_amount > 0) {
                        $OrderData['total_invoice_amount'] = $total_invoice_amount;
                        $OrderData['acc_total_invoice_amount'] = $total_invoice_amount;
                        $res = $this->_dbUpdate($OrderData, 'table_order', " order_id=" . $order_id);
                        $res = 1;
                        $total_invoice_amount = 0;
                    }
                }
            } else {
                $msg = "Empty File";
            }
        } else {

            foreach ($orderArr as $okey => $ovalue) {

                $retCond = "  LOWER(retailer_code)='" . $okey . "'";
                $retData = $this->_getSelectList('table_retailer', "retailer_id,distributor_id", '', $retCond);

                if (!empty($retData[0]->retailer_id)) {

                    foreach ($ovalue as $ok => $ov) {

                        $itmCond = "  LOWER(item_code)='" . $ov['item_code'] . "'";
                        $itmData = $this->_getSelectList('table_item', "item_id", '', $itmCond);
                        $errorMsg = array(
                            'retailer_code' => $okey,
                            'item_code' => $ov['item_code'],
                            'qty' => $ov['qty'],
                            'err_msg' => "Data not Inserted"
                        );

                        if ($itmData[0]->item_id > 0 && $ov['qty'] > 0) {
                            $error[$okey][] = $errorMsg;
                        }
                    }
                }

            }

        }
        //$res=1;
        if ($row >= 1) {
            if (sizeof($error) > 0) {
                return $error;
            } elseif ($res > 0) {
                return $res;
            } elseif ($fErr == "no") {
                return $fErr;
            } else {
                return $msg;
            }

        } else {
            return $msg;
        }

    }


// Todo End : Sudhanshu : Retailer Bulk order

    function uploadCustomerWiseRouteList($salesman)

    {

        $fields = array('Retailer Code*', 'Salesman Code*', 'Assign Day*(Mon|Tue|Wed|Thu|Fri|Sat|Sun)', 'From Date*', 'To Date*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $resultset = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            $retailer_code = mysql_escape_string(strtolower(trim($arrFile[0])));

            $employee_code = mysql_escape_string(strtolower(trim($arrFile[1])));

            // $username =mysql_escape_string(trim($arrFile[1]));

            //$division_name = mysql_escape_string(strtolower(trim($arrFile[2])));

            $assignDay = mysql_escape_string(trim($arrFile[2]));

//            $route_schedule_id = 0;

//            $division_id = 0;

            $route_id = 0;

//            $route_division_id = 0;

//            $salesman_division_id = 0;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Retailer Code*" || empty($arrFile[1]) || $arrFile[1] == "Salesman Code*" || empty($arrFile[2]) || $arrFile[2] == "Assign Day*(Mon|Tue|Wed|Thu|Fri|Sat|Sat|Sun)" || empty($arrFile[3]) || empty($arrFile[4])) {

                    if (empty($arrFile[0]) || $arrFile[0] == "Retailer Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", " . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1]) || $arrFile[1] == "Salesman Username*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", " . $fields[1] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[2]) || $arrFile[2] == "Assign Day*(Mon|Tue|Wed|Thu|Fri|Sat|Sat|Sun)") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", " . $fields[2] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[3]) || $arrFile[3] == "From Date* (yyyy-mm-dd)") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", " . $fields[3] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[4]) || $arrFile[4] == "To Date* (yyyy-mm-dd)") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", " . $fields[4] . " shouldn't be empty. \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // Check Route Name exists in the system.

                if ($flag) {

                    $condi = " LOWER(retailer_code)='" . $retailer_code . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_retailer', 'retailer_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", Retailer Code doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $retailer_id = $resultset[0]->retailer_id;

                        //$route_division_id = $resultset[0]->division_id;

                    }

                }

                if ($flag) {

                    $condi = " employee_code='" . $employee_code . "' AND status = 'A'";

                    $resultset = $this->_getSelectList('table_salesman as s', 'salesman_id', '', $condi . $salesman);

                    if (!is_array($resultset) && empty($resultset)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                            $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", Salesman Code doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $salesman_id = $resultset[0]->salesman_id;

                    }

                }

                if ($flag) {

                    $condi = "  retailer_id='" . $retailer_id . "' ";

                    $resultset = $this->_getSelectList('table_retailer ', 'retailer_id', '', $condi);

                    if (!is_array($resultset) && empty($resultset)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", Retailer Not Mapped.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    if (isset($arrFile[3]) && !empty($arrFile[3])) {

                        $FromDate = date('Y-m-d', strtotime($arrFile[3]));
                        if ($FromDate) {

                            if ($FromDate < date('Y-m-d')) {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", From Date should be greater than or equal to current date.\n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", Invalid From Date.\n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                if ($flag) {
                    $ToDate = date('Y-m-d', strtotime($arrFile[4]));

                    if (isset($arrFile[4]) && !empty($arrFile[4])) {

                        if ($ToDate) {
                            if ($ToDate < $FromDate) {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", To Date should be greater than or equal to from date.\n";

                                $str_err_array = array($strErr);

                                $flag = false;


                            }

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $arrFile[4] . ", Invalid To Date.\n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                    }

                }
                // Todo Start : Jatin  : 8 Nov 2023 : Check the Enter days name

                if ($flag) {

                    $arr = array('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun');

                    if (isset($arrFile[2]) && !empty($arrFile[2])) {

                        $asDays = explode('|', $arrFile[2]);
                        $assignDay = array();
                        foreach ($asDays as $value) {

                            $day = ucwords(trim($value));

                            $arr = array('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun');

                            if (in_array($day, $arr)) {

                                $assignDay[] = $day;

                            }

                        }
                        if (count($asDays) != count($assignDay)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] .
                                ", " . $arrFile[3] . ", " . $arrFile[4] . ", Enter Valid Assign Day .\n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                    }
                }

                // Todo End : Jatin  : 8 Nov 2023 : Check the Enter days name

                // Insert Route Retailers

                if ($flag) {

                    if ($retailer_id > 0 && $salesman_id > 0) {

                        $routeCond = " AND salesman_id='" . $salesman_id . "'";

                        $rouRec = $this->_getSelectList('table_customer_wise_route_schedule', 'route_schedule_id', '', $routeCond);

                        if (is_array($rouRec) && sizeof($rouRec) > 0) {

                            $route_schedule_id = $rouRec[0]->route_schedule_id;

                        } else {

                            $data = array();

                            $data['account_id'] = $_SESSION['accountId'];

                            $data['salesman_id'] = $salesman_id;

                            $data['from_date'] = date('Y-m-d', strtotime($arrFile[3]));

                            $data['to_date'] = date('Y-m-d', strtotime($arrFile[4]));
                            $data['created_date'] = date('Y-m-d H:i:s');
                            $data['status'] = 'A';
                            //Todo Start Sudhanshu 20 may 2024: add last update date
                            $data['last_updated'] = date('Y-m-d H:i:s');
                            //Todo Start Sudhanshu 20 may 2024: add last update date

                            $route_schedule_id = $this->_dbInsert($data, 'table_customer_wise_route_schedule');

                        }

                        if ($route_schedule_id > 0) {

                            $where = " AND (Mon='" . $retailer_id . "' OR Tue='" . $retailer_id . "' OR Wed='" . $retailer_id . "' OR Thu='" . $retailer_id . "' OR Fri='" . $retailer_id . "' OR Sat='" . $retailer_id . "' OR Sun='" . $retailer_id . "') ";

                            $this->mysql_query("DELETE FROM table_customer_wise_route_schedule_by_day WHERE route_schedule_id='" . $route_schedule_id . "' $where");

                            //$assign_days = explode('|', $assignDay);

//                            $days = array_filter($assign_days);

                            $data = array();

                            $data['account_id'] = $_SESSION['accountId'];

                            $data['route_schedule_id'] = $route_schedule_id;

                            $data['status'] = 'A';

                            foreach ($assignDay as $value) {

                                $day = ucwords(trim($value));

                                $arr = array('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun');

                                if (in_array($day, $arr)) {

                                    $data[$day] = $retailer_id;

                                }

                            }

                            $this->_dbInsert($data, 'table_customer_wise_route_schedule_by_day');

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }


    //Todo Start: Sudhanshu: 06 sep 2023 : import grade File
    function uploadGrades()

    {

        $fields = array('Grades Name*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 1 && trim($arrFile[0]) == "Grades Name*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || trim($arrFile[0]) == "Grades Name*") {

                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Grades Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $fields[0] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " LOWER(grade_name)='" . mysql_escape_string(strtolower(preg_replace('/[^A-Za-z0-9" "]/', '', trim($arrFile[0])))) . "'";

                    $GradeRec = $this->_getSelectList2('table_grade', "grade_id", '', $condi);

                    if (is_array($GradeRec) && (count($GradeRec) > 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " , Grade already exists. \n";

                        $str_err_array = array($strErr);

                    } else {

                        $grade = array();

                        $grade['account_id'] = mysql_escape_string($this->clean($_REQUEST['account_id']));

                        $grade['grade_name'] = mysql_escape_string(preg_replace('/[^A-Za-z0-9" "]/', '', trim($arrFile[0])));
                        $grade['status'] = "A";
                        $grade['created_date'] = date('Y-m-d');

                        $this->_dbInsert($grade, 'table_grade');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    //Todo END: Sudhanshu: 06 sep 2023 : import grades File

    //Todo Start: Sudhanshu: 07 sep 2023 : import Retailer Group File
    function uploadRetailerGroup()

    {

        $fields = array('Group Name*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 1 && trim($arrFile[0]) == "Group Name*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || trim($arrFile[0]) == "Group Name*") {

                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Group Name*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $fields[0] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " LOWER(group_name)='" . mysql_escape_string(strtolower(preg_replace('/[^A-Za-z0-9" ".&]/', '', trim($arrFile[0])))) . "'";

                    $GradeRec = $this->_getSelectList2('table_retailer_group', "group_id", '', $condi);

                    if (is_array($GradeRec) && (count($GradeRec) > 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " , Group already exists. \n";

                        $str_err_array = array($strErr);

                    } else {

                        $grade = array();

                        $grade['account_id'] = mysql_escape_string($this->clean($_REQUEST['account_id']));

                        $grade['group_name'] = mysql_escape_string(preg_replace('/[^A-Za-z0-9" "&.]/', '', trim($arrFile[0])));
                        $grade['status'] = "A";
                        $grade['created_date'] = date('Y-m-d');

                        $this->_dbInsert($grade, 'table_retailer_group');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    //Todo END: Sudhanshu: 07 sep 2023 : import Retailer Group File


    //Todo Start: Sudhanshu: 07 sep 2023 : import Purpose of Visit File
    function uploadPurposeVisit()

    {

        $fields = array('Purpose of Visit*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || trim($arrFile[0]) == "Purpose of Visit*") {

                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Purpose of Visit*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $fields[0] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " LOWER(purpose)='" . mysql_escape_string(strtolower(preg_replace('/[^A-Za-z0-9" "]/', '', trim($arrFile[0])))) . "'";

                    $PurposeRec = $this->_getSelectList2('table_purpose_visit', "purpose_visit_id", '', $condi);

                    if (is_array($PurposeRec) && (count($PurposeRec) > 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " , Purpose of Visit already exists. \n";

                        $str_err_array = array($strErr);

                    } else {

                        $purpose = array();

                        $purpose['account_id'] = mysql_escape_string($this->clean($_REQUEST['account_id']));

                        $purpose['purpose'] = mysql_escape_string(preg_replace('/[^A-Za-z0-9" "]/', '', trim($arrFile[0])));
                        $purpose['status'] = "A";
                        $purpose['created_date'] = date('Y-m-d');

                        $this->_dbInsert($purpose, 'table_purpose_visit');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    //Todo Start: Sudhanshu: 13 OCt 2023 : import Survey and salesman mapping

    function uploadSurveySalesmanMapping()

    {

        $fields = array('Survey Code*', 'Salesman Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 2 && trim($arrFile[0]) == "Survey Code*" && trim($arrFile[1]) == "Salesman Code*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if (empty($arrFile[0]) && empty($arrFile[1])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Survey Code*" || (empty($arrFile[1]) || trim($arrFile[1]) == "Salesman Code*")) {

                        if (empty($arrFile[0]) || trim($arrFile[0]) == "Survey Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[0] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[0]) || trim($arrFile[0]) == "Salesman Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[1] . " shouldn't be empty  \n";

                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }
                    // check salesman

                    if ($flag) {

                        $employee_code = trim($arrFile[1]);

                        $condi = " employee_code='" . $employee_code . "' AND status = 'A'";

                        $salResult = $this->_getSelectList('table_salesman ', 'salesman_id', '', $condi);

                        if (!is_array($salResult) && empty($salResult)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Salesman doesn't exists in the system.\n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $salesman_id = $salResult[0]->salesman_id;

                        }

                    }

                    // check Survey
                    if ($flag) {

                        $survey = trim($arrFile[0]);

                        $condi = " LOWER(survey_code)='" . strtolower($survey) . "' AND status = 'A'";

                        $surResult = $this->_getSelectList('table_feedback_survey_master ', 'survey_id,is_all_employee', '', $condi);

                        if (!is_array($surResult) && empty($surResult)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Survey doesn't exists in the system.\n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $survey_id = $surResult[0]->survey_id;

                            $is_all_employee = $surResult[0]->is_all_employee;

                        }

                    }
                    //echo "<pre>";print_R($is_all_employee);
                    // Check is All Employee or not


                    //-------------------- /Surevey ------------

                    if ($flag) {

                        $condi = " survey_id='" . $survey_id . "' AND employee_id = '" . $salesman_id . "' ";

                        $salMappig = $this->_getSelectList2('table_survey_employee_type_mapping', "survey_id,employee_id,status", '', $condi);

                        if ($is_all_employee < 1 && !empty($salesman_id)) {

                            if (is_array($salMappig) && (count($salMappig) > 0)) {

                                if ($salMappig[0]->status == 'I') {
                                    $sur = $salMappig[0]->survey_id;
                                    $emp = $salMappig[0]->employee_id;
                                    $condi = " survey_id = '" . $survey_id . "' AND employee_id = '" . $emp . "'";
                                    $cid = $this->_dbUpdate2(array("status" => 'A', "updated_on" => date('Y-m-d H:i:s'), "updated_by" => $_SESSION['PepUpSalesUserId']), 'table_survey_employee_type_mapping', $condi);
                                }

                            } else {

                                $data = array();


                                $data['survey_id'] = $survey_id;
                                $data['employee_id'] = $salesman_id;
                                $data['created_at'] = date('Y-m-d H:i:s');
                                $data['created_by'] = $_SESSION['PepUpSalesUserId'];
                                $data['status'] = "A";

                                $mid = $this->_dbInsert($data, 'table_survey_employee_type_mapping');


                            }

                            $condi = " survey_id = '" . $survey_id . "'";

                            $cid = $this->_dbUpdate2(array("is_all_employee" => 0, "updated_on" => date('Y-m-d H:i:s'), "updated_by" => $_SESSION['PepUpSalesUserId']), 'table_feedback_survey_master', $condi);

                        } else {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $this->AliaseUsers['salesman'] . " Survey Mapping Already Exist.\n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }
                    }


                }
            }

            $row++;

        }

        //die;

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    //Todo Start: Sudhanshu: 13 OCt 2023 :  Survey and salesman mapping Update

    function uploadSurveySalesmanMappingUpdate()

    {

        $fields = array('Survey Code*', 'Salesman Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $inActArr = array();
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 2 && trim($arrFile[0]) == "Survey Code*" && trim($arrFile[1]) == "Salesman Code*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || trim($arrFile[0]) == "Survey Code*" || (empty($arrFile[1]) || trim($arrFile[1]) == "Salesman Code*")) {

                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Survey Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[0] . " shouldn't be empty  \n";

                    }
                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Salesman Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[1] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }
                // check salesman existence

                if ($flag) {

                    $employee_code = trim($arrFile[1]);

                    $condi = " employee_code='" . $employee_code . "' AND status = 'A'";

                    $salResult = $this->_getSelectList('table_salesman ', 'salesman_id', '', $condi);

                    if (!is_array($salResult) && empty($salResult)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Salesman doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $salesman_id = $salResult[0]->salesman_id;

                    }

                }
                // End salesman existence

                // check Survey existence
                if ($flag) {

                    $survey = trim($arrFile[0]);

                    $condi = " LOWER(survey_code)='" . strtolower($survey) . "' AND status = 'A'";

                    $surResult = $this->_getSelectList('table_feedback_survey_master ', 'survey_id', '', $condi);

                    if (!is_array($surResult) && empty($surResult)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Survey doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $survey_id = $surResult[0]->survey_id;

                    }

                }
                // End Surevey existence

                if ($flag) {

                    $condi = " survey_id='" . $survey_id . "' AND employee_id = '" . $salesman_id . "' ";

                    $salMappig = $this->_getSelectList2('table_survey_employee_type_mapping', "survey_id,employee_id", '', $condi);

                    if (is_array($salMappig) && (count($salMappig) > 0)) {

                        $cond = "  survey_id = " . $survey_id . " AND employee_id = " . $salMappig[0]->employee_id . " ";

                        $cid = $this->_dbUpdate2(array("status" => 'A', "updated_on" => date('Y-m-d H:i:s'), "updated_by" => $_SESSION['PepUpSalesUserId']), 'table_survey_employee_type_mapping', $cond);

                        $inActArr[$survey_id][] = $salesman_id;

                    } else {

                        $data = array();

                        $inActArr[$survey_id][] = $salesman_id;

                        $data['survey_id'] = $survey_id;
                        $data['employee_id'] = $salesman_id;
                        $data['created_at'] = date('Y-m-d H:i:s');
                        $data['created_by'] = $_SESSION['PepUpSalesUserId'];
                        $data['status'] = "A";

                        $this->_dbInsert($data, 'table_survey_employee_type_mapping');

                    }

                    $condi = " survey_id = '" . $survey_id . "'";

                    $cid = $this->_dbUpdate2(array("is_all_employee" => 0, "updated_on" => date('Y-m-d H:i:s'), "updated_by" => $_SESSION['PepUpSalesUserId']), 'table_feedback_survey_master', $condi);
                }

            }

            $row++;

        }

        fclose($file);

        //--- inactive mapping
        if (is_array($inActArr) && count($inActArr) > 0) {


            foreach ($inActArr as $key => $val) {

                $empIds = implode(',', $val);
                $condi = " survey_id = '" . $key . "' AND employee_id NOT IN(" . $empIds . ")";

                $cid = $this->_dbUpdate2(array("status" => "I", "updated_on" => date('Y-m-d H:i:s'), "updated_by" => $_SESSION['PepUpSalesUserId']), 'table_survey_employee_type_mapping', $condi);
            }


        }
        //------------------------

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }


    //Todo Start: Sudhanshu: 24 OCt 2023 : import Batch master

    function batchCodeGenrator()
    {

        $batchCode = rand(100000, 999999);

        $auBatch = $this->_getSelectList('table_color', 'color_code', '', '');

        $batch_code = array();

        foreach ($auBatch as $code) {
            $batch_code[] = $code->color_code;
        }

        while (in_array($batchCode, $batch_code)) {
            $batchCode = rand(100000, 999999);

        }
        return $batchCode;

    }

    function uploadBatch()

    {

        $fields = array('Batch Code', 'Batch Number*', 'MFG Date', 'Expiry Date');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {

                if (count($arrFile) == 4 && trim($arrFile[0]) == "Batch Code" && trim($arrFile[1]) == "Batch Number*" && trim($arrFile[2]) == "MFG Date (dd-mm-yyyy)" && trim($arrFile[3]) == "Expiry Date (dd-mm-yyyy)") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty($arrFile[1]) || trim($arrFile[1]) == "Batch Number*") {

                    if (empty($arrFile[1]) || trim($arrFile[1]) == "Batch Number*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . ", " . $arrFile[3] . ", " . $fields[1] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    if (trim($arrFile[0]) != '') {

                        $condi = " LOWER(color_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "'";

                        $chkCode = $this->_getSelectList('table_color', "color_code", '', $condi);

                        if (is_array($chkCode) && (count($chkCode) > 0)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . ", Batch code already exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $batchCode = trim($arrFile[0]);
                        }

                    } else {

                        $batchCode = $this->batchCodeGenrator();
                    }

                }

                /// validate mfg date and exp date

                if ($flag) {

                    if (trim($arrFile[2]) != '') {

                        $mDate = $arrFile[2];

                        if (strtotime($mDate) !== false) {

                            $mfgDate = date('Y-m-d', strtotime($mDate));

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . " ," . ", invlid MFG date format. \n";

                            $str_err_array = array($strErr);

                            $flag = false;


                        }


                    } else {
                        $mfgDate = '0000-00-00';
                    }

                    if (trim($arrFile[3]) != '') {

                        $exDate = $arrFile[3];

                        if (strtotime($exDate) !== false) {

                            $expDate = date('Y-m-d', strtotime($exDate));

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . " ," . ", invlid expiry date format. \n";

                            $str_err_array = array($strErr);

                            $flag = false;


                        }

                    } else {
                        $expDate = '0000-00-00';
                    }
                }

                if ($flag) {

                    if ($expDate != '0000-00-00' && $mfgDate != '0000-00-00') {
                        if ($expDate <= $mfgDate) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . ", Expiry date can not be less than or equal to MFG date. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }
                    }

                }

                if ($flag) {

                    $batch = array();

                    $batch['account_id'] = mysql_escape_string($this->clean($_REQUEST['account_id']));

                    $batch['color_code'] = $batchCode;
                    $batch['color_desc'] = mysql_escape_string(trim($arrFile[1]));
                    $batch['mfg_date'] = $mfgDate;
                    $batch['expiry_date'] = $expDate;
                    $batch['status'] = "A";
                    $batch['created_date'] = date('Y-m-d h:i:s');
                    $batch['last_update_date'] = date('Y-m-d');

                    $this->_dbInsert($batch, 'table_color');

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    //Todo End: Sudhanshu: 24 OCt 2023 : import Batch master

    //Todo Start: Sudhanshu: 12 Oct 2023 : import Retailer class

    function uploadRelationshp()

    {

        $fields = array('Retailer Class*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 1 && trim($arrFile[0]) == "Retailer Class*") {
                    $flag2 = true;


                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || trim($arrFile[0]) == "Retailer Class*") {

                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Retailer Class*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . "," . $fields[0] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " LOWER(relationship_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "'";

                    $relRec = $this->_getSelectList2('table_relationship', "relationship_id", '', $condi);

                    if (is_array($relRec) && (count($relRec) > 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " , " . $arrFile[1] . " , Retailer Class already exists in the system. \n";

                        $str_err_array = array($strErr);

                    } else {

                        $data = array();

                        $data['account_id'] = mysql_escape_string($this->clean($_REQUEST['account_id']));

                        $data['relationship_code'] = mysql_escape_string(trim($arrFile[0]));
                        // $data['relationship_desc'] = mysql_escape_string(trim($arrFile[1]));
                        $data['last_update_date'] = date('Y-m-d');
                        $data['last_update_status'] = 'New';
                        $data['status'] = 'A';

                        $this->_dbInsert($data, 'table_relationship');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    //Todo END: Sudhanshu: 12 Oct 2023 : import Retailer Class


    //Todo Start: Sudhanshu: 12 OCt 2023 : import Retailer channel

    function uploadRetailerChannel()

    {

        $fields = array('Retailer Channel*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 1 && trim($arrFile[0]) == "Retailer Channel*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || trim($arrFile[0]) == "Retailer Channel*") {

                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Retailer Channele*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $fields[0] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " LOWER(channel_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "'";

                    $GradeRec = $this->_getSelectList2('table_retailer_channel_master', "channel_id", '', $condi);

                    if (is_array($GradeRec) && (count($GradeRec) > 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " , Retailer channel already exists. \n";

                        $str_err_array = array($strErr);

                    } else {

                        $grade = array();

                        $grade['account_id'] = mysql_escape_string($this->clean($_REQUEST['account_id']));

                        $grade['channel_name'] = mysql_escape_string(trim($arrFile[0]));
                        $grade['status'] = "A";
                        $grade['create_date'] = date('Y-m-d');

                        $this->_dbInsert($grade, 'table_retailer_channel_master');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    //Todo End: Sudhanshu: 12 OCt 2023 : import Retailer channel

    //Todo Start: Sudhanshu: 12 OCt 2023 : import Retailer channel

    function uploadRetailerType()

    {

        $fields = array('Retailer Channel*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 1 && trim($arrFile[0]) == "Retailer Type*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || trim($arrFile[0]) == "Retailer Type*") {

                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Retailer Type*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $fields[0] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " LOWER(type_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "'";

                    $GradeRec = $this->_getSelectList2('table_retailer_type_master', "type_id", '', $condi);

                    if (is_array($GradeRec) && (count($GradeRec) > 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . " , Retailer type already exists. \n";

                        $str_err_array = array($strErr);

                    } else {

                        $grade = array();

                        $grade['account_id'] = mysql_escape_string($this->clean($_REQUEST['account_id']));

                        $grade['type_name'] = mysql_escape_string(trim($arrFile[0]));
                        $grade['status'] = "A";
                        $grade['create_date'] = date('Y-m-d');

                        $this->_dbInsert($grade, 'table_retailer_type_master');

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    //Todo End: Sudhanshu: 12 OCt 2023 : import Retailer channel

    //Todo Start: Sudhanshu: 24 OCt 2023 : import Batch master

    function uploadItemBatchMapping()

    {

        $fields = array('Batch Code*', 'Item Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 2 && trim($arrFile[0]) == "Batch Code*" && trim($arrFile[1]) == "Item Code*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || trim($arrFile[0]) == "Batch Code*" || (empty($arrFile[1]) || trim($arrFile[1]) == "Item Code*")) {

                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Batch Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[0] . " shouldn't be empty  \n";

                    }
                    if (empty($arrFile[1]) || trim($arrFile[1]) == "Item Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[1] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // check bach existence

                if ($flag) {

                    $batchCode = trim($arrFile[0]);

                    $condi = " color_code='" . $batchCode . "' AND status = 'A'";

                    $batchResult = $this->_getSelectList('table_color ', 'color_id', '', $condi);

                    if (!is_array($batchResult) && empty($batchResult)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Batch code doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $batch_id = $batchResult[0]->color_id;

                    }

                }
                // End batch existence

                // check item existence
                if ($flag) {

                    $itemCode = trim($arrFile[1]);

                    $condi = " LOWER(item_code)='" . strtolower($itemCode) . "' AND status = 'A'";

                    $auItem = $this->_getSelectList('table_item ', 'item_id', '', $condi);

                    if (!is_array($auItem) && empty($auItem)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Item code doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $item_id = $auItem[0]->item_id;

                    }

                }
                // End item existence

                if ($flag) {

                    $condi = " color_id ='" . $batch_id . "' AND item_id = '" . $item_id . "' ";

                    $itemMappig = $this->_getSelectList('table_item_color', "color_id,item_id", '', $condi);

                    if (is_array($itemMappig) && (count($itemMappig) > 0)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Mapping already exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $data = array();

                        $data['color_id'] = $batch_id;
                        $data['account_id'] = $_REQUEST['account_id'];
                        $data['item_id'] = $item_id;
                        $data['created_on'] = date('Y-m-d h:i:s');
                        $data['updated_on'] = date('Y-m-d h:i:s');
                        $data['updated_by'] = $_SESSION['PepUpSalesUserId'];
                        $data['status'] = 'A';

                        $this->_dbInsert($data, 'table_item_color');

                    }


                }


            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    //Todo End: Sudhanshu: 24 OCt 2023 : import Batch master

    /************************************* Start Upload Retailer ***************************************/

    function uploadRetailerUpdateFile()

    {

//        $fields = array('Retailer Name*', 'Phone No1*', 'Phone No2', 'Retailer Address', 'Retailer Market*', 'State*', 'District*', 'City*', 'Zipcode', 'Contact Person1*', 'contact Phone No1*', 'Contact Person2', 'Contact Phone No2', 'Email-ID1*', 'Email-ID2', 'Retailer Class', 'Route Name', 'Retailer Channel', 'Distributor Code*', 'Display Outlet', 'Retailer Type', 'Username', 'Password', 'GST Number', 'PAN Number', 'Retailer Code', 'Aadhar Number');
        $fields = array($this->AliaseUsers['retailer'] . ' Code*', $this->AliaseUsers['retailer'] . ' Name', 'Phone No1', 'Phone No2', 'State', 'District', 'City', $this->AliaseUsers['retailer'] . ' Market', 'Zipcode', $this->AliaseUsers['retailer'] . ' Address', $this->AliaseUsers['retailer'] . ' Class', $this->AliaseUsers['retailer'] . ' Channel', $this->AliaseUsers['retailer'] . ' Type', 'GST Number', 'PAN Number', 'Aadhar Number', 'Display Outlet', 'Contact Person1', 'contact Phone No1', 'Email-ID1', 'Contact Person2', 'Contact Phone No2', 'Email-ID2', $this->AliaseUsers['distributor'] . ' Code', 'Group Name', 'Username', 'Password');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0])) {

                    if (empty($arrFile[1])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // check retailer code

                $retCode = mysql_escape_string(trim($arrFile[0]));

                if ($retCode != "") {

                    if ($flag) {

                        $condi = " LOWER(retailer_code)='" . strtolower($retCode) . "' ";

                        $retRec = $this->_getSelectList('table_retailer', 'retailer_id,status,address_id', '', $condi);

                        if (is_array($retRec) && (count($retRec) > 0)) {

                            if ($retRec[0]->status == 'I') {
                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , " . $this->AliaseUsers('retailer') . " status is inactive. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            } else {
                                $retailer_id = $retRec[0]->retailer_id;
                                //Todo Start : Sudhanshu get address id for update mapping data also chage in query
                                $address_id = $retRec[0]->address_id;
                                //Todo End :  Sudhanshu get address id for update mapping data also chage in query

                            }


                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . "  does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }


                if ($flag) {

                    if (isset($arrFile[24]) && !empty(trim($arrFile[24]))) {

                        if ($this->getAccountRec() <= 0) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , You have exceeded the maximum limit of active users \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                            echo $retailer_id;
                        }

                    }

                }

                /*  For channel id */

                $relChannel = mysql_escape_string(trim($arrFile[11]));

                if ($relChannel != "") {

                    if ($flag) {

                        $condi = " LOWER(channel_name)='" . strtolower($relChannel) . "' AND status = 'A'";

                        $aRetRec = $this->_getSelectList('table_retailer_channel_master', 'channel_id', '', $condi);

                        if (is_array($aRetRec) && (count($aRetRec) > 0)) {

                            $channel = $aRetRec[0]->channel_id;

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . " Channel does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

//
                        }

                    }

                }

                /* for retailer  group */
                $relGroup = mysql_escape_string(trim($arrFile[24]));

                if ($relGroup != "") {

                    if ($flag) {

                        $condi = " LOWER(group_name)='" . strtolower($relGroup) . "' AND status = 'A'";

                        $aGrRec = $this->_getSelectList('table_retailer_group', 'group_id', '', $condi);

                        if (is_array($aGrRec) && (count($aGrRec) > 0)) {

                            $groupId = $aGrRec[0]->group_id;

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . " Group does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;


                        }

                    }

                }
                /*  For Retailer  type id */

                $relType = mysql_escape_string(trim($arrFile[12]));

                if ($relType != "") {

                    if ($flag) {

                        $condi = " LOWER(type_name)='" . strtolower($relType) . "' AND status = 'A'";

                        $aRetRec = $this->_getSelectList('table_retailer_type_master', 'type_id', '', $condi);

                        if (is_array($aRetRec) && (count($aRetRec) > 0)) {

                            $typeval = $aRetRec[0]->type_id;

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . " Type does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;


                        }

                    }

                }

                /*  For distributor id */

                $disCode = mysql_escape_string(trim($arrFile[23]));

                if ($disCode != "") {

                    if ($flag) {

                        $condi = " LOWER(distributor_code)='" . strtolower($disCode) . "' AND status = 'A'";

                        $aRetRec = $this->_getSelectList('table_distributors', 'distributor_id', '', $condi);

                        if (!is_array($aRetRec)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " ,  " . $this->AliaseUsers('distributor') . " code does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $distributor = $aRetRec[0]->distributor_id;

                        }

                    }

                }

                $relCode = mysql_escape_string(trim($arrFile[10]));

                if (!empty($relCode)) {

                    if ($flag) {

                        $condi = " LOWER(relationship_code)='" . strtolower($relCode) . "' AND status = 'A'";

                        $aRetRec = $this->_getSelectList('table_relationship', 'relationship_id', '', $condi);

                        if (!is_array($aRetRec)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . " Class does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $relationship_id = $aRetRec[0]->relationship_id;

                        }

                    }

                }
                if (trim($arrFile[4]) != '') {

                    if (trim($arrFile[5]) != '' && trim($arrFile[6]) != '') {

                        if ($flag) {

                            // Get State ID with the help of State Name

                            $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower($arrFile[4])) . "' AND status = 'A'";

                            $StateRec = $this->_getSelectList2('state', "state_id,country_id", '', $condi);

                            if (is_array($StateRec) && (count($StateRec) > 0)) {

                                $state_id = $StateRec[0]->state_id;

                                $country_id = $StateRec[0]->country_id;

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , State does not exists. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        }
                    } else {
                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Please enter complete geography. \n";

                        $str_err_array = array($strErr);

                        $flag = false;
                    }

                }

                if (trim($arrFile[5]) != '') {

                    if (trim($arrFile[4]) != '' && trim($arrFile[6]) != '') {
                        if ($flag) {

                            $condi = " LOWER(city_name)='" . mysql_escape_string($this->clean(strtolower($arrFile[5]))) . "' AND state_id='" . $state_id . "' AND status = 'A'";

                            $CityRec = $this->_getSelectList2('city', "city_id", '', $condi);

                            if (is_array($CityRec) && (count($CityRec) > 0)) {

                                $city_id = $CityRec[0]->city_id;

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , District does not exists. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        }
                    } else {
                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Please enter complete geography. \n";

                        $str_err_array = array($strErr);

                        $flag = false;
                    }
                }
                if (trim($arrFile[6]) != '') {

                    if (trim($arrFile[4]) != '' && trim($arrFile[5]) != '') {
                        if ($flag) {

                            $condi = " LOWER(location_name)='" . mysql_escape_string($this->clean(strtolower($arrFile[6]))) .
                                "' AND state_id='" . $state_id . "' AND city_id='" . $city_id . "' AND status = 'A' ";

                            $locRec = $this->_getSelectList2('table_location', "location_id", '', $condi);

                            if (is_array($locRec) && (count($locRec) > 0)) {

                                $location_id = $locRec[0]->location_id;

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , City does not exists. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        }
                    } else {
                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Please enter complete geography. \n";

                        $str_err_array = array($strErr);

                        $flag = false;
                    }
                }

                if (trim($arrFile[2]) != '') {
                    if ($flag) {

                        $phnNo = trim($arrFile[2]);

                        $pattern = "/^[0-9+\-]*$/";

                        if (!preg_match($pattern, $phnNo)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Please Provide the valid Phone Number. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }
                }


                if ($flag) {

                    $where = " o.account_id=" . $_SESSION['accountId'];
                    $StRec = $this->_getSelectList2('table_account as o
                left join country c on o.country_id=c.country_id ',
                        'c.contact_max_length,c.contact_min_length', '', $where);

                    if (is_array($StRec) && (count($StRec) > 0)) {
                        $cnt_1 = strlen($arrFile[2]);
                        $cnt_2 = strlen($arrFile[3]);
                        $cnt_3 = strlen($arrFile[18]);
                        $cnt_4 = strlen($arrFile[21]);
                        if (!empty($arrFile[2])) {
                            if ($cnt_1 >= $StRec[0]->contact_min_length && $cnt_1 <=
                                $StRec[0]->contact_max_length) {
                                $phone_no = $arrFile[2];

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[2] . " \n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        }

                        if (!empty($arrFile[3])) {
                            if ($cnt_2 >= $StRec[0]->contact_min_length && $cnt_2 <=
                                $StRec[0]->contact_max_length) {
                                $phone_no1 = $arrFile[3];

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[3] . "\n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        }

                        if (!empty(trim($arrFile[18]))) {
                            if ($cnt_3 >= $StRec[0]->contact_min_length && $cnt_3 <=
                                $StRec[0]->contact_max_length) {
                                $phone_no2 = $arrFile[18];

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[18] . "\n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        }
                        if (!empty($arrFile[21])) {
                            if ($cnt_4 >= $StRec[0]->contact_min_length && $cnt_4 <=
                                $StRec[0]->contact_max_length) {
                                $phone_no3 = $arrFile[21];
                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[21] . " \n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        }
                    }
                }

                //Todo Start : sudahnshu 27 march 2024 : username password validation

                if ($flag) {

                    if ((isset($arrFile[25]) && !empty($arrFile[25])) && (empty($arrFile[26]))) {

                        $strErr .= "Error in Row - " . $row;
                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Password can't be blank \n";

                        $str_err_array = array($strErr);

                        $flag = false;


                    }

                }
                if ($flag) {

                    if ((isset($arrFile[26]) && !empty($arrFile[26])) && (empty($arrFile[25]))) {

                        $strErr .= "Error in Row - " . $row;
                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Username can't be blank \n";
                        $str_err_array = array($strErr);

                        $flag = false;


                    }

                }

                if ($flag) {
                    if ((isset($arrFile[25]) && !empty(trim($arrFile[25]))) && (isset($arrFile[26]) && !empty(trim($arrFile[26])))) {
                        $condi = " LOWER(username)='" . strtolower(trim($arrFile[25])) . "' AND retailer_id<>'" . $retailer_id . "'";
                        $aDisCode = $this->_getSelectList2('table_web_users', '*', '', $condi);

                        if (is_array($aDisCode) && count($aDisCode) > 0) {
                            $strErr .= "Error in Row - " . $row;
                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Username already exists \n";
                            $str_err_array = array($strErr);

                            $flag = false;


                        }

                    }
                }

                if ($flag) {
                    if ((isset($arrFile[25]) && !empty(trim($arrFile[25]))) && (isset($arrFile[26]) && !empty(trim($arrFile[26])))) {
                        $condi = " LOWER(username)='" . strtolower(trim($arrFile[25])) . "' AND retailer_id='" . $reatiler_id . "'";
                        $aDisCode = $this->_getSelectList2('table_web_users', '*', '', $condi);

                        if (is_array($aDisCode) && count($aDisCode) > 0) {
                            $web_user_status = $aDisCode[0]->status;

                            if ($web_user_status == 'I') {

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }
                                $strErr .= " , Username Inactive \n";
                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                        }

                    }
                }

                //Todo End : sudahnshu 27 march 2024 : username password validation

                /* display out */

                if (mysql_escape_string(trim(strtolower($arrFile[16]))) == 'yes') {

                    $outlet = 'Y';

                } else if (mysql_escape_string(trim(strtolower($arrFile[16]))) == 'no') {

                    $outlet = 'N';

                }

                if ($flag) {
                    $_objAdmin = new Admin();
                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);


                    if (trim($arrFile[1]) != '') {
                        $data['retailer_name'] = mysql_escape_string($this->clean(trim($arrFile[1])));
                    }
                    if (trim($arrFile[2]) != '') {
                        $data['retailer_phone_no'] = mysql_escape_string(trim($phone_no));
                    }

                    if (trim($arrFile[3]) != '') {
                        $data['retailer_phone_no2'] = mysql_escape_string($this->clean($phone_no1));
                    }
                    if (trim($arrFile[4]) != '') {
                        $data['country'] = $country_id;
                        $data['state'] = $this->clean($state_id);
                    }
                    if (trim($arrFile[5]) != '') {
                        $data['city'] = $this->clean($city_id);
                    }
                    if (trim($arrFile[6]) != '') {
                        $data['location_id'] = trim($location_id);
                    }
                    if (trim($arrFile[7]) != '') {
                        $data['retailer_location'] = mysql_escape_string($this->clean(trim($arrFile[7])));
                    }
                    if (trim($arrFile[8]) != '') {
                        $data['zipcode'] = mysql_escape_string($this->clean(trim($arrFile[8])));
                    }
                    if (trim($arrFile[9]) != '') {
                        $data['retailer_address'] = mysql_escape_string(trim(trim($arrFile[9])));
                    }


                    if (trim($arrFile[10]) != '') {
                        $data['relationship_id'] = $relationship_id;
                    }
                    if (trim($arrFile[11]) != '') {
                        $data['channel_id'] = mysql_escape_string($channel);
                    }
                    if (trim($arrFile[12]) != '') {
                        $data['type_id'] = mysql_escape_string($typeval);
                    }
                    if (trim($arrFile[13]) != '') {
                        $data['gst_no'] = mysql_escape_string($this->clean(trim($arrFile[13])));
                    }
                    if (trim($arrFile[14]) != '') {
                        $data['pan_no'] = mysql_escape_string($_objAdmin->validateForm('/[^A-Za-z0-9]/', trim($arrFile[14])));
                    }
                    if (trim($arrFile[15]) != '') {
                        $data['aadhar_no'] = mysql_escape_string($_objAdmin->validateForm('/[^0-9]/', trim($arrFile[15])));
                    }

                    if (trim($arrFile[16]) != '') {
                        $data['display_outlet'] = mysql_escape_string($outlet);
                    }
                    if (trim($arrFile[17]) != '') {
                        $data['contact_person'] = mysql_escape_string($this->clean(trim($arrFile[17])));
                    }


                    if (trim($arrFile[18]) != '') {
                        $data['contact_number'] = mysql_escape_string($this->clean($phone_no2));
                    }

                    if (trim($arrFile[19]) != '') {
                        $data['retailer_email'] = mysql_escape_string(trim(trim($arrFile[19])));
                    }

                    if (trim($arrFile[20]) != '') {
                        $data['contact_person2'] = mysql_escape_string($this->clean(trim($arrFile[20])));
                    }

                    if (trim($arrFile[21]) != '') {
                        $data['contact_number2'] = mysql_escape_string($this->clean($phone_no3));
                    }

                    if (trim($arrFile[22]) != '') {
                        $data['retailer_email2'] = mysql_escape_string(trim(trim($arrFile[22])));
                    }

                    if (trim($arrFile[23]) != '') {
                        $data['distributor_id'] = mysql_escape_string($distributor);
                    }


                    if (trim($arrFile[24]) != '') {
                        $data['group_id'] = $groupId;
                    }


                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'Update';


                    $this->_dbUpdate($data, 'table_retailer', " retailer_id=" . $retailer_id);


                    //  if (trim($arrFile[24]) != '' ) {

                    //      $data2['password'] = md5($arrFile[24]);

                    //    //  $userId = $this->_dbInsert($data2, 'table_web_users');
                    //    $this->_dbUpdate($data2, 'table_web_users', " retailer_id=" . $retailer_id);
                    //      /* add for table_retailer_app_user*/

                    //      $data3['password'] = $arrFile[24];


                    //      $this->_dbUpdate($data3, 'table_retailer_app_user', " retailer_id=" . $retailer_id);
                    //      //$retId = $this->_dbInsert($data3, 'table_retailer_app_user');

                    //  }


                    //Todo Start : sudhanshu 15 may 2024 : add multiple address

                    if (trim($arrFile[9]) != '') {
                        $auAddr = $this->_getSelectList('table_retailer_address', "address_id", '', "   address_id = '" . $address_id . "'");
                        if (is_array($auAddr) && (count($auAddr) > 0)) {
                            $addData['address'] = trim($arrFile[9]);
                            $addData['zipcode'] = mysql_escape_string($this->clean(trim($arrFile[8])));
                            $addData['updated_at'] = date('Y-m-d H:i:s');
                            $this->_dbUpdate($addData, 'table_retailer_address', " address_id=" . $address_id);
                        } else {
                            $addr['retailer_id'] = $retailer_id;
                            $addr['account_id'] = $_SESSION['accountId'];
                            $addr['address'] = trim($arrFile[9]);
                            $addData['zipcode'] = mysql_escape_string($this->clean(trim($arrFile[8])));
                            $addr['status'] = 'A';
                            $addr['created_at'] = date('Y-m-d H:i:s');
                            $addr['updated_at'] = date('Y-m-d H:i:s');
                            $adrId = $this->_dbInsert($addr, 'table_retailer_address');

                            $addr2['address_id'] = $adrId;
                            $this->_dbUpdate($addr2, 'table_retailer', " retailer_id = " . $retailer_id);
                        }
                    } else {

                        $this->mysql_query("DELETE FROM table_retailer_address WHERE address_id = $address_id  ");

                    }

                    //Todo End : sudhanshu 15 may 2024 : add multiple address

                    //Todo Start : Sudhanshu 27 march 2024 add coulm username and password
                    if ((isset($arrFile[25]) && !empty(trim($arrFile[25]))) && (isset($arrFile[26]) && !empty(trim($arrFile[26])))) {
                        $condi = " retailer_id='" . $retailer_id . "' AND status = 'A'";
                        $aDisCode = $this->_getSelectList2('table_web_users', '*', '', $condi);

                        if (is_array($aDisCode) && count($aDisCode) > 0) {
                            $disLogin = [];

                            $web_user_id = $aDisCode[0]->web_user_id;

                            $disLogin['username'] = trim($arrFile[25]);

                            $disLogin['password'] = md5($arrFile[26]);


                            $disLogin['retailer_id'] = $retailer_id;


                            $this->_dbUpdate($disLogin, 'table_web_users', " web_user_id=" . $web_user_id);

                        } else {

                            $disLogin = [];

                            $disLogin['account_id'] = $_SESSION['accountId'];

                            $disLogin['username'] = trim($arrFile[25]);

                            $disLogin['password'] = md5($arrFile[26]);


                            $disLogin['retailer_id'] = $retailer_id;

                            $disLogin['user_type'] = 4;

                            $disLogin['start_date'] = $_SESSION['StartDate'];

                            //$disLogin['end_date'] = $_SESSION['EndDate']; //commented by sachin as per dhavika's request

                            $disLogin['status'] = 'A';

                            $this->_dbInsert($disLogin, 'table_web_users');

                        }


                    }

                    //Todo End : Sudhanshu 27 march 2024 add coulm username and password
                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /************************************* End Upload Retailer ***************************************/

//Todo End: Sudhanshu: 24 OCt 2023 : import Batch master

    // geeta code

    function uploadRetailerStatusUpdateFile()

    {

//        $fields = array('Retailer Name*', 'Phone No1*', 'Phone No2', 'Retailer Address', 'Retailer Market*', 'State*', 'District*', 'City*', 'Zipcode', 'Contact Person1*', 'contact Phone No1*', 'Contact Person2', 'Contact Phone No2', 'Email-ID1*', 'Email-ID2', 'Retailer Class', 'Route Name', 'Retailer Channel', 'Distributor Code*', 'Display Outlet', 'Retailer Type', 'Username', 'Password', 'GST Number', 'PAN Number', 'Retailer Code', 'Aadhar Number');
        $fields = array($this->AliaseUsers['retailer'] . ' Code*', 'Retailer Status');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0])) {

                    if (empty($arrFile[1])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // check retailer code

                $retCode = mysql_escape_string(trim($arrFile[0]));

                if ($retCode != "") {

                    if ($flag) {

                        $condi = " LOWER(retailer_code)='" . strtolower($retCode) . "' ";

                        $retRec = $this->_getSelectList('table_retailer', 'retailer_id,status,address_id', '', $condi);

                        if (is_array($retRec) && (count($retRec) > 0)) {

                            if ($retRec[0]->status == $arrFile[1]) {
                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }
                                if($arrFile[1]=='A'){
                                    $astatus='Active';
                                }else{
                                    $astatus='Inactive';
                                }

                                $strErr .= " , " . $this->AliaseUsers('retailer') . " status is already $astatus \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            } else {
                                $retailer_id = $retRec[0]->retailer_id;
                               
                            }


                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . "  does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }


                if ($flag) {

                    if (isset($arrFile[24]) && !empty(trim($arrFile[24]))) {

                        if ($this->getAccountRec() <= 0) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , You have exceeded the maximum limit of active users \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                            echo $retailer_id;
                        }

                    }

                }

             
               

                if ($flag) {
                    $_objAdmin = new Admin();
                    $data = array();

                    
                //    if (trim($arrFile[1]) != '') {
                  //      $data['retailer_name'] = mysql_escape_string($this->clean(trim($arrFile[1])));
                    //}
                    if (trim($arrFile[1]) != '') {
                        $data['status'] = mysql_escape_string(trim($arrFile[1]));
                   }



                    $data['last_update_date'] = date('Y-m-d');

                    $data['last_update_status'] = 'Update';


                    $this->_dbUpdate($data, 'table_retailer', " retailer_id=" . $retailer_id);


                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    
    function uploadschemeretailerFile($id)

    {
        $conditn = "  discount_id='" . $id . "' and retailer_id!='0'";

        $retRectr = $this->_getSelectList2('table_discount_party', 'retailer_id', '', $conditn);
        $retailer_exist_array=array();
        if(is_array($retRectr)){
		for($i=0;$i<count($retRectr);$i++){
            $retailer_exist_array[]=$retRectr[$i]->retailer_id;
        }
    }

 
        //echo $id; die;
//        $fields = array('Retailer Name*', 'Phone No1*', 'Phone No2', 'Retailer Address', 'Retailer Market*', 'State*', 'District*', 'City*', 'Zipcode', 'Contact Person1*', 'contact Phone No1*', 'Contact Person2', 'Contact Phone No2', 'Email-ID1*', 'Email-ID2', 'Retailer Class', 'Route Name', 'Retailer Channel', 'Distributor Code*', 'Display Outlet', 'Retailer Type', 'Username', 'Password', 'GST Number', 'PAN Number', 'Retailer Code', 'Aadhar Number');
        $fields = array($this->AliaseUsers['retailer'] . ' Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        // echo count($arrFile[0]); die;
        $strErr = "";

        $row = 0;
        $retailerarray=array();
        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {
           
            $arrFile = fgetcsv($file);
           
            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0])) {

                    if (empty($arrFile[1])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " shouldn't be empty. <br />";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // check retailer code

                $retCode = mysql_escape_string(trim($arrFile[0]));

                if ($retCode != "") {
                   

                    if ($flag) {

                        $condi = " LOWER(retailer_code)='" . strtolower($retCode) . "' ";

                        $retRec = $this->_getSelectList('table_retailer', 'retailer_id,status,retailer_name', '', $condi);

                        if (is_array($retRec) && (count($retRec) > 0)) {

                            if ($retRec[0]->status != 'A') {
                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }
                               

                                $strErr .= " , " . $this->AliaseUsers('retailer') . "  is not Active \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            } else {

                                if(!in_array($retRec[0]->retailer_id,$retailer_exist_array) && $retRec[0]->retailer_id>0)
                                {

                                $retailer_id = $retRec[0]->retailer_id;
                                $_objAdmin = new Admin();
                                $data = array();
            
                          
                                    $data['retailer_id'] = $retailer_id;
                               
            
            
                                $data['discount_id'] = $id;
            
                                
                                $scheme_id = $this->_dbInsert($data, 'table_discount_party');
                                $retailerarray[]=$retRec[0]->retailer_id.'('.$retRec[0]->retailer_name.')';
                            }else{
                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }
                               

                                $strErr .= " , " . $this->AliaseUsers('retailer') . "  is already mapped \n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                          
                            }


                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . "  does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

               

                if ($flag) { 
                   
                //    $condi = " LOWER(retailer_code)='" . strtolower($retCode) . "' ";

               //     $retRec = $this->_getSelectList('table_retailer', 'retailer_id,status,retailer_name', '', $condi);


              



                }

            }

            $row++;

        }

     

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    function retailerStatusUpdateFile($id)

    {
        //echo $id; die;
//        $fields = array('Retailer Name*', 'Phone No1*', 'Phone No2', 'Retailer Address', 'Retailer Market*', 'State*', 'District*', 'City*', 'Zipcode', 'Contact Person1*', 'contact Phone No1*', 'Contact Person2', 'Contact Phone No2', 'Email-ID1*', 'Email-ID2', 'Retailer Class', 'Route Name', 'Retailer Channel', 'Distributor Code*', 'Display Outlet', 'Retailer Type', 'Username', 'Password', 'GST Number', 'PAN Number', 'Retailer Code', 'Aadhar Number');
        $fields = array($this->AliaseUsers['retailer'] . ' Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;
        $retailerarray=array();
        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0])) {

                    if (empty($arrFile[1])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " shouldn't be empty. <br />";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                // check retailer code

                $retCode = mysql_escape_string(trim($arrFile[0]));

                if ($retCode != "") {
                   

                    if ($flag) {

                        $condi = " LOWER(retailer_code)='" . strtolower($retCode) . "' ";

                        $retRec = $this->_getSelectList('table_retailer', 'retailer_id,status,retailer_name', '', $condi);

                        if (is_array($retRec) && (count($retRec) > 0)) {

                            if ($retRec[0]->status != 'A') {
                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }
                               

                                $strErr .= " , " . $this->AliaseUsers('retailer') . "  is not Active <br />";

                                $str_err_array = array($strErr);

                                $flag = false;

                            } else {
                                $chkval=$retRec[0]->retailer_id.'('.$retRec[0]->retailer_name.')';

                                if(!in_array($chkval,$retailerarray) && $retRec[0]->retailer_id>0)
                                {

            
                                    $retailer_id = $retRec[0]->retailer_id;
                                    $retailerarray[]=$retRec[0]->retailer_id.'('.$retRec[0]->retailer_name.')';
                            }else{
                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }
                               

                                $strErr .= " , " . $this->AliaseUsers('retailer') . "  is already mapped <br />";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                              

                            
                            }


                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('retailer') . "  does not exists. <br />";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

               

                if ($flag) { 
                   
                    $data = array();

                


                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2)

            return "no";

        else
        if(count($str_err_array)>0){
            return array('status'=>'failure','errordata'=>$str_err_array,'data'=>$retailerarray);
           
        }else{
            return array('status'=>'success','errordata'=>'','data'=>$retailerarray);
        }

    }



    /************************************* End geeta code ***************************************/




//Todo Start : 05 dec 2023 : distributor order upload :sudhanshu

    function distributorOrderUpload($formData)
    {
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";

        $total_invoice_amount = 0;
        $distributor_id = $formData['distributor_id'];
        $resultset = "";
        $date = date('Y-m-d');
        $row = 0;
        $order_status = "A";
        $data = array();
        $flag = 0;
        $data2 = array();
        $itmCode = array();
        $pagetype = $formData['page_type'];
        $odrfrm = $formData['odrfrm'];
        $chkItem = '';
        $store_count_arr = array();
        $orderdArr = array();
        $errArr = array();
        while (!feof($file)) {

            $arrFile = fgetcsv($file);
            if ($row == 0) {
                if (count($arrFile) == 4 && trim($arrFile[0]) == "Item Name" && trim($arrFile[1]) == "Item Code*" && trim($arrFile[2]) == "Item Category" && trim($arrFile[3]) == "Quantity") {
                    $flag2 = true;
                } else {
                    //print_r($arrFile);die;
                    $flag2 = false;
                    $fErr = "no";
                }
            }

            if ($row > 0 && is_array($arrFile)) {

                if ($flag2) {
                    if (empty($arrFile[0]) && empty($arrFile[1])) {
                        $row++;
                    } else {
                        $itemName = mysql_escape_string(strtolower(trim($arrFile[0])));
                        $itemCode = mysql_escape_string(strtolower(trim($arrFile[1])));
                        $category = mysql_escape_string(strtolower(trim($arrFile[2])));
                        $qty = mysql_escape_string(strtolower(trim($arrFile[3])));
                        if ($qty > 0) {
                            $newarr = array(
                                'item_code' => $itemCode,
                                'qty' => $qty
                            );
                            if (!empty($itemCode)) {

                                if (array_key_exists($itemCode, $orderdArr)) {
//                                    $_SESSION['cntItmCode'] = count($orderdArr);
                                    $store_count_arr = count($orderdArr);

                                    $newerrArr = array(
                                        'item_name' => $itemName,
                                        'item_code' => $itemCode,
                                        'category' => $category,
                                        'qty' => $qty,
                                        'msg' => "Duplicate Item Code"
                                    );
                                    array_push($errArr, $newerrArr);
                                } else {
                                    $orArr = array(
                                        'qty' => $qty,
                                        'item_name' => $itemName,
                                        'category' => $category
                                    );
                                    $orderdArr[$itemCode] = $orArr;
                                }

                            } else {
                                $newerrArr = array(
                                    'item_name' => $itemName,
                                    'item_code' => $itemCode,
                                    'category' => $category,
                                    'qty' => $qty,
                                    'msg' => "Item Code Can't be blank"
                                );
                                array_push($errArr, $newerrArr);
                            }

                        } else {
                            if (!is_int($qty) && !empty($qty)) {
                                $newarr = array(
                                    'item_name' => $itemName,
                                    'item_code' => $itemCode,
                                    'category' => $category,
                                    'qty' => $qty,
                                    'msg' => "Invalid Quantity"
                                );
                                array_push($errArr, $newarr);
                            }
//                          if ($qty <= 0 && empty($itemCode)) {
//                              $newarr = array(
//                                  'item_code' => $itemCode,
//                                  'qty' => $qty,
//                                  'msg' => "Item code should not be empty"
//                              );
//                              array_push($errArr, $newarr);
//                          } else {
//                              $where = "  LOWER(item_code)='" . $itemCode . "'";
//                              $disData = $this->_getSelectList('table_item', "item_id", '', $where);
//                              if ($disData[0]->item_id == '') {
//                                  $newerrArr = array(
//                                      'item_code' => $itemCode,
//                                      'qty' => $qty,
//                                      'msg' => array("Item code does not exist", "Invalid Quantity")
//                                  );
//                                  array_push($errArr, $newerrArr);
// //                                    $newerrArr = array(
// //                                        'item_code' => $itemCode,
// //                                        'qty' => $qty,
// //                                        'msg' => "Item code does not exist."
// //                                    );
// //                                    array_push($errArr, $newerrArr);

//                              } else {
//                                  // Check the existence of a item code
//                                  if (array_key_exists($itemCode, $orderdArr)) {
//                                      $store_count_arr = count($orderdArr);
//                                  }
//                                  if (!empty($store_count_arr) && $store_count_arr >= 1 && $qty <= 0) {
//                                      $newerrArr = array(
//                                          'item_code' => $itemCode,
//                                          'qty' => $qty,
//                                          'msg' => array("Duplicate Item Code", "Invalid Quantity")
//                                      );
//                                      array_push($errArr, $newerrArr);
// //                                        $newerrArr = array(
// //                                            'item_code' => $itemCode,
// //                                            'qty' => $qty,
// //                                            'msg' => "Invalid Quantity."
// //                                        );
// //                                        array_push($errArr, $newerrArr);
//                                  } else {
//                                      $newerrArr = array(
//                                          'item_code' => $itemCode,
//                                          'qty' => $qty,
//                                          'msg' => "Invalid Quantity"
//                                      );
//                                      array_push($errArr, $newerrArr);
//                                  }
//                              }

//                          }

                        }
                    }
                }

            }
            $row++;
            $flag++;
        }
        //    echo "<pre>";
        //     print_R($errArr);
        //    print_R($orderdArr);
        //    die;
        if (empty($errArr)) {
            if (count($orderdArr) > 0) {

                $flag = 1;
                foreach ($orderdArr as $key => $val) {

                    $where = "  LOWER(item_code)='" . $key . "'";
                    $disData = $this->_getSelectList('table_item', "item_id", '', $where);

                    //check mapping distributor wise item name

                    $checkAvailbiltyDWID = $this->_getSelectList('table_distributor_wise_item_description', "item_id", '', " distributor_id='" . $_SESSION['distributorId'] . "' and status='A'");

                    if (is_array($checkAvailbiltyDWID) && count($checkAvailbiltyDWID) > 0) {
                        $checkAvailbiltyDWID = true;
                        $disData = $this->_getSelectList('table_distributor_wise_item_description', "item_id", '', " item_id='" . $disData[0]->item_id . "' and distributor_id='" . $_SESSION['distributorId'] . "' and status='A'");
                    }


                    // Check count sheet item row and get item id
                    if (!empty($disData[0]->item_id)) {
                        $ItemData[] = $disData[0]->item_id;
                    }
                    $ItemKey[] = $key;
                }
                // Check Data row is equal or not
                if (count($ItemData) == count($ItemKey)) {

                    foreach ($orderdArr as $key => $val) {

                        $where = "  LOWER(item_code)='" . $key . "'";
                        $disData = $this->_getSelectList('table_item', "item_id", '', $where);
                        $condition = " I.item_id='" . $disData[0]->item_id . "'";
                        $result = $this->_getSelectList('table_item AS I 
             LEFT JOIN table_price AS TP ON TP.item_id = I.item_id AND TP.start_date <= "' . $date . '" AND TP.end_date >= "' . $date . '"
             LEFT JOIN table_item_gst AS ig ON ig.item_id = I.item_id
             left join table_item_discount AS D on D.item_id=I.item_id',
                            "I.item_id, I.item_name, I.item_code,ifnull(ig.tax,0) as tax, TP.item_mrp,TP.dist_price,
             TP.stockist_price, TP.item_dp,ifnull(D.discount_percentage,0) as discount_percentage,D.id as discount_id", '', "  
              " . $condition);

                        if ($disData[0]->item_id != '' && $disData[0]->item_id > 0) {

                            if ($flag == 1) {
                                $data['account_id'] = $formData['account_id'];
                                $data['salesman_id'] = 0;
                                $data['distributor_id'] = $formData['distributor_id'];
                                $data['stockist_id'] = $formData['stockist_id'];
                                $data['retailer_id'] = 0;
                                $data['date_of_order'] = date('Y-m-d');
                                $data['time_of_order'] = date('H:i:s');
                                $data['lat'] = NULL;
                                $data['lng'] = NULL;
                                $data['accuracy_level'] = NULL;
                                $data['comments'] = NULL;
                                // $data['order_type']                   =   "Yes"; // Yes , No , Adhoc
                                $data['order_for'] = "D"; // D=> distributor , R=>retailer
                                $data['location_provider'] = NULL;
                                $data['tag_id'] = 0;
                                $data['tag_description'] = NULL;
                                $data['total_invoice_amount'] = 0;
                                $data['acc_total_invoice_amount'] = 0;
                                $data['last_update_date'] = $date;
                                $data['last_update_status'] = 'New';
                                $data['order_status'] = $order_status;  // A = New Order, I = Processed , D = Dispatched
                                // Actual Shceme Details
                                $data['discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage
                                $data['discount_amount'] = 0;
                                $data['dicount_percentage'] = NULL;
                                $data['free_item_id'] = 0;     // FOC Item ID If discount type FOC
                                $data['free_item_qty'] = NULL;     // How many FOC Item qty
                                $data['discount_id'] = NULL;     // Scheme ID
                                $data['discount_desc'] = NULL;     // Scheme Description
                                $data['acc_discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage
                                $data['acc_discount_amount'] = 0;
                                $data['acc_dicount_percentage'] = NULL;
                                $data['acc_free_item_id'] = 0;     // FOC Item ID If discount type FOC
                                $data['acc_free_item_qty'] = NULL;     // How many FOC Items
                                $data['acc_discount_id'] = 0;     // Scheme ID
                                $data['stock_id'] = 0;
                                $data['type'] = NULL;
                                // $data['due_date']                     =   $date; //date('0000-00-00');
                                $data['bill_no'] = NULL;
                                $data['voucher_number'] = 0;
                                $data['bill_type'] = NULL;
                                $data['invoice_status'] = NULL;
                                $data['against_invoice_no'] = NULL;
                                $data['return_type'] = 0;
                                $data['terms_id'] = 0;
                                $data['delivery_add'] = NULL;
                                $data['reason'] = NULL;
                                $data['reason_remark'] = NULL;
                                $data['clearing_status'] = NULL;
                                $data['payment_received'] = 0;
                                $data['adjusted_amount'] = 0;
                                $data['must_sell_reason_id'] = 0;
                                $data['cancel_by'] = 0;
                                $data['updated_by_app'] = 0;
                                $data['app_updated_by_salesman_id'] = 0;
                                $data['app_updated_by_distributor_id'] = 0;
                                if (strtolower($formData['order_type']) == 'yes' || strtolower($formData['order_type']) == 'adhoc') {
                                    $data['order_type'] = "Yes"; // Yes , No , Adhoc
                                } else {
                                    $data['order_type'] = "Return"; // Yes , No , Adhoc
                                    $data['return_type'] = 1;

                                }
                                // insert order
                                $order_id = $this->_dbInsert($data, 'table_distributor_order');
                                if (isset($formData['reason']) && $formData['reason'] > 0 && $order_id > 0) {
                                    $reason['reason_id'] = $formData['reason'];
                                    $reason['order_id'] = $order_id;
                                    $reason['created'] = date('Y-m-d H:i:s');
                                    $reason['updated'] = date('Y-m-d H:i:s');

                                    $resi_id = $this->_dbInsert($reason, 'table_distributor_order_return_reason');
                                }

                            }
                            $flag = 0;

                            if ($order_id > 0) {

                                $discount_id = NULL;
                                $discount_desc = NULL;
                                $discount_type = NULL;
                                $discount_amount = NULL;
                                $discount_percentage = NULL;
                                $free_item_id = 0;
                                $total_free_quantity = NULL;
                                $acc_discount_type = NULL;
                                $acc_discount_amount = NULL;
                                $acc_dicount_percentage = NULL;
                                $acc_free_item_id = NULL;
                                $acc_free_item_qty = NULL;
                                $acc_discount_id = NULL;
                                $distributor_id = $formData['distributor_id'];
                                $itmIdArr = [];
                                $itmIds = [];
                                $distTypeWiseItemPriceArr = [];

                                $getDistType = $this->_getSelectList('table_distributors', 'distributor_type_id', '', "distributor_id = $distributor_id");

                                if (is_array($getDistType) && (count($getDistType) > 0)) {
                                    $distTypeId = $getDistType[0]->distributor_type_id;

                                    if (intval($distTypeId) > 0) {
                                        foreach ($result as $key1 => $itmData) {
                                            $itmIdArr[] = $itmData->item_id;
                                        }

                                        $itmIds = implode(',', $itmIdArr);

                                        //now get the distributor type wise item price
                                        $getDistTypeWiseItemPrice = $this->_getSelectList2('table_distributor_type_item_price_mapping', 'item_id,price', '', "distributor_type_id = $distTypeId AND item_id IN($itmIds) AND status = 'A' ");

                                        if (is_array($getDistTypeWiseItemPrice) && (count($getDistTypeWiseItemPrice) > 0)) {
                                            foreach ($getDistTypeWiseItemPrice as $key2 => $distTypeWiseItemPrice) {
                                                $distTypeWiseItemPriceArr[$distTypeWiseItemPrice->item_id] = $distTypeWiseItemPrice->price;
                                            }

                                        }
                                    }
                                }

                                foreach ($result as $key => $row) {
                                    $tax = $row->tax;
                                    if (!empty($pagetype) && $pagetype == 'order') {
                                        $tax = 0;
                                    }
                                    $price = $row->item_mrp;
                                    if (!empty($odrfrm) && $odrfrm == 'dis') {

                                        if (isset($distTypeWiseItemPriceArr[$row->item_id]) && ($distTypeWiseItemPriceArr[$row->item_id] > 0)) {
                                            $price = $distTypeWiseItemPriceArr[$row->item_id];
                                            echo $price;
                                        } else if ($row->dist_price > 0) {
                                            $price = $row->dist_price;
                                        }
                                    } else if (!empty($odrfrm) && $odrfrm == 'stk' && $row->stockist_price > 0) {
                                        $price = $row->stockist_price;
                                    }


                                }


                                $item_id = trim($result[0]->item_id);
                                $item_price = trim($price);
                                $item_qty = trim($val['qty']);


                                /******Tax Info*******/
                                // $tax=10;
                                $gst_rate = (isset($tax) ? $tax : 0);
                                $gst_amt = ROUND(((($item_price * $item_qty) * $gst_rate) / 100), 2);
                                // echo $gst_amt;die;

                                /******Tax Info*******/

                                //***********discount info */
                                $dis_amt = 0;
                                if ($result[0]->discount_percentage > 0) {
                                    $dis_rate = $result[0]->discount_percentage;
                                    $dis_amt = ROUND(((($item_price * $item_qty) * $dis_rate) / 100), 2);
                                    $data1['discount_id'] = $result[0]->discount_id;

                                    $data1['discount_percentage'] = $result[0]->discount_percentage;
                                } else {
                                    $data1['discount_id'] = 0;

                                    $data1['discount_percentage'] = 0;
                                }
                                //***********discount info */
                                $data1['order_id'] = $order_id;
                                $data1['item_id'] = $item_id;
                                $data1['free_item_id'] = $free_item_id;

                                $data1['price'] = $item_price;
                                $data1['gst_rate'] = $gst_rate;
                                $data1['gst_amount'] = $gst_amt;
                                $data1['quantity'] = $item_qty;
                                $data1['total'] = ROUND((($data1['quantity'] * $data1['price']) + $gst_amt), 2);

                                $data1['discount_amount'] = 0;
                                $data1['acc_quantity'] = $data1['quantity'];
                                $data1['acc_total'] = $data1['total'];
                                $data1['color_id'] = 0;
                                $data1['color_type'] = NULL;
                                $data1['type'] = 1;     // 1 = Normal, 2 = Free Item
                                $data1['price_type'] = 1;     // 1 = MRP , 2 = DP , 3 = PTR
                                $data1['last_update_date'] = $date;
                                $data1['last_update_status'] = 'New';
                                $data1['order_detail_status'] = '2';   // 1 = New , 2 = Accepted, 3 = Rejected, 4 = Discount Applicable, 5 = Discount Not Applicable
                                $data1['unit_id'] = 0;
                                $data1['item_unit_type'] = NULL;
                                $data1['cgst_rate'] = 0;
                                $data1['cgst_amount'] = 0;
                                $data1['igst_rate'] = 0;
                                $data1['igst_amount'] = 0;
                                $data1['tax_amount'] = 0;
                                $data1['case_size'] = 0;
                                $data1['new_scheme_discount'] = 0;
                                $data1['is_processed'] = 0;
                                $data1['discount_desc'] = NULL;
                                $data1['discount_type'] = NULL;
                                $data1['total_free_quantity'] = NULL;
                                $data1['tag_id'] = 0;
                                $data1['acc_discount_type'] = NULL;
                                $data1['acc_discount_amount'] = 0;
                                $data1['acc_dicount_percentage'] = NULL;
                                $data1['acc_free_item_id'] = 0;
                                $data1['acc_free_item_qty'] = NULL;
                                $data1['reason'] = NULL;
                                $data1['acc_discount_id'] = 0;
                                $data1['reason_remark'] = NULL;
                                $data1['norms'] = 0;
                                $data1['stock'] = 0;
                                $data1['remarks'] = 0;
                                $data1['updated_by_app'] = 0;
                                $total_invoice_amount = $total_invoice_amount + $data1['total'];
                                $this->_dbInsert($data1, 'table_distributor_order_detail'); // Saved item detail

                            }

                        }
                    }

                    if (isset($total_invoice_amount) && $total_invoice_amount > 0) {
                        $OrderData['total_invoice_amount'] = $total_invoice_amount;
                        $OrderData['acc_total_invoice_amount'] = $total_invoice_amount;
                        $res = $this->_dbUpdate($OrderData, 'table_distributor_order', " order_id=" . $order_id);
                        $res = 1;
                    }

                } else {
                    foreach ($orderdArr as $key => $val) {

                        $where = "  LOWER(item_code)='" . $key . "'";
                        $disData = $this->_getSelectList('table_item', "item_id,item_name", '', $where);

                        //check mapping distributor wise item name
                        if ($checkAvailbiltyDWID) {
                            $disData = $this->_getSelectList('table_distributor_wise_item_description', "item_id", '', " item_id='" . $disData[0]->item_id . "' and distributor_id='" . $_SESSION['distributorId'] . "' and status='A'");
                        }


                        // Check count sheet item row and get item id
                        if ($disData[0]->item_id != '' && $disData[0]->item_id > 0) {
                            array_push($itmCode, $itemCode);
                            $newerrArr = array(
                                'item_name' => $val['item_name'],
                                'item_code' => $key,
                                'category' => $val['category'],
                                'qty' => $val['qty'],
                                'msg' => "Data not inserted"
                            );
                            array_push($errArr, $newerrArr);
                        } else {
                            array_push($itmCode, $itemCode);
                            $newerrArr = array(
                                'item_name' => $val['item_name'],
                                'item_code' => $key,
                                'category' => $val['category'],
                                'qty' => $val['qty'],
                                'msg' => "Item Code does not exist"
                            );
                            array_push($errArr, $newerrArr);
                        }

                    }
                }


            }
        } else {
            // Check condition if get 0 qty
            foreach ($orderdArr as $key => $val) {

                $where = "  LOWER(item_code)='" . $key . "'";
                $disData = $this->_getSelectList('table_item', "item_id,item_name", '', $where);

                $checkAvailbiltyDWID = $this->_getSelectList('table_distributor_wise_item_description', "item_id", '', " distributor_id='" . $_SESSION['distributorId'] . "' and status='A'");
                if (is_array($checkAvailbiltyDWID) && count($checkAvailbiltyDWID) > 0) {

                    $disData = $this->_getSelectList('table_distributor_wise_item_description', "item_id", '', " item_id='" . $disData[0]->item_id . "' and distributor_id='" . $_SESSION['distributorId'] . "' and status='A'");
                }
                // Check count sheet item row and get item id
                if ($disData[0]->item_id != '' && $disData[0]->item_id > 0) {
                    array_push($itmCode, $itemCode);
                    $newerrArr = array(
                        'item_name' => $val['item_name'],
                        'item_code' => $key,
                        'category' => $val['category'],
                        'qty' => $val['qty'],
                        'msg' => "Data not inserted"
                    );
                    array_push($errArr, $newerrArr);
                } else {
                    array_push($itmCode, $itemCode);
                    $newerrArr = array(
                        'item_name' => $val['item_name'],
                        'item_code' => $key,
                        'category' => $val['category'],
                        'qty' => $val['qty'],
                        'msg' => "Item Code does not exist"
                    );
                    array_push($errArr, $newerrArr);
                }

            }
        }
        if ($row > 0 && count($errArr) > 0 && $res == 1) {
            return $errArr;
        } elseif ($res == 1) {
            return $res;
        } elseif ($fErr != '') {
            return $fErr;
        } else {
            return $errArr;
        }
    }

//Todo End : 05 dec 2023 : distributor order upload :sudhanshu

// Todo Start :sudhanshu : 07 dec 2023 distributor wise item description

    function checkDuplicacyDisWiseItemDesc($id = 0, $retCode = '')
    {
        if (isset($id) && $id > 0) {
            $condi = " 	item_desc = '" . $retCode . "' AND id NOT IN($id)";

        } else {
            $condi = " LOWER(item_desc) = '" . $retCode . "' ";
        }

        $retTypeRec = $this->_getSelectList('table_distributor_wise_item_description', "distributor_id,id", '', $condi);

        return count($retTypeRec);
    }

    function uploadDisWisItemDescFile()

    {

        $fields = array('Item Code*', $this->AliaseUsers['distributor'] . ' Code*', ' Item Description*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 3 && trim($arrFile[0]) == "Item Code*" && trim($arrFile[1]) == "Distributor Code*" && trim($arrFile[2]) == "Item Description*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }
            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2])) {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[0] . " shouldn't be empty \n";


                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[1] . " shouldn't be empty \n";


                    } else if (empty($arrFile[2])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[2] . " shouldn't be empty \n";


                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }


                //  To get Retailer
                if ($flag) {

                    $condi = " LOWER(distributor_code)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' AND status='A'";

                    $disRec = $this->_getSelectList('table_distributors', "distributor_id", '', $condi);

                    $distributor_id = $disRec[0]->distributor_id;

                    if (!is_array($disRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "  , distributor code does not exists \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                // To get a Items
                if ($flag) {

                    $condi = " LOWER(i.item_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "'  AND i.status = 'A' ";

                    $ItemRec = $this->_getSelectList('table_item as i 

                ', "i.item_id", '', $condi);

                    $item_id = $ItemRec[0]->item_id;

                    if (!is_array($ItemRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Invalid Item Code \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }
                // check duplicacy


                if ($flag) {

                    $condi = " item_id='" . $item_id . "' and distributor_id = '" . $distributor_id . "'";

                    $mapRec = $this->_getSelectList('table_distributor_wise_item_description', "id", '', $condi);

                    if (is_array($mapRec) && (count($mapRec) > 0)) {

                        $mapId = $mapRec[0]->id;
                        $chkData = $this->checkDuplicacyDisWiseItemDesc($mapId, trim($arrFile[2]));

                        if ($chkData > 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Distributor wise itme description already exists in the system \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    } else {

                        $chkData = $this->checkDuplicacyDisWiseItemDesc(0, trim($arrFile[2]));

                        if ($chkData > 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Distributor wise itme description already exists in the systeme \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }

                }


                if ($flag) {

                    $condi = " item_id='" . $item_id . "' and distributor_id = '" . $distributor_id . "'";

                    $mapRec = $this->_getSelectList('table_distributor_wise_item_description', "id", '', $condi);

                    if (is_array($mapRec) && (count($mapRec) > 0)) {
                        $mapId = $mapRec[0]->id;
                        $data2['item_desc'] = trim($arrFile[2]);
                        $data2['updated_on'] = date('Y-m-d H:i:s');
                        $this->_dbUpdate($data2, 'table_distributor_wise_item_description', " id = " . $mapId);


                    } else {

                        $data['distributor_id'] = mysql_escape_string($distributor_id);

                        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                        $data['item_id'] = mysql_escape_string($item_id);

                        $data['item_desc'] = mysql_escape_string(trim($arrFile[2]));

                        $data['status'] = mysql_escape_string('A');

                        $data['created_on'] = date('Y-m-d H:i:s');

                        $data['updated_on'] = date('Y-m-d H:i:s');

                        $this->_dbInsert($data, 'table_distributor_wise_item_description');
                    }

                }


            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

// Todo End ::sudhanshu : 07 dec 2023 distributor wise item description


    function distributorBulkOrderDynamic($formData)
    {
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";

        $row = 0;
        $flag = 0;
        $errArr = array();
        $headerColumn = array();
        $dataArr = array();
        while (!feof($file)) {

            $arrFile = fgetcsv($file);
            if ($row == 0) {
                $headerColumn = $arrFile;
                $dataArr[0] = $arrFile;
            } else {
                $dataArr[] = $arrFile;
            }

            $row++;
            $flag++;
        }
        fclose($file);

        if (count($dataArr) > 1) {

            $filename = 'dis_odr_upload_' . $_SESSION['distributorId'] . '.json';
            $jsonData = json_encode($dataArr, true);
            $this->createJsonFile($filename, $jsonData);

        }

        if ($row <= 2 && is_array($headerColumn))
            return "no";
        else
            return $headerColumn;
    }

    public function createJsonFile($file, $jsonData)
    {
        $fp = fopen(BASE_DIR . 'dis_bulk_odr_upload/' . $file, 'w');
        fwrite($fp, $jsonData);
        fclose($fp);
        chmod(BASE_DIR . 'dis_bulk_odr_upload/' . $file, 0777);  //changed to add the zero


        return true;
    }


    // Todo : Start : 18 Dec 2023 : New distributor Buld upload mapping

    function distributorBulkOrdernew($formData)
    {

        ///echo  "<pre>";print_R($_POST);die;
        //$file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";

        $total_invoice_amount = 0;
        $distributor_id = $formData['distributor_id'];
        $resultset = "";
        $date = date('Y-m-d');
        $row = 0;
        $order_status = "A";
        $data = array();
        $flag = 0;
        $data2 = array();
        $itmCode = array();
        $pagetype = $formData['page_type'];
        $odrfrm = $formData['odrfrm'];
        $chkItem = '';
        $store_count_arr = array();
        $orderdArr = array();
        $errArr = array();


        $arrFile = $this->_getSelectList2('table_order_item_data_temp', " *", '', ' distributor_id =' . $_SESSION['distributorId'] . ' and temp_id IN (' . $formData['ids'] . ')');

        for ($i = 0; $i < count($arrFile); $i++) {

            if (empty($arrFile[$i]->product_code) && empty($arrFile[$i]->product_name) && empty($arrFile[$i]->order_qty)) {
                $i++;
            } else {
                $itemCode = mysql_escape_string(strtolower(trim($arrFile[$i]->product_code)));
                $itmName = mysql_escape_string(strtolower(trim($arrFile[$i]->product_name)));
                $qty = mysql_escape_string(strtolower(trim($arrFile[$i]->order_qty)));
                if ($qty > 0) {
                    $newarr = array(
                        'item_code' => $itemCode,
                        'item_name' => $itmName,
                        'qty' => $qty
                    );
                    if (!empty($itemCode)) {

                        if (array_key_exists($itemCode, $orderdArr)) {
                            $store_count_arr = count($orderdArr);

                            $newerrArr = array(
                                'item_code' => $itemCode,
                                'item_name' => $itmName,
                                'qty' => $qty,
                                'msg' => "Duplicate Item Code"
                            );
                            array_push($errArr, $newerrArr);
                        } else {
                            $orderdArr[$itemCode] = array($itmName, $qty);
                        }

                    } else {
                        $newerrArr = array(
                            'item_code' => $itemCode,
                            'item_name' => $itmName,
                            'qty' => $qty,
                            'msg' => "Item Code Can't be blank"
                        );
                        array_push($errArr, $newerrArr);
                    }

                } else {
                    if ($qty <= 0 && empty($itemCode)) {
                        $newarr = array(
                            'item_code' => $itemCode,
                            'item_name' => $itmName,
                            'qty' => $qty,
                            'msg' => "Item code should not be empty"
                        );
                        array_push($errArr, $newarr);
                    } else {
                        $where = "  LOWER(item_code)='" . $itemCode . "'";
                        $disData = $this->_getSelectList('table_item', "item_id", '', $where);
                        if ($disData[0]->item_id == '') {
                            $newerrArr = array(
                                'item_code' => $itemCode,
                                'item_name' => $itmName,
                                'qty' => $qty,
                                'msg' => array("Item code does not exist", "Invalid Quantity")
                            );
                            array_push($errArr, $newerrArr);

                        } else {
                            // Check the existence of a item code
                            if (array_key_exists($itemCode, $orderdArr)) {
                                $store_count_arr = count($orderdArr);
                            }
                            if (!empty($store_count_arr) && $store_count_arr >= 1 && $qty <= 0) {
                                $newerrArr = array(
                                    'item_code' => $itemCode,
                                    'item_name' => $itmName,
                                    'qty' => $qty,
                                    'msg' => array("Duplicate Item Code", "Invalid Quantity")
                                );
                                array_push($errArr, $newerrArr);

                            } else {
                                $newerrArr = array(
                                    'item_code' => $itemCode,
                                    'item_name' => $itmName,
                                    'qty' => $qty,
                                    'msg' => "Invalid Quantity"
                                );
                                array_push($errArr, $newerrArr);
                            }
                        }

                    }

                }
            }

            $row++;
            $flag++;
        }
//        echo "<pre>";
//        print_R($orderdArr);
//        die;
        if (empty($errArr)) {
            if (count($orderdArr) > 0) {

                $flag = 1;
                foreach ($orderdArr as $key => $val) {

                    $where = "  LOWER(item_code)='" . $key . "'";
                    $disData = $this->_getSelectList('table_item', "item_id", '', $where);

                    // Check count sheet item row and get item id
                    if (!empty($disData[0]->item_id)) {
                        $ItemData[] = $disData[0]->item_id;
                    }
                    $ItemKey[] = $key;
                }
                // Check Data row is equal or not
                if (count($ItemData) == count($ItemKey)) {
                    foreach ($orderdArr as $key => $val1) {

                        foreach ($val1 as $i => $val) {

                        }

                        $where = "  LOWER(item_code)='" . $key . "'";
                        $disData = $this->_getSelectList('table_item', "item_id", '', $where);
                        $condition = " I.item_id='" . $disData[0]->item_id . "'";
                        $result = $this->_getSelectList('table_item AS I 
                LEFT JOIN table_price AS TP ON TP.item_id = I.item_id AND TP.start_date <= "' . $date . '" AND TP.end_date >= "' . $date . '"
                LEFT JOIN table_item_gst AS ig ON ig.item_id = I.item_id
                left join table_item_discount AS D on D.item_id=I.item_id',
                            "I.item_id, I.item_name, I.item_code,ifnull(ig.tax,0) as tax, TP.item_mrp,TP.dist_price,
                TP.stockist_price, TP.item_dp,ifnull(D.discount_percentage,0) as discount_percentage,D.id as discount_id", '', "  
                 " . $condition);

                        if ($disData[0]->item_id != '' && $disData[0]->item_id > 0) {

                            if ($flag == 1) {
                                $data['account_id'] = $formData['account_id'];
                                $data['salesman_id'] = 0;
                                $data['distributor_id'] = $formData['distributor_id'];
                                $data['stockist_id'] = $formData['stockist_id'];
                                $data['retailer_id'] = 0;
                                $data['date_of_order'] = date('Y-m-d');
                                $data['time_of_order'] = date('H:i:s');
                                $data['lat'] = NULL;
                                $data['lng'] = NULL;
                                $data['accuracy_level'] = NULL;
                                $data['comments'] = NULL;
                                // $data['order_type']                   =   "Yes"; // Yes , No , Adhoc
                                $data['order_for'] = "D"; // D=> distributor , R=>retailer
                                $data['location_provider'] = NULL;
                                $data['tag_id'] = 0;
                                $data['tag_description'] = NULL;
                                $data['total_invoice_amount'] = 0;
                                $data['acc_total_invoice_amount'] = 0;
                                $data['last_update_date'] = $date;
                                $data['last_update_status'] = 'New';
                                $data['order_status'] = $order_status;  // A = New Order, I = Processed , D = Dispatched
                                // Actual Shceme Details
                                $data['discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage
                                $data['discount_amount'] = 0;
                                $data['dicount_percentage'] = NULL;
                                $data['free_item_id'] = 0;     // FOC Item ID If discount type FOC
                                $data['free_item_qty'] = NULL;     // How many FOC Item qty
                                $data['discount_id'] = NULL;     // Scheme ID
                                $data['discount_desc'] = NULL;     // Scheme Description
                                $data['acc_discount_type'] = NULL;    // 1 = Amount, 2 = FOC, 3 = Percentage
                                $data['acc_discount_amount'] = 0;
                                $data['acc_dicount_percentage'] = NULL;
                                $data['acc_free_item_id'] = 0;     // FOC Item ID If discount type FOC
                                $data['acc_free_item_qty'] = NULL;     // How many FOC Items
                                $data['acc_discount_id'] = 0;     // Scheme ID
                                $data['stock_id'] = 0;
                                $data['type'] = NULL;
                                // $data['due_date']                     =   $date; //date('0000-00-00');
                                $data['bill_no'] = NULL;
                                $data['voucher_number'] = 0;
                                $data['bill_type'] = NULL;
                                $data['invoice_status'] = NULL;
                                $data['against_invoice_no'] = NULL;
                                $data['return_type'] = 0;
                                $data['terms_id'] = 0;
                                $data['delivery_add'] = NULL;
                                $data['reason'] = NULL;
                                $data['reason_remark'] = NULL;
                                $data['clearing_status'] = NULL;
                                $data['payment_received'] = 0;
                                $data['adjusted_amount'] = 0;
                                $data['must_sell_reason_id'] = 0;
                                $data['cancel_by'] = 0;
                                $data['updated_by_app'] = 0;
                                $data['app_updated_by_salesman_id'] = 0;
                                $data['app_updated_by_distributor_id'] = 0;
                                if (strtolower($formData['order_type']) == 'yes' || strtolower($formData['order_type']) == 'adhoc') {
                                    $data['order_type'] = "Yes"; // Yes , No , Adhoc
                                } else {
                                    $data['order_type'] = "Return"; // Yes , No , Adhoc
                                    $data['return_type'] = 1;

                                }
                                // insert order
                                $order_id = $this->_dbInsert($data, 'table_distributor_order');
                                if (isset($formData['reason']) && $formData['reason'] > 0 && $order_id > 0) {
                                    $reason['reason_id'] = $formData['reason'];
                                    $reason['order_id'] = $order_id;
                                    $reason['created'] = date('Y-m-d H:i:s');
                                    $reason['updated'] = date('Y-m-d H:i:s');

                                    $resi_id = $this->_dbInsert($reason, 'table_distributor_order_return_reason');
                                }

                            }
                            $flag = 0;

                            if ($order_id > 0) {

                                $discount_id = NULL;
                                $discount_desc = NULL;
                                $discount_type = NULL;
                                $discount_amount = NULL;
                                $discount_percentage = NULL;
                                $free_item_id = 0;
                                $total_free_quantity = NULL;
                                $acc_discount_type = NULL;
                                $acc_discount_amount = NULL;
                                $acc_dicount_percentage = NULL;
                                $acc_free_item_id = NULL;
                                $acc_free_item_qty = NULL;
                                $acc_discount_id = NULL;
                                $distributor_id = $formData['distributor_id'];
                                $itmIdArr = [];
                                $itmIds = [];
                                $distTypeWiseItemPriceArr = [];

                                $getDistType = $this->_getSelectList('table_distributors', 'distributor_type_id', '', "distributor_id = $distributor_id");

                                if (is_array($getDistType) && (count($getDistType) > 0)) {
                                    $distTypeId = $getDistType[0]->distributor_type_id;

                                    if (intval($distTypeId) > 0) {
                                        foreach ($result as $key1 => $itmData) {
                                            $itmIdArr[] = $itmData->item_id;
                                        }

                                        $itmIds = implode(',', $itmIdArr);

                                        //now get the distributor type wise item price
                                        $getDistTypeWiseItemPrice = $this->_getSelectList2('table_distributor_type_item_price_mapping', 'item_id,price', '', "distributor_type_id = $distTypeId AND item_id IN($itmIds) AND status = 'A' ");

                                        if (is_array($getDistTypeWiseItemPrice) && (count($getDistTypeWiseItemPrice) > 0)) {
                                            foreach ($getDistTypeWiseItemPrice as $key2 => $distTypeWiseItemPrice) {
                                                $distTypeWiseItemPriceArr[$distTypeWiseItemPrice->item_id] = $distTypeWiseItemPrice->price;
                                            }

                                        }
                                    }
                                }

                                foreach ($result as $key => $row) {
                                    $tax = $row->tax;
                                    if (!empty($pagetype) && $pagetype == 'order') {
                                        $tax = 0;
                                    }
                                    $price = $row->item_mrp;
                                    if (!empty($odrfrm) && $odrfrm == 'dis') {

                                        if (isset($distTypeWiseItemPriceArr[$row->item_id]) && ($distTypeWiseItemPriceArr[$row->item_id] > 0)) {
                                            $price = $distTypeWiseItemPriceArr[$row->item_id];
                                            echo $price;
                                        } else if ($row->dist_price > 0) {
                                            $price = $row->dist_price;
                                        }
                                    } else if (!empty($odrfrm) && $odrfrm == 'stk' && $row->stockist_price > 0) {
                                        $price = $row->stockist_price;
                                    }


                                }


                                $item_id = trim($result[0]->item_id);
                                $item_price = trim($price);
                                $item_qty = trim($val);


                                /******Tax Info*******/
                                // $tax=10;
                                $gst_rate = (isset($tax) ? $tax : 0);
                                $gst_amt = ROUND(((($item_price * $item_qty) * $gst_rate) / 100), 2);
                                // echo $gst_amt;die;

                                /******Tax Info*******/

                                //***********discount info */
                                $dis_amt = 0;
                                if ($result[0]->discount_percentage > 0) {
                                    $dis_rate = $result[0]->discount_percentage;
                                    $dis_amt = ROUND(((($item_price * $item_qty) * $dis_rate) / 100), 2);
                                    $data1['discount_id'] = $result[0]->discount_id;

                                    $data1['discount_percentage'] = $result[0]->discount_percentage;
                                } else {
                                    $data1['discount_id'] = 0;

                                    $data1['discount_percentage'] = 0;
                                }
                                //***********discount info */
                                $data1['order_id'] = $order_id;
                                $data1['item_id'] = $item_id;
                                $data1['free_item_id'] = $free_item_id;

                                $data1['price'] = $item_price;
                                $data1['gst_rate'] = $gst_rate;
                                $data1['gst_amount'] = $gst_amt;
                                $data1['quantity'] = $item_qty;
                                $data1['total'] = ROUND((($data1['quantity'] * $data1['price']) + $gst_amt), 2);

                                $data1['discount_amount'] = 0;
                                $data1['acc_quantity'] = $data1['quantity'];
                                $data1['acc_total'] = $data1['total'];
                                $data1['color_id'] = 0;
                                $data1['color_type'] = NULL;
                                $data1['type'] = 1;     // 1 = Normal, 2 = Free Item
                                $data1['price_type'] = 1;     // 1 = MRP , 2 = DP , 3 = PTR
                                $data1['last_update_date'] = $date;
                                $data1['last_update_status'] = 'New';
                                $data1['order_detail_status'] = '2';   // 1 = New , 2 = Accepted, 3 = Rejected, 4 = Discount Applicable, 5 = Discount Not Applicable
                                $data1['unit_id'] = 0;
                                $data1['item_unit_type'] = NULL;
                                $data1['cgst_rate'] = 0;
                                $data1['cgst_amount'] = 0;
                                $data1['igst_rate'] = 0;
                                $data1['igst_amount'] = 0;
                                $data1['tax_amount'] = 0;
                                $data1['case_size'] = 0;
                                $data1['new_scheme_discount'] = 0;
                                $data1['is_processed'] = 0;
                                $data1['discount_desc'] = NULL;
                                $data1['discount_type'] = NULL;
                                $data1['total_free_quantity'] = NULL;
                                $data1['tag_id'] = 0;
                                $data1['acc_discount_type'] = NULL;
                                $data1['acc_discount_amount'] = 0;
                                $data1['acc_dicount_percentage'] = NULL;
                                $data1['acc_free_item_id'] = 0;
                                $data1['acc_free_item_qty'] = NULL;
                                $data1['reason'] = NULL;
                                $data1['acc_discount_id'] = 0;
                                $data1['reason_remark'] = NULL;
                                $data1['norms'] = 0;
                                $data1['stock'] = 0;
                                $data1['remarks'] = 0;
                                $data1['updated_by_app'] = 0;
                                $total_invoice_amount = $total_invoice_amount + $data1['total'];
                                $this->_dbInsert($data1, 'table_distributor_order_detail'); // Saved item detail

                            }

                        }
                    }

                    if (isset($total_invoice_amount) && $total_invoice_amount > 0) {
                        $OrderData['total_invoice_amount'] = $total_invoice_amount;
                        $OrderData['acc_total_invoice_amount'] = $total_invoice_amount;
                        $res = $this->_dbUpdate($OrderData, 'table_distributor_order', " order_id=" . $order_id);
                        $res = 1;
                    }

                } else {
                    foreach ($orderdArr as $key => $val) {

                        $where = "  LOWER(item_code)='" . $key . "'";
                        $disData = $this->_getSelectList('table_item', "item_id", '', $where);

                        // Check count sheet item row and get item id
                        if ($disData[0]->item_id != '' && $disData[0]->item_id > 0) {
                            array_push($itmCode, $itemCode);
                            $newerrArr = array(
                                'item_code' => $key,
                                'item_name' => $val[0],
                                'qty' => $val[1],
                                'msg' => "Data not inserted"
                            );
                            array_push($errArr, $newerrArr);
                        } else {
                            array_push($itmCode, $itemCode);
                            $newerrArr = array(
                                'item_code' => $key,
                                'item_name' => $val[0],
                                'qty' => $val[1],
                                'msg' => "Item Code does not exist"
                            );
                            array_push($errArr, $newerrArr);
                        }

                    }
                }


            }
        } else {
            // Check condition if get 0 qty
            foreach ($orderdArr as $key => $val) {

                $where = "  LOWER(item_code)='" . $key . "'";
                $disData = $this->_getSelectList('table_item', "item_id", '', $where);

                // Check count sheet item row and get item id
                if ($disData[0]->item_id != '' && $disData[0]->item_id > 0) {
                    array_push($itmCode, $itemCode);
                    $newerrArr = array(
                        'item_code' => $key,
                        'item_name' => $val[0],
                        'qty' => $val[1],
                        'msg' => "Data not inserted"
                    );
                    array_push($errArr, $newerrArr);
                } else {
                    array_push($itmCode, $itemCode);
                    $newerrArr = array(
                        'item_code' => $key,
                        'item_name' => $val[0],
                        'qty' => $val[1],
                        'msg' => "Item Code does not exist"
                    );
                    array_push($errArr, $newerrArr);
                }

            }
        }               // }
//        print_r($errArr);
//        die;
        if ($row > 0 && count($errArr) > 0 && $res == 1) {
            return $errArr;
        } elseif ($res == 1) {
            return $res;
        } elseif ($fErr != '') {
            return $fErr;
        } else {
            return $errArr;
        }
    }

    // Todo : End : 18 Dec 2023 : New distributor Buld upload mapping

    // Todo : Start : Jatin : 20 Dec 2023 : read csv ,xls ,xlsx file

    function distributorBulkOrderDynamicreplica($formData)
    {
        include 'excel_read_script/vendor/autoload.php';
        echo "<pre>";
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";

        if ($_FILES["fileToUpload"] != '') {

            $allowed_extension = array('xls', 'csv', 'xlsx');
            $file_array = explode(".", $_FILES["fileToUpload"]["name"]);
            $file_extension = end($file_array);
            if (in_array($file_extension, $allowed_extension)) {
                $file_name = time() . '.' . $file_extension;
                move_uploaded_file($_FILES['fileToUpload']['tmp_name'], $file_name);
                $file_type = PhpOffice\PhpSpreadsheet\IOFactory::identify($file_name);
                $reader = PhpOffice\PhpSpreadsheet\IOFactory::createReader($file_type);
                $spreadsheet = $reader->load($file_name);
                unlink($file_name);
                $data = $spreadsheet->getActiveSheet()->toArray();
                foreach ($data as $key => $row) {
                    if ($key > 0) {
                        echo "<pre>";
                        print_r($row);
                    }

                };
            }
            die;
        }

        print_r($formData);
        die;
        $row = 0;
        $flag = 0;
        $errArr = array();
        $headerColumn = array();
        $dataArr = array();
        while (!feof($file)) {

            $arrFile = fgetcsv($file);
            if ($row == 0) {
                $headerColumn = $arrFile;
                $dataArr[0] = $arrFile;
            } else {
                $dataArr[] = $arrFile;
            }


            $row++;
            $flag++;
        }
        fclose($file);

        /*ini_set('display_errors', 1);
        ini_set('display_startup_errors', 1);
        error_reporting(E_ALL);
        */
        if (count($dataArr) > 1) {
            $filename = 'dis_odr_upload_' . $_SESSION['distributorId'] . '.json';
            $jsonData = json_encode($dataArr, true);
            $this->createJsonFile($filename, $jsonData);
        }

        if ($row <= 2 && is_array($headerColumn))
            return "no";
        else
            return $headerColumn;
    }

    // Todo : End : Jatin : 20 Dec 2023 : read csv ,xls ,xlsx file


    // Todo Start : sudhanshu : 19 Dec 2023 : salesman bulk update
    function uploadSalesmanUpdateFile()

    {

//        $fields = array('Salesman Name*', 'State*', 'District*', 'City*', 'Address', 'Phone No*', 'Username', 'Password', 'Category Name', 'Salesman Designation', 'Reporting Person', 'Min Price Editable (Yes/No)','Salesman Code');
        $fields = array($this->AliaseUsers['salesman'] . ' Code*', $this->AliaseUsers['salesman'] . ' Name', 'Phone No', 'Email Id'
        , 'State', 'District', 'City', 'Address', 'Reporting Person', 'Username', 'Password', 'Min Price Editable (Yes/No)', 'Joining Date', 'Salary');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;
        $fErr = 'no';
        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;
            if ($row == 0) {
                if (count($arrFile) == 14 && trim($arrFile[0]) == "Salesman Code*" && trim($arrFile[1]) == "Salesman Name" && trim($arrFile[2]) == "Phone No" && trim($arrFile[3]) == "Email Id" && trim($arrFile[4]) == "State" && trim($arrFile[5]) == "District" && trim($arrFile[6]) == "City" && trim($arrFile[7]) == "Address" && trim($arrFile[8]) == "Reporting Person" && trim($arrFile[9]) == "Username" && trim($arrFile[10]) == "Password" && trim($arrFile[11]) == "Min Price Editable (Yes/No)" && trim($arrFile[12]) == "Joining Date(mm-dd-yyyy)" && trim($arrFile[13]) == "Salary") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }

            }
            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty(trim($arrFile[0]))) {

                    if (trim(empty($arrFile[0]))) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }

//                if ($flag) {
//
//                    if ($this->getAccountRec() <= 0) {
//
//                        $strErr .= "Error in Row - " . $row;
//
//                        for ($i = 0; $i < count($fields); $i++) {
//
//                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
//
//                        }
//
//                        $strErr .= " , You have exceeded the maximum limit of active users \n";
//
//                        $str_err_array = array($strErr);
//
//                        $flag = false;
//
//                    }
//
//                }

                if ($flag) {

                    $phnNo = trim($arrFile[2]);

                    $pattern = "/^[0-9+\-]*$/";
                    if ($phnNo != '') {

                        if (!preg_match($pattern, $phnNo)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Please Provide the valid Phone Number.\n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                }

                if ($flag) {

                    if (!empty($arrFile[0])) {
                        $condi = " LOWER(employee_code) = '" . mysql_escape_string(trim(strtolower($arrFile[0]))) . "' ";
                        $aRetRec = $this->_getSelectList('table_salesman', 'salesman_id,status', '', $condi);
                        if (is_array($aRetRec)) {
                            if ($aRetRec[0]->status == 'I') {
                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , " . $this->AliaseUsers('salesman') . " inactive. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                            $salesman_id = $aRetRec[0]->salesman_id;

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , " . $this->AliaseUsers('salesman') . " code doesn't exists in the system. \n";

                            $str_err_array = array($strErr);

                            $flag = false;


                        }

                    }

                    //Todo Start : Sagar: 11th May 2023 : As discussed with Dhavika, salesman code should be unique and duplicacy will be checked on the combination of salesman name & phone, same as retailer master

                }

                if ($flag) {

                    if (trim($arrFile[9]) != '') {
                        $condi = " LOWER(username)='" . mysql_escape_string(strtolower(trim($arrFile[9]))) . "' ";

                        $aRetRec = $this->_getSelectList2('table_web_users', '*', '', $condi);

                        if (is_array($aRetRec)) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Username already exists in the system \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                }

                if ($arrFile[8] != '') {

                    if ($flag) {

                        $count_sal = $this->_getSelectList('table_salesman', 'count(salesman_id) as total_salesman',
                            '', " ");

                        if ($count_sal[0]->total_salesman <= 0) {

                            $rpt_person_id = '';
                            $rpt_sort_order = '';
                            $rpt_hierarchy_id = '';

                        } else {

                            $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(salesman_name)='" .
                                mysql_escape_string(strtolower(trim($arrFile[8]))) . "' AND status = 'A'";

                            $rptPersonexist = $this->_getSelectList('table_salesman', '*', '', $condi);

                            if (empty($rptPersonexist)) {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Reporting person not exists in the system \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            } else {

                                $rpt_person_id = $rptPersonexist[0]->salesman_id;

                                $condi = " account_id=" . $_SESSION['accountId'] . "  AND  salesman_id='" . $rpt_person_id . "'";

                                $rptPersonHierarchy = $this->_getSelectList('table_salesman_hierarchy_relationship', '*', '', $condi);

                                //check salesman hierarchy
                                $salHierarchy = $this->_getSelectList('table_salesman_hierarchy_relationship', '*', '', " salesman_id = '" . $salesman_id . "'");

                                $sal_hierarchy_id = $salHierarchy[0]->hierarchy_id;

                                $condit = " account_id=" . $_SESSION['accountId'] . "  AND  hierarchy_id='" . $sal_hierarchy_id . "' AND status = 'A'";

                                $SalHierarchy = $this->_getSelectList('table_salesman_hierarchy', '*', '', $condit);

                                $sal_sort_order = $SalHierarchy[0]->sort_order;

                                if (empty($rptPersonHierarchy)) {

                                    $strErr .= "Error in Row - " . $row;

                                    for ($i = 0; $i < count($fields); $i++) {

                                        $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                    }

                                    $strErr .= " , Hierarchy of reporting person does not exists in the system \n";

                                    $str_err_array = array($strErr);

                                    $flag = false;

                                } else {

                                    $rpt_hierarchy_id = $rptPersonHierarchy[0]->hierarchy_id;

                                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  hierarchy_id='" . $rpt_hierarchy_id . "' AND status = 'A'";

                                    $rptPersonHierarchy = $this->_getSelectList('table_salesman_hierarchy', '*', '', $condi);

                                    $rpt_sort_order = $rptPersonHierarchy[0]->sort_order;

                                }

                            }
                        }

                    }

                }

                // if ($flag) {

                //     if(trim($arrFile[8]) !=''){
                //         $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(description)='" .
                //         mysql_escape_string(strtolower($arrFile[8])) . "' AND status = 'A'";

                //         $hierarchyExist = $this->_getSelectList('table_salesman_hierarchy', '*', '', $condi);

                //         if (empty($hierarchyExist)) {

                //             $strErr .= "Error in Row - " . $row;

                //             for ($i = 0; $i < count($fields); $i++) {

                //                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                //             }

                //             $strErr .= " , Hierarchy does not exists in the system. \n";

                //             $str_err_array = array($strErr);

                //             $flag = false;

                //         } else {

                //             $sal_sort_order = $hierarchyExist[0]->sort_order;

                //             $sal_hierarchy_id = $hierarchyExist[0]->hierarchy_id;

                //         }
                //     }


                // }

                if ($flag) {

                    if ($arrFile[8] != '' && $rpt_person_id != '' && $rpt_sort_order != '' && $rpt_hierarchy_id != '') {

                        if ($sal_sort_order < $rpt_sort_order) {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Reporting person hierarchy is lower than " . $this->AliaseUsers['salesman'] . " hierarchy. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                }

                if ($flag) {

                    // Get State ID with the help of State Name
                    if (trim($arrFile[4]) != '') {
                        if (trim($arrFile[5]) != '' && trim($arrFile[6]) != '') {
                            $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower(trim($arrFile[4]))) . "' AND status = 'A' ";

                            $StateRec = $this->_getSelectList2('state', "state_id,country_id", '', $condi);

                            if (is_array($StateRec) && (count($StateRec) > 0)) {

                                $state_id = $StateRec[0]->state_id;

                                $country_id = $StateRec[0]->country_id;

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , State does not exists in the system. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                        } else {
                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " ,  Please enter complete geography. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                    }


                }

                if ($flag && $arrFile[2] != '') {
                    $auAc = $this->_getSelectList('table_account', "country_id", '', "");
                    $account_countryId = $auAc[0]->country_id;
                    $condi = " LOWER(country_id)='" . mysql_escape_string($account_countryId) . "' AND status = 'A' ";

                    $StRec = $this->_getSelectList2('country', "contact_max_length,contact_min_length", '', $condi);

                    if (is_array($StRec) && (count($StRec) > 0)) {

                        $cnt_no = strlen($arrFile[2]);

                        if ($cnt_no >= $StRec[0]->contact_min_length && $cnt_no <=
                            $StRec[0]->contact_max_length) {

                            $phone_no = $arrFile[2];
                            //echo  "<pre>";print_r($phone_no);die;

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Invalid Phone number " . $arrFile[2] . " \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                    }
                }

                if ($flag) {

                    // District
                    if (trim($arrFile[5]) != '') {
                        if (trim($arrFile[4]) != '' && trim($arrFile[6]) != '') {
                            $condi = " LOWER(city_name)='" . mysql_escape_string(strtolower(trim($arrFile[5]))) . "' and state_id='" . $state_id . "' AND status = 'A'";

                            $CityRec = $this->_getSelectList2('city', "city_id", '', $condi);

                            if (is_array($CityRec) && (count($CityRec) > 0)) {

                                $city_id = $CityRec[0]->city_id;

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , District does not exists in the system. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " ,  Please enter complete geography. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    }

                }

                if ($flag) {

                    // CITY
                    if ($arrFile[6] != '') {
                        if (trim($arrFile[4]) != '' && trim($arrFile[5]) != '') {
                            $condi = " LOWER(location_name)='" . mysql_escape_string(strtolower(trim($arrFile[6]))) . "' AND state_id='" . $state_id . "' AND city_id='" . $city_id . "'  AND status = 'A'";

                            $locRec = $this->_getSelectList2('table_location', "location_id", '', $condi);

                            if (is_array($locRec) && (count($locRec) > 0)) {

                                $location_id = $locRec[0]->location_id;

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , City does not exists in the system. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                        } else {
                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " ,  Please enter complete geography. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    }

                }

                // Joining Date 29 sep 2023 : sudhanshu

                if ($flag) {


                    if (!empty(trim($arrFile[12])) && trim($arrFile[12]) != '') {

                        $joiningDate = trim($arrFile[12]);

                        if (strtotime($joiningDate) !== false) {

                            $joining_date = date('Y-m-d', strtotime($joiningDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Joining date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } else {

                        $joining_date = '0000-00-00';


                    }

                }
                // End Todo : Joining Date 29 sep 2023 : sudhanshu

                // Salary Validate 29 sep 2023 : sudhanshu

                if ($flag) {


                    if (!empty(trim($arrFile[13])) && trim($arrFile[13]) != '') {

                        $SalSalary = trim($arrFile[13]);

                        if (preg_match("/^[1-9][0-9.]{0,15}$/", $SalSalary)) {

                            $salary = $SalSalary;

                        } else {
                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , please fill correct salary amount. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } else {

                        $salary = '';


                    }

                }
                // End Todo : Joining Date 29 sep 2023 : sudhanshu

                if ($flag) {

                    $data = array();

                    $data2 = array();

                    $data3 = array();

                    $data4 = array();

                    $data['account_id'] = $_SESSION['accountId'];
                    if (trim($arrFile[1]) != '') {
                        $data['salesman_name'] = mysql_escape_string(trim($arrFile[1]));
                    }

                    if (trim($arrFile[7]) != '') {
                        $data['salesman_address'] = mysql_escape_string(trim($arrFile[7]));
                    }

                    if (trim($arrFile[3]) != '') {
                        $data['salesman_email'] = mysql_escape_string(trim($arrFile[3]));
                    }

                    if ($country_id != '') {
                        $data['country'] = $country_id;
                    }

                    if ($state_id != '') {
                        $data['state'] = $state_id;
                    }

                    if ($city_id != '') {
                        $data['city'] = $city_id;
                    }

                    if ($location_id != '') {
                        $data['location'] = trim($location_id);
                    }

                    if (trim($phone_no) != '') {
                        $data['salesman_phome_no'] = mysql_escape_string(trim($phone_no));
                    }

                    //$data['end_date'] = $_SESSION['EndDate'];  //commented by sachin as per dhavika's request
                    if (trim($arrFile[11]) != '') {
                        $data['is_editable'] = trim($arrFile[11]);
                    }

                    if (trim($arrFile[12]) != '') {
                        $data['joining_date'] = $joining_date;
                    }
                    if (trim($arrFile[13]) != '') {
                        $data['sal_salary'] = $salary;
                    }


                    //echo "<pre>"; print_r($data);die;
                    // $item_id = $this->_dbInsert($data, 'table_salesman');
                    $this->_dbUpdate($data, 'table_salesman', " salesman_id=" . $salesman_id);

                    if (trim($arrFile[9]) != '') {
                        $data2['username'] = trim($arrFile[9]);
                        $this->_dbUpdate($data2, 'table_web_users', " salesman_id=" . $salesman_id);
                    }
//
                    if (trim($arrFile[10]) != '') {
                        $data2['password'] = md5($arrFile[10]);
                        $this->_dbUpdate($data2, 'table_web_users', " salesman_id=" . $salesman_id);
                    }


                    // if ($arrFile[8] != '' && $arrFile[9] == '') {

                    //     $data3['account_id'] = $_SESSION['accountId'];

                    //     $data3['salesman_id'] = $item_id;

                    //     $data3['hierarchy_id'] = $sal_hierarchy_id;

                    //     $data3['user_type'] = $_SESSION['userLoginType'];

                    //     $data3['status'] = '1';

                    //    // $relId = $this->_dbInsert($data3, 'table_salesman_hierarchy_relationship');

                    // }

                    if ($arrFile[8] != '' && $rpt_person_id != '' && $rpt_sort_order != '' && $rpt_hierarchy_id != '') {

                        if ($sal_sort_order > $rpt_sort_order) {

                            // $data4['account_id'] = $_SESSION['accountId'];

                            // $data4['salesman_id'] = $item_id;

                            // $data4['hierarchy_id'] = $sal_hierarchy_id;

                            $data4['rpt_user_id'] = $rpt_person_id;

                            $data4['rpt_hierarchy_id'] = $rpt_hierarchy_id;

                            // $data4['user_type'] = $_SESSION['userLoginType'];

                            // $data4['status'] = '1';
                            $this->_dbUpdate($data4, 'table_salesman_hierarchy_relationship', " salesman_id=" . $salesman_id);
                            // $relId = $this->_dbInsert($data4, 'table_salesman_hierarchy_relationship');

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Reporting person hierarchy is lower than " . $this->AliaseUsers['salesman'] . " hierarchy. \n";

                            $str_err_array = array($strErr);

                        }

                    }

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    /************************************* Start Upload Retailer ***************************************/
    /************************************* Start Upload Distributor ***************************************/
    function uploadDistributorUpdateFile()
    {
        $fields = array($this->AliaseUsers['distributor'] . ' Code*', $this->AliaseUsers['distributor'] . ' Name', 'Phone No1', $this->AliaseUsers['distributor'] . ' Address', 'zipcode', 'State', 'District', 'City', 'Contact Person1', 'contact Phone No1', 'Email-ID1', $this->AliaseUsers['distributor'] . ' Type', $this->AliaseUsers['stockist'] . ' Code', 'GST No', 'Username', 'Password');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = 'no';
        $row = 0;

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                
                $allFieldsMatch = true;
                if (empty(array_diff($array1, $array2)) && empty(array_diff($array2, $array1))) {
                    $allFieldsMatch = true;
                } else {
                    $allFieldsMatch = false;
                }
                
                if (count($arrFile) == 16 && $allFieldsMatch == true) {
                    $flag2 = true;

                } else {
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }
            

            if ($flag2 && $row > 0 && is_array($arrFile)) {
                
                if (empty($arrFile[0])) {

                    if (empty($arrFile[0])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . $arrFile[14] . "," . $arrFile[15] . " ," . $fields[0] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }


                // Check for distributor code

                if ($flag) {

                    $condi = " LOWER(distributor_code)='" . trim(strtolower($arrFile[0])) . "'";

                    $aDisCode = $this->_getSelectList('table_distributors', 'distributor_id,status,stockist_id,address_id', '', $condi);

                    if (is_array($aDisCode)) {
                        if ($aDisCode[0]->status == 'A') {
                            $distributor_id = $aDisCode[0]->distributor_id;
                            $old_stockist_id = $aDisCode[0]->stockist_id;
                            //Todo Start : sudhanshu 20 may 2024 : get addres id also chnage in query
                            $address_id = $aDisCode[0]->address_id;
                            //Todo End : sudhanshu 20 may 2024 : get addres id

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . ", " . $arrFile[14] . "," . $arrFile[15] . " , " . $this->AliaseUsers['distributor'] . " inactive. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } else {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . $arrFile[14] . "," . $arrFile[15] . " , " . $this->AliaseUsers['distributor'] . " code doesn't exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $phnNo = trim($arrFile[2]);

                    $pattern = "/^[0-9+\-]*$/";

                    if (!preg_match($pattern, $phnNo)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . $arrFile[14] . "," . $arrFile[15] . " ,Please Provide The Valid Phone Number. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $phnNo2 = trim($arrFile[9]);

                    $pattern = "/^[0-9+\-]*$/";

                    if (!preg_match($pattern, $phnNo2)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . $arrFile[14] . "," . $arrFile[15] . " ,Please Provide The Valid Phone Number. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

// State Check

                if ($flag) {

                    // Get State ID with the help of State Name
                    if (trim($arrFile[5]) != '') {

                        if (trim($arrFile[6]) != '' && trim($arrFile[7]) != '') {
                            $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower(trim($arrFile[5]))) . "' AND status = 'A'";

                            $StateRec = $this->_getSelectList2('state', "state_id,country_id", '', $condi);

                            if (is_array($StateRec) && (count($StateRec) > 0)) {

                                $state_id = $StateRec[0]->state_id;

                                $country_id = $StateRec[0]->country_id;

                            } else {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . $arrFile[14] . "," . $arrFile[15] . " , State does not exists. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " ,  Please enter complete geography. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                    }


                }

                // District

                if ($flag) {

                    if (trim($arrFile[6]) != '') {

                        if (trim($arrFile[5]) != '' && trim($arrFile[7]) != '') {
                            $condi = " LOWER(city_name)='" . mysql_escape_string(strtolower(trim($arrFile[6]))) . "' AND state_id='" . $state_id . "' AND status = 'A'";

                            $CityRec = $this->_getSelectList2('city', "city_id", '', $condi);

                            if (is_array($CityRec) && (count($CityRec) > 0)) {

                                $city_id = $CityRec[0]->city_id;

                            } else {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . $arrFile[14] . "," . $arrFile[15] . " , District does not exists. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                        } else {
                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " ,  Please enter complete geography. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                    }


                }

                // City

                if ($flag) {
                    if (trim($arrFile[7]) != '') {
                        if (trim($arrFile[5]) != '' && trim($arrFile[6]) != '') {
                            $condi = " LOWER(location_name)='" . mysql_escape_string(strtolower(trim($arrFile[7]))) . "' AND state_id='" . $state_id . "' AND city_id='" . $city_id . "' AND status = 'A'";

                            $locRec = $this->_getSelectList2('table_location', "location_id", '', $condi);

                            if (is_array($locRec) && (count($locRec) > 0)) {

                                $location_id = $locRec[0]->location_id;

                            } else {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . $arrFile[14] . "," . $arrFile[15] . " , City does not exists. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " ,  Please enter complete geography. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }

                    }


                }

                // 	Check Distributor Class Name '

                if (isset($arrFile[11]) && !empty(trim($arrFile[11]))) {

                    $condi = " LOWER(dis_type_name)='" . strtolower(trim($arrFile[11])) . "' AND status = 'A'";

                    $RelationRec = $this->_getSelectList('table_distributor_type_master', "dis_type_id", '', $condi);

                    if (is_array($RelationRec)) {

                        $dis_type_id = $RelationRec[0]->dis_type_id;

                    } else {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                            $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . $arrFile[14] . "," . $arrFile[15] . " ," . $this->AliaseUsers['distributor'] . " Type does not exists. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $auAc = $this->_getSelectList('table_account', "country_id", '', "");
                    $account_countryId = $auAc[0]->country_id;
                    $condi = " LOWER(country_id)='" . mysql_escape_string($account_countryId) . "' AND status = 'A' ";

                    $StRec = $this->_getSelectList2('country', "contact_max_length,contact_min_length", '', $condi);
                    //print_r($StRec);die;
                    if (is_array($StRec) && (count($StRec) > 0)) {
                        $cnt_1 = strlen(trim($arrFile[2]));

                        $cnt_3 = strlen(trim($arrFile[9]));
                        if ($arrFile[2] != '') {
                            if ($cnt_1 >= $StRec[0]->contact_min_length && $cnt_1 <=
                                $StRec[0]->contact_max_length) {
                                $phone_no = trim($arrFile[2]);

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[2] . " \n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }

                        }


                        if ($arrFile[9] != '') {
                            if ($cnt_3 >= $StRec[0]->contact_min_length && $cnt_3 <=
                                $StRec[0]->contact_max_length) {
                                $phone_no2 = trim($arrFile[9]);

                            } else {

                                $strErr .= "Error in Row - " . $row;

                                for ($i = 0; $i < count($fields); $i++) {

                                    $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                                }

                                $strErr .= " , Invalid Phone number " . $arrFile[10] . " \n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }

                        }


                    }
                }


                // Check for Stockist code

                if ($flag) {
                    if (trim($arrFile[12]) != '') {
                        $condi = " LOWER(stockist_code)='" . strtolower(trim($arrFile[12])) . "' AND status = 'A'";

                        $aStockistCode = $this->_getSelectList('table_stockist', 'stockist_id', '', $condi);

                        if (!is_array($aStockistCode) && empty($aStockistCode) && $aStockistCode[0]->stockist_id == "") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," .
                                $arrFile[14] . "," . $arrFile[15] . " ," .
                                $this->AliaseUsers['stockist'] . " Code Not exists in the system. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $stockist_id = $aStockistCode[0]->stockist_id;

                        }
                    }


                }

                //Todo Start : sudahnshu 27 march 2024 : username password validation

                if ($flag) {

                    if ((isset($arrFile[14]) && !empty($arrFile[14])) && (empty($arrFile[15]))) {


                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " , Password Can't be blank. \n";

                        $str_err_array = array($strErr);

                        $flag = false;


                    }

                }
                if ($flag) {

                    if ((isset($arrFile[15]) && !empty($arrFile[15])) && (empty($arrFile[14]))) {


                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " , Username Can't be blank. \n";

                        $str_err_array = array($strErr);

                        $flag = false;


                    }

                }

                if ($flag) {
                    if ((isset($arrFile[14]) && !empty(trim($arrFile[14]))) && (isset($arrFile[15]) && !empty(trim($arrFile[15])))) {
                        $condi = " LOWER(username)='" . strtolower(trim($arrFile[14])) . "' AND distributor_id<>'" . $distributor_id . "'";
                        $aDisCode = $this->_getSelectList2('table_web_users', '*', '', $condi);

                        if (is_array($aDisCode) && count($aDisCode) > 0) {


                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " , Username already exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;


                        }

                    }
                }

                if ($flag) {
                    if ((isset($arrFile[14]) && !empty(trim($arrFile[14]))) && (isset($arrFile[15]) && !empty(trim($arrFile[15])))) {
                        $condi = " LOWER(username)='" . strtolower(trim($arrFile[14])) . "' AND distributor_id='" . $distributor_id . "'";
                        $aDisCode = $this->_getSelectList2('table_web_users', '*', '', $condi);

                        if (is_array($aDisCode) && count($aDisCode) > 0) {
                            $web_user_status = $aDisCode[0]->status;

                            if ($web_user_status == 'I') {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ," . $arrFile[14] . "," . $arrFile[15] . " , Username Inactive. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                        }

                    }
                }

                //Todo End : sudahnshu 27 march 2024 : username password validation

                // Database Insert Query

                if ($flag) {

                    $data = array();

                    //$str = preg_replace('/[^A-Za-z0-9\. -]/', '', $str);

                    if (trim($arrFile[1]) != '') {
                        $data['distributor_name'] = htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "", trim($arrFile[1])));
                    }


                    if (trim($arrFile[3]) != '') {
                        $data['distributor_address'] = trim($arrFile[3]);
                    }


                    if (trim($arrFile[7]) != '') {
                        $data['distributor_location'] = trim($arrFile[7]);
                    }


                    /*add relationship class and region */
                    if ($dis_type_id > 0) {
                        $data['distributor_type_id'] = $dis_type_id;
                    }

                    if (trim($arrFile[13]) != '') {
                        $data['gst_no'] = trim($arrFile[13]);
                    }


//                    $data['region_id'] = $regionId;
                    if (trim($arrFile[12]) != '' && $stockist_id > 0) {
                        $data['stockist_id'] = $stockist_id;
                    }

                    if (trim($arrFile[5]) != '' && trim($arrFile[6]) != '' && trim($arrFile[7]) != '') {
                        $data['country'] = $country_id;

                        $data['state'] = $this->clean($state_id);
                    }
                    if (trim($arrFile[5]) != '' && trim($arrFile[6]) != '' && trim($arrFile[7]) != '') {
                        $data['city'] = $this->clean($city_id);

                    }
                    if (trim($arrFile[5]) != '' && trim($arrFile[6]) != '' && trim($arrFile[7]) != '') {
                        $data['location'] = $this->clean($location_id);
                    }


                    if (trim($arrFile[4]) != '') {
                        $data['zipcode'] = trim($arrFile[4]);
                    }


                    if (trim($phone_no) != '') {
                        $data['distributor_phone_no'] = trim($phone_no);
                    }


                    //$data['distributor_phone_no2'] = trim($phone_no1);

//                    $data['distributor_phone_no3'] = $arrFile[3];
                    if (trim($arrFile[10]) != '') {
                        $data['distributor_email'] = trim($arrFile[10]);
                    }


                    //  $data['distributor_email2'] = trim($arrFile[14]);

//                    $data['distributor_email3'] = $arrFile[17];
                    if (trim(trim($arrFile[8])) != '') {
                        $data['contact_person'] = trim($arrFile[8]);
                    }


//                    $data['contact_person3'] = $arrFile[13];
                    if (trim($phone_no2) != '') {
                        $data['contact_number'] = trim($phone_no2);
                    }

                    if (count($data) > 0) {
                        $data['last_update_date'] = date('Y-m-d');
                        $this->_dbUpdate($data, 'table_distributors', " distributor_id=" . $distributor_id);
                    }

                    //Todo start : Sudhanshu 17 may 2024 : multistockist mapping

                    if (trim($arrFile[12]) != '' && $stockist_id > 0) {
                        $status ='D';  // Delete
                        $this->_dbUpdate2(array("status" => $status, "updated_time" => date('h:i:sa'), "updated_date" => date('Y-m-d')), 'table_distributors_new', "stockist_id IN ( $old_stockist_id ) and distributor_id='" . $distributor_id . "'");
                        $dsnNewdata = $newSalesmanRec[0];
                        $dataNewDistributor['account_id'] =  $_SESSION['accountId'];
                        $dataNewDistributor['stockist_id'] = $stockist_id;
                        $dataNewDistributor['distributor_id'] = $distributor_id;
                        $dataNewDistributor['created_date'] = date('Y-m-d');
                        $dataNewDistributor['created_time'] = date('h:i:sa');
                        $dataNewDistributor['status'] = 'A';
                        $this->_dbInsert($dataNewDistributor, 'table_distributors_new');
                    }
                    
                    if (trim($arrFile[12]) != '' && $stockist_id > 0) {
            

                        $old_stockist_id = $stockist_id . ',' . $old_stockist_id;
                        $this->mysql_query("DELETE FROM table_stockist_distributor_mapping WHERE distributor_id = $distributor_id AND stockist_id IN ( $old_stockist_id )");
                        $mapping['distributor_id'] = $distributor_id;
                        $mapping['stockist_id'] = $stockist_id;
                        $mapping['account_id'] = $_SESSION['accountId'];
                        $mapping['status'] = 'A';
                        $this->_dbInsert($mapping, 'table_stockist_distributor_mapping');
                    }
                    //Todo end : Sudhanshu 17 may 2024 : multistockist mapping

                    //Todo Start : Sudhanshu 20 May 2024 : update shipping addres
                    if (trim($arrFile[3]) != '') {
                        $auAddr = $this->_getSelectList('table_distributor_address', "address_id", '', "   address_id = $address_id ");
                        if (is_array($auAddr) && (count($auAddr) > 0)) {
                            $addData['address'] = trim($arrFile[3]);
                            $addData['zipcode'] = trim($arrFile[4]);
                            $addData['updated_at'] = date('Y-m-d H:i:s');
                            $this->_dbUpdate($addData, 'table_distributor_address', " address_id=" . $address_id);
                        } else {
                            $addr['distributor_id'] = $distributor_id;
                            $addr['account_id'] = $_SESSION['accountId'];
                            $addr['address'] = trim($arrFile[3]);
                            $addr['zipcode'] = trim($arrFile[4]);
                            $addr['status'] = 'A';
                            $addr['created_at'] = date('Y-m-d H:i:s');
                            $addr['updated_at'] = date('Y-m-d H:i:s');
                            $adrId = $this->_dbInsert($addr, 'table_distributor_address');

                            $addr2['address_id'] = $adrId;
                            $this->_dbUpdate($addr2, 'table_distributors', " distributor_id=" . $distributor_id);
                        }

                    } else {

                        $this->mysql_query("DELETE FROM table_distributor_address WHERE address_id = $address_id  ");

                    }
                    //Todo End : Sudhanshu 20 May 2024 : update shipping addres

                    /*-----Distributor assign to all categories-----*/

                    //Todo Start : Sudhanshu 27 march 2024 add coulm username and password
                    if ((isset($arrFile[14]) && !empty(trim($arrFile[14]))) && (isset($arrFile[15]) && !empty(trim($arrFile[15])))) {
                        $condi = " distributor_id='" . $distributor_id . "' AND status = 'A'";
                        $aDisCode = $this->_getSelectList2('table_web_users', '*', '', $condi);

                        if (is_array($aDisCode) && count($aDisCode) > 0) {
                            $disLogin = [];

                            $web_user_id = $aDisCode[0]->web_user_id;

                            $disLogin['username'] = trim($arrFile[14]);

                            $disLogin['password'] = md5($arrFile[15]);


                            $disLogin['distributor_id'] = $distributor_id;


                            $this->_dbUpdate($disLogin, 'table_web_users', " web_user_id=" . $web_user_id);

                        } else {

                            $disLogin = [];

                            $disLogin['account_id'] = $_SESSION['accountId'];

                            $disLogin['username'] = trim($arrFile[14]);

                            $disLogin['password'] = md5($arrFile[15]);


                            $disLogin['distributor_id'] = $distributor_id;

                            $disLogin['user_type'] = 3;

                            $disLogin['start_date'] = $_SESSION['StartDate'];

                            //$disLogin['end_date'] = $_SESSION['EndDate']; //commented by sachin as per dhavika's request

                            $disLogin['status'] = 'A';

                            $this->_dbInsert($disLogin, 'table_web_users');

                        }


                    }

                    //Todo End : Sudhanshu 27 march 2024 add coulm username and password

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    /************************************* End Upload Distributor ***************************************/
    /*********************Scheme Upload functionality*********************************/
    /************************************* Start Upload PTR For Items ***************************************/
    function importQTYandPercentBenefitSchemeFile()
    {
        $fields = array('Scheme Description*', 'Item Code*', 'Minimum Qty*', 'Benefit %*', 'From Date*', 'To Date*');
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $row = 0;
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";
        while (!feof($file)) {
            $arrFile = fgetcsv($file);
            $flag = true;
            if ($row > 0 && is_array($arrFile)) {
                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[3]) || empty($arrFile[4]) || empty($arrFile[5])) {
                    if (empty($arrFile[0])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[0] . " shouldn't be empty \n";
                    } else if (empty($arrFile[1])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[1] . " shouldn't be empty \n";
                    } else if (empty($arrFile[2])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[2] . " shouldn't be empty \n";
                    } else if (empty($arrFile[3])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . " ," . $fields[3] . " shouldn't be empty \n";
                    } else if (empty($arrFile[4])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . " ," . $fields[4] . " shouldn't be empty \n";
                    } else if (empty($arrFile[5])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . " ," . $fields[5] . " shouldn't be empty \n";
                    }
                    $str_err_array = array($strErr);
                    $flag = false;
                }

                $SchemeDesc = htmlspecialchars(preg_replace($regex, "", str_replace("'", "\'", $arrFile[0])), ENT_IGNORE);
                $ItemCode = trim($arrFile[1]);
                $MinimumQty = trim($arrFile[2]);
                $BenefitPer = trim($arrFile[3]);
                $FromDate = date('Y-m-d', strtotime(trim($arrFile[4])));
                $ToDate = date('Y-m-d', strtotime(trim($arrFile[5])));
                $item_id = 0;
                if ($flag) {
                    $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower($ItemCode)) . "' AND status = 'A'";
                    $ItemRec = $this->_getSelectList('table_item', "item_id", '', $condi);

                    if (!is_array($ItemRec) || count($ItemRec) <= 0) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "  ,Invalid Item Code. \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    } else {
                        $item_id = $ItemRec[0]->item_id;
                    }
                }
                if ($flag) {

                    if (!is_numeric($MinimumQty) || $MinimumQty <= 0) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "  ,Invalid Minimum Quantity. \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                if ($flag) {

                    if (!is_numeric($BenefitPer) || $BenefitPer <= 0 || $BenefitPer > 99) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "  ,Invalid Benefit Percentage. \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                if ($flag) {

                    $tempFromDate = explode('-', $arrFile[4]);
                    $tempToDate = explode('-', $arrFile[5]);
                    $chckFrmDate = checkdate($tempFromDate[1], $tempFromDate[2], $tempFromDate[0]);
                    $chckToDate = checkdate($tempToDate[1], $tempToDate[2], $tempToDate[0]);

                    if (!empty($chckFrmDate) && !empty($chckToDate)) {
                        if (strtotime($ToDate) < strtotime($FromDate)) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "  ,Invalid Date Range. \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                        if (strtotime($ToDate) < strtotime(date('Y-m-d'))) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "  ,Invalid To Date. \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    } else {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "  ,Please Enter Valid Date. \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                // validate for unique record
                //echo "<pre>";print_R($arrFile);print_R($str_err_array);die;

                if ($flag) {
                    $Aurecd = $this->_getSelectList2('table_discount_detail as ds
					inner join table_discount_item as di on di.discount_id=ds.discount_id
					left join table_item as i on i.item_id=di.item_id
					INNER JOIN table_discount as d on d.discount_id=ds.discount_id',
                        "ds.discount_id", '',
                        " d.account_id=" . $this->clean($_SESSION['accountId']) . " AND ds.discount_desc = '" . $SchemeDesc . "' AND 
					ds.minimum_quantity = '" . $MinimumQty . "' AND ds.discount_percentage = '" . $BenefitPer . "'
					AND i.item_code='" . $ItemCode . "'	AND d.start_date='" . $FromDate . "' AND d.end_date='" . $ToDate . "' and d.status='A'");

                    if (is_array($Aurecd) && count($Aurecd) > 0) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "  ,Scheme already exists. \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }


                if ($flag) {

                    $data = array();
                    $data['account_id'] = $this->clean($_SESSION['accountId']);
                    $data['discount'] = 1;
                    $data['is_dis_discount'] = 2;
                    $data['party_type'] = 1;
                    $data['item_type'] = 3;
                    $data['is_open'] = 2;
                    $data['mode'] = 1;
                    $data['start_date'] = date('Y-m-d', strtotime(mysql_escape_string($this->clean($FromDate))));
                    $data['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($this->clean($ToDate))));
                    $data['last_update_date'] = date('Y-m-d');
                    $data['last_update_status'] = 'New';
                    $data['status'] = 'A';
                    $dis_id = $this->_dbInsert($data, 'table_discount');


                    // Check the user Type
                    if (isset($_SESSION['userLoginType']) && $_SESSION['userLoginType'] > 1) {
                        //Relationship with user
                        $data2['account_id'] = mysql_escape_string($_SESSION['accountId']);
                        $data2['discount_id'] = $dis_id;
                        $data2['user_type'] = $_SESSION['userLoginType'];
                        $data2['web_user_id'] = $_SESSION['WEBUSERID'];
                        $data2['salesman_id'] = $_SESSION['salesmanId'];
                        $rel_id = $this->_dbInsert($data2, 'table_user_relationships');
                    }
                    if ($dis_id != '') {
                        $data = array();
                        //Insert in discount detail tables/
                        $data['discount_id'] = mysql_escape_string($dis_id);
                        $data['discount_desc'] = mysql_escape_string($SchemeDesc);
                        $data['discount_type'] = 1;
                        $data['minimum_quantity'] = mysql_escape_string($MinimumQty);
                        $data['discount_percentage'] = mysql_escape_string($BenefitPer);
                        $dis_dtl_id = $this->_dbInsert($data, 'table_discount_detail');

                        $data = array();
                        /***Insert in item wise discount table**/
                        $data['discount_id'] = mysql_escape_string($dis_id);
                        $data['item_id'] = mysql_escape_string($item_id);
                        $id = $this->_dbInsert($data, 'table_discount_item');
                    }
                }
            }
            $row++;
        }
        fclose($file);
        if ($row <= 2)
            return "no";
        else
            return $str_err_array;
    }

    /*********************Scheme Upload functionality**********************************/

    // Todo Start : Jatin : 2 Feb 2024 : Import parent salesman mapping master data

    function uploadParentSalesmanMapping()

    {

        $fields = array('Parent Code*', 'Salesman Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 2 && trim($arrFile[0]) == "Parent Code*" && trim($arrFile[1]) == "Salesman Code*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if (empty($arrFile[0]) && empty($arrFile[1])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Parent Code*" || (empty($arrFile[1]) || trim($arrFile[1]) == "Salesman Code*")) {

                        if (empty($arrFile[0]) || trim($arrFile[0]) == "Parent Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[0] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[1]) || trim($arrFile[1]) == "Salesman Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[1] . " shouldn't be empty  \n";

                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                    // check Survey
                    if ($flag) {

                        $survey = trim($arrFile[0]);

                        $condi = " LOWER(parent_code)='" . strtolower($survey) . "' AND status = 'A'";

                        $surResult = $this->_getSelectList('table_parent_master ', 'id', '', $condi);

                        if (!is_array($surResult) && empty($surResult)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Parent doesn't exists in the system.\n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $parent_id = $surResult[0]->id;

                        }

                    }

                    // check salesman

                    if ($flag) {

                        $employee_code = trim($arrFile[1]);

                        $condi = " employee_code='" . $employee_code . "' AND status = 'A'";

                        $salResult = $this->_getSelectList('table_salesman ', 'salesman_id', '', $condi);

                        if (!is_array($salResult) && empty($salResult)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Salesman doesn't exists in the system.\n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $salesman_id = $salResult[0]->salesman_id;

                        }

                    }

                    if ($flag) {

                        $condi = " parent_id='" . $parent_id . "' AND salesman_id = '" . $salesman_id . "' ";

                        $salMappig = $this->_getSelectList('table_parent_salesman_mapping', "parent_id,salesman_id", '', $condi);


                        if (is_array($salMappig) && (count($salMappig) > 0)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                                $this->AliaseUsers['salesman'] . " Parent Mapping Already Exist.\n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $data = array();
                            $data['account_id'] = $_SESSION['accountId'];
                            $data['parent_id'] = $parent_id;
                            $data['salesman_id'] = $salesman_id;
                            $data['created_on'] = date('Y-m-d H:i:s');
                            $mid = $this->_dbInsert($data, 'table_parent_salesman_mapping');

                        }


                    }


                }
            }

            $row++;

        }

        //die;

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    // Todo End : Jatin : 2 Feb 2024 : Import parent salesman mapping master data


    // Todo Start : Jatin : 2 Feb 2024 : Import parent master

    function uploadParentSalesman()

    {

        $fields = array('Parent Name*', 'Address', 'Phone Number*', 'State*', 'District*', 'City*', 'Customer Type*', 'Contact name1*', 'Contact Number1*', 'Contact Designation1*', 'Contact name2*', 'Contact Number2*', 'Contact Designation2*', 'Added By*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 14 && trim($arrFile[0]) == "Parent Name*" && trim($arrFile[1]) == "Address" &&
                    trim($arrFile[2]) == "Phone Number*" && trim($arrFile[3]) == "State*" && trim($arrFile[4]) == "District*" && trim($arrFile[5]) == "City*" && trim($arrFile[6]) == "Customer Type*" && trim($arrFile[7]) == "Contact name1*" && ($arrFile[8]) == "Contact Number1*" && ($arrFile[9]) == "Contact Designation1*" && ($arrFile[10]) == "Contact name2*" && ($arrFile[11]) == "Contact Number2*" && ($arrFile[12]) == "Contact Designation2*" && ($arrFile[13]) == "Added By*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if (empty($arrFile[0]) && empty($arrFile[1]) && empty($arrFile[2]) && empty($arrFile[3]) && empty
                ($arrFile[4]) && empty($arrFile[5]) && empty($arrFile[6]) && empty($arrFile[7]) && empty($arrFile[8]) && empty($arrFile[9]) && empty($arrFile[10]) && empty($arrFile[11]) && empty($arrFile[12]) && empty($arrFile[13])
            ) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[2]) || empty($arrFile[3]) || empty($arrFile[4]) || empty
                        ($arrFile[5]) || empty($arrFile[6]) || empty($arrFile[7]) || empty($arrFile[8]) || empty
                        ($arrFile[9]) || empty($arrFile[10]) || empty($arrFile[11]) || empty($arrFile[12]) || empty($arrFile[13])) {

                        if (empty($arrFile[0]) || trim($arrFile[0]) == "Parent Name*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[0] . " shouldn't be empty  \n";

                        }

                        if (empty($arrFile[2]) || trim($arrFile[2]) == "Phone Number*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[2] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[3]) || trim($arrFile[3]) == "State*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[3] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[4]) || trim($arrFile[4]) == "District*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[4] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[5]) || trim($arrFile[5]) == "City*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[5] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[6]) || trim($arrFile[6]) == "Customer Type*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[6] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[7]) || trim($arrFile[7]) == "Contact name1*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[7] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[8]) || trim($arrFile[8]) == "Contact Number1*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[8] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[9]) || trim($arrFile[9]) == "Contact Designation1*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[9] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[10]) || trim($arrFile[10]) == "Contact name2*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[10] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[11]) || trim($arrFile[11]) == "Contact Number2*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[11] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[12]) || trim($arrFile[12]) == "Contact Designation2*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[12] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[13]) || trim($arrFile[13]) == "Added By*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                $fields[13] . " shouldn't be empty  \n";

                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                    // Add country no max min length
                    $_objAdmin = new Admin();
                    $getCountryId = $_objAdmin->getCountryPhoneNoLenght($_SESSION['accountId']);


                    if ($flag) {

                        $phone = trim($arrFile[2]);
                        $phone1 = trim($arrFile[8]);
                        $phone2 = trim($arrFile[11]);

                        if (!empty($phone) || !empty($phone1) || !empty($phone2)) {

                            $pattern = "/^[0-9+\-]*$/";

                            if (!preg_match($pattern, $phone)) {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ,Please Provide The Valid Phone Number  \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                            if (!preg_match($pattern, $phone1)) {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                    $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ,Please Provide The Valid Phone Number1  \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                            if (!preg_match($pattern, $phone2)) {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                    $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " ,Please Provide The Valid Phone Number2  \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        }

                    }

                    // Start : Check Data validation

                    // Check Number
                    if ($flag) {

                        if ($getCountryId[0]->contact_min_length >= count(trim($arrFile[2])) && count(trim
                            ($arrFile[2])) <=
                            $getCountryId[0]->contact_max_length) {

                            $phone = trim($arrFile[2]);

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " , Invalid Phone Number. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // Check Number 1
                    if ($flag) {

                        if ($getCountryId[0]->contact_min_length >= count(trim($arrFile[8])) && count(trim($arrFile[8])) <=
                            $getCountryId[0]->contact_max_length) {

                            $phone1 = trim($arrFile[8]);

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " , Invalid Contact Number 1 . \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // Check Number 2
                    if ($flag) {

                        if ($getCountryId[0]->contact_min_length >= count(trim($arrFile[11])) && count(trim
                            ($arrFile[11])) <=
                            $getCountryId[0]->contact_max_length) {

                            $phone2 = trim($arrFile[11]);

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " , Invalid Contact Number 2 . \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    if ($flag) {

                        // Get State ID with the help of State Name

                        $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower($arrFile[3])) . "' AND status = 'A'";

                        $StateRec = $this->_getSelectList2('state', "state_id,country_id", '', $condi);

                        if (is_array($StateRec) && (count($StateRec) > 0)) {

                            $state_id = $StateRec[0]->state_id;

                            $country_id = $StateRec[0]->country_id;

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " , State does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // District

                    if ($flag) {

                        $condi = " LOWER(city_name)='" . mysql_escape_string(strtolower($arrFile[4])) . "' AND state_id='" . $state_id . "' AND status = 'A'";

                        $CityRec = $this->_getSelectList2('city', "city_id", '', $condi);

                        if (is_array($CityRec) && (count($CityRec) > 0)) {

                            $city_id = $CityRec[0]->city_id;

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " , District does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // City

                    if ($flag) {

                        $condi = " LOWER(location_name)='" . mysql_escape_string(strtolower($arrFile[5])) . "' AND state_id='" . $state_id . "' AND city_id='" . $city_id . "' AND status = 'A'";

                        $locRec = $this->_getSelectList2('table_location', "location_id", '', $condi);

                        if (is_array($locRec) && (count($locRec) > 0)) {

                            $location_id = $locRec[0]->location_id;

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " , City does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // 	Check Customer type

                    if (isset($arrFile[6]) && !empty(trim($arrFile[6]))) {

                        $condi = " LOWER(customer_type)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "",
                                strtolower($arrFile[6]))) . "' AND status = 'A'";

                        $RelationRec = $this->_getSelectList('table_parent_customer_type_master', "id", '', $condi);

                        if (is_array($RelationRec)) {

                            $cust_type_id = $RelationRec[0]->id;

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " , Customer Type does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // 	Check Designation

                    if (isset($arrFile[9]) && !empty(trim($arrFile[9]))) {

                        $condi = " LOWER(designation)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "",
                                strtolower($arrFile[9]))) . "' AND status = 'A'";

                        $RelationRec = $this->_getSelectList('table_parent_contact_designation_master', "id", '', $condi);

                        if (is_array($RelationRec)) {

                            $designation_id = $RelationRec[0]->id;

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " , Designation does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // Check Designation1

                    if (isset($arrFile[12]) && !empty(trim($arrFile[12]))) {

                        $condi1 = " LOWER(designation)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "",
                                strtolower($arrFile[12]))) . "' AND status = 'A'";

                        $RelationRec = $this->_getSelectList('table_parent_contact_designation_master', "id", '',
                            $condi1);

                        if (is_array($RelationRec)) {

                            $designation_id1 = $RelationRec[0]->id;

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ," . $arrFile[13] . " , Designation 1 does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }


                    // check Added by salesman

                    if ($flag) {

                        $employee_code = trim($arrFile[13]);

                        $condi = " employee_code='" . $employee_code . "' AND status = 'A'";

                        $salResult = $this->_getSelectList('table_salesman ', 'salesman_id', '', $condi);

                        if (!is_array($salResult) && empty($salResult)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " . ", " . $arrFile[13] .
                                ", Salesman doesn't exists in the system.  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $added_by = $salResult[0]->salesman_id;

                        }

                    }

                    if ($flag) {

                        $data = array();
                        $data['account_id'] = $_SESSION['accountId'];
                        $data['parent_name'] = trim($arrFile[0]);
                        $data['address'] = trim($arrFile[1]);
                        $data['phoneno'] = $phone;
                        $data['state'] = $state_id;
                        $data['district'] = $city_id;
                        $data['city'] = $location_id;
                        $data['cust_type_id'] = $cust_type_id;
                        $data['contact_name'] = trim($arrFile[7]);
                        $data['contact_number'] = $phone1;
                        $data['designation'] = $designation_id;
                        $data['contact_name1'] = trim($arrFile[10]);
                        $data['contact_number1'] = $phone2;
                        $data['designation1'] = $designation_id1;
                        $data['added_by'] = $added_by;
                        $data['created_on'] = date('Y-m-d H:i:s');
                        $mid = $this->_dbInsert($data, 'table_parent_master');

                        $data['parent_code'] = "PAR" . $mid;
                        $cid = $this->_dbUpdate($data, 'table_parent_master', " id='" . $mid . "'");

                    }
                    // End : Check Data validation

                }
            }

            $row++;

        }

        //die;

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    // Todo End : Jatin : 2 Feb 2024 : Import parent master

    // Todo Start : Jatin : 13 Feb 2024 : Import parent master

    function uploadProjectMaster()

    {

        $fields = array('Project Name*', 'Address*', 'Phone Number*', 'State*', 'District*', 'City*', 'Parent Code', 'Contact name*', 'Contact Number*', 'Contact Designation*', 'Distributor Code*', 'Remarks', 'Assign To (Salesman Code)*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 13 && trim($arrFile[0]) == "Project Name*" &&
                    trim($arrFile[1]) == "Address*" && trim($arrFile[2]) == "Phone Number*" && trim($arrFile[3]) == "State*" && trim($arrFile[4]) == "District*" && trim($arrFile[5]) == "City*" && trim($arrFile[6]) == "Parent Code" && ($arrFile[7]) == "Contact name*" && ($arrFile[8]) == "Contact Number*" && ($arrFile[9]) == "Contact Designation*" && ($arrFile[10]) == "Distributor Code*" && ($arrFile[11]) == "Remarks" && ($arrFile[12]) == "Assign To (Salesman Code)*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if (empty($arrFile[0]) && empty($arrFile[1]) && empty($arrFile[2]) && empty($arrFile[3]) && empty
                ($arrFile[4]) && empty($arrFile[5]) && empty($arrFile[6]) && empty($arrFile[7]) && empty($arrFile[8]) && empty($arrFile[9]) && empty($arrFile[10]) && empty($arrFile[11]) && empty($arrFile[12])
            ) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[3]) || empty
                        ($arrFile[4]) || empty($arrFile[5]) || empty($arrFile[7]) || empty($arrFile[8]) || empty
                        ($arrFile[9]) || empty($arrFile[10]) || empty($arrFile[12])) {


                        if (empty($arrFile[0]) || trim($arrFile[0]) == "Project Name*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . ", "
                                . $arrFile[2] . ", " . ", " . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " .
                                $arrFile[5] . ", " . ", " . $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " .
                                $arrFile[8] . ", " . ", " . $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " .
                                $arrFile[11] . ", " . ", " . $arrFile[12] . ", " .
                                $fields[0] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[1]) || trim($arrFile[1]) == "Address*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . ", "
                                . $arrFile[2] . ", " . ", " . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " .
                                $arrFile[5] . ", " . ", " . $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " .
                                $arrFile[8] . ", " . ", " . $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " .
                                $arrFile[11] . ", " . ", " . $arrFile[12] . ", " .
                                $fields[1] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[2]) || trim($arrFile[2]) == "Phone Number*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . ", "
                                . $arrFile[2] . ", " . ", " . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " .
                                $arrFile[5] . ", " . ", " . $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " .
                                $arrFile[8] . ", " . ", " . $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " .
                                $arrFile[11] . ", " . ", " . $arrFile[12] . ", " .
                                $fields[3] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[3]) || trim($arrFile[3]) == "State*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . ", "
                                . $arrFile[2] . ", " . ", " . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " .
                                $arrFile[5] . ", " . ", " . $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " .
                                $arrFile[8] . ", " . ", " . $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " .
                                $arrFile[11] . ", " . ", " . $arrFile[12] . ", " .
                                $fields[3] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[4]) || trim($arrFile[4]) == "District*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . ", "
                                . $arrFile[2] . ", " . ", " . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " .
                                $arrFile[5] . ", " . ", " . $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " .
                                $arrFile[8] . ", " . ", " . $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " .
                                $arrFile[11] . ", " . ", " . $arrFile[12] . ", " .
                                $fields[4] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[5]) || trim($arrFile[5]) == "City*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . ", "
                                . $arrFile[2] . ", " . ", " . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " .
                                $arrFile[5] . ", " . ", " . $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " .
                                $arrFile[8] . ", " . ", " . $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " .
                                $arrFile[11] . ", " . ", " . $arrFile[12] . ", " .
                                $fields[5] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[7]) || trim($arrFile[7]) == "Contact name*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . ", "
                                . $arrFile[2] . ", " . ", " . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " .
                                $arrFile[5] . ", " . ", " . $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " .
                                $arrFile[8] . ", " . ", " . $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " .
                                $arrFile[11] . ", " . ", " . $arrFile[12] . ", " .
                                $fields[7] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[8]) || trim($arrFile[8]) == "Contact Number*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . ", "
                                . $arrFile[2] . ", " . ", " . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " .
                                $arrFile[5] . ", " . ", " . $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " .
                                $arrFile[8] . ", " . ", " . $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " .
                                $arrFile[11] . ", " . ", " . $arrFile[12] . ", " .
                                $fields[8] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[9]) || trim($arrFile[9]) == "Contact Designation*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . ", "
                                . $arrFile[2] . ", " . ", " . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " .
                                $arrFile[5] . ", " . ", " . $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " .
                                $arrFile[8] . ", " . ", " . $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " .
                                $arrFile[11] . ", " . ", " . $arrFile[12] . ", " .
                                $fields[9] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[10]) || trim($arrFile[10]) == "Distributor Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . ", "
                                . $arrFile[2] . ", " . ", " . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " .
                                $arrFile[5] . ", " . ", " . $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " .
                                $arrFile[8] . ", " . ", " . $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " .
                                $arrFile[11] . ", " . ", " . $arrFile[12] . ", " .
                                $fields[10] . " shouldn't be empty  \n";

                        }
//                        if (empty($arrFile[11]) || trim($arrFile[11]) == "Remarks*") {
//
//                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . ", "
//                                . $arrFile[2] . ", " . ", " . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " .
//                                $arrFile[5] . ", " . ", " . $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " .
//                                $arrFile[8] . ", " . ", " . $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " .
//                                $arrFile[11] . ", " . ", " . $arrFile[12] . ", " .
//                                $fields[11] . " shouldn't be empty  \n";
//
//                        }
                        if (empty($arrFile[12]) || trim($arrFile[12]) == "Assign To (Salesman Code)*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . ", "
                                . $arrFile[2] . ", " . ", " . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " .
                                $arrFile[5] . ", " . ", " . $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " .
                                $arrFile[8] . ", " . ", " . $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " .
                                $arrFile[11] . ", " . ", " . $arrFile[12] . ", " .
                                $fields[12] . " shouldn't be empty  \n";

                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                    // Add country no max min length
                    $_objAdmin = new Admin();
                    $getCountryId = $_objAdmin->getCountryPhoneNoLenght($_SESSION['accountId']);


                    if ($flag) {

                        $phone = trim($arrFile[2]);
                        $phone1 = trim($arrFile[8]);

                        if (!empty($phone) || !empty($phone1)) {

                            $pattern = "/^[0-9+\-]*$/";

                            if (!preg_match($pattern, $phone)) {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " ,Please Provide The Valid Phone Number \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                            if (!preg_match($pattern, $phone1)) {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                    $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ,"
                                    . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . ","
                                    . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12]
                                    . " ,Please Provide The Valid Contact Number \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }

                        }

                    }

                    // Start : Check Data validation

                    // Check Number
                    if ($flag) {

                        if ($getCountryId[0]->contact_min_length >= count(trim($arrFile[2])) && count(trim
                            ($arrFile[2])) <=
                            $getCountryId[0]->contact_max_length) {

                            $phone = trim($arrFile[2]);

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , Invalid Phone Number. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // Check Contact Number
                    if ($flag) {

                        if ($getCountryId[0]->contact_min_length >= count(trim($arrFile[8])) && count(trim
                            ($arrFile[8])) <=
                            $getCountryId[0]->contact_max_length) {

                            $phone1 = trim($arrFile[8]);

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , Invalid Contact Number. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    if ($flag) {

                        // Get State ID with the help of State Name

                        $condi = " LOWER(state_name)='" . mysql_escape_string(strtolower($arrFile[3])) . "' AND status = 'A'";

                        $StateRec = $this->_getSelectList2('state', "state_id,country_id", '', $condi);

                        if (is_array($StateRec) && (count($StateRec) > 0)) {

                            $state_id = $StateRec[0]->state_id;

                            $country_id = $StateRec[0]->country_id;

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , State does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // District

                    if ($flag) {

                        $condi = " LOWER(city_name)='" . mysql_escape_string(strtolower($arrFile[4])) . "' AND state_id='" . $state_id . "' AND status = 'A'";

                        $CityRec = $this->_getSelectList2('city', "city_id", '', $condi);

                        if (is_array($CityRec) && (count($CityRec) > 0)) {

                            $city_id = $CityRec[0]->city_id;

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , District does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // City

                    if ($flag) {

                        $condi = " LOWER(location_name)='" . mysql_escape_string(strtolower($arrFile[5])) . "' AND state_id='" . $state_id . "' AND city_id='" . $city_id . "' AND status = 'A'";

                        $locRec = $this->_getSelectList2('table_location', "location_id", '', $condi);

                        if (is_array($locRec) && (count($locRec) > 0)) {

                            $location_id = $locRec[0]->location_id;

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," . $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," . $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , City does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // 	Check Parent Code

                    if (isset($arrFile[6]) && !empty(trim($arrFile[6]))) {

                        $condi = " LOWER(parent_code)='" . trim(strtolower($arrFile[6])) . "' AND status = 'A'";

                        $parent_id = $this->_getSelectList('table_parent_master', "id,cust_type_id", '', $condi);

                        if (is_array($parent_id)) {

                            $parentid = $parent_id[0]->id;

                            $cust_id = $parent_id[0]->cust_type_id;

                            $project_type_id = '1';

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , Parent Code does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    } else {

                        $project_type_id = '3';

                    }

                    // 	Check Designation

                    if (isset($arrFile[9]) && !empty(trim($arrFile[9]))) {

                        $condi = " LOWER(designation)='" . htmlspecialchars(preg_replace("/[^A-Za-z0-9?!\s-,.\/]/", "",
                                strtolower($arrFile[9]))) . "' AND status = 'A'";

                        $RelationRec = $this->_getSelectList('table_parent_contact_designation_master', "id", '', $condi);

                        if (is_array($RelationRec)) {

                            $designation_id = $RelationRec[0]->id;

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , Designation does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // Check Distributor Code

                    if (isset($arrFile[10]) && !empty(trim($arrFile[10]))) {

                        $condi1 = " LOWER(distributor_code)='" . trim(strtolower($arrFile[10])) . "' AND status = 'A'";

                        $RelationRec = $this->_getSelectList('table_distributors', "distributor_id", '',
                            $condi1);

                        if (is_array($RelationRec)) {

                            $distributor_id = $RelationRec[0]->distributor_id;

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . "," . $arrFile[3] . "  ," . $arrFile[4] . "," . $arrFile[5] . " ," .
                                $arrFile[6] . " ," . $arrFile[7] . "," . $arrFile[8] . " ," . $arrFile[9] . "," .
                                $arrFile[10] . "  ," . $arrFile[11] . "," . $arrFile[12] . " , Distributor Code does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }


                    // check Added by salesman

                    if ($flag) {

                        $employee_code = trim($arrFile[12]);

                        $condi = " employee_code='" . $employee_code . "' AND status = 'A'";

                        $salResult = $this->_getSelectList('table_salesman ', 'salesman_id', '', $condi);

                        if (!is_array($salResult) && empty($salResult)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[2] . ", " . ", "
                                . $arrFile[3] . ", " . ", " . $arrFile[4] . ", " . ", " . $arrFile[5] . ", " . ", " .
                                $arrFile[6] . ", " . ", " . $arrFile[7] . ", " . ", " . $arrFile[8] . ", " . ", " .
                                $arrFile[9] . ", " . ", " . $arrFile[10] . ", " . ", " . $arrFile[11] . ", " . ", " .
                                $arrFile[12] . ", " .
                                ", Salesman Code doesn't exists in the system.  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $added_by = $salResult[0]->salesman_id;

                        }

                    }

                    if ($flag) {

                        //Project Master Info :
                        $data = [];

                        $data['account_id'] = $_SESSION['accountId'];
                        $data['parent_id'] = $parentid;
                        $data['cust_type_id'] = $cust_id;
                        $data['parent_type'] = $project_type_id;
                        $data['project_name'] = trim($arrFile[0]);
                        $data['phoneno'] = $phone;
                        $data['project_source'] = 'web';
                        $data['Address'] = trim($arrFile[1]);
                        $data['state'] = $state_id;
                        $data['district'] = $city_id;
                        $data['city'] = $location_id;
                        $data['project_status'] = '1';
                        $data['status'] = 'A';
                        $data['assign_to'] = $added_by;
                        $data['updated_on'] = date("Y-m-d H:i:s");
                        $data['created_on'] = date("Y-m-d H:i:s");

                        $project_id = $this->_dbInsert($data, 'table_project_master');

                        // Project Details
                        $data1 = [];
                        $data1['project_id'] = $project_id;
                        $data1['account_id'] = $_SESSION['accountId'];
                        $data1['contact_name'] = trim($arrFile[7]);
                        $data1['contact_no'] = trim($arrFile[8]);
                        $data1['contact_designation'] = trim($designation_id);
                        $data1['is_selected'] = '1';
                        $data1['created_on'] = date("Y-m-d H:i:s");
                        $cnt_id = $this->_dbInsert($data1, 'table_project_contact_mapping');

                        //Project Info :
                        $data2 = [];

                        $data2['account_id'] = $_SESSION['accountId'];
                        $data2['project_id'] = $project_id;
                        $data2['contact_id'] = $cnt_id;
                        $data2['remarks'] = trim($arrFile[11]);
                        $data2['assign_to'] = $added_by;
                        $data2['project_status'] = '1';
                        $data2['date'] = date("Y-m-d H:i:s");
                        $data2['time'] = date("H:i:s");
                        $data2['created_on'] = date("Y-m-d H:i:s");

                        $projecDetailsId = $this->_dbInsert($data2, 'table_project_details');

                        // Add Distributor ID
                        $data3 = [];
                        $data3['project_id'] = $project_id;
                        $data3['distributor_id'] = $distributor_id;
                        $disId = $_objAdmin->_dbInsert($data3, 'table_project_distributor_mapping');

                        $data4['contact_id'] = $cnt_id;
                        $data4['project_code'] = "PROJ" . $project_id;
                        $cid = $this->_dbUpdate($data4, 'table_project_master', " id='" . $project_id . "'");

                    }
                    // End : Check Data validation

                }
            }

            $row++;

        }

        //die;

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot') {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }

    // Todo End : Jatin : 13 Feb 2024 : Import parent master

    // Todo Start : Jatin : 5 March 2024 : Import Size Master

    function uploadItemSizeFile()

    {

        $fields = array('Item Size Code*', 'Item Size Name*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 2 && trim($arrFile[0]) == "Item Size Code*" && trim($arrFile[1]) == "Item Size Name*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if (empty($arrFile[0]) && empty($arrFile[1])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[1])) {


                        if (empty($arrFile[0]) || trim($arrFile[0]) == "Item Size Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                                $fields[0] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[1]) || trim($arrFile[1]) == "Item Size Name*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                                $fields[1] . " shouldn't be empty  \n";

                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                    if ($flag) {

                        $condi = " LOWER(item_size_code)='" .
                            mysql_escape_string(strtolower($arrFile[0])) . "' and LOWER(item_size_name)='" .
                            mysql_escape_string(strtolower($arrFile[1])) . "' ";

                        $aCatRec = $this->_getSelectList('table_item_size_master', '*', '', $condi);

                        if (is_array($aCatRec)) {

                            $strErr .= " Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,already exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    if ($flag) {

                        $data = array();
                        $data['account_id'] = $this->clean($_SESSION['accountId']);
                        $data['item_size_code'] = mysql_escape_string($this->clean($arrFile[0]));
                        $data['item_size_name'] = mysql_escape_string($this->clean($arrFile[1]));
                        $data['created_on'] = date('Y-m-d');
                        $data['status'] = 'A';
                        $id = $this->_dbInsert($data, 'table_item_size_master');

                    }


                }
                $row++;
            }


        }

        //die;

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot') {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }

    // Todo End : Jatin : 5 March 2024 : Import Size Master

    // Todo Start : Jatin : 7 March 2024 : Import Color Master

    function uploadColorSizeFile()

    {

        $fields = array('Color Code*', 'Color Name*', 'RGB Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 3 && trim($arrFile[0]) == "Color Code*" && trim($arrFile[1]) == "Color Name*" && trim($arrFile[2]) == "RGB Code*") {

                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";

                }
            }

            if (empty($arrFile[0]) && empty($arrFile[1]) && empty($arrFile[2])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2])) {


                        if (empty($arrFile[0]) || trim($arrFile[0]) == "Color Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $arrFile[2] . ", " .
                                $fields[0] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[1]) || trim($arrFile[1]) == "Color Name*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $arrFile[2] . ", " .
                                $fields[1] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[2]) || trim($arrFile[2]) == "RGB Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $arrFile[2] . ", " .
                                $fields[2] . " shouldn't be empty  \n";

                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                    if ($flag) {

                        $condi = " LOWER(item_color_code)='" .
                            mysql_escape_string(strtolower($arrFile[0])) . "' and LOWER(item_color_name)='" .
                            mysql_escape_string(strtolower($arrFile[1])) . "' and LOWER(rgb_code)='"
                            . mysql_escape_string(strtolower($arrFile[2])) . "' ";

                        $aCatRec = $this->_getSelectList('table_item_color_master', '*', '', $condi);

                        if (is_array($aCatRec)) {

                            $strErr .= " Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] .
                                " ,already exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    if ($flag) {

                        $data = array();
                        $data['account_id'] = $this->clean($_SESSION['accountId']);
                        $data['item_color_code'] = mysql_escape_string($this->clean($arrFile[0]));
                        $data['item_color_name'] = mysql_escape_string($this->clean($arrFile[1]));
                        $data['rgb_code'] = mysql_escape_string($arrFile[2]);
                        $data['created_on'] = date('Y-m-d');
                        $data['updated_on'] = date('Y-m-d H:i:s');
                        $data['status'] = 'A';
                        $id = $this->_dbInsert($data, 'table_item_color_master');

                    }


                }
                $row++;
            }


        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot') {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }

    // Todo End : Jatin : 7 March 2024 : Import Color Master

    // Todo Start : Jatin : 7 March 2024 : Import Size Color Mapping Master

    function uploadColorSizeMappingFile()

    {

        $fields = array('Item Code*', 'Color Code*', 'Size Code*', 'Price*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 4 && trim($arrFile[0]) == "Item Code*" && trim($arrFile[1]) == "Color Code*"
                    && trim($arrFile[2]) == "Size Code*" && trim($arrFile[3]) == "Price*") {

                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";

                }
            }

            if (empty($arrFile[0]) && empty($arrFile[1]) && empty($arrFile[2]) && empty($arrFile[3])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[3])) {


                        if (empty($arrFile[0]) || trim($arrFile[0]) == "Item Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $arrFile[2] . ", " . $arrFile[3] . ", " .
                                $fields[0] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[1]) || trim($arrFile[1]) == "Color Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $arrFile[2] . ", " . $arrFile[3] . ", " .
                                $fields[1] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[2]) || trim($arrFile[2]) == "Size Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $arrFile[2] . ", " . $arrFile[3] . ", " .
                                $fields[2] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[3]) || trim($arrFile[3]) == "Price*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $arrFile[2] . ", " . $arrFile[3] . ", " .
                                $fields[3] . " shouldn't be empty  \n";

                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }


                    if ($flag) {

                        $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower($arrFile[0])) . "' and status='A' ";

                        $aCatRec2 = $this->_getSelectList('table_item', 'item_id', '', $condi);

                        if (!is_array($aCatRec2) && count($aCatRec2) <= 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $arrFile[2] . ", " . $arrFile[3] . ",Item Code Does'nt exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $itemId = $aCatRec2[0]->item_id;

                        }

                    }

                    if ($flag) {

                        $condi = " LOWER(item_color_code)='" . mysql_escape_string(strtolower($arrFile[1])) . "' and status='A' ";

                        $aCatRec1 = $this->_getSelectList('table_item_color_master', 'id', '', $condi);

                        if (!is_array($aCatRec1) && count($aCatRec1) <= 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $arrFile[2] . ", " . $arrFile[3] . ",Color Code Does'nt exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $colorId = $aCatRec1[0]->id;

                        }

                    }

                    if ($flag) {

                        $condi = " LOWER(item_size_code)='" . mysql_escape_string(strtolower($arrFile[2])) . "' and status='A' ";

                        $aCatRec12 = $this->_getSelectList('table_item_size_master', 'id', '', $condi);

                        if (!is_array($aCatRec12) && count($aCatRec12) <= 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $arrFile[2] . ", " . $arrFile[3] . ",Size Code Does'nt exists 
                            in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $sizeId = $aCatRec12[0]->id;

                        }

                    }

                    if ($flag) {

                        if (!is_numeric($arrFile[3]) && $arrFile[3] != '0') {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $arrFile[2] . ", " . $arrFile[3] . ",Please Enter Valid Price \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $price = $arrFile[3];

                        }

                    }

                    if ($flag) {

                        $condi = " LOWER(item_id)='" .
                            mysql_escape_string(strtolower($itemId)) . "' and LOWER(color_id)='" .
                            mysql_escape_string(strtolower($colorId)) . "' and LOWER(size_id)='"
                            . mysql_escape_string(strtolower($sizeId)) . "' and LOWER(price)='"
                            . mysql_escape_string(strtolower($price)) . "' ";

                        $aCatRec = $this->_getSelectList('table_item_code_size_color_mapping', '*', '', $condi);

                        if (is_array($aCatRec)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $arrFile[2] . ", " . $arrFile[3] . ",already exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    if ($flag) {

                        $data = array();
                        $data['account_id'] = $this->clean($_SESSION['accountId']);
                        $data['item_id'] = mysql_escape_string($itemId);
                        $data['color_id'] = mysql_escape_string($colorId);
                        $data['size_id'] = mysql_escape_string($sizeId);
                        $data['price'] = mysql_escape_string(trim($arrFile[3]));
                        $data['updated_on'] = date('Y-m-d H:i:s');
                        $data['created_on'] = date('Y-m-d');
                        $data['status'] = 'A';
                        $id = $this->_dbInsert($data, 'table_item_code_size_color_mapping');

                    }


                }
                $row++;
            }


        }

        fclose($file);
        if ($row <= 2 || ($fErr == 'fnot')) {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }

    // Todo End : Jatin : 7 March 2024 : Import Size Color Mapping Master

    // Todo Start : Jatin : 29 April 2024 : Import Distributor mapping with stockist

    function uploadDistributorStockistMapping()

    {

        $fields = array($this->AliaseUsers['stockist'] . ' Code*', $this->AliaseUsers['distributor'] . ' Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 2 && trim($arrFile[0]) == $this->AliaseUsers['stockist'] . " Code*" && trim
                    ($arrFile[1]) == $this->AliaseUsers['distributor'] . " Code*") {

                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";

                }
            }

            if (empty($arrFile[0]) && empty($arrFile[1])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[1])) {

                        if (empty($arrFile[0]) || trim($arrFile[0]) == $this->AliaseUsers['stockist'] . " Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " .
                                $fields[0] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[1]) || trim($arrFile[1]) == $this->AliaseUsers['distributor'] . " Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $fields[1] . " shouldn't be empty  \n";

                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                    if ($flag) {

                        $condi = " LOWER(stockist_code)='" . mysql_escape_string(strtolower($arrFile[0])) . "' and status='A' ";

                        $aCatRec2 = $this->_getSelectList('table_stockist', 'stockist_id', '', $condi);

                        if (!is_array($aCatRec2) && count($aCatRec2) <= 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", "
                                . $this->AliaseUsers('stockist') . "  Code Doesn't exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $stk_id = $aCatRec2[0]->stockist_id;

                        }

                    }

                    if ($flag) {

                        $condi = " LOWER(distributor_code)='" . mysql_escape_string(strtolower($arrFile[1])) . "' and status='A' ";

                        $aCatRec1 = $this->_getSelectList('table_distributors', 'distributor_id', '', $condi);

                        if (!is_array($aCatRec1) && count($aCatRec1) <= 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", "
                                . $this->AliaseUsers('distributor') . " Code Doesn't exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $dist_id = $aCatRec1[0]->distributor_id;

                        }

                    }


                    if ($flag) {

                        $condi = " LOWER(stockist_id)='" . mysql_escape_string(strtolower($stk_id)) . "' and LOWER(distributor_id)='" . mysql_escape_string(strtolower($dist_id)) . "' ";

                        $aCatRec = $this->_getSelectList('table_stockist_distributor_mapping', '*', '', $condi);

                        if (is_array($aCatRec)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", Mapping Already exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    if ($flag) {
                        $data = array();
                        $data['account_id'] = $this->clean($_SESSION['accountId']);
                        $data['stockist_id'] = mysql_escape_string($stk_id);
                        $data['distributor_id'] = mysql_escape_string($dist_id);
                        $data['status'] = 'A';
                        $data['updated_at'] = date('Y-m-d H:i:s');
                        $data['created_at'] = date('Y-m-d');
                        $id = $this->_dbInsert($data, 'table_stockist_distributor_mapping');
                        $aDisStockCondi = " LOWER(stockist_id)='" . mysql_escape_string(strtolower($stk_id)) . "' and LOWER(distributor_id)='" . mysql_escape_string(strtolower($dist_id)) . "' and LOWER(status)='A'";
                        $aDisStockRec= $this->_getSelectList('table_distributors_new', '*', '', $aDisStockCondi);
                        if (empty($aDisStockRec)) {
                            $newDisStockdata['account_id'] = $this->clean($_SESSION['accountId']);
                            $newDisStockdata['stockist_id'] = mysql_escape_string($stk_id);
                            $newDisStockdata['distributor_id'] = mysql_escape_string($dist_id);
                            $newDisStockdata['created_date'] = date('Y-m-d');
                            $newDisStockdata['created_time'] = date('h:i:sa');
                            $newDisStockdata['status'] = 'A';
                            $dist_new_id = $this->_dbInsert($newDisStockdata, 'table_distributors_new');
                        }
                    }
                }
                $row++;
            }


        }

        fclose($file);
        if ($row <= 2 || ($fErr == 'fnot')) {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }

    // Todo End : Jatin : 29 April 2024 : Import Distributor mapping with stockist

    // Todo Start : sudhanshu 10 may 2024 : Import retailer address
    function uploadRetailerAddress()

    {

        $fields = array($this->AliaseUsers['retailer'] . ' Code*', "Address*", 'Zipcode');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;
        $remove = array("\n", "\r\n", "\r", "\t", ",");
        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 3 && trim($arrFile[0]) == $this->AliaseUsers['retailer'] . " Code*" && trim($arrFile[1]) == "Address*" && trim($arrFile[2]) == "Zipcode") {

                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";

                }
            }


            if (empty($arrFile[0]) && empty($arrFile[1]) && empty($arrFile[2])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[1])) {

                        if (empty($arrFile[0]) || trim($arrFile[0]) == $this->AliaseUsers['retailer'] . " Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . ", " . $arrFile[2] . ", " .
                                $fields[0] . " shouldn't be empty  \n";

                        } elseif (empty($arrFile[1]) || trim($arrFile[1]) == "Address*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . ", " . $arrFile[2] . ", " . $fields[1] . " shouldn't be empty  \n";

                        }


                        $str_err_array = array($strErr);

                        $flag = false;

                    }


                    if ($flag) {

                        $condi = " LOWER(retailer_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' ";

                        $aCatRec2 = $this->_getSelectList('table_retailer', 'retailer_id', '', $condi);

                        if (!is_array($aCatRec2) && count($aCatRec2) <= 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", "
                                . $this->AliaseUsers('retailer') . "  Code Doesn't exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $retailer_id = $aCatRec2[0]->retailer_id;

                        }

                    }

                    // check address duplicacy
                    if ($flag) {

                        $adrcondi = " LOWER(address)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' AND  retailer_id = '" . $retailer_id . "' ";

                        $aCatRec2 = $this->_getSelectList('table_retailer_address', 'retailer_id', '', $adrcondi);

                        if (is_array($aCatRec2) && count($aCatRec2) > 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", "
                                . "  Address already exists  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }
                    // validate zipcode
                    if ($flag) {

                        if (trim($arrFile[2]) != '') {
                            if (preg_match('/^[0-9]{6,100}$/', trim($arrFile[2]))) {
                                $zipcode = trim($arrFile[2]);
                            } else {
                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", " .
                                    "  Please enter valid zipcode   \n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        }


                    }


                    if ($flag) {

                        $data = array();
                        $data['account_id'] = $this->clean($_SESSION['accountId']);
                        $data['retailer_id'] = mysql_escape_string($retailer_id);
                        $data['address'] = mysql_escape_string(trim($arrFile[1]));
                        $data['zipcode'] = $zipcode;
                        $data['status'] = 'A';
                        $data['updated_at'] = date('Y-m-d H:i:s');
                        $data['created_at'] = date('Y-m-d H:i:s');

                        $id = $this->_dbInsert($data, 'table_retailer_address');

                    }


                }
                $row++;
            }


        }

        fclose($file);
        if ($row <= 2 || ($fErr == 'fnot')) {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }

    function uploadDistributorAddress()

    {

        $fields = array($this->AliaseUsers['distributor'] . ' Code*', 'Address*', 'Zipcode');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;
        $remove = array("\n", "\r\n", "\r", "\t", ",");

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 3 && trim($arrFile[0]) == $this->AliaseUsers['distributor'] . " Code*" && trim($arrFile[1]) == "Address*" && trim($arrFile[2]) == "Zipcode") {

                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";

                }
            }


            if (empty($arrFile[0]) && empty($arrFile[1]) && empty($arrFile[2])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[1])) {

                        if (empty($arrFile[0]) || trim($arrFile[0]) == $this->AliaseUsers['distributor'] . " Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", " .
                                $fields[0] . " shouldn't be empty  \n";

                        } elseif (empty($arrFile[1]) || trim($arrFile[1]) == "Address*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", " . $fields[1] . " shouldn't be empty  \n";

                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }


                    if ($flag) {

                        $condi = " LOWER(distributor_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' ";

                        $aCatRec2 = $this->_getSelectList('table_distributors', 'distributor_id', '', $condi);

                        if (!is_array($aCatRec2) && count($aCatRec2) <= 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", "
                                . $this->AliaseUsers('distributor') . "  Code Doesn't exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $distributor_id = $aCatRec2[0]->distributor_id;

                        }

                    }


                    // check address duplicacy
                    if ($flag) {

                        $adrcondi = " LOWER(address)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' AND  distributor_id = '" . $distributor_id . "' ";

                        $aCatRec2 = $this->_getSelectList('table_distributor_address', 'distributor_id', '', $adrcondi);

                        if (is_array($aCatRec2) && count($aCatRec2) > 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", "
                                . "  Address already exists  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }
                    // validate zipcode
                    if ($flag) {

                        if (trim($arrFile[2]) != '') {
                            if (preg_match('/^[0-9]{6,100}$/', trim($arrFile[2]))) {
                                $zipcode = trim($arrFile[2]);
                            } else {
                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", " .
                                    "  Please enter valid zipcode   \n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        }

                    }


                    if ($flag) {

                        $data = array();
                        $data['account_id'] = $this->clean($_SESSION['accountId']);
                        $data['distributor_id'] = mysql_escape_string($distributor_id);
                        $data['address'] = mysql_escape_string(trim($arrFile[1]));
                        $data['zipcode'] = $zipcode;
                        $data['status'] = 'A';
                        $data['updated_at'] = date('Y-m-d H:i:s');
                        $data['created_at'] = date('Y-m-d H:i:s');

                        $id = $this->_dbInsert($data, 'table_distributor_address');

                    }


                }
                $row++;
            }


        }

        fclose($file);
        if ($row <= 2 || ($fErr == 'fnot')) {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }

    function uploadStockistAddress()

    {

        $fields = array($this->AliaseUsers['stockist'] . ' Code*', 'Address*', 'Zipcode');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;
        $remove = array("\n", "\r\n", "\r", "\t", ",");

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 3 && trim($arrFile[0]) == $this->AliaseUsers['stockist'] . " Code*" && trim($arrFile[1]) == "Address*" && trim($arrFile[2]) == "Zipcode") {

                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";

                }
            }


            if (empty($arrFile[0]) && empty($arrFile[1]) && empty($arrFile[2])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[1])) {

                        if (empty($arrFile[0]) || trim($arrFile[0]) == $this->AliaseUsers['stockist'] . " Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", " .
                                $fields[0] . " shouldn't be empty  \n";

                        } elseif (empty($arrFile[1]) || trim($arrFile[1]) == "Address*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", " . $fields[1] . " shouldn't be empty  \n";

                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }


                    if ($flag) {

                        $condi = " LOWER(stockist_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' ";

                        $aCatRec2 = $this->_getSelectList('table_stockist', 'stockist_id', '', $condi);

                        if (!is_array($aCatRec2) && count($aCatRec2) <= 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", "
                                . $this->AliaseUsers('stockist') . "  Code Doesn't exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $stockist_id = $aCatRec2[0]->stockist_id;

                        }

                    }


                    // check address duplicacy
                    if ($flag) {

                        $adrcondi = " LOWER(address)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "' AND  stockist_id = '" . $stockist_id . "' ";

                        $aCatRec2 = $this->_getSelectList('table_stockist_address', ' stockist_id', '', $adrcondi);

                        if (is_array($aCatRec2) && count($aCatRec2) > 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", "
                                . "  Address already exists  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }
                    // validate zipcode
                    if ($flag) {

                        if (trim($arrFile[2]) != '') {
                            if (preg_match('/^[0-9]{6,100}$/', trim($arrFile[2]))) {
                                $zipcode = trim($arrFile[2]);
                            } else {
                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . str_replace($remove, ' ', $arrFile[1]) . "," . $arrFile[2] . ", " .
                                    "  Please enter valid zipcode   \n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            }
                        }

                    }

                    if ($flag) {

                        $data = array();
                        $data['account_id'] = $this->clean($_SESSION['accountId']);
                        $data['stockist_id'] = mysql_escape_string($stockist_id);
                        $data['address'] = mysql_escape_string(trim($arrFile[1]));
                        $data['zipcode'] = $zipcode;
                        $data['status'] = 'A';
                        $data['updated_at'] = date('Y-m-d H:i:s');
                        $data['created_at'] = date('Y-m-d H:i:s');

                        $id = $this->_dbInsert($data, 'table_stockist_address');

                    }


                }
                $row++;
            }


        }

        fclose($file);
        if ($row <= 2 || ($fErr == 'fnot')) {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }
    // Todo End : sudhanshu 10 may 2024 : Import retailer address

    //surey feedback import from live to test 31 may 2024
    function uploadSurveyFeedbackFile()
    {
        $fields = array('Survey Name*', 'State*', 'Retailer Type*', 'Distributor Type', 'From date(YYYY-mm-dd)*', 'To date(YYYY-mm-dd)*');
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $fErr = '';
        $row = 0;
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

        while (!feof($file)) {
            $arrFile = fgetcsv($file);
            $flag = true;
            if ($row == 0) {

                if (count($arrFile) == 6 && trim($arrFile[0]) == "Survey Name*" && trim($arrFile[1]) == "State*" && trim($arrFile[2]) == "Retailer Type*" && trim($arrFile[3]) == "Distributor Type" && trim($arrFile[4]) == "From date(YYYY-mm-dd)*" && trim($arrFile[5]) == "To date(YYYY-mm-dd)*") {
                    $flag = true;

                } else {

                    $flag = false;
                    $fErr = "fnot";
                }
            }

            if ($row > 0 && is_array($arrFile)) {
                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[4]) || empty($arrFile[5])) {
                    //$strErr .="Error in Row".$row." ";
                    if (empty($arrFile[0])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[0] . " shouldn't be empty \n";
                    } else if (empty($arrFile[1])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[1] . " shouldn't be empty \n";
                    } else if (empty($arrFile[2])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[2] . " shouldn't be empty \n";
                    } else if (empty($arrFile[4])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[4] . " shouldn't be empty \n";
                    } else if (empty($arrFile[5])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[5] . " shouldn't be empty \n";
                    }

                    $str_err_array = array($strErr);
                    $flag = false;
                }
                $SurveyName = htmlspecialchars(preg_replace($regex, "", str_replace("'", "\'", $arrFile[0])), ENT_IGNORE);
                $State = $arrFile[1];
                $StateIdsArr = array();
                $AllState = 0;
                $RetailerType = $arrFile[2];
                $RetailerTypeIdsArr = array();
                $AllRetType = 0;
                $DistributorType = $arrFile[3];
                $DistributorTypeIdsArr = array();
                $AlldisType = 0;
                $Fromdate = date('Y-m-d', strtotime(trim($arrFile[4])));
                $Todate = date('Y-m-d', strtotime(trim($arrFile[5])));
                if ($flag) {
                    $StateArr = array();
                    $NotExistsStateArr = array();
                    $StateArr = explode('|', strtolower($State));
                    if (count($StateArr) > 0 && in_array('all', $StateArr)) {
                        $AllState = 1;
                    } else {
                        foreach ($StateArr as $key => $stName) {
                            $condi = " AND LOWER(state_name)='" . mysql_escape_string(strtolower($stName)) . "'";
                            $aCatRec = $this->_getSelectList2('state', 'state_id,state_name', '', " status = 'A' AND state_name != ''" . $condi);
                            if (is_array($aCatRec) && count($aCatRec) > 0) {
                                $StateIdsArr[] = $aCatRec[0]->state_id;
                            } else {
                                $NotExistsStateArr[] = $stName;
                            }
                        }

                        if (count($NotExistsStateArr) > 0) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . implode('|', $NotExistsStateArr) . " states does not exists \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                }
                /********Verify Retailer Type List*************/
                if ($flag) {
                    $rettypeArr = array();
                    $NotExistsRetTypeArr = array();
                    $rettypeArr = explode('|', strtolower($RetailerType));
                    if (count($rettypeArr) > 0 && in_array('all', $rettypeArr)) {
                        $AllRetType = 1;
                    } else {
                        foreach ($rettypeArr as $key => $retName) {
                            $condi = " AND account_id=" . $_SESSION['accountId'] . " AND LOWER(type_name)='" . mysql_escape_string(strtolower($retName)) . "'";
                            $aCatRec = $this->_getSelectList2('table_retailer_type_master', 'type_id,type_name', '', " status = 'A' AND type_name != ''" . $condi);
                            if (is_array($aCatRec) && count($aCatRec) > 0) {
                                $RetailerTypeIdsArr[] = $aCatRec[0]->type_id;
                            } else {
                                $NotExistsRetTypeArr[] = $retName;
                            }
                        }

                        if (count($NotExistsRetTypeArr) > 0) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . implode('|', $NotExistsRetTypeArr) . " Retailer Type does not exists \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                }
                if ($flag && !empty($DistributorType)) {
                    $distypeArr = array();
                    $NotExistsdisTypeArr = array();
                    $distypeArr = explode('|', strtolower($DistributorType));
                    if (count($distypeArr) > 0 && in_array('all', $distypeArr)) {
                        $AlldisType = 1;
                    } else {
                        foreach ($distypeArr as $key => $disName) {
                            $condi = " AND account_id=" . $_SESSION['accountId'] . " AND LOWER(dis_type_name)='" . mysql_escape_string(strtolower($disName)) . "'";
                            $aCatRec = $this->_getSelectList2('table_distributor_type_master', 'dis_type_id,dis_type_name', '', " status = 'A' AND dis_type_name != ''" . $condi);
                            if (is_array($aCatRec) && count($aCatRec) > 0) {
                                $DistributorTypeIdsArr[] = $aCatRec[0]->dis_type_id;
                            } else {
                                $NotExistsdisTypeArr[] = $disName;
                            }
                        }

                        if (count($NotExistsdisTypeArr) > 0) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . implode('|', $NotExistsdisTypeArr) . " Distributor Type does not exists \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                }
                if ($flag) {
                    if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $arrFile[4])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Invalid From Date \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    } else if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $arrFile[5])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Invalid To Date \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    } else if (strtotime($Todate) < strtotime($Fromdate)) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Invalid Date Range \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                    $tempFromDate = explode('-', $Fromdate);
                    $tempToDate = explode('-', $Todate);
                    $chckFrmDate = checkdate($tempFromDate[1], $tempFromDate[2], $tempFromDate[0]);
                    $chckToDate = checkdate($tempToDate[1], $tempToDate[2], $tempToDate[0]);

                    /*if (!empty($chckFrmDate) || !empty($chckToDate)) {

						if (strtotime($Todate) < strtotime($Fromdate)) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Invalid Date Range \n";
							$str_err_array = array($strErr);
                            $flag = false;
                        }

                    }else{
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Please Enter Valid Date \n";
						$str_err_array = array($strErr);
                        $flag = false;
                    }*/
                }
                /***************************************************/
                if ($flag) {
                    $getSortOrdrRec = $this->_getSelectList('table_feedback_survey_master', 'MAX(sort_order) as max_sort_order', '', " status = 'A' ");
                    $max_sort_order = 1;
                    if (is_array($getSortOrdrRec) && (count($getSortOrdrRec) > 0)) {
                        $max_sort_order = ($getSortOrdrRec[0]->max_sort_order + 1);
                    }
                    $data = array();
                    $data['account_id'] = $this->clean($_SESSION['accountId']);
                    $data['survey_name'] = trim($SurveyName);
                    $data['from_date'] = $Fromdate;
                    $data['to_date'] = $Todate;
                    $data['status'] = 'A';
                    $data['is_verified'] = '0';
                    $data['created_on'] = date('Y-m-d H:i:s');
                    $data['sort_order'] = mysql_escape_string($max_sort_order);
                    $survey_id = $this->_dbInsert($data, 'table_feedback_survey_master');

                    if ($survey_id > 0) {
                        $surcode = array();
                        $surcode['survey_code'] = "SUR" . $survey_id;
                        $this->_dbUpdate2($surcode, 'table_feedback_survey_master', "survey_id=" . $survey_id);
                    }
                    // Retailer Mapping
                    if ($AllRetType == 1) {
                        $isAllRet = array();
                        $isAllRet['is_all_retailer_type'] = '1';
                        $this->_dbUpdate2($isAllRet, 'table_feedback_survey_master', "survey_id=" . $survey_id);
                    } else {
                        if (is_array($RetailerTypeIdsArr) && count($RetailerTypeIdsArr) > 0) {
                            foreach ($RetailerTypeIdsArr as $key1 => $retTypeId) {
                                if (is_numeric($retTypeId)) {
                                    $data1 = [];
                                    $data1['survey_id'] = $survey_id;
                                    $data1['retailer_type_id'] = $retTypeId;
                                    $data1['status'] = 'A';
                                    $data1['created_at'] = date('Y-m-d H:i:s');
                                    $this->_dbInsert($data1, 'table_survey_ret_type_mapping');
                                }
                            }
                        }
                    }
                    // Distributor Mapping
                    if ($AlldisType == 1) {
                        $isAllDis = array();
                        $isAllDis['is_all_distributor_type'] = '1';
                        $this->_dbUpdate2($isAllDis, 'table_feedback_survey_master', "survey_id=" . $survey_id);
                    } else {
                        if (is_array($DistributorTypeIdsArr) && count($DistributorTypeIdsArr) > 0) {
                            foreach ($DistributorTypeIdsArr as $key1 => $disTypeId) {
                                if (is_numeric($disTypeId)) {
                                    $data1 = [];
                                    $data1['survey_id'] = $survey_id;
                                    $data1['distributor_type_id'] = $disTypeId;
                                    $data1['status'] = 'A';
                                    $data1['created_at'] = date('Y-m-d H:i:s');
                                    $this->_dbInsert($data1, 'table_survey_dist_type_mapping');
                                }
                            }
                        }
                    }
                    // state Mapping
                    if ($AllState == 1) {
                        $isAllstate = array();
                        $isAllstate['is_all_state'] = '1';
                        $this->_dbUpdate2($isAllstate, 'table_feedback_survey_master', "survey_id=" . $survey_id);
                    } else {
                        if (is_array($StateIdsArr) && count($StateIdsArr) > 0) {
                            foreach ($StateIdsArr as $key1 => $stateTypeId) {
                                if (is_numeric($stateTypeId)) {
                                    $data1 = [];
                                    $data1['survey_id'] = $survey_id;
                                    $data1['state_id'] = $stateTypeId;
                                    $data1['status'] = 'A';
                                    $data1['created_at'] = date('Y-m-d H:i:s');
                                    $this->_dbInsert($data1, 'table_survey_state_mapping');
                                }
                            }
                        }
                    }
                    /************Update survey code*********************/

                }

            }
            $row++;
        }
        fclose($file);
        if ($row <= 2 && $fErr == '') {
            return "no";
        } else if ($row <= 2 && $fErr == 'fnot') {
            return $fErr;
        } else {
            return $str_err_array;
        }
    }

    // Todo Start : sudhanshu 08 july 2024 : Import vehicle type
    function uploadVehicleType()

    {

        $fields = array("Vehicle Type*");

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;
        $remove = array("\n", "\r\n", "\r", "\t", ",");
        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 1 && trim($arrFile[0]) == "Vehicle Type*") {

                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";

                }
            }


            if (empty($arrFile[0])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0])) {

                        if (empty($arrFile[0]) || trim($arrFile[0]) == "Vehicle Type*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " .
                                $fields[0] . " shouldn't be empty  \n";

                        }


                        $str_err_array = array($strErr);

                        $flag = false;

                    }


                    // check address duplicacy
                    if ($flag) {

                        $adrcondi = " LOWER(vehicle_type)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "' ";

                        $aCatRec2 = $this->_getSelectList('table_vehicle_type_master', 'vehicle_type_id', '', $adrcondi);

                        if (is_array($aCatRec2) && count($aCatRec2) > 0) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", "
                                . "  Vehicle type already exists  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }


                    if ($flag) {

                        $data = array();
                        $data['account_id'] = $this->clean($_SESSION['accountId']);
                        $data['vehicle_type'] = mysql_escape_string(trim($arrFile[0]));

                        $data['status'] = 'A';
                        $data['created_date'] = date('Y-m-d H:i:s');
                        $data['last_updated'] = date('Y-m-d H:i:s');

                        $id = $this->_dbInsert($data, 'table_vehicle_type_master');

                    }


                }
                $row++;
            }


        }

        fclose($file);
        if ($row <= 2 || ($fErr == 'fnot')) {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }

    // Todo End : sudhanshu 08 july 2024 : Import vehicle type
    function uploadVehicleTypeDesignationMapping()

    {

        $fields = array('Designation*', 'Vehicle Type*', 'Per KM Cost*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;
        $remove = array("\n", "\r\n", "\r", "\t", ",");
        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 3 && trim($arrFile[0]) == "Designation*" && trim($arrFile[1]) == "Vehicle Type*" && trim($arrFile[2]) == "Per KM Cost*") {

                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";

                }
            }


            if (empty($arrFile[0])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2])) {

                        if (empty($arrFile[0])) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . " ," . $fields[0] . " shouldn't be empty  \n";
                        } else if (empty($arrFile[1])) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . " ," . $fields[1] . " shouldn't be empty  \n";

                        } else if (empty($arrFile[2])) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . " ," . $fields[2] . " shouldn't be empty  \n";
                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }


                    // designation Check

                    if ($flag) {


                        $condi = " LOWER(description)='" . strtolower(trim($arrFile[0])) . "' AND status = 'A'";

                        $desiRec = $this->_getSelectList('table_salesman_hierarchy', "hierarchy_id", '', $condi);

                        if (is_array($desiRec) && (count($desiRec) > 0)) {

                            $hierarchy_id = $desiRec[0]->hierarchy_id;


                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " , Designation does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // vehicle type

                    if ($flag) {


                        $condi = " LOWER(vehicle_type)='" . strtolower(trim($arrFile[1])) . "' AND status = 'A'";

                        $vehiRec = $this->_getSelectList('table_vehicle_type_master', "vehicle_type_id", '', $condi);

                        if (is_array($vehiRec) && (count($vehiRec) > 0)) {

                            $vehicle_type_id = $vehiRec[0]->vehicle_type_id;


                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " , Vehicle does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    if ($flag) {
                        $number = trim($arrFile[2]);

                        if (preg_match('/^[0-9]+(\\.[0-9]+)?$/', $number)) {
                            $cost = $number;
                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " , Please enter valid per KM cost. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }

                    //check mapping
                    if ($flag) {


                        $condi = " vehicle_type_id ='" . $vehicle_type_id . "' AND  hierarchy_id = $hierarchy_id ";

                        $mappingRec = $this->_getSelectList('table_vehicle_type_designatiom_mapping', "vehicle_type_id", '', $condi);

                        if (is_array($mappingRec) && (count($mappingRec) > 0)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " , Mapping already exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;


                        }

                    }


                    if ($flag) {

                        $data = array();


                        $data['account_id'] = $this->clean($_SESSION['accountId']);
                        $data['hierarchy_id'] = $hierarchy_id;
                        $data['vehicle_type_id'] = $vehicle_type_id;
                        $data['per_km_cost'] = $cost;
                        $data['created_date'] = date('Y-m-d H:i:s');
                        $data['last_update'] = date('Y-m-d H:i:s');
                        $data['status'] = "A";


                        $this->_dbInsert($data, 'table_vehicle_type_designatiom_mapping');


                    }


                }
                $row++;
            }


        }

        fclose($file);
        if ($row <= 2 || ($fErr == 'fnot')) {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }

    //Todo start : sudhanshu 18 july 2024 : distributor fulfillment
    function uploadDistributorFulfillment()
    {

        $fields = array('Sr No',$this->AliaseUsers['distributor'].'Code','Item Code','Invoice No', 'Invoice Date','Invoiced Quantity','Price To Distributor(Per Piece)','Invoice Amount',
            'Invoice Type(Sales Invoice/Return Invoice)');
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $row = 0;
        $data = array();
        $data2 = array();
        $check = true;
        $fErr = "no";
        $checkStockistFeature = $this->getAccountFeaturesList();
        $_objAdmin = new Admin();
        while (!feof($file)) {
            $arrFile = fgetcsv($file);
            $flag = true;
            if ($row == 0) {
                if (count($arrFile) == 9 && trim(strtolower($arrFile[0])) == "sr no" && trim(strtolower($arrFile[1]))
                    == strtolower($this->AliaseUsers['distributor'].' Code') && trim(strtolower($arrFile[2])) == "item code" && trim(strtolower($arrFile[3])) == "invoice no" && trim(strtolower($arrFile[4])) == "invoice date" && trim(strtolower($arrFile[5])) == "invoiced quantity" && trim(strtolower($arrFile[6])) == "price to distributor(per piece)" && trim(strtolower($arrFile[7])) == "invoice amount" && trim(strtolower($arrFile[8])) == "invoice type(sales invoice/return invoice)") {

                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";

                }
            }

            if ($row > 0 && is_array($arrFile) && $flag2) {

                $s_no = trim($arrFile[0]);
                $distributor_code = mysql_escape_string(strtolower(trim($arrFile[1])));
                $item_code = mysql_escape_string(strtolower(trim($arrFile[2])));
                $bill_no_requested = trim($arrFile[3]);
                $bill_no = mysql_escape_string($bill_no_requested);
                $bill_date_requested = trim($arrFile[4]);
                $stock_value = trim($arrFile[5]);
                $price = trim($arrFile[6]);
                $invoice_value = trim($arrFile[7]);
                $bill_type = trim($arrFile[8]);
                $billdatecondi = "";


                if ($flag) {

                    if (strtolower($arrFile[8]) != "sales invoice" && strtolower($arrFile[8]) != "return invoice") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " .
                            $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," .
                            $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . " , Invalid Invoice Type. \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        $check = false;
                    }
                }
                if ($flag) {
                    if (!empty($bill_no_requested)) {
                        $bill_no = mysql_escape_string($bill_no_requested);
                        $billdatecondi .= "AND bill_no = '" . $bill_no . "'";
                    }
                    if (!empty($bill_date_requested)) {
                        $bill_date = date('Y-m-d', strtotime($bill_date_requested));
                        $billdatecondi .= "AND bill_date = '" . $bill_date . "'";

                        $lastMonth = date('Y-m', strtotime('last month'));
                        $curretDate = date('Y-m-d');
                        $billMonth = date('Y-m', strtotime($bill_date));

                        if (($billMonth >= $lastMonth) && ($bill_date <= $curretDate)) {

                            $billDateValidate = true;

                        }

                        if (!$billDateValidate) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", Invoice date should be last month to current date.\n";
                            $str_err_array = array($strErr);
                            $flag = false;

                        }

                    }
                }


                // Check Distributor Code exists in the system.
                if ($flag) {

                    $condi = " LOWER(distributor_code)='" . $distributor_code . "' AND status = 'A'";
                    $resultset = $this->_getSelectList('table_distributors', 'stockist_id,distributor_id', '', $condi);
                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->distributor_id == "") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," .
                            $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . " , " . $this->AliaseUsers('distributor') . " code doesn't exists in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        $check = false;
                    } else {
                        $distributor_id = $resultset[0]->distributor_id;
                        $stockist_id = $resultset[0]->stockist_id;
                    }
                }


                // Check item exists in the system.
                if ($flag) {
                    $item_id = $category_id = '';
                    $condi = " LOWER(item_code)='" . $item_code . "' AND status = 'A'";
                    $resultset = $this->_getSelectList('table_item', 'item_id,category_id', '', $condi);
                    if (!is_array($resultset) && empty($resultset) && $resultset[0]->item_id == "") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", Item code doesn't exists in the system.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        $check = false;
                    } else {
                        $item_id = $resultset[0]->item_id;
                        $category_id = $resultset[0]->category_id;
                    }
                }
                // Check attribute( cases size) exists in the system.
                if ($flag) {
                    $condi = "ic.item_id=" . $item_id;
                    $resultset = $this->_getSelectList('table_cases as c left join table_item_case_relationship as ic on ic.case_id=c.case_id', 'c.case_id,case_size', '', $condi);
                    $case_size = $resultset[0]->case_size;
                    $case_id = $resultset[0]->case_id;
                }
                //Check for batch No.(color_id) exists in the system.
                if ($flag) {
                    if (empty($batch_no)) {
                        $batch_no = 'NA';
                    }
                    $condi = " LOWER(color_code)='" . strtolower($batch_no) . "' AND account_id=" . $this->clean($_SESSION['accountId']);
                    $resultset = $this->_getSelectList('table_color', 'color_id', '', $condi);
                    if (is_array($resultset) && (count($resultset) > 0)) {
                        $color_id = $resultset[0]->color_id;
                    } else {
                        $dataCol = array();
                        $dataCol['account_id'] = $this->clean($_SESSION['accountId']);
                        $dataCol['color_desc'] = mysql_escape_string($this->clean($batch_no));
                        $dataCol['color_code'] = mysql_escape_string($this->clean($batch_no));
                        $dataCol['last_update_date'] = date('Y-m-d');
                        $dataCol['last_update_status'] = 'New';
                        $dataCol['status'] = 'A';
                        $color_id = $this->_dbInsert($dataCol, 'table_color');
                    }
                }

                // Check existing invoice no.
                if ($flag) {
                    $condi = " bill_no = '" . $bill_no . "' AND bill_date != '" . $bill_date . "' AND YEAR(bill_date)= '" . date('Y', strtotime($bill_date)) . "'";
                    $resultset = $this->_getSelectList('table_item_dis_stk_inprocess', 'dis_stk_inpro_id', '', $condi);
                    if (is_array($resultset) && !empty($resultset) && $resultset[0]->dis_stk_inpro_id != "") {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . " , " . $arrFile[4] . ", " . $arrFile[5] . " ," . $arrFile[6] . ", " . $arrFile[7] . ", " . $arrFile[8] . ", Duplicate Invoice Number.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                        $check = false;
                    }
                }

                //Insert/Update data in the table_item_dis_stk_inprocess table
                if ($flag) {
                    $condi = "stockist_id= '" . $stockist_id . "' AND distributor_id = '" . $distributor_id . "' AND item_id ='" . $item_id . "' AND category_id ='" . $category_id . "' AND color_id = '" . $color_id . "' " . $billdatecondi;
                    $resultset = $this->_getSelectList('table_item_dis_stk_inprocess', 'dis_stk_inpro_id, rec_stock_value', '', $condi . " AND status = 'I' ");
                    if (is_array($resultset) && sizeof($resultset) > 0) {
                        $dis_stk_inpro_id = $resultset[0]->dis_stk_inpro_id;
                        $Cond = "dis_stk_inpro_id 	= '" . $dis_stk_inpro_id . "' ";
                        $data2['rec_stock_value'] = $stock_value;
                        $data2['price'] = $price;
                        $data2['before_tax_amount'] = $invoice_value;
                        $data2['total_tax_amount'] = ($igst_amount + $cgst_amount + $sgst_amount + $cess_amount);
                        $data2['igst_amount'] = $igst_amount;
                        $data2['cgst_amount'] = $cgst_amount;
                        $data2['sgst_amount'] = $sgst_amount;
                        $data2['cess_amount'] = $cess_amount;
                        $data2['last_update_datetime'] = date('Y-m-d H:i:s');
                        $result = $this->_dbUpdate($data2, 'table_item_dis_stk_inprocess', $Cond);

                        /***********Manage stockist stock******************/
                        $newStock = 0;
                        /**Find margin of the stock to manage from stockist stock**/
                        $remainStock = ($stock_value - $resultset[0]->rec_stock_value);

                        $stockistCondi = " stockist_id = '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                        $stockistResult = $this->_getSelectList2('table_item_stockist_stock', '*', '', $stockistCondi);
                        $stockistData = array();
                        $stockistActivity = array();
                        if (is_array($stockistResult) && !empty($stockistResult) && count($stockistResult) > 0) {
                            $stockist_stk_id = $stockistResult[0]->stockist_stk_id;
                            $stockist_stock_value = $stockistResult[0]->stockist_stock_value;
                            if (strtolower($bill_type) == 'return invoice') {
                                $newStock = $stockist_stock_value + ($remainStock);

                            } else {
                                $newStock = $stockist_stock_value - ($remainStock);
                            }

                            //*************************** Manage stockist stock summary table*********************//
                            $stockistData['stockist_stock_value'] = $newStock;
                            $stockistData['last_updated_date'] = date('Y-m-d');
                            $stockistData['last_update_datetime'] = date('Y-m-d H:i:s');
                            $ndcWhereCond1 = "stockist_stk_id = '" . $stockist_stk_id . "' ";
                            if (in_array(85, $checkStockistFeature)) {
                                //*************************** Manage stockist stock summary table*********************//
                                if (strtolower($bill_type) == 'return invoice') {
                                    $_objAdmin->updateStockistQtySummary('dis_ret_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $remainStock);
                                } else {
                                    $_objAdmin->updateStockistQtySummary('dis_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $remainStock);
                                }

                                $this->_dbUpdate($stockistData, 'table_item_stockist_stock', $ndcWhereCond1);
                            }
                            //  insert NDC stock activity
                            $stockistActivity['account_id'] = $this->clean($_SESSION['accountId']);
                            $stockistActivity['stockist_id'] = $stockist_id;
                            $stockistActivity['distributor_id'] = $distributor_id;
                            $stockistActivity['item_id'] = $item_id;
                            $stockistActivity['category_id'] = $category_id;
                            $stockistActivity['color_id'] = $color_id;
                            $stockistActivity['dispatch_stock_value'] = $remainStock;
                            $stockistActivity['bill_date'] = $bill_date;
                            $stockistActivity['bill_no'] = $bill_no;
                            $stockistActivity['created_datetime'] = date('Y-m-d H:i:s');
                            $stockistActivity['status'] = 'LI';
                            if (in_array(85, $checkStockistFeature)) {
                                $this->_dbInsert($stockistActivity, 'table_item_stockist_stk_dispatch_activity');
                            }
                        }
                        /**************************************************/
                    } else {

                        $asRes = $this->_getSelectList('table_item_dis_stk_inprocess', 'dis_stk_inpro_id, rec_stock_value, acpt_stock_value', '', $condi . " AND status = 'A' ");
                        if (is_array($asRes) && sizeof($asRes) > 0) {

                            $Cond = " distributor_id = '" . $distributor_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "' ";
                            $resultRes = $this->_getSelectList2('table_item_distributor_stock', 'dis_stk_id, dis_stock_value', '', $Cond);
                            $data = array();

                            if (is_array($resultRes) && sizeof($resultRes) > 0) {
                                $finalStock = 0;
                                if (strtolower($bill_type) == 'return invoice') {
                                    $finalStock = ($resultRes[0]->dis_stock_value + $asRes[0]->acpt_stock_value);
                                    $_objAdmin->revertDistQtySummary('ret_rct_qty', $distributor_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $asRes[0]->acpt_stock_value);
                                } else {
                                    $_objAdmin->revertDistQtySummary('rct_qty', $distributor_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $asRes[0]->acpt_stock_value);
                                    $finalStock = ($resultRes[0]->dis_stock_value - $asRes[0]->acpt_stock_value);
                                }
                                $data['dis_stock_value'] = $finalStock;
                                $data['last_updated_date'] = date('Y-m-d');
                                $data['last_update_datetime'] = date('Y-m-d H:i:s');
                                $whereCond = "dis_stk_id = '" . $resultRes[0]->dis_stk_id . "'";
                                $this->_dbUpdate($data, 'table_item_distributor_stock', $whereCond);
                            }

                            $StockistStkCond = "stockist_id= '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                            $resultStockistStk = $this->_getSelectList2('table_item_stockist_stock', 'stockist_stk_id, stockist_stock_value', '', $StockistStkCond);
                            $data = array();
                            if (is_array($resultStockistStk) && sizeof($resultStockistStk) > 0) {
                                $stkfinalStock = 0;
                                if (strtolower($bill_type) == 'return invoice') {
                                    $stkfinalStock = ($resultStockistStk[0]->stockist_stock_value - $asRes[0]->acpt_stock_value);
                                } else {
                                    $stkfinalStock = ($resultStockistStk[0]->stockist_stock_value + $asRes[0]->acpt_stock_value);
                                }

                                $data['stockist_stock_value'] = $stkfinalStock;
                                $data['last_updated_date'] = date('Y-m-d');
                                $data['last_update_datetime'] = date('Y-m-d H:i:s');
                                $whereCond = "stockist_stk_id = '" . $resultStockistStk[0]->stockist_stk_id . "'";
                                if (in_array(85, $checkStockistFeature)) {
                                    //*************************** Manage stockist stock summary table*********************//
                                    if (strtolower($bill_type) == 'return invoice') {
                                        $_objAdmin->revertStockistQtySummary('dis_ret_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $asRes[0]->acpt_stock_value);
                                    } else {
                                        $_objAdmin->revertStockistQtySummary('dis_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $asRes[0]->acpt_stock_value);
                                    }


                                    $this->_dbUpdate($data, 'table_item_stockist_stock', $whereCond);
                                }
                            }
                            /***********Manage stockist stock******************/
                            $newStock = 0;
                            $stockistCondi = " stockist_id = '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                            $stockistResult = $this->_getSelectList2('table_item_stockist_stock', '*', '', $stockistCondi);
                            $stockistData = array();
                            $stockistActivity = array();
                            if (is_array($stockistResult) && !empty($stockistResult) && count($stockistResult) > 0) {
                                $stockist_stk_id = $stockistResult[0]->stockist_stk_id;
                                $stockist_stock_value = $stockistResult[0]->stockist_stock_value;
                                if (strtolower($bill_type) == 'return invoice') {
                                    $newStock = $stockist_stock_value + $stock_value;
                                } else {
                                    $newStock = $stockist_stock_value - $stock_value;
                                }

                                $stockistData['stockist_stock_value'] = $newStock;
                                $stockistData['last_updated_date'] = date('Y-m-d');
                                $stockistData['last_update_datetime'] = date('Y-m-d H:i:s');
                                $ndcWhereCond1 = "stockist_stk_id = '" . $stockist_stk_id . "' ";
                                if (in_array(85, $checkStockistFeature)) {
                                    //*************************** Manage stockist stock summary table*********************//
                                    if (strtolower($bill_type) == 'return invoice') {
                                        $_objAdmin->updateStockistQtySummary('dis_ret_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $stock_value);
                                    } else {
                                        $_objAdmin->updateStockistQtySummary('dis_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $stock_value);
                                    }

                                    $this->_dbUpdate($stockistData, 'table_item_stockist_stock', $ndcWhereCond1);
                                }
                                //  insert NDC stock activity
                                $stockistActivity['account_id'] = $this->clean($_SESSION['accountId']);
                                $stockistActivity['stockist_id'] = $stockist_id;
                                $stockistActivity['distributor_id'] = $distributor_id;
                                $stockistActivity['item_id'] = $item_id;
                                $stockistActivity['category_id'] = $category_id;
                                //$stockistActivity['attribute_value_id'] = $attribute_value_id;
                                $stockistActivity['color_id'] = $color_id;
                                $stockistActivity['dispatch_stock_value'] = $stock_value;
                                $stockistActivity['bill_date'] = $bill_date;
                                $stockistActivity['bill_no'] = $bill_no;
                                $stockistActivity['created_datetime'] = date('Y-m-d H:i:s');
                                $stockistActivity['status'] = 'LI';
                                if (in_array(85, $checkStockistFeature)) {
                                    $this->_dbInsert($stockistActivity, 'table_item_stockist_stk_dispatch_activity');
                                }
                            }
                            /**************************************************/
                            $data = array();
                            $stockistActCond = $condi . " AND status = 'LI' ";
                            $data['status'] = 'D';
                            if (in_array(85, $checkStockistFeature)) {
                                $this->_dbUpdate($data, 'table_item_stockist_stk_dispatch_activity', $stockistActCond);
                            }
                            $data = array();
                            $data['rec_stock_value'] = $stock_value;
                            $data['acpt_stock_value'] = 0;
                            $data['last_update_datetime'] = date('Y-m-d H:i:s');
                            $data['created_datetime'] = date('Y-m-d H:i:s');
                            $data['status'] = 'I';
                            $data['price'] = $price;
                            $data['before_tax_amount'] = $invoice_value;
                            $data['total_tax_amount'] = ($igst_amount + $cgst_amount + $sgst_amount + $cess_amount);
                            $data['igst_amount'] = $igst_amount;
                            $data['cgst_amount'] = $cgst_amount;
                            $data['sgst_amount'] = $sgst_amount;
                            $data['cess_amount'] = $cess_amount;
                            $whereCnd = "dis_stk_inpro_id = '" . $asRes[0]->dis_stk_inpro_id . "'";
                            $result = $this->_dbUpdate($data, 'table_item_dis_stk_inprocess', $whereCnd);
                        } else {
                            // insert data in inprocess table
                            $data1 = array();
                            $data1['account_id'] = $this->clean($_SESSION['accountId']);
                            $data1['stockist_id'] = $this->clean($stockist_id);
                            $data1['distributor_id'] = $this->clean($distributor_id);
                            $data1['item_id'] = $this->clean($item_id);
                            $data1['category_id'] = $this->clean($category_id);
                            $data1['attribute_value_id'] = $this->clean($color_id);
                            $data1['color_id'] = $this->clean($color_id);
                            $data1['bill_date'] = $this->clean($bill_date);
                            $data1['bill_no'] = $this->clean($bill_no);
                            $data1['rec_stock_value'] = $stock_value;
                            $data1['last_update_datetime'] = date('Y-m-d H:i:s');
                            $data1['created_datetime'] = date('Y-m-d H:i:s');
                            $data1['status'] = 'I';
                            $data1['price'] = $price;
                            $data1['before_tax_amount'] = $invoice_value;
                            $data1['total_tax_amount'] = ($igst_amount + $cgst_amount + $sgst_amount + $cess_amount);
                            $data1['igst_amount'] = $igst_amount;
                            $data1['cgst_amount'] = $cgst_amount;
                            $data1['sgst_amount'] = $sgst_amount;
                            $data1['cess_amount'] = $cess_amount;
                            $data1['bill_type'] = ucfirst($bill_type);
                            $data1['bill_status'] = 'A';
                            $data1['sr_no'] = trim($s_no);

                            $stockCheck = "stockist_id= '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                            $StockistStk = $this->_getSelectList2('table_item_stockist_stock', 'stockist_stk_id, stockist_stock_value', '', $stockCheck);

//                            if (in_array(85, $checkStockistFeature) && (!is_array($StockistStk) || count($StockistStk) == 0 || $StockistStk[0]->stockist_stock_value < $stock_value)) {
////                                $strErr .= "Error in Row" . $row . ", " . $arrFile[0] . ", " . $arrFile[1] . ", " . $arrFile[2] . "," . $arrFile[3] . ", " . $arrFile[4] . ", " . $arrFile[5] . ", " . $arrFile[6] . ", " . $arrFile[7] . ", Stockist doesn't have enough stock to transfer.\n";
////                                $str_err_array = array($strErr);
////                                $flag = false;
////                                $check = false;
//
//                            } else {

                            if (!is_array($StockistStk) || count($StockistStk) == 0) {
                                $data = array();
                                $data['account_id'] = $this->clean($_SESSION['accountId']);
                                $data['stockist_id'] = $this->clean($stockist_id);
                                $data['item_id'] = $this->clean($item_id);
                                $data['category_id'] = $this->clean($category_id);
                                $data['attribute_value_id'] = $this->clean($case_id);
                                $data['color_id'] = $this->clean($color_id);
                                $data['stockist_stock_value'] = ($stock_value * (-1));
                                $data['status'] = 'A';
                                $data['last_updated_date'] = date('Y-m-d');
                                $data['last_update_datetime'] = date('Y-m-d H:i:s');
                                if (in_array(85, $checkStockistFeature)) {
                                    $this->_dbInsert($data, 'table_item_stockist_stock');
                                    //*************************** Manage stockist stock summary table*********************//
                                    if (strtolower($bill_type) == 'return invoice') {
                                        $_objAdmin->updateStockistQtySummary('dis_ret_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $stock_value);
                                    } else {
                                        $_objAdmin->updateStockistQtySummary('dis_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $stock_value);
                                    }


                                }
                                $result = $this->_dbInsert($data1, 'table_item_dis_stk_inprocess');

                            } else {

                                $result = $this->_dbInsert($data1, 'table_item_dis_stk_inprocess');

                                /**********************Manage stockist stock***************************************/
                                $stockistCondi = " stockist_id = '" . $stockist_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                                $stockistResult = $this->_getSelectList2('table_item_stockist_stock', '*', '', $stockistCondi);
                                $stockistData = array();
                                $stockistActivity = array();
                                if (is_array($stockistResult) && !empty($stockistResult) && count($stockistResult) > 0) {
                                    $stockist_stk_id = $stockistResult[0]->stockist_stk_id;
                                    $stockist_stock_value = $stockistResult[0]->stockist_stock_value;
                                    if (strtolower($bill_type) == 'return invoice') {
                                        $newStock = $stockist_stock_value + $stock_value;
                                    } else {
                                        $newStock = $stockist_stock_value - $stock_value;
                                    }

                                    $stockistData['stockist_stock_value'] = $newStock;
                                    $stockistData['last_updated_date'] = date('Y-m-d');
                                    $stockistData['last_update_datetime'] = date('Y-m-d H:i:s');
                                    $ndcWhereCond1 = "stockist_stk_id = '" . $stockist_stk_id . "' ";
                                    if (in_array(85, $checkStockistFeature)) {
                                        $this->_dbUpdate($stockistData, 'table_item_stockist_stock', $ndcWhereCond1);
                                        //*************************** Manage stockist stock summary table*********************//
                                        if (strtolower($bill_type) == 'return invoice') {
                                            $_objAdmin->updateStockistQtySummary('dis_ret_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $stock_value);
                                        } else {
                                            $_objAdmin->updateStockistQtySummary('dis_inv_qty', $stockist_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $stock_value);
                                        }
                                    }
                                    //  insert NDC stock activity
                                    $stockistActivity['account_id'] = $this->clean($_SESSION['accountId']);
                                    $stockistActivity['stockist_id'] = $stockist_id;
                                    $stockistActivity['distributor_id'] = $distributor_id;
                                    $stockistActivity['item_id'] = $item_id;
                                    $stockistActivity['category_id'] = $category_id;
                                    //$stockistActivity['attribute_value_id'] = $attribute_value_id;
                                    $stockistActivity['color_id'] = $color_id;
                                    $stockistActivity['dispatch_stock_value'] = $stock_value;
                                    $stockistActivity['bill_date'] = $bill_date;
                                    $stockistActivity['bill_no'] = $bill_no;
                                    $stockistActivity['created_datetime'] = date('Y-m-d H:i:s');
                                    $stockistActivity['status'] = 'LI';
                                    if (in_array(85, $checkStockistFeature)) {
                                        $this->_dbInsert($stockistActivity, 'table_item_stockist_stk_dispatch_activity');
                                    }
                                }
                                /**********************************************************************************/


                            }//else part for new insert stk record
                            //}


                        } //else part for new rcrd insert


                    }

                } //if flag
            }
            $row++;
        }
        fclose($file);
        //If Auto GRN feature is on than auto accept GRN

        if ($check && in_array(115, $checkStockistFeature)) {

            $this->getDistributorFullfilmentStockFromInprocessStock();
        }

        if ($row <= 2 || $fErr == 'fnot')
            return $fErr;
        else
            return $str_err_array;
    }
    //Todo End : sudhanshu 18 july 2024 : distributor fulfillment

    // Todo Start : Jatin : 19 July 2024 : Import Color Master Image

    function uploadColorImageSizeFile()

    {

        $fields = array('Item Code*', 'Color Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 2 && trim($arrFile[0]) == "Item Code*" && trim($arrFile[1]) == "Color Code*") {

                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";

                }
            }

            if (empty($arrFile[0]) && empty($arrFile[1])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[1])) {


                        if (empty($arrFile[0]) || trim($arrFile[0]) == "Item Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $fields[0] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[1]) || trim($arrFile[1]) == "Color Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . ", " . $fields[1] . " shouldn't be empty  \n";

                        }


                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                    if ($flag) {

                        $condi = " LOWER(item_code)='" .
                            mysql_escape_string(strtolower(trim($arrFile[0]))) . "'  ";

                        $aCatRec1 = $this->_getSelectList('table_item', '*', '', $condi);

                        if (!is_array($aCatRec1)) {

                            $strErr .= " Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ,Item Does'nt exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {
                            $item_id = $aCatRec1[0]->item_id;
                        }

                    }

                    if ($flag) {

                        $condi = " LOWER(item_color_code)='" .
                            mysql_escape_string(strtolower(trim($arrFile[1]))) . "'  ";

                        $aCatRec = $this->_getSelectList('table_item_color_master', '*', '', $condi);

                        if (!is_array($aCatRec)) {

                            $strErr .= " Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ,Color Does'nt exists in the system  \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {
                            $color_id = $aCatRec[0]->id;
                        }

                    }

                    if ($flag) {

                        $data = array();
                        $data['account_id'] = $this->clean($_SESSION['accountId']);
                        $data['item_id'] = mysql_escape_string($this->clean($item_id));
                        $data['color_id'] = mysql_escape_string($this->clean($color_id));
                        $data['created_on'] = date('Y-m-d');
                        $data['status'] = 'A';
                        $id = $this->_dbInsert($data, 'table_item_color_image_master');

                    }


                }
                $row++;
            }


        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot') {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }

    // Todo End : Jatin : 19 July 2024 : Import Color Master Image

    // Todo Start : sudhanshu 29 july 2024 : import retailer available stock

    function uploadRetailerAvailableStockFile()

    {

        $fields = array('Date of Activity*', $this->AliaseUsers['salesman'] . ' Code*', $this->AliaseUsers['retailer'] . ' Code*', 'Item Code*', 'Quantity*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;
        $remove = array("\n", "\r\n", "\r", "\t", ",");
        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 5 && trim($arrFile[0]) == "Date of Activity*" && trim($arrFile[1]) == $this->AliaseUsers['salesman'] . " Code*" && trim($arrFile[2]) == $this->AliaseUsers['retailer'] . " Code*" && trim($arrFile[3]) == "Item Code*" && trim($arrFile[4]) == "Quantity*") {

                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";

                }
            }


            if (empty($arrFile[0]) && empty($arrFile[1]) && empty($arrFile[2]) && empty($arrFile[3]) && empty($arrFile[4])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[3]) || (empty($arrFile[4]) && $arrFile[4] != 0)) {

                        if (empty($arrFile[0])) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . " ," . $arrFile[3] . " ," . $arrFile[4] . " ," . $fields[0] . " shouldn't be empty  \n";
                        } else if (empty($arrFile[1])) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . " ," . $arrFile[3] . " ," . $arrFile[4] . " ," . $fields[1] . " shouldn't be empty  \n";

                        } else if (empty($arrFile[2])) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . " ," . $arrFile[3] . " ," . $arrFile[4] . " ," . $fields[2] . " shouldn't be empty  \n";
                        } else if (empty($arrFile[3])) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . " ," . $arrFile[3] . " ," . $arrFile[4] . " ," . $fields[3] . " shouldn't be empty  \n";
                        } else if (empty($arrFile[4])) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . " ," . $arrFile[3] . " ," . $arrFile[4] . " ," . $fields[4] . " shouldn't be empty  \n";
                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }


                    //check date
                    if ($flag) {


                        if (strtotime(trim($arrFile[0]))) {
                            $date = date('Y-m-d', strtotime(trim($arrFile[0])));

                            if ($date != trim($arrFile[0])) {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . " ," . $arrFile[4] . " , Please enter valid activity Date yyyy-mm-dd. \n";

                                $str_err_array = array($strErr);

                                $flag = false;
                            } else {
                                $tempDate = explode('-', $date);
                                if (checkdate($tempDate[1], $tempDate[2], $tempDate[0])) {
                                    $date_of_order = date('Y-m-d', strtotime(trim($arrFile[0])));
                                } else {

                                    $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . " ," . $arrFile[4] . " , Please enter valid activity Date. \n";

                                    $str_err_array = array($strErr);

                                    $flag = false;

                                }
                            }

                        } else {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . " ," . $arrFile[4] . " , Please enter valid activity Date. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    }

                    //salesman

                    if ($flag) {


                        $condi = " LOWER(employee_code)='" . strtolower(trim($arrFile[1])) . "' AND status = 'A'";

                        $vehiRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);

                        if (is_array($vehiRec) && (count($vehiRec) > 0)) {

                            $salesman_id = $vehiRec[0]->salesman_id;


                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . " ," . $arrFile[4] . " , " . $this->AliaseUsers('salesman') . " Code does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // retailer Check

                    if ($flag) {


                        $condi = " LOWER(retailer_code)='" . strtolower(trim($arrFile[2])) . "' AND status = 'A'";

                        $desiRec = $this->_getSelectList('table_retailer', "retailer_id,distributor_id", '', $condi);

                        if (is_array($desiRec) && (count($desiRec) > 0)) {

                            $retailer_id = $desiRec[0]->retailer_id;
                            $distributor_id = $desiRec[0]->distributor_id;


                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . " , " . $this->AliaseUsers('retailer') . " Code does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }


                    //check Item
                    if ($flag) {


                        $condi = " LOWER(item_code)='" . strtolower(trim($arrFile[3])) . "' AND status = 'A'";

                        $itmRec = $this->_getSelectList('table_item', "item_id", '', $condi);

                        if (is_array($itmRec) && (count($itmRec) > 0)) {

                            $item_id = $itmRec[0]->item_id;


                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . " ," . $arrFile[4] . " , Item Code does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }


                    //check qty
                    if ($flag) {
                        $number = trim($arrFile[4]);

                        if (preg_match('/^[0-9]+(\\[0-9]+)?$/', $number)) {
                            $qty = $number;
                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . " ," . $arrFile[4] . " , Please enter valid quantity. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }
                    }


                    if ($flag) {

                        $data = array();


                        $data['account_id'] = $this->clean($_SESSION['accountId']);
                        $data['salesman_id'] = $salesman_id;
                        $data['retailer_id'] = $retailer_id;
                        $data['distributor_id'] = $distributor_id;
                        $data['date_of_order'] = $date_of_order;
                        $data['time_of_order'] = date('H:i:s');
                        $data['is_import'] = '1';
                        $data['ostype'] = 'R';

                        $os_id = $this->_dbInsert($data, 'table_order_os');


                        if ($os_id != '') {
                            $data2 = [];
                            $data2['os_id'] = $os_id;
                            $data2['item_id'] = $item_id;
                            $data2['quantity'] = $qty;
                            $data2['created'] = date('Y-m-d H:i:s');
                            $os_detail_id = $this->_dbInsert($data2, 'table_order_detail_os');
                        }

                        if ($os_id != '') {
                            $_objAdmin = new Admin();

                            $batch_id = $_objAdmin->getAccountWisebatchId($_SESSION['accountId']);

                            $data2 = [];
                            $data2['os_id'] = $os_id;
                            $data2['os_detail_id'] = $os_detail_id;
                            $data2['batch_id'] = $batch_id;
                            $data2['item_id'] = $item_id;
                            $data2['qty'] = $qty;
                            $data2['created_on'] = date('Y-m-d H:i:s');
                            $os_detail_id = $this->_dbInsert($data2, 'table_order_detail_os_batch_wise');
                        }

                    }


                }
                $row++;
            }


        }

        fclose($file);
        if ($row <= 2 || ($fErr == 'fnot')) {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }

    //Todo End : sudhanshu 29 july 2024 : import retailer available stock

    // Todo Start : sudhanshu 29 july 2024 : import retailer available stock

    function uploadDeliveryReturnLoadOutFile()

    {

        $fields = array($this->AliaseUsers['salesman'] . ' Code*', 'Item Code*', 'Quantity Added in Company Stock', 'Quantity Not Added in Company Stock');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;
        $errArray = array();
        $loadoutData = array();
        $remove = array("\n", "\r\n", "\r", "\t", ",");
        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 4 && trim($arrFile[0]) == $this->AliaseUsers['salesman'] . " Code*" && trim($arrFile[1]) == "Item Code*" && trim($arrFile[2]) == "Quantity Added in Company Stock" && trim($arrFile[3]) == "Quantity Not Added in Company Stock") {

                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";

                }
            }


            if (empty($arrFile[0]) && empty($arrFile[1]) && empty($arrFile[2]) && empty($arrFile[3])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || empty($arrFile[1]) || (empty($arrFile[2]) && empty($arrFile[3]))) {

                        if (empty($arrFile[0])) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . " ," . $arrFile[3] . " ," . $fields[0] . " shouldn't be empty  \n";
                        } else if (empty($arrFile[1])) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . " ," . $arrFile[3] . " ," . $fields[1] . " shouldn't be empty  \n";

                        } else if (empty($arrFile[2])) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . " ," . $arrFile[3] . " ,either " . $fields[2] . " or " . $fields[3] . " is mandatory to submit the sheet. \n";
                        } else if (empty($arrFile[3])) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                                $arrFile[2] . " ," . $arrFile[3] . " ,either " . $fields[2] . " or " . $fields[3] . " is mandatory to submit the sheet.  \n";
                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }


                    //salesman

                    if ($flag) {


                        $condi = " LOWER(employee_code)='" . strtolower(trim($arrFile[0])) . "' AND status = 'A'";

                        $vehiRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);

                        if (is_array($vehiRec) && (count($vehiRec) > 0)) {

                            $salesman_id = $vehiRec[0]->salesman_id;


                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . " , " . $this->AliaseUsers('salesman') . " Code does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }

                    // retailer Check

                    if ($flag) {


                        $condi = " LOWER(item_code)='" . strtolower(trim($arrFile[1])) . "' AND status = 'A'";

                        $desiRec = $this->_getSelectList('table_item', "item_id", '', $condi);

                        if (is_array($desiRec) && (count($desiRec) > 0)) {

                            $item_id = $desiRec[0]->item_id;

                        } else {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . " , Item Code Code does not exists. \n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        }

                    }


                    //check qty
                    if ($flag) {
                        $company_stock = trim($arrFile[2]);

                        if ($company_stock != '') {
                            if (preg_match('/^[0-9]+(\\[0-9]+)?$/', $company_stock)) {
                                $company_stock = $company_stock;
                            } else {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . " ," . " , Please enter valid quantity in quantity added in company stock. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                        }


                    }

                    if ($flag) {
                        $non_sellable = trim($arrFile[3]);

                        if ($non_sellable != '') {
                            if (preg_match('/^[0-9]+(\\[0-9]+)?$/', $non_sellable)) {
                                $non_sellable = $non_sellable;
                            } else {

                                $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . " ," . $arrFile[3] . " ," . " , Please enter valid quantity in quantity not added in company stock. \n";

                                $str_err_array = array($strErr);

                                $flag = false;

                            }
                        }

                    }

                    $qty_data = array(
                        'sellable' => $company_stock,
                        'non_sellable' => $non_sellable,
                        'row_no' => $row
                    );
                    if ($flag){
                        $loadoutData[trim($arrFile[0])][trim($arrFile[1])][] = $qty_data;
                    }



                }
                $row++;
            }


        }
//end while

        $duplicate = array();

        if(!empty($loadoutData) && count($loadoutData) > 0){
            foreach ($loadoutData as $sal_id => $itemArray){
               // echo $sal_id .' => '. count($itemArray).'<br>';
                foreach ($itemArray as $itemId => $loadOutData){
                    //echo $itemId .' => '. count($loadOutData).'<br>';
                  if (count($loadOutData) > 1){

                      foreach($loadOutData as $stock){
                        if($stock['sellable'] !=''){
                            $duplicate[$sal_id][$itemId]['sellable'][] = $stock['sellable'];
                          }
                          if($stock['non_sellable'] !=''){
                              $duplicate[$sal_id][$itemId]['non_sellable'][] = $stock['non_sellable'];
                          }

                          if(count($duplicate[$sal_id][$itemId]['sellable']) > 1 || count($duplicate[$sal_id][$itemId]['non_sellable']) > 1){
                              //unset($loadoutData[$sal_id][$itemId]);
                              echo $sal_id.'=>'.count($duplicate[$sal_id][$itemId]['sellable']).'<br>';
                              $errArray[$sal_id][$itemId] = $loadoutData[$sal_id][$itemId];
                              unset($loadoutData[$sal_id][$itemId]);
                          }

                      }
                  }
                }

            }
        }

        if(count($loadoutData) > 0){
            foreach ($loadoutData as $salcode => $itemArray){
                //echo count($itemArray).'<br>';
                if(count($itemArray) > 0){
                    $salRec = $this->_getSelectList('table_salesman', "salesman_id", '', "employee_code='".$salcode."' and status = 'A'");
                    $salesman_id = $salRec[0]->salesman_id;
                    foreach ($itemArray as $itemCode => $loadOutData){
                        if(count($loadOutData) > 0){
                            $itmRec = $this->_getSelectList('table_item', "item_id", '', "item_code='".$itemCode."' and status = 'A'");
                            $item_id = $itmRec[0]->item_id;
                            foreach ($loadOutData as $loadout){

                                $delRec = $this->_getSelectList('table_salesman_return_stock', "return_stock_value", '', "item_id ='".$item_id."' and salesman_id = '".$salesman_id."'");
                                $salesman_id = $salRec[0]->salesman_id;

                            }
                        }
                    }
                }
            }
        }

        echo "<pre>";print_r($loadoutData);
//        print_r($errArray);
//        print_r($duplicate);
        die;
        fclose($file);
        if ($row <= 2 || ($fErr == 'fnot')) {
            return $fErr;
        } else {
            return $str_err_array;
        }


    }

    //Todo End : sudhanshu 29 july 2024 : import retailer available stock

    //Todo Start: Sudhanshu: 10 sept 2024 : import Survey and salesman mapping

    function uploadSalesmanSurveySalesmanMapping()

    {

        $fields = array('Survey Code*', 'Salesman Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 2 && trim($arrFile[0]) == "Survey Code*" && trim($arrFile[1]) == "Salesman Code*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if (empty($arrFile[0]) && empty($arrFile[1])) {
                $row++;
            } else {
                if ($flag2 && $row > 0 && is_array($arrFile)) {

                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Survey Code*" || (empty($arrFile[1]) || trim($arrFile[1]) == "Salesman Code*")) {

                        if (empty($arrFile[0]) || trim($arrFile[0]) == "Survey Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[0] . " shouldn't be empty  \n";

                        }
                        if (empty($arrFile[0]) || trim($arrFile[0]) == "Salesman Code*") {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[1] . " shouldn't be empty  \n";

                        }

                        $str_err_array = array($strErr);

                        $flag = false;

                    }
                    // check salesman

                    if ($flag) {

                        $employee_code = trim($arrFile[1]);

                        $condi = " employee_code='" . $employee_code . "' AND status = 'A'";

                        $salResult = $this->_getSelectList('table_salesman ', 'salesman_id', '', $condi);

                        if (!is_array($salResult) && empty($salResult)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Salesman doesn't exists in the system.\n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $salesman_id = $salResult[0]->salesman_id;

                        }

                    }

                    // check Survey
                    if ($flag) {

                        $survey = trim($arrFile[0]);

                        $condi = " LOWER(survey_code)='" . strtolower($survey) . "' AND status = 'A'";

                        $surResult = $this->_getSelectList('table_salesman_feedback_survey_master ', 'survey_id,is_all_employee', '', $condi);

                        if (!is_array($surResult) && empty($surResult)) {

                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Survey doesn't exists in the system.\n";

                            $str_err_array = array($strErr);

                            $flag = false;

                        } else {

                            $survey_id = $surResult[0]->survey_id;

                            $is_all_employee = $surResult[0]->is_all_employee;

                        }

                    }
                    //echo "<pre>";print_R($is_all_employee);
                    // Check is All Employee or not


                    //-------------------- /Surevey ------------

                    if ($flag) {

                        $condi = " survey_id='" . $survey_id . "' AND employee_id = '" . $salesman_id . "' ";

                        $salMappig = $this->_getSelectList2('table_salesman_survey_employee_type_mapping', "survey_id,employee_id,status", '', $condi);

                        if ($is_all_employee < 1 && !empty($salesman_id)) {

                            if (is_array($salMappig) && (count($salMappig) > 0)) {

                                if ($salMappig[0]->status == 'I') {
                                    $sur = $salMappig[0]->survey_id;
                                    $emp = $salMappig[0]->employee_id;
                                    $condi = " survey_id = '" . $survey_id . "' AND employee_id = '" . $emp . "'";
                                    $cid = $this->_dbUpdate2(array("status" => 'A', "updated_on" => date('Y-m-d H:i:s'), "updated_by" => $_SESSION['PepUpSalesUserId']), 'table_salesman_survey_employee_type_mapping', $condi);
                                }

                            } else {

                                $data = array();


                                $data['survey_id'] = $survey_id;
                                $data['employee_id'] = $salesman_id;
                                $data['created_at'] = date('Y-m-d H:i:s');
                                $data['created_by'] = $_SESSION['PepUpSalesUserId'];
                                $data['status'] = "A";

                                $mid = $this->_dbInsert($data, 'table_salesman_survey_employee_type_mapping');


                            }

                            $condi = " survey_id = '" . $survey_id . "'";

                            $cid = $this->_dbUpdate2(array("is_all_employee" => 0, "updated_on" => date('Y-m-d H:i:s'), "updated_by" => $_SESSION['PepUpSalesUserId']), 'table_salesman_feedback_survey_master', $condi);

                        } else {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $this->AliaseUsers['salesman'] . " Survey Mapping Already Exist.\n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }
                    }


                }
            }

            $row++;

        }

        //echo $row;die;

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }



    function uploadSalesmanSurveySalesmanMappingUpdate()

    {

        $fields = array('Survey Code*', 'Salesman Code*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";
        $fErr = "no";
        $inActArr = array();
        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 2 && trim($arrFile[0]) == "Survey Code*" && trim($arrFile[1]) == "Salesman Code*") {
                    $flag2 = true;

                } else {

                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || trim($arrFile[0]) == "Survey Code*" || (empty($arrFile[1]) || trim($arrFile[1]) == "Salesman Code*")) {

                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Survey Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[0] . " shouldn't be empty  \n";

                    }
                    if (empty($arrFile[0]) || trim($arrFile[0]) == "Salesman Code*") {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", " . $fields[1] . " shouldn't be empty  \n";

                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }
                // check salesman existence

                if ($flag) {

                    $employee_code = trim($arrFile[1]);

                    $condi = " employee_code='" . $employee_code . "' AND status = 'A'";

                    $salResult = $this->_getSelectList('table_salesman ', 'salesman_id', '', $condi);

                    if (!is_array($salResult) && empty($salResult)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Salesman doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $salesman_id = $salResult[0]->salesman_id;

                    }

                }
                // End salesman existence

                // check Survey existence
                if ($flag) {

                    $survey = trim($arrFile[0]);

                    $condi = " LOWER(survey_code)='" . strtolower($survey) . "' AND status = 'A'";

                    $surResult = $this->_getSelectList('table_salesman_feedback_survey_master ', 'survey_id', '', $condi);

                    if (!is_array($surResult) && empty($surResult)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . ", " . $arrFile[1] . ", Survey doesn't exists in the system.\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } else {

                        $survey_id = $surResult[0]->survey_id;

                    }

                }
                // End Surevey existence

                if ($flag) {

                    $condi = " survey_id='" . $survey_id . "' AND employee_id = '" . $salesman_id . "' ";

                    $salMappig = $this->_getSelectList2('table_salesman_survey_employee_type_mapping', "survey_id,employee_id", '', $condi);

                    if (is_array($salMappig) && (count($salMappig) > 0)) {

                        $cond = "  survey_id = " . $survey_id . " AND employee_id = " . $salMappig[0]->employee_id . " ";

                        $cid = $this->_dbUpdate2(array("status" => 'A', "updated_on" => date('Y-m-d H:i:s'), "updated_by" => $_SESSION['PepUpSalesUserId']), 'table_salesman_survey_employee_type_mapping', $cond);

                        $inActArr[$survey_id][] = $salesman_id;

                    } else {

                        $data = array();

                        $inActArr[$survey_id][] = $salesman_id;

                        $data['survey_id'] = $survey_id;
                        $data['employee_id'] = $salesman_id;
                        $data['created_at'] = date('Y-m-d H:i:s');
                        $data['created_by'] = $_SESSION['PepUpSalesUserId'];
                        $data['status'] = "A";

                        $this->_dbInsert($data, 'table_salesman_survey_employee_type_mapping');

                    }

                    $condi = " survey_id = '" . $survey_id . "'";

                    $cid = $this->_dbUpdate2(array("is_all_employee" => 0, "updated_on" => date('Y-m-d H:i:s'), "updated_by" => $_SESSION['PepUpSalesUserId']), 'table_salesman_feedback_survey_master', $condi);
                }

            }

            $row++;

        }

        fclose($file);

        //--- inactive mapping
        if (is_array($inActArr) && count($inActArr) > 0) {


            foreach ($inActArr as $key => $val) {

                $empIds = implode(',', $val);
                $condi = " survey_id = '" . $key . "' AND employee_id NOT IN(" . $empIds . ")";

                $cid = $this->_dbUpdate2(array("status" => "I", "updated_on" => date('Y-m-d H:i:s'), "updated_by" => $_SESSION['PepUpSalesUserId']), 'table_salesman_survey_employee_type_mapping', $condi);
            }


        }
        //------------------------

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else

            return $str_err_array;

    }

    //Todo End: Sudhanshu: 10 sept 2024 : import Survey and salesman mapping

    function uploadSalesmanSurveyFeedbackFile()
    {
        $fields = array('Survey Name*', 'Designation','State', 'Salesman Code', 'From date(YYYY-mm-dd)*', 'To date(YYYY-mm-dd)*');
        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $fErr = '';
        $row = 0;
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

        while (!feof($file)) {
            $arrFile = fgetcsv($file);
            $flag = true;
            if ($row == 0) {

                if (count($arrFile) == 6 && trim($arrFile[0]) == "Survey Name*" && trim($arrFile[1]) == "Designation*" && trim($arrFile[2]) == "State*"  && trim($arrFile[3]) == "Salesman Code*" && trim($arrFile[4]) == "From date(YYYY-mm-dd)*" && trim($arrFile[5]) == "To date(YYYY-mm-dd)*") {
                    $flag = true;

                } else {

                    $flag = false;
                    $fErr = "fnot";
                }
            }

            if ($row > 0 && is_array($arrFile)) {
                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[3]) || empty($arrFile[4]) || empty($arrFile[5])) {
                    //$strErr .="Error in Row".$row." ";
                    if (empty($arrFile[0])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[0] . " shouldn't be empty \n";
                    } else if (empty($arrFile[1])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[1]  .  " shouldn't be empty \n";
                    }else if (empty($arrFile[2])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[2]  .  " shouldn't be empty \n";
                    }else if (empty($arrFile[3])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[3] .  " shouldn't be empty \n";
                    } else if (empty($arrFile[4])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[4] . " shouldn't be empty \n";
                    } else if (empty($arrFile[5])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . $fields[5] . " shouldn't be empty \n";
                    }

                    $str_err_array = array($strErr);
                    $flag = false;
                }
                $SurveyName = htmlspecialchars(preg_replace($regex, "", str_replace("'", "\'", $arrFile[0])), ENT_IGNORE);
                $State = $arrFile[2];
                $StateIdsArr = array();
                $AllState = 0;
                $RetailerType = $arrFile[1];
                $RetailerTypeIdsArr = array();
                $AllRetType = 0;
                $SalesmanCode = $arrFile[3];
                $DistributorTypeIdsArr = array();
                $AlldisType = 0;
                $Fromdate = date('Y-m-d', strtotime(trim($arrFile[4])));
                $Todate = date('Y-m-d', strtotime(trim($arrFile[5])));

                if ($flag) {
                    $rettypeArr = array();
                    $NotExistsRetTypeArr = array();
                    $rettypeArr = explode('|', strtolower($RetailerType));
                    if (count($rettypeArr) > 0 && in_array('all', $rettypeArr)) {
                        $AllRetType = 1;
                    } else {
                        foreach ($rettypeArr as $key => $retName) {
                            $condi = " AND account_id=" . $_SESSION['accountId'] . " AND LOWER(description)='" . mysql_escape_string(strtolower($retName)) . "'";
                            $aCatRec = $this->_getSelectList2('table_salesman_hierarchy', 'hierarchy_id,description', '', " status = 'A' AND description != ''" . $condi);
                            if (is_array($aCatRec) && count($aCatRec) > 0) {
                                $RetailerTypeIdsArr[] = $aCatRec[0]->hierarchy_id;
                            } else {
                                $NotExistsRetTypeArr[] = $retName;
                            }
                        }

                        if (count($NotExistsRetTypeArr) > 0) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . implode('|', $NotExistsRetTypeArr) . " Designation does not exists \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                }

                if ($flag) {
                    $StateArr = array();
                    $NotExistsStateArr = array();
                    $StateArr = explode('|', strtolower($State));
                    if (count($StateArr) > 0 && in_array('all', $StateArr)) {
                        $AllState = 1;
                    } else {
                        foreach ($StateArr as $key => $stName) {
                            $condi = " AND LOWER(state_name)='" . mysql_escape_string(strtolower($stName)) . "'";
                            $aCatRec = $this->_getSelectList2('state', 'state_id,state_name', '', " status = 'A' AND state_name != ''" . $condi);
                            if (is_array($aCatRec) && count($aCatRec) > 0) {
                                $StateIdsArr[] = $aCatRec[0]->state_id;
                            } else {
                                $NotExistsStateArr[] = $stName;
                            }
                        }

                        if (count($NotExistsStateArr) > 0) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . implode('|', $NotExistsStateArr) . " states does not exists \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                }
                /********Verify Retailer Type List*************/
                if ($flag) {
                    $rettypeArr = array();
                    $NotExistsSalesmanArr = array();
                    $salArr = explode('|', strtolower($SalesmanCode));
                    if (count($salArr) > 0 && in_array('all', $salArr)) {
                        $AllSalesman = 1;
                    } else {
                        foreach ($salArr as $key => $salName) {
                            $condi = " AND account_id=" . $_SESSION['accountId'] . " AND LOWER(employee_code)='" . mysql_escape_string(strtolower($salName)) . "'";
                            $aCatRec = $this->_getSelectList2('table_salesman', 'salesman_id', '', " status = 'A' " . $condi);
                            if (is_array($aCatRec) && count($aCatRec) > 0) {
                                $SalesmanIdsArr[] = $aCatRec[0]->salesman_id;
                            } else {
                                $NotExistsSalesmanArr[] = $retName;
                            }
                        }

                        if (count($NotExistsSalesmanArr) > 0) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . "," . implode('|', $NotExistsSalesmanArr) . " Salesman does not exists \n";
                            $str_err_array = array($strErr);
                            $flag = false;
                        }
                    }
                }

                if ($flag) {
                    if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $arrFile[4])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Invalid From Date \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    } else if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $arrFile[5])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Invalid To Date \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    } else if (strtotime($Todate) < strtotime($Fromdate)) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Invalid Date Range \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                    $tempFromDate = explode('-', $Fromdate);
                    $tempToDate = explode('-', $Todate);
                    $chckFrmDate = checkdate($tempFromDate[1], $tempFromDate[2], $tempFromDate[0]);
                    $chckToDate = checkdate($tempToDate[1], $tempToDate[2], $tempToDate[0]);

                    /*if (!empty($chckFrmDate) || !empty($chckToDate)) {

						if (strtotime($Todate) < strtotime($Fromdate)) {
                            $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Invalid Date Range \n";
							$str_err_array = array($strErr);
                            $flag = false;
                        }

                    }else{
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5] . ",Please Enter Valid Date \n";
						$str_err_array = array($strErr);
                        $flag = false;
                    }*/
                }
                /***************************************************/
                if ($flag) {
                    $getSortOrdrRec = $this->_getSelectList('table_salesman_feedback_survey_master', 'MAX(sort_order) as max_sort_order', '', " status = 'A' ");
                    $max_sort_order = 1;
                    if (is_array($getSortOrdrRec) && (count($getSortOrdrRec) > 0)) {
                        $max_sort_order = ($getSortOrdrRec[0]->max_sort_order + 1);
                    }
                    $data = array();
                    $data['account_id'] = $this->clean($_SESSION['accountId']);
                    $data['survey_name'] = trim($SurveyName);
                    $data['from_date'] = $Fromdate;
                    $data['to_date'] = $Todate;
                    $data['status'] = 'A';
                    $data['is_verified'] = '0';
                    $data['created_on'] = date('Y-m-d H:i:s');
                    $data['sort_order'] = mysql_escape_string($max_sort_order);
                    $survey_id = $this->_dbInsert($data, 'table_salesman_feedback_survey_master');

                    if ($survey_id > 0) {
                        $surcode = array();
                        $surcode['survey_code'] = "SUR" . $survey_id;
                        $this->_dbUpdate2($surcode, 'table_salesman_feedback_survey_master', "survey_id=" . $survey_id);
                    }
                    // Retailer Mapping
                    if ($AllRetType == 1) {
                        $isAllRet = array();
                        $isAllRet['is_all_designation'] = '1';
                        $this->_dbUpdate2($isAllRet, 'table_salesman_feedback_survey_master', "survey_id=" . $survey_id);
                    } else {
                        if (is_array($RetailerTypeIdsArr) && count($RetailerTypeIdsArr) > 0) {
                            foreach ($RetailerTypeIdsArr as $key1 => $retTypeId) {
                                if (is_numeric($retTypeId)) {
                                    $data1 = [];
                                    $data1['survey_id'] = $survey_id;
                                    $data1['hierarchy_id'] = $retTypeId;
                                    $data1['status'] = 'A';
                                    $data1['created_at'] = date('Y-m-d H:i:s');
                                    $this->_dbInsert($data1, 'table_salesman_survey_designation_mapping');
                                }
                            }
                        }
                    }


                    // state Mapping
                    if ($AllState == 1) {
                        $isAllstate = array();
                        $isAllstate['is_all_state'] = '1';
                        $this->_dbUpdate2($isAllstate, 'table_salesman_feedback_survey_master', "survey_id=" . $survey_id);
                    } else {
                        if (is_array($StateIdsArr) && count($StateIdsArr) > 0) {
                            foreach ($StateIdsArr as $key1 => $stateTypeId) {
                                if (is_numeric($stateTypeId)) {
                                    $data1 = [];
                                    $data1['survey_id'] = $survey_id;
                                    $data1['state_id'] = $stateTypeId;
                                    $data1['status'] = 'A';
                                    $data1['created_at'] = date('Y-m-d H:i:s');
                                    $this->_dbInsert($data1, 'table_survey_state_mapping');
                                }
                            }
                        }
                    }

                    // salesman Mapping
                    if ($AllSalesman == 1) {
                        $isAllstate = array();
                        $isAllSal['is_all_employee'] = '1';
                        $this->_dbUpdate2($isAllSal, 'table_salesman_feedback_survey_master', "survey_id=" . $survey_id);

                        $wher = " status='A' and salesman_id >0 ";
                        $salRec = $this->_getSelectList('table_salesman',
                            "salesman_id,employee_code", '', $wher);
                        foreach ($salRec as $key => $val) {
                            $data1 = [];
                            $data1['survey_id'] = $survey_id;
                            $data1['employee_id'] = $val->salesman_id;
                            $data1['status'] = 'A';
                            $data1['created_at'] = date('Y-m-d H:i:s');
                            $data1['updated_on'] = date('Y-m-d H:i:s');
                            $this->_dbInsert($data1, 'table_salesman_survey_employee_type_mapping');
                        }
                    } else {
                        if (is_array($SalesmanIdsArr) && count($SalesmanIdsArr) > 0) {
                            foreach ($SalesmanIdsArr as $key1 => $salesmanId) {
                                if (is_numeric($salesmanId)) {

                                    $data1 = [];
                                    $data1['survey_id'] = $survey_id;
                                    $data1['employee_id'] = $salesmanId;
                                    $data1['status'] = 'A';
                                    $data1['created_at'] = date('Y-m-d H:i:s');
                                    $data1['updated_on'] = date('Y-m-d H:i:s');
                                    $this->_dbInsert($data1, 'table_salesman_survey_employee_type_mapping');
                                }
                            }
                        }
                    }
                    /************Update survey code*********************/

                }

            }
            $row++;
        }
        fclose($file);
        if ($row <= 2 && $fErr == '') {
            return "no";
        } else if ($row <= 2 && $fErr == 'fnot') {
            return $fErr;
        } else {
            return $str_err_array;
        }
    }

    function uploadSalesmanSurveyFeedbackQuestionFile()
    {
        $fields = array('Survey Code*','Question Number*','Question Text*','Is Que. Mandatory','Group Answer Type*','Answer Type*','Label*','Is Answer Type Mandatory','Keyboard Input Type(A/N)',"Options('|' separated)");
        $file 	= fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $fErr = '';
        $row = 0; $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";
        $questionsMasterArr 		= array();
        $questionsAnswerTypeArr 	= array();
        $flag = true;
        while (!feof($file)) {
            $arrFile = fgetcsv($file);

            if ($row == 0) {

                if (count($arrFile) == 10 && trim($arrFile[0]) == "Survey Code*" && trim($arrFile[1]) == "Question Number*" && trim($arrFile[2]) == "Question Text*" && trim($arrFile[3]) == "Is Que. Mandatory" && trim($arrFile[4]) == "Group Answer Type*" && trim($arrFile[5]) == "Answer Type*" && trim($arrFile[6]) == "Label*" && trim($arrFile[7]) == "Is Answer Type Mandatory" && trim($arrFile[8]) == "Keyboard Input Type(A/N)" && trim($arrFile[9]) == "Options('|' separated)") {
                    $flag = true;
                } else {
                    $flag = false;
                    $fErr = "fnot";
                }

            }

            if ($row > 0 && is_array($arrFile)) {
                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[4]) || empty($arrFile[5])|| empty($arrFile[6]) || ($arrFile[1]==0 || !is_numeric($arrFile[1])) || ($arrFile[4]==0 || !is_numeric($arrFile[4]))){
                    //$strErr .="Error in Row".$row." ";
                    if(empty($arrFile[0])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9]. "," . $fields[0] . " shouldn't be empty \n";
                    }else if(empty($arrFile[1]) || $arrFile[1]==0 || !is_numeric($arrFile[1])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[1] . " shouldn't be empty \n";
                    }else if(empty($arrFile[2])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[2] . " shouldn't be empty \n";
                    }else if(empty($arrFile[4]) || $arrFile[4]==0 || !is_numeric($arrFile[4])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[4] . " shouldn't be empty \n";
                    }else if(empty($arrFile[5])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[5] . " shouldn't be empty \n";
                    }else if(empty($arrFile[6])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[6] . " shouldn't be empty \n";
                    }else if(empty($arrFile[7])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[7] . " shouldn't be empty \n";
                    }

                    $str_err_array = array($strErr);
                    $flag = false;
                }
                if($flag){
                    if(!empty($arrFile[3]) && strtolower($arrFile[3])!='yes' && strtolower($arrFile[3])!='no') {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $arrFile[3] . " Invalid value for Is Que. Mandatory(Only Yes/No allow) \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                if($flag){
                    if(!empty($arrFile[7]) && strtolower($arrFile[7])!='yes' && strtolower($arrFile[7])!='no') {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $arrFile[7] . " Invalid value for Is Answer Type Mandatory(Only Yes/No allow) \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                $servey_id				= 0;
                $SurveyCode				= $arrFile[0];
                $QuestionNumber			= $arrFile[1];
                $QuestionText			= htmlspecialchars(preg_replace($regex, "", str_replace("'", "\'", $arrFile[2])), ENT_IGNORE);
                $IsQueMandatory			= ((strtolower($arrFile[3]) == 'yes' || strtolower($arrFile[3]) == 'y')?1:0);

                $GroupAnswerType		= $arrFile[4];
                $AnswerType				= strtolower($arrFile[5]);
                $Level					= $arrFile[6];
                $IsAnswerTypeMandatory	= ((strtolower($arrFile[7]) == 'yes' || strtolower($arrFile[7]) == 'y')?1:0);
                $KeyboardInputType		= ((strtolower($arrFile[8]) == 'a')?'alphanumeric':((strtolower($arrFile[8]) == 'n')?'numeric':''));
                $Options				= $arrFile[9];
                $optionsArr				= array();
                $optionsArr 			= explode('|',strtolower($Options));
                $survey_id				= 0;
                if($flag){
                    if(!empty($arrFile[5]) && (strtolower($arrFile[5])!='text' && strtolower($arrFile[5])!='image' && strtolower($arrFile[5])!='single choice' && strtolower($arrFile[5])!='multiple choice')) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $arrFile[5] . " Invalid Answer Type \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                if($flag){
                    if(($arrFile[5]=='Single Choice' || $arrFile[5]=='Multiple Choice') && empty($arrFile[9])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[9] . " shouldn't be empty for Single/Multiple choice answer type \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }else if(($arrFile[5]=='Text') && empty($arrFile[8])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[8] . " shouldn't be empty for 'Text' answer type \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                if($flag){
                    $condi = " LOWER(survey_code)='" . mysql_escape_string(strtolower($SurveyCode)) . "' AND status = 'A' ";
                    $SurveyRec = $this->_getSelectList('table_salesman_feedback_survey_master', "survey_id", '', $condi);

                    if (!is_array($SurveyRec) || count($SurveyRec) <= 0) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . ", Survey Code does not exists.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    } else {
                        $survey_id = $SurveyRec[0]->survey_id;
                    }
                }
                if($flag){
                    $questionsMasterArr[$survey_id][$QuestionNumber]=array('text'=>$QuestionText,'mandatory'=>$IsQueMandatory);
                    $questionsAnswerTypeArr[$survey_id][$QuestionNumber][$GroupAnswerType][$AnswerType] = array('Level'=>$Level,
                        'Mandatory'=>$IsAnswerTypeMandatory,
                        'KeyboardInputType'=>$KeyboardInputType,
                        'options'=>$optionsArr);
                }



            }
            $row++;
        }

        if(count($str_err_array)==0 && $flag && count($questionsMasterArr)>0){
            foreach($questionsMasterArr as $survey_id=>$questArr){
                foreach($questArr as $quesNum=>$quesMaster){
                    $getSortOrdrQuesRec = $this->_getSelectList('table_salesman_feedback_survey_questions_master', 'MAX(sort_order) as max_sort_order', '', " survey_id = " . $survey_id . " And status = 'A' ");
                    $max_order = 1;
                    if(is_array($getSortOrdrQuesRec) && (count($getSortOrdrQuesRec) > 0)) {
                        $max_order = ($getSortOrdrQuesRec[0]->max_sort_order + 1);
                    }
                    /************Insert Question Master************************************/
                    $data = [];
                    $data['account_id'] 	= intval($_SESSION['accountId']);
                    $data['survey_id'] 		= intval($survey_id);
                    $data['question_desc'] 	= ($quesMaster['text']);
                    $data['is_mandatory'] 	= ($quesMaster['mandatory']);
                    $data['status'] 		= 'A';
                    $data['created_on'] 	= date('Y-m-d H:i:s');
                    $data['sort_order'] 	= mysql_escape_string($max_order);
                    $ques_id = $this->_dbInsert($data, 'table_salesman_feedback_survey_questions_master');
                    /**************************************************************************/

                    /*******************Insert Answer Type*************************************/
                    $GroupAnsTypeArr = $questionsAnswerTypeArr[$survey_id][$quesNum];
                    //$GroupAnsTypeArr[$GroupAnswerType][$AnswerType]
                    foreach($GroupAnsTypeArr as $AnsGrpId=>$AnswerTypeArr){
                        foreach($AnswerTypeArr as $AnsType=>$AnswerTypeData){
                            $optionsListArr = array();
                            $AnsTypeId = 0;
                            if($AnsType == "image"){
                                $AnsTypeId = 1;
                            }else if($AnsType == "text"){
                                $AnsTypeId = 2;
                            }else if($AnsType == "multiple choice"){
                                $AnsTypeId = 3;
                            }else if($AnsType == "single choice"){
                                $AnsTypeId = 4;
                            }

                            // Add Ques Ans Type
                            $surQusAns = [];
                            $surQusAns['survey_id'] 	= $survey_id;
                            $surQusAns['question_id'] 	= $ques_id;
                            $surQusAns['ans_type_id'] 	= $AnsTypeId;
                            $surQusAns['label'] 		= $AnswerTypeData['Level'];
                            $surQusAns['is_mandatory'] 	= $AnswerTypeData['Mandatory'];
                            $surQusAns['key_board_input_type'] = $AnswerTypeData['KeyboardInputType'];
                            $group_id = $this->_dbInsert($surQusAns, 'table_salesman_feedback_survey_ans_type_group');
                            /**************Insert Options********************************/
                            $optionsListArr = $AnswerTypeData['options'];
                            if(count($optionsListArr)>0 && ($AnsTypeId==3 || $AnsTypeId==4)){
                                foreach ($optionsListArr as $key => $optionsData) {
                                    if ($optionsData != "") {
                                        $ansData = array();
                                        $ansData['survey_id'] 			= $survey_id;
                                        $ansData['question_id'] 		= $ques_id;
                                        $ansData['group_id'] 			= $group_id;
                                        $ansData['option_description'] 	= htmlspecialchars(preg_replace($regex, "", str_replace("'", "\'", $optionsData)), ENT_IGNORE);
                                        $ansData['Status'] 				= 'A';
                                        $ansData['last_updated_on']	 	= date('Y-m-d H:i:s');
                                        $this->_dbInsert($ansData, 'table_salesman_question_ans_type_options');
                                    }
                                }
                            }

                        }
                    }


                    /**************************************************************************/

                }
                // Todo Start : Jatin : 17 april 24 : to com[lete survey
                $SurId['is_verified'] = '1';
                $this->_dbUpdate($SurId, 'table_salesman_feedback_survey_master', 'survey_id ='.$survey_id);

                // Todo End : Jatin : 17 april 24 : to com[lete survey
            }
        }
        fclose($file);
        if($row <= 2 && $fErr == ''){
            return "no";
        }else if ($row <= 2 && $fErr == 'fnot'){
            return $fErr;
        }else{
            return $str_err_array;
        }
    }
    function uploadSurveyFeedbackQuestionFile()
    {
        $fields = array('Survey Code*','Question Number*','Question Text*','Is Que. Mandatory','Group Answer Type*','Answer Type*','Label*','Is Answer Type Mandatory','Keyboard Input Type(A/N)',"Options('|' separated)");
        $file 	= fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $fErr = '';
        $row = 0; $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";
        $questionsMasterArr 		= array();
        $questionsAnswerTypeArr 	= array();
        $flag = true;
        while (!feof($file)) {
            $arrFile = fgetcsv($file);

            if ($row == 0) {

                if (count($arrFile) == 10 && trim($arrFile[0]) == "Survey Code*" && trim($arrFile[1]) == "Question Number*" && trim($arrFile[2]) == "Question Text*" && trim($arrFile[3]) == "Is Que. Mandatory" && trim($arrFile[4]) == "Group Answer Type*" && trim($arrFile[5]) == "Answer Type*" && trim($arrFile[6]) == "Label*" && trim($arrFile[7]) == "Is Answer Type Mandatory" && trim($arrFile[8]) == "Keyboard Input Type(A/N)" && trim($arrFile[9]) == "Options('|' separated)") {
                    $flag = true;
                } else {
                    $flag = false;
                    $fErr = "fnot";
                }

            }

            if ($row > 0 && is_array($arrFile)) {
                if (empty($arrFile[0]) || empty($arrFile[1]) || empty($arrFile[2]) || empty($arrFile[4]) || empty($arrFile[5])|| empty($arrFile[6]) || ($arrFile[1]==0 || !is_numeric($arrFile[1])) || ($arrFile[4]==0 || !is_numeric($arrFile[4]))){
                    //$strErr .="Error in Row".$row." ";
                    if(empty($arrFile[0])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9]. "," . $fields[0] . " shouldn't be empty \n";
                    }else if(empty($arrFile[1]) || $arrFile[1]==0 || !is_numeric($arrFile[1])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[1] . " shouldn't be empty \n";
                    }else if(empty($arrFile[2])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[2] . " shouldn't be empty \n";
                    }else if(empty($arrFile[4]) || $arrFile[4]==0 || !is_numeric($arrFile[4])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[4] . " shouldn't be empty \n";
                    }else if(empty($arrFile[5])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[5] . " shouldn't be empty \n";
                    }else if(empty($arrFile[6])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[6] . " shouldn't be empty \n";
                    }else if(empty($arrFile[7])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[7] . " shouldn't be empty \n";
                    }

                    $str_err_array = array($strErr);
                    $flag = false;
                }
                if($flag){
                    if(!empty($arrFile[3]) && strtolower($arrFile[3])!='yes' && strtolower($arrFile[3])!='no') {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $arrFile[3] . " Invalid value for Is Que. Mandatory(Only Yes/No allow) \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                if($flag){
                    if(!empty($arrFile[7]) && strtolower($arrFile[7])!='yes' && strtolower($arrFile[7])!='no') {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $arrFile[7] . " Invalid value for Is Answer Type Mandatory(Only Yes/No allow) \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                $servey_id				= 0;
                $SurveyCode				= $arrFile[0];
                $QuestionNumber			= $arrFile[1];
                $QuestionText			= htmlspecialchars(preg_replace($regex, "", str_replace("'", "\'", $arrFile[2])), ENT_IGNORE);
                $IsQueMandatory			= ((strtolower($arrFile[3]) == 'yes' || strtolower($arrFile[3]) == 'y')?1:0);

                $GroupAnswerType		= $arrFile[4];
                $AnswerType				= strtolower($arrFile[5]);
                $Level					= $arrFile[6];
                $IsAnswerTypeMandatory	= ((strtolower($arrFile[7]) == 'yes' || strtolower($arrFile[7]) == 'y')?1:0);
                $KeyboardInputType		= ((strtolower($arrFile[8]) == 'a')?'alphanumeric':((strtolower($arrFile[8]) == 'n')?'numeric':''));
                $Options				= $arrFile[9];
                $optionsArr				= array();
                $optionsArr 			= explode('|',strtolower($Options));
                $survey_id				= 0;
                if($flag){
                    if(!empty($arrFile[5]) && (strtolower($arrFile[5])!='text' && strtolower($arrFile[5])!='image' && strtolower($arrFile[5])!='single choice' && strtolower($arrFile[5])!='multiple choice' && strtolower($arrFile[5])!='multiple option description')) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $arrFile[5] . " Invalid Answer Type \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                if($flag){
                    if(($arrFile[5]=='Single Choice' || $arrFile[5]=='Multiple Choice' || $arrFile[5]=='Multiple Option Description') && empty($arrFile[9])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[9] . " shouldn't be empty for Single/Multiple choice answer type \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }else if(($arrFile[5]=='Text' || $arrFile[5]=='Multiple Option Description') && empty($arrFile[8])) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . "," . $fields[8] . " shouldn't be empty for 'Text' & Multiple Option Description  answer type \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }
                }
                if($flag){
                    $condi = " LOWER(survey_code)='" . mysql_escape_string(strtolower($SurveyCode)) . "' AND status = 'A' ";
                    $SurveyRec = $this->_getSelectList('table_feedback_survey_master', "survey_id", '', $condi);

                    if (!is_array($SurveyRec) || count($SurveyRec) <= 0) {
                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," . $arrFile[5]. "," . $arrFile[6]. "," . $arrFile[7] . "," . $arrFile[8]. "," . $arrFile[9] . ", Survey Code does not exists.\n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    } else {
                        $survey_id = $SurveyRec[0]->survey_id;
                    }
                }
                if($flag){
                    $questionsMasterArr[$survey_id][$QuestionNumber]=array('text'=>$QuestionText,'mandatory'=>$IsQueMandatory);
                    $questionsAnswerTypeArr[$survey_id][$QuestionNumber][$GroupAnswerType][$AnswerType] = array('Level'=>$Level,
                        'Mandatory'=>$IsAnswerTypeMandatory,
                        'KeyboardInputType'=>$KeyboardInputType,
                        'options'=>$optionsArr);
                }



            }
            $row++;
        }

        if(count($str_err_array)==0 && $flag && count($questionsMasterArr)>0){
            foreach($questionsMasterArr as $survey_id=>$questArr){
                foreach($questArr as $quesNum=>$quesMaster){
                    $getSortOrdrQuesRec = $this->_getSelectList('table_feedback_survey_questions_master', 'MAX(sort_order) as max_sort_order', '', " survey_id = " . $survey_id . " And status = 'A' ");
                    $max_order = 1;
                    if(is_array($getSortOrdrQuesRec) && (count($getSortOrdrQuesRec) > 0)) {
                        $max_order = ($getSortOrdrQuesRec[0]->max_sort_order + 1);
                    }
                    /************Insert Question Master************************************/
                    $data = [];
                    $data['account_id'] 	= intval($_SESSION['accountId']);
                    $data['survey_id'] 		= intval($survey_id);
                    $data['question_desc'] 	= ($quesMaster['text']);
                    $data['is_mandatory'] 	= ($quesMaster['mandatory']);
                    $data['status'] 		= 'A';
                    $data['created_on'] 	= date('Y-m-d H:i:s');
                    $data['sort_order'] 	= mysql_escape_string($max_order);
                    $ques_id = $this->_dbInsert($data, 'table_feedback_survey_questions_master');
                    /**************************************************************************/

                    /*******************Insert Answer Type*************************************/
                    $GroupAnsTypeArr = $questionsAnswerTypeArr[$survey_id][$quesNum];
                    //$GroupAnsTypeArr[$GroupAnswerType][$AnswerType]
                    foreach($GroupAnsTypeArr as $AnsGrpId=>$AnswerTypeArr){
                        foreach($AnswerTypeArr as $AnsType=>$AnswerTypeData){
                            $optionsListArr = array();
                            $AnsTypeId = 0;
                            if($AnsType == "image"){
                                $AnsTypeId = 1;
                            }else if($AnsType == "text"){
                                $AnsTypeId = 2;
                            }else if($AnsType == "multiple choice"){
                                $AnsTypeId = 3;
                            }else if($AnsType == "single choice"){
                                $AnsTypeId = 4;
                            }else if($AnsType == "multiple option description"){
                                $AnsTypeId = 5;
                            }

                            // Add Ques Ans Type
                            $surQusAns = [];
                            $surQusAns['survey_id'] 	= $survey_id;
                            $surQusAns['question_id'] 	= $ques_id;
                            $surQusAns['ans_type_id'] 	= $AnsTypeId;
                            $surQusAns['label'] 		= $AnswerTypeData['Level'];
                            $surQusAns['is_mandatory'] 	= $AnswerTypeData['Mandatory'];
                            $surQusAns['key_board_input_type'] = $AnswerTypeData['KeyboardInputType'];
                            $group_id = $this->_dbInsert($surQusAns, 'table_feedback_survey_ans_type_group');
                            /**************Insert Options********************************/
                            $optionsListArr = $AnswerTypeData['options'];
                            if(count($optionsListArr)>0 && ($AnsTypeId==3 || $AnsTypeId==4 || $AnsTypeId==5)){
                                foreach ($optionsListArr as $key => $optionsData) {
                                    if ($optionsData != "") {
                                        $ansData = array();
                                        $ansData['survey_id'] 			= $survey_id;
                                        $ansData['question_id'] 		= $ques_id;
                                        $ansData['group_id'] 			= $group_id;
                                        $ansData['option_description'] 	= htmlspecialchars(preg_replace($regex, "", str_replace("'", "\'", $optionsData)), ENT_IGNORE);
                                        $ansData['Status'] 				= 'A';
                                        $ansData['last_updated_on']	 	= date('Y-m-d H:i:s');
                                        $this->_dbInsert($ansData, 'table_question_ans_type_options');
                                    }
                                }
                            }

                        }
                    }


                    /**************************************************************************/

                }
                // Todo Start : Jatin : 17 april 24 : to com[lete survey
                $SurId['is_verified'] = '1';
                $this->_dbUpdate($SurId, 'table_feedback_survey_master', 'survey_id ='.$survey_id);

                // Todo End : Jatin : 17 april 24 : to com[lete survey
            }
        }
        fclose($file);
        if($row <= 2 && $fErr == ''){
            return "no";
        }else if ($row <= 2 && $fErr == 'fnot'){
            return $fErr;
        }else{
            return $str_err_array;
        }
    }


       function uploadRetailerCreditLimitFile()
{
    $fields = array('Retailer Code*', 'Credit Limit Amount*');
    
    $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
  
    $strErr = "";
    $row = 0;
    $retailerData = [];
    
    while (!feof($file)) {
        $arrFile = fgetcsv($file);
      
        if ($row > 0 && is_array($arrFile)) {
            $retailerCode = trim($arrFile[0]);
            $creditLimit = trim($arrFile[1]);

           
            if (!empty($retailerCode) && $retailerCode != "Retailer Code*" && !empty($creditLimit) && $creditLimit != "Credit Limit Amount*") {
              
                $retailerData[$retailerCode] = $creditLimit;
            }
        }
        $row++;
    }
    
    fclose($file);

   
    foreach ($retailerData as $retailerCode => $creditLimit) {
        $flag = true;
        $custId = 0;

        // Check if retailer exists
        $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(retailer_code)='" . mysql_escape_string(strtolower($retailerCode)) . "' and status = 'A' ";
        $custRec = $this->_getSelectList('table_retailer', 'retailer_id', '', $condi);
        
        if (is_array($custRec) && (count($custRec) > 0)) {
            $custId = $custRec[0]->retailer_id;
        } else {
            $strErr .= "Error: Retailer " . $retailerCode . " does not exist in the system.\n";
            $flag = false;
        }

        if ($flag && ($custId > 0)) {
            // Check if a credit limit mapping exists for the retailer
            $mappingRec = $this->_getSelectList('table_retailer_credit_limit', '*', '', "retailer_id = $custId");

            if (is_array($mappingRec) && (count($mappingRec) > 0)) {
                $existingCreditLimit = $mappingRec[0]->credit_limit;
                
                // Update if the credit limit has changed
                if ($existingCreditLimit != $creditLimit) {
                    $updateData = [
                        'credit_limit' => $creditLimit,
                        'updated_at' => date('Y-m-d H:i:s'),
                    ];
                    $this->_dbUpdate($updateData, 'table_retailer_credit_limit', "retailer_id = $custId");
                } else {
                    // Just update the updated_at field
                    $updateData = [
                        'updated_at' => date('Y-m-d H:i:s'),
                    ];
                    $this->_dbUpdate($updateData, 'table_retailer_credit_limit', "retailer_id = $custId");
                }
            } else {
                // Insert new data if mapping does not exist
                $data = [];
                $data['account_id'] = $_SESSION['accountId'];
                $data['retailer_id'] = $custId;
                $data['credit_limit'] = $creditLimit;
                $data['created_at'] = date('Y-m-d H:i:s');
                $this->_dbInsert($data, 'table_retailer_credit_limit');
            }
        }
    }
    
    if ($row <= 2) {
        return "no";
    } else {
        return $strErr;
    }
}


    /********************    Start Upload Sub Category    *********************/

    function uploadSubCategoryFile()

    {

        $fields = array('Sub Category Name*', 'Sub Category Code');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;

            if ($row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || $arrFile[0] == "Sub Category Name*") {

                    $strErr .= "Error in Row" . $row . " ," . $fields[0] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(subcategory_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "'";

                    $aCatRec = $this->_getSelectList('table_subcategory', '*', '', $condi);

                    // echo '<pre>';

                    // print_r($condi);

                    // print_r($aCatRec);

                    // die(' die here');

                    if (is_array($aCatRec)) {

                        $strErr .= " Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,already exists in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['subcategory_name'] = mysql_escape_string($this->clean(trim($arrFile[0])));

                    $data['subcategory_code'] = mysql_escape_string($this->clean(trim($arrFile[1])));

                    $data['created_date'] = date('Y-m-d');

                    $data['last_update_date'] = date('Y-m-d');

                    // $data['last_update_status'] = 'New';

                    // $data['type'] = 'I';

                    $data['status'] = 'A';

                    $id = $this->_dbInsert($data, 'table_subcategory');

                }

            }

            $row++;

        }

        //print_r($str_err_array);

        fclose($file);

        if ($row <= 2)

            return "no";

        else

            return $str_err_array;

    }

    /********************   End Upload Sub Category   **********************/

    // Upload for Item Ranking Master : domar : 21-nov-2024

    function uploadItemRankingListFile()
    {

        $fields = array('Rank Name*' , 'Rank Order*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
        $strErr = "";
        $row = 0;
        $fErr = "no";
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";
        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);
            $flag = true;

            
///////////////

            if ($row == 0) {
                if (count($arrFile) == 2 && trim($arrFile[0]) == "Rank Name*" && trim($arrFile[1]) == "Rank Order*") {
                    $flag2 = true;

                } else {
            
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

/////////////

            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0])) {

                    $strErr .= "Error in Row" . $row . " ," . $arrFile[0] ." , " . $arrFile[1] ." ," . $fields[0] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }

                else if (empty($arrFile[1])) {
    
                    $strErr .= "Error in Row" . $row . " ," . $arrFile[0] ." , " . $arrFile[1] . " ," . $fields[1] ." shouldn't be empty \n";

                    $str_err_array = array($strErr);

                    $flag = false;

                }


                // echo is_numeric($arrFile[1]);die;

                if(is_numeric($arrFile[1]) != '1'){
                    $strErr .= "Error in Row" . $row . " ," . $arrFile[0] ." , " . $arrFile[1] . " ," . $fields[1] ." allow only numeric value\n";

                    $str_err_array = array($strErr);

                    $flag = false;
                 

                }



                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(item_rank_name)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "'";

                    $aCatRec = $this->_getSelectList('table_item_ranking', '*', '', $condi);


                    if (is_array($aCatRec) && count($aCatRec) > 0) {

                        $strErr .= " Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " ,Rank Name already exist in the system.  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(item_rank_order)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "'";

                    $aCatRec = $this->_getSelectList('table_item_ranking', '*', '', $condi);

                    if (is_array($aCatRec) && count($aCatRec) > 0) {

                        $strErr .= " Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . " , Rank Order already exist in the system.  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }    



                if ($flag) {

                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['item_rank_name'] = mysql_escape_string($this->clean(trim($arrFile[0])));

                    $data['item_rank_order'] = mysql_escape_string($this->clean(trim($arrFile[1])));

                    $data['created_date'] = date('Y-m-d');

                    $data['last_update_date'] = date('Y-m-d');

                    $data['status'] = 'A';

            
                    $id = $this->_dbInsert($data, 'table_item_ranking');

                }

            }

            $row++;

        }

        // print_r($str_err_array);die;

       
        fclose($file);


        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else
            return $str_err_array;

    }


    //Todo Start : 06-dec-2024 : Domar : Import State & Item Rank Mapping

    function uploadStateItemRankMappingFile()
    {

        $fields = array('Item Code*', 'State Code*',  'Item Rank Name*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;
        $fErr = "no";
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            // print_r($arrFile);
            // echo '<pre>';
            // print_r($fields);die;

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 3 && trim($arrFile[0]) == "Item Code*" && trim($arrFile[1]) == "State Code*" && trim($arrFile[2]) == "Item Rank Name*") {
                    $flag2 = true;

                } else {
            
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }




            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (count($arrFile) == 3 && trim($arrFile[0]) == "Item Code*" && trim($arrFile[1]) == "State Code*" && trim($arrFile[2]) == 'Item Rank Name*') {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[2])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";

                    } 
                
                    $str_err_array = array($strErr);

                    $flag = false;

                }

                if ($flag) {

                    $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower($arrFile[0])) . "' AND status = 'A' ";

                    $StateRec = $this->_getSelectList2('table_item', "item_id", '', $condi);

                    if (is_array($StateRec) && (count($StateRec) > 0)) {

                        $item_id = $StateRec[0]->item_id;


                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Item Code does not exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }



                if ($flag) {


                    $condi = " LOWER(state_code)='" . mysql_escape_string(strtolower($arrFile[1])) . "' AND status = 'A' ";

                    $StateRec = $this->_getSelectList2('state', "state_id", '', $condi);

                    if (is_array($StateRec) && (count($StateRec) > 0)) {

                        $state_id = $StateRec[0]->state_id;


                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , State does not exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $condi = " LOWER(item_rank_name)='" . mysql_escape_string(strtolower($arrFile[2])) . "' AND status = 'A' ";

                    $StateRec = $this->_getSelectList2('table_item_ranking', "item_rank_id", '', $condi);

                    if (is_array($StateRec) && (count($StateRec) > 0)) {

                        $item_rank_id = $StateRec[0]->item_rank_id;


                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Item Rank does not exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                // only update the Item rank name 

                if($flag){

                    $condi ="item_id ='". $item_id . "' and state_id ='". $state_id ."'";
                    $StateRec = $this->_getSelectList2('table_state_and_item_rank_mapping', "*", '', $condi);

                    if (is_array($StateRec) && (count($StateRec) > 0)) {

                        $data2['item_rank_id'] = $item_rank_id;
                        $data2['last_update_date'] = date('Y-m-d');
                        $data2['status'] = 'A';

                        $this->_dbUpdate($data2, 'table_state_and_item_rank_mapping', " state_and_item_id=" . $StateRec[0]->state_and_item_id);

                        return "updated";

                        $flag = false;
                         
                    }
                   
                }



                if ($flag) {

                    $data = array();

                    $data['account_id'] = $_SESSION['accountId'];

                    $data['item_id'] = $item_id;

                    $data['state_id'] = $state_id;

                    $data['item_rank_id'] = $item_rank_id;

                    $data['last_update_date'] = date('Y-m-d');

                    $data['status'] = 'A';

                    $state_and_item_id = $this->_dbInsert($data, 'table_state_and_item_rank_mapping');

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else
            return $str_err_array;

    }



    //  Rohit code : start : 18-feb-2025 

    function uploadRetailerChannelItemPriceFile()
    {
        $fields = array('Item Code*', $this->AliaseUsers['retailer'] . ' Channel*', 'Price*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;
        $fErr = "no";
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            // print_r($arrFile);
            // echo '<pre>';
            // print_r($fields);die;

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 3 && trim($arrFile[0]) == "Item Code*" && trim($arrFile[1]) == $this->AliaseUsers['retailer'] ." Channel*" && trim($arrFile[2]) == "Price*") {
                    $flag2 = true;

                } else {
            
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }



            if ($flag2 && $row > 0 && is_array($arrFile)) {

                if (empty($arrFile[0]) || empty($arrFile[1]) || trim($arrFile[2]) == '') {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[0] . " shouldn't be empty \n";


                    } else if (empty($arrFile[1])) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[1] . " shouldn't be empty \n";


                    } else if (trim($arrFile[2]) == '') {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $fields[2] . " shouldn't be empty \n";


                    }

                    $str_err_array = array($strErr);

                    $flag = false;

                }


                if ($flag) {

                    $condi = " LOWER(i.item_code)='" . strtolower(trim($arrFile[0])) . "' AND c.status='A' AND i.status = 'A' AND i.item_type='I'";
                    // $condi = "c.status='A' AND i.status = 'A' AND i.item_type='I'";

                    $ItemRec = $this->_getSelectList('table_item as i 

                    LEFT JOIN table_category as c on i.category_id = c.category_id', "i.item_id", '', $condi);

                    $item_id = $ItemRec[0]->item_id;

                    if (!is_array($ItemRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Invalid Item Code \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $condi = " LOWER(channel_name)='" . strtolower(trim($arrFile[1])) . "' AND status='A'";
                    // $condi = "status='A'";

                    $retTypeRec = $this->_getSelectList('table_retailer_channel_master', "channel_id", '', $condi);

                    $retTypeId = $retTypeRec[0]->channel_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Invalid " . $this->AliaseUsers['retailer'] . " Channel \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }
                   

                }


                if ($flag) {

                    if (!is_numeric(trim($arrFile[2])) || trim($arrFile[2]) == '') {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "  ,Invalid Price\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                $updateFlg = 0;
                $mappingId = 0;
                if ($flag) {

                    $condi = " item_id='" . $item_id . "' and retailer_channel_id = '" . $retTypeId . "'";
                    $mapRec = $this->_getSelectList2('table_retailer_channel_item_price_mapping', "mapping_id", '', $condi);

                    if (is_array($mapRec) && (count($mapRec) > 0)) {
                        $updateFlg = 1;
                        $mappingId = $mapRec[0]->mapping_id;
                        $updCondi = " mapping_id=" . $mappingId . " and retailer_channel_id=". $retTypeId ." and item_id =". $item_id;


                        // echo $updCondi;die;

                        $data = array();
                        $data['price'] = trim($arrFile[2]);
                        $data['updated_at'] = date('Y-m-d H:i:s');

                        // echo "<pre>";
                        // print_r($data);die;
                        $this->_dbUpdate($data, 'table_retailer_channel_item_price_mapping', $updCondi);


                    }else{
                      
                        $data['retailer_channel_id'] = $retTypeId;
                        $data['item_id'] = $item_id;
                        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
                        $data['price'] = trim($arrFile[2]);
                        $data['status'] = 'A';
                        $data['created_at'] = date('Y-m-d H:i:s');
                        $data['updated_at'] = date('Y-m-d H:i:s');
                        $this->_dbInsert($data, 'table_retailer_channel_item_price_mapping');
                    }

                }



            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else
            return $str_err_array;


    }


 //  Rohit code : End : 18-feb-2025 





/// import Competitor Master 



function validateEmail($email) {
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        return "Invalid email format. Please enter a valid email address.";
    }
}

function validatePhoneNumber($phone) {
    // Remove spaces, dashes, and parentheses
    $cleanPhone = preg_replace("/[\s\-\(\)]+/", "", $phone);
    
    if (!preg_match("/^[0-9]{10}$/", $cleanPhone)) {
        return "Invalid contact no. Please enter a valid 10-digit contact no.";
    } 
}

function importCompetetorMasterCsv()
{
    
    $fields = array('Competitor Name*', 'Competitor Code','Contact Person','Address','Contact No.','Email Id');


    $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

    $strErr = "";

    $row = 0;
    $fErr = "no";
    $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

    $remove = array("\n", "\r\n", "\r", '"', ',');

    while (!feof($file)) {

        $arrFile = fgetcsv($file);

        $flag = true;


        if ($row == 0) {
            if (count($arrFile) == 6 && trim($arrFile[0]) == "Competitor Name*" && trim($arrFile[1]) == "Competitor Code" && trim($arrFile[2]) == "Contact Person" && trim($arrFile[3]) == "Address" && trim($arrFile[4]) == "Contact No." && trim($arrFile[5]) == "Email Id") {
                $flag2 = true;

            } else {
        
                $flag2 = false;
                $fErr = "fnot";
            }
        }



        if ($flag2 && $row > 0 && is_array($arrFile)) {




            // if (empty($arrFile[0]) == '') {

                if (empty($arrFile[0])) {

                    $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . " ," . $arrFile[5] . "," . $fields[0] . " shouldn't be empty \n";

                    $str_err_array = array($strErr);

                $flag = false;
                }


                
        // }
         


            if ($flag) {

                $condi='competitor_name = "'.$arrFile[0].'"';
                $mapRec = $this->_getSelectList2('table_competitor_master', "competitor_id", '', $condi);

                if(!empty($mapRec[0]->competitor_id))
                {
                    
                    $strErr .= "Error in Row" . $row ."," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . " ," . $arrFile[5] . "," . $fields[0]." already exist \n";

                    $str_err_array = array($strErr);

                    $flag = false;


                }
            }

                if ($flag) {

                    if(!empty($arrFile[1])){

                        $condi='competitor_code = "'.$arrFile[1].'"';
                        $mapRec = $this->_getSelectList2('table_competitor_master', "competitor_id", '', $condi);

                            if(!empty($mapRec[0]->competitor_id))
                            {
                                $strErr .= "Error in Row" . $row ."," . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . " ," . $arrFile[5] . ",".$fields[1]."already exist \n";

                                $str_err_array = array($strErr);

                                $flag = false;
                        }
                    }
                }
                
               
                if ($flag) {

                    $condi2='contact_number = "'.$arrFile[4].'"';
                    $mapRec_contact = $this->_getSelectList2('table_competitor_master', "competitor_id", '', $condi2);

                    if(!empty($mapRec_contact[0]->competitor_id))
                    {
                      
                        $strErr .= "Error in Row" . $row .", " . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . " ," . $arrFile[5] . "," .$fields[4]." already exist\n";

                        
                        $str_err_array = array($strErr);
                        $flag = false;

                    }
                }
                if ($flag) {

                    $valid_email_err=$this->validateEmail($arrFile[5]);
                    if(!empty($valid_email_err))
                    {
                        $msg =$valid_email_err;
                        $is_error=1;
                        $strErr .= "Error in Row" . $row .", " . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . " ," . $arrFile[5] . ",".$msg."  \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }

                }

                if ($flag) {


                    $valid_phone_err=$this->validatePhoneNumber($arrFile[4]);
                    if(!empty($valid_email_err))
                    {
                        $msg =$valid_phone_err;
                        $is_error=1;
                        $strErr .= "Error in Row" . $row .", " . $arrFile[0] . "," . $arrFile[1] . " ," . $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . " ," . $arrFile[5] . ",".$msg." \n";
                        $str_err_array = array($strErr);
                        $flag = false;
                    }

                }
                if ($flag) {  
                    
                    $data = array();

                        // $customer_code=0;
                        // if(!empty($arrFile[1]))
                        // {
                        //     $customer_code=$arrFile[1];
                        //     $data['competitor_code']=$customer_code;
                        // }
                        
                        $data['account_id']=$_SESSION['accountId'];
                        $data['competitor_name']=$arrFile[0];
                        $data['competitor_code'] = $arrFile[1];
                  
                        $data['contact_person']=$arrFile[2];  
                        $data['address']=$arrFile[3];
                     
                        $data['contact_number']=$arrFile[4];
                     
                        $data['email_id']=$arrFile[5]; 
                 

                        
                        $data['status']='A';
                        $data['created_date']=date('Y-m-d');
                        $data['last_update_date']=date('Y-m-d');
                        $data['last_update_status']='Update';
                        // echo $$arrFile[1];die;
                        $id = $this->_dbInsert($data, 'table_competitor_master');

                   

                        if(empty($arrFile[1]))
                        {
                            $where_cond='competitor_id='. $id;
                            $update_data['competitor_code']=$id;
                            $this->_dbUpdate($update_data, 'table_competitor_master',$where_cond);
                        }

                
                }  
        }
        $row++;
    }


    fclose($file);

    if ($row <= 2 || $fErr == 'fnot')

        return $fErr;

    else
        return $str_err_array;
  
}




    // Upload for  Competitor Item Master : domar : 20-nov-2024

function uploadCompetitorItemListFile()
{

        $fields = array('Competitor Item Code','Competitor Item Name*','Competitor Brand Name*','Item Price');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;
        $fErr = "no";
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            $flag = true;


            if ($row == 0) {
                if (count($arrFile) == 4 && trim($arrFile[0]) == "Competitor Item Code" && trim($arrFile[1]) == "Competitor Item Name*" && trim($arrFile[2]) == "Competitor Brand Name*" && trim($arrFile[3]) == "Item Price") {
                    $flag2 = true;

                } else {
            
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }

            if ($flag2 && $row > 0 && is_array($arrFile)) {


                    if (empty($arrFile[1])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    } elseif (empty($arrFile[2])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";
                        $str_err_array = array($strErr);

                        $flag = false;

                    } 

                
                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(competitor_item_code)='" . mysql_escape_string(strtolower(trim($arrFile[0]))) . "'";

                    $aCatRec = $this->_getSelectList('table_competitor_item', 'competitor_item_code', '', $condi);


                    if (is_array($aCatRec) && count($aCatRec) > 0) {

                        $strErr .= " Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . " ," . $arrFile[3] . " ," . $fields[0] . "  ,already exist in the system  \n";
                      
                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }
                if ($flag) {

                    $condi = " account_id=" . $_SESSION['accountId'] . "  AND  LOWER(competitor_item_name)='" . mysql_escape_string(strtolower(trim($arrFile[1]))) . "'";

                    $aCatRec = $this->_getSelectList('table_competitor_item', 'competitor_item_name', '', $condi);


                    if (is_array($aCatRec) && count($aCatRec) > 0) {

                        $strErr .= " Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . " ," . $arrFile[3] . " ," . $fields[1] . "  ,already exist in the system  \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                

                if ($flag) {

                    $condi = " LOWER(description)='" . mysql_escape_string(strtolower($arrFile[2])) . "' AND status = 'A' ";

                    $StateRec = $this->_getSelectList2('table_competitor_brand', "competitor_brand_id", '', $condi);

                    if (is_array($StateRec) && (count($StateRec) > 0)) {

                        $competitor_brand_id = $StateRec[0]->competitor_brand_id;


                    } else {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " , Competitor Brand does not exists in the system. \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                    if (!is_numeric(trim($arrFile[3])) || trim($arrFile[3]) == '') {

                         $strErr .= " Error in Row" . $row . " ," . $arrFile[0] . " ," . $arrFile[1] . "," . $arrFile[2] . " ," . $arrFile[3] . " ,Invalid Item Price\n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }




                if ($flag) {

                    $data = array();

                    $data['account_id'] = $this->clean($_SESSION['accountId']);

                    $data['competitor_item_code'] = mysql_escape_string($this->clean(trim($arrFile[0])));

                    $data['competitor_item_name'] = mysql_escape_string($this->clean(trim($arrFile[1])));
                    
                    $data['competitor_brand_id'] =  $competitor_brand_id;

                    $data['item_price'] = mysql_escape_string($this->clean(trim($arrFile[3])));

                    $data['created_date'] = date('Y-m-d');

                    $data['last_update_date'] = date('Y-m-d');

                    $data['status'] = 'A';


            
                    $id = $this->_dbInsert($data, 'table_competitor_item');


                  
                    if(empty($arrFile[0])){
                        $where_cond='competitor_item_id='. $id;

                        $update_data['competitor_item_code']=$id;
                        $this->_dbUpdate($update_data, 'table_competitor_item',$where_cond);
            
                    }
                }

            }

            $row++;

        }

        //print_r($str_err_array);

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')
    
            return $fErr;
    
        else
            return $str_err_array;

}


    // Import for Secondary Target : Domar : 13-mar-2025 : Number Of Order 

   function uploadTargetNumberOfOrderFile()
   {

       $fields = array('Target Description*','Start Date(dd-mm-yyyy)','End Date(dd-mm-yyyy)','Target Value*');

       $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

       $strErr = "";

       $row = 0;
       $fErr = "no";
       $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

       $remove = array("\n", "\r\n", "\r", '"', ',');

       while (!feof($file)) {

           $arrFile = fgetcsv($file);

           // print_r($arrFile);
           // echo '<pre>';
           // print_r($fields);die;

           $flag = true;

           if ($row == 0) {
               if (count($arrFile) == 4 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target Value*") {
                   $flag2 = true;

               } else {
           
                   $flag2 = false;
                   $fErr = "fnot";
               }
           }




           if ($flag2 && $row > 0 && is_array($arrFile)) {

            if (count($arrFile) == 4 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target Value*") {

                   if (empty($arrFile[0])) {

                       $strErr .= "Error in Row - " . $row;

                       for ($i = 0; $i < count($fields); $i++) {

                           $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                       }

                       $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";

                   } elseif (empty($arrFile[1])) {

                       $strErr .= "Error in Row - " . $row;

                       for ($i = 0; $i < count($fields); $i++) {

                           $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                       }

                       $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";

                   } elseif (empty($arrFile[2])) {

                       $strErr .= "Error in Row - " . $row;

                       for ($i = 0; $i < count($fields); $i++) {

                           $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                       }

                       $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";

                   } elseif (empty($arrFile[3])) {

                    $strErr .= "Error in Row - " . $row;

                    for ($i = 0; $i < count($fields); $i++) {

                        $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                    }

                    $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";

                    } 
               
                   $str_err_array = array($strErr);

                   $flag = false;

               }

           


                $target_name = mysql_escape_string(trim($arrFile[0]));

                // $start_date = mysql_escape_string(trim($arrFile[1]));

                // $end_date = mysql_escape_string(trim($arrFile[2]));

                $target_value = mysql_escape_string($arrFile[3]);



               

                if ($flag) {

                    if (!empty(trim($arrFile[1])) && trim($arrFile[1]) != '') {

                        $startDate = trim($arrFile[1]);

                        if (strtotime($startDate) !== false) {

                            $start_date = date('Y-m-d', strtotime($startDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Start date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                

                }

                if ($flag) {

                    if (!empty(trim($arrFile[2])) && trim($arrFile[2]) != '') {

                        $endDate = trim($arrFile[2]);

                        // echo $endDatel;die;

                        if (strtotime($endDate) !== false) {

                            $end_date = date('Y-m-d', strtotime($endDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , End date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                   

                }



               if ($flag) {

                $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                $data['description'] = mysql_escape_string($target_name);

                $data['target_incentive_type'] = mysql_escape_string('1');

                $data['target_for'] = mysql_escape_string('secondary');

                $data['type_id'] = mysql_escape_string('4');

                // $data['dur_id'] = mysql_escape_string('4');

                $data['primary_values'] = mysql_escape_string($target_value);

                $data['start_date'] = mysql_escape_string($start_date);

                $data['end_date'] = mysql_escape_string($end_date);

                // $data['qualifiers_type'] = mysql_escape_string('1');

                $data['last_update_date'] = date('Y-m-d H:i:s');

                $data['last_update_status'] = "New";

                $data['status'] = mysql_escape_string('A');

                $id = $this->_dbInsert($data, 'table_target_incentive');

               }

           }

           $row++;

       }

       fclose($file);

       if ($row <= 2 || $fErr == 'fnot')

           return $fErr;

       else
           return $str_err_array;

   }


    // Import for Secondary Target : Domar : 13-mar-2025 : Total Calls

    function uploadTargetTotalCallsFile()
    {

        $fields = array('Target Description*','Start Date(dd-mm-yyyy)','End Date(dd-mm-yyyy)','Target Value*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

        $strErr = "";

        $row = 0;
        $fErr = "no";
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

        $remove = array("\n", "\r\n", "\r", '"', ',');

        while (!feof($file)) {

            $arrFile = fgetcsv($file);

            // print_r($arrFile);
            // echo '<pre>';
            // print_r($fields);die;

            $flag = true;

            if ($row == 0) {
                if (count($arrFile) == 4 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target Value*") {
                    $flag2 = true;

                } else {
            
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }




            if ($flag2 && $row > 0 && is_array($arrFile)) {

            if (count($arrFile) == 4 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target Value*") {

                    if (empty($arrFile[0])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[1])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[2])) {

                        $strErr .= "Error in Row - " . $row;

                        for ($i = 0; $i < count($fields); $i++) {

                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                        }

                        $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";

                    } elseif (empty($arrFile[3])) {

                    $strErr .= "Error in Row - " . $row;

                    for ($i = 0; $i < count($fields); $i++) {

                        $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                    }

                    $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";

                    } 
                
                    $str_err_array = array($strErr);

                    $flag = false;

                }

            


                $target_name = mysql_escape_string(trim($arrFile[0]));

                // $start_date = mysql_escape_string(trim($arrFile[1]));

                // $end_date = mysql_escape_string(trim($arrFile[2]));

                $target_value = mysql_escape_string($arrFile[3]);


                
                if ($flag) {

                    if (!empty(trim($arrFile[1])) && trim($arrFile[1]) != '') {

                        $startDate = trim($arrFile[1]);

                        if (strtotime($startDate) !== false) {

                            $start_date = date('Y-m-d', strtotime($startDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Start date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                

                }

                if ($flag) {

                    if (!empty(trim($arrFile[2])) && trim($arrFile[2]) != '') {

                        $endDate = trim($arrFile[2]);

                        // echo $endDatel;die;

                        if (strtotime($endDate) !== false) {

                            $end_date = date('Y-m-d', strtotime($endDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , End date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                   

                }



                if ($flag) {

                $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                $data['description'] = mysql_escape_string($target_name);

                $data['target_incentive_type'] = mysql_escape_string('1');

                // $data['target_for'] = mysql_escape_string('secondary');

                $data['type_id'] = mysql_escape_string('11');

                // $data['dur_id'] = mysql_escape_string('4');

                $data['primary_values'] = mysql_escape_string($target_value);

                $data['start_date'] = mysql_escape_string($start_date);

                $data['end_date'] = mysql_escape_string($end_date);

                // $data['qualifiers_type'] = mysql_escape_string('1');

                $data['last_update_date'] = date('Y-m-d H:i:s');

                $data['last_update_status'] = "New";

                $data['status'] = mysql_escape_string('A');

                $id = $this->_dbInsert($data, 'table_target_incentive');

                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else
            return $str_err_array;

    }



    // Import for Secondary Target : Domar : 17-mar-2025 : Category 

    function uploadTargetCategoryFile()

    {

        $fields = array('Target Description*','Start Date(dd-mm-yyyy)','End Date(dd-mm-yyyy)','Target For*','Target Criteria*', $this->AliaseUsers['salesman'] . ' Code*','Category Name*','Target Value*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

       $strErr = "";

       $row = 0;
       $fErr = "no";
       $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

       $remove = array("\n", "\r\n", "\r", '"', ',');

       while (!feof($file)) {

           $arrFile = fgetcsv($file);

           // print_r($arrFile);
           // echo '<pre>';
           // print_r($fields);die;

           $flag = true;


           if ($row == 0) {
                if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "Category Name*" && trim($arrFile[7]) == "Target Value*") {
                    $flag2 = true;

                } else {
            
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }


            if (  $flag2 && $row > 0 && is_array($arrFile)) {

                if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "Category Name*" && trim($arrFile[7]) == "Target Value*"){

                        if (empty($arrFile[0])) {

                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[1])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[2])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[3])) {
    
                        $strErr .= "Error in Row - " . $row;
    
                        for ($i = 0; $i < count($fields); $i++) {
    
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                        }
    
                        $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";
    
                        } 

                        elseif (empty($arrFile[4])) {

                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[4] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[5])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[5] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[6])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[6] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[7])) {
    
                        $strErr .= "Error in Row - " . $row;
    
                        for ($i = 0; $i < count($fields); $i++) {
    
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                        }
    
                        $strErr .= " ," . $fields[7] . " shouldn't be empty. \n";
    
                        } 
                    
                        $str_err_array = array($strErr);
    
                        $flag = false;
                }


                $target_name = mysql_escape_string(trim($arrFile[0]));

                // $start_date = mysql_escape_string(trim($arrFile[1]));

                // $end_date = mysql_escape_string(trim($arrFile[2]));

                // $month = mysql_escape_string(trim($arrFile[1]));

                // $year = mysql_escape_string(trim($arrFile[2]));


                $target_value = mysql_escape_string($arrFile[7]);


                if(ucwords(strtolower(($arrFile[3]))) == 'Order'){
                    $targetFor = '1';
                }elseif(ucwords(strtolower(($arrFile[3]))) == 'Delivery'){
                    $targetFor = '2';
                }

                if(ucwords(strtolower(($arrFile[4]))) == 'Quantity'){
                    $targetCritiria = '1';
                }elseif(ucwords(strtolower(($arrFile[4]))) == 'Amount'){
                    $targetCritiria = '2';
                }



                
                if ($flag) {

                    if (!empty(trim($arrFile[1])) && trim($arrFile[1]) != '') {

                        $startDate = trim($arrFile[1]);

                        if (strtotime($startDate) !== false) {

                            $start_date = date('Y-m-d', strtotime($startDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Start date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                

                }

                if ($flag) {

                    if (!empty(trim($arrFile[2])) && trim($arrFile[2]) != '') {

                        $endDate = trim($arrFile[2]);

                        // echo $endDatel;die;

                        if (strtotime($endDate) !== false) {

                            $end_date = date('Y-m-d', strtotime($endDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , End date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                   

                }


                

                


                if ($flag) {

                    $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($arrFile[5]))) . "'  AND  status = 'A' ";

                    $retTypeRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);
                    $salesman_id = $retTypeRec[0]->salesman_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                            $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . "," . $this->AliaseUsers['salesman'] . " Does not exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $condi = " LOWER(category_name)='" . mysql_escape_string(strtolower(trim($arrFile[6]))) . "'  AND  status = 'A' ";

                    $retTypeRec = $this->_getSelectList('table_category', "category_id", '', $condi);
                    $category_id = $retTypeRec[0]->category_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                            $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . ", Category Name Does not exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }



                if ($flag) {

                    $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND primary_values!='" . mysql_escape_string(trim($target_value)) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";

                    $retTypeRec = $this->_getSelectList('table_target_incentive', "target_incentive_id", '', $condi);

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] .  ",Target name is already exitss \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                if ($flag) {

                     $condi = " d.description='" . mysql_escape_string(trim($arrFile[0])) . "' AND i.salesman_id='" . mysql_escape_string(trim($salesman_id)) . "' AND d.primary_values='" . mysql_escape_string(trim($target_value)) . "' AND d.start_date = '" . $start_date . "' and d.end_date = '" . $end_date . "' ";


  $retTypeRec = $this->_getSelectList('table_target_incentive as d 
				left join table_target_incentive_duration as r on r.target_incentive_id=d.target_incentive_id 
                left join table_target_incentive_salesman as i on i.duration_id=r.duration_id ',
                " d.target_incentive_id", '', $condi, '');

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] .  ",Target name is already exitst \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {


                    $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                    $data['description'] = mysql_escape_string($target_name);

                    $data['target_incentive_type'] = mysql_escape_string('1');

                    $data['target_for'] = mysql_escape_string('secondary'); 

        
                    $data['type_id'] = mysql_escape_string('1');    

                    // $data['dur_id'] = mysql_escape_string('4');

                    $data['primary_values'] = mysql_escape_string($target_value);

                    $data['start_date'] = mysql_escape_string($start_date);

                    $data['end_date'] = mysql_escape_string($end_date);

                    $data['qualifiers_type'] = mysql_escape_string('1');

                    $data['last_update_date'] = date('Y-m-d H:i:s');

                    $data['last_update_status'] = "New";

                    $data['status'] = mysql_escape_string('A');

                    $data['target_for_qty_amt'] = $targetFor;

                    $data['target_critiria'] = $targetCritiria;

                    // print_r($data);die;

                    $id = $this->_dbInsert($data, 'table_target_incentive');

                    // echo $id;die;
                    if($id != ''){
                        $data3['target_incentive_id'] = $id;
                        $data3['ref_id'] = $category_id;
                        $this->_dbInsert($data3, 'table_target_incentive_type');
                    }


                    if ($id != '') {
                            $duration = mysql_escape_string('1');
        //                        $start_date = date('Y-m-d', strtotime($_POST['from']));
        //                        $end_date = date('Y-m-d', strtotime($_POST['end_date']));
        //        $durationNumber = 0;
                            $durationNumber = 1;
                            $duration_dates = $this->_getDuration($duration, $start_date, $end_date);
        //                        foreach ($duration_dates as $value) {
        //                            //$duration_start_date = $value[0];
        //                            //$duration_end_date = $value[1];
        //                            $enddate = strtotime('-1 days', strtotime($duration_end_date));
        //                            $enddate = date('Y-m-d', $enddate);
                            $data1['target_incentive_id'] = mysql_escape_string($id);
        //            $durationNumber = ++$durationNumber;
                        $data1['duration_number'] = mysql_escape_string($durationNumber);
                        $durationNumber++;
                        $data1['primary_values'] = mysql_escape_string($target_value);
                        $data['secondary_values'] = mysql_escape_string("");
                        //$data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
                        $data1['from_date'] = mysql_escape_string($start_date);

                        $data1['to_date'] = mysql_escape_string($end_date);

                        $data1['status'] = 'A';

                        $duration_id = $this->_dbInsert($data1, 'table_target_incentive_duration');

                        if ($duration != '') {

                            if ((count($arrFile[1]) > 0)) {
                                for ($i = 0; $i < count($arrFile[1]); $i++) {
                                    $data2 = [];
                                    //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                    $data2['salesman_id'] = $salesman_id;
                                    //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                    $data2['added_date'] = date('Y-m-d');
                                    $data2['duration_id'] = mysql_escape_string($duration_id);
                                    $data2['status'] = 'A';
                                    $this->_dbInsert($data2, 'table_target_incentive_salesman');

                                }
                            }

                        }
                        }


                    }

                }

                $row++;

            }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else
            return $str_err_array;


    }


    // Import for Secondary Target : Domar : 17-mar-2025 : Item 

    function uploadTargetItemFile()
    {

        $fields = array('Target Description*','Start Date(dd-mm-yyyy)','End Date(dd-mm-yyyy)','Target For*','Target Criteria*', $this->AliaseUsers['salesman'] . ' Code*','Item Code*','Target Value*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

       $strErr = "";

       $row = 0;
       $fErr = "no";
       $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

       $remove = array("\n", "\r\n", "\r", '"', ',');

       while (!feof($file)) {

           $arrFile = fgetcsv($file);

           // print_r($arrFile);
           // echo '<pre>';
           // print_r($fields);die;

           $flag = true;


           if ($row == 0) {
                if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "Item Code*" && trim($arrFile[7]) == "Target Value*") {
                    $flag2 = true;

                } else {
            
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }


            if (  $flag2 && $row > 0 && is_array($arrFile)) {

                if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "Item Code*" && trim($arrFile[7]) == "Target Value*"){

                        if (empty($arrFile[0])) {

                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[1])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[2])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[3])) {
    
                        $strErr .= "Error in Row - " . $row;
    
                        for ($i = 0; $i < count($fields); $i++) {
    
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                        }
    
                        $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";
    
                        } 

                        elseif (empty($arrFile[4])) {

                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[4] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[5])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[5] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[6])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[6] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[7])) {
    
                        $strErr .= "Error in Row - " . $row;
    
                        for ($i = 0; $i < count($fields); $i++) {
    
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                        }
    
                        $strErr .= " ," . $fields[7] . " shouldn't be empty. \n";
    
                        } 
                    
                        $str_err_array = array($strErr);
    
                        $flag = false;
                }


                $target_name = mysql_escape_string(trim($arrFile[0]));

                


                $target_value = mysql_escape_string($arrFile[7]);


                if(ucwords(strtolower(($arrFile[3]))) == 'Order'){
                    $targetFor = '1';
                }elseif(ucwords(strtolower(($arrFile[3]))) == 'Delivery'){
                    $targetFor = '2';
                }

                if(ucwords(strtolower(($arrFile[4]))) == 'Quantity'){
                    $targetCritiria = '1';
                }elseif(ucwords(strtolower(($arrFile[4]))) == 'Amount'){
                    $targetCritiria = '2';
                }



                

                
                if ($flag) {

                    if (!empty(trim($arrFile[1])) && trim($arrFile[1]) != '') {

                        $startDate = trim($arrFile[1]);

                        if (strtotime($startDate) !== false) {

                            $start_date = date('Y-m-d', strtotime($startDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Start date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                

                }

                if ($flag) {

                    if (!empty(trim($arrFile[2])) && trim($arrFile[2]) != '') {

                        $endDate = trim($arrFile[2]);

                        // echo $endDatel;die;

                        if (strtotime($endDate) !== false) {

                            $end_date = date('Y-m-d', strtotime($endDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , End date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                   

                }


                if ($flag) {

                    $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($arrFile[5]))) . "'  AND  status = 'A' ";

                    $retTypeRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);
                    $salesman_id = $retTypeRec[0]->salesman_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                            $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . "," . $this->AliaseUsers['salesman'] . " Does not exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $condi = " LOWER(item_code)='" . mysql_escape_string(strtolower(trim($arrFile[6]))) . "'  AND  status = 'A' ";

                    $retTypeRec = $this->_getSelectList('table_item', "item_id", '', $condi);
                    $item_id = $retTypeRec[0]->item_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                            $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . ", Item Code Does not exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }



                if ($flag) {

                 //   $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";
 $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND primary_values!='" . mysql_escape_string(trim($target_value)) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";
                    $retTypeRec = $this->_getSelectList('table_target_incentive', "target_incentive_id", '', $condi);

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] .  ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                 if ($flag) {

                     $condi = " d.description='" . mysql_escape_string(trim($arrFile[0])) . "' AND i.salesman_id='" . mysql_escape_string(trim($salesman_id)) . "' AND d.primary_values='" . mysql_escape_string(trim($target_value)) . "' AND d.start_date = '" . $start_date . "' and d.end_date = '" . $end_date . "' ";


  $retTypeRec = $this->_getSelectList('table_target_incentive as d 
				left join table_target_incentive_duration as r on r.target_incentive_id=d.target_incentive_id 
                left join table_target_incentive_salesman as i on i.duration_id=r.duration_id ',
                " d.target_incentive_id", '', $condi, '');

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] .  ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {


                    $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                    $data['description'] = mysql_escape_string($target_name);

                    $data['target_incentive_type'] = mysql_escape_string('1');

                    $data['target_for'] = mysql_escape_string('secondary'); 

        
                    $data['type_id'] = mysql_escape_string('2');    

                    // $data['dur_id'] = mysql_escape_string('4');

                    $data['primary_values'] = mysql_escape_string($target_value);

                    $data['start_date'] = mysql_escape_string($start_date);

                    $data['end_date'] = mysql_escape_string($end_date);

                    $data['qualifiers_type'] = mysql_escape_string('1');

                    $data['last_update_date'] = date('Y-m-d H:i:s');

                    $data['last_update_status'] = "New";

                    $data['status'] = mysql_escape_string('A');

                    $data['target_for_qty_amt'] = $targetFor;

                    $data['target_critiria'] = $targetCritiria;

                    // print_r($data);die;

                    $id = $this->_dbInsert($data, 'table_target_incentive');

                    // echo $id;die;
                    if($id != ''){
                        $data3['target_incentive_id'] = $id;
                        $data3['ref_id'] = $item_id;
                        $this->_dbInsert($data3, 'table_target_incentive_type');
                    }


                    if ($id != '') {
                        $duration = mysql_escape_string('1');
        //                        $start_date = date('Y-m-d', strtotime($_POST['from']));
        //                        $end_date = date('Y-m-d', strtotime($_POST['end_date']));
        //        $durationNumber = 0;
                            $durationNumber = 1;
                            $duration_dates = $this->_getDuration($duration, $start_date, $end_date);
        //                        foreach ($duration_dates as $value) {
        //                            //$duration_start_date = $value[0];
        //                            //$duration_end_date = $value[1];
        //                            $enddate = strtotime('-1 days', strtotime($duration_end_date));
        //                            $enddate = date('Y-m-d', $enddate);
                            $data1['target_incentive_id'] = mysql_escape_string($id);
        //            $durationNumber = ++$durationNumber;
                        $data1['duration_number'] = mysql_escape_string($durationNumber);
                        $durationNumber++;
                        $data1['primary_values'] = mysql_escape_string($target_value);
                        $data['secondary_values'] = mysql_escape_string("");
                        //$data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
                        $data1['from_date'] = mysql_escape_string($start_date);

                        $data1['to_date'] = mysql_escape_string($end_date);

                        $data1['status'] = 'A';

                        $duration_id = $this->_dbInsert($data1, 'table_target_incentive_duration');

                        if ($duration != '') {

                            if ((count($arrFile[1]) > 0)) {
                                for ($i = 0; $i < count($arrFile[1]); $i++) {
                                    $data2 = [];
                                    //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                    $data2['salesman_id'] = $salesman_id;
                                    //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                    $data2['added_date'] = date('Y-m-d');
                                    $data2['duration_id'] = mysql_escape_string($duration_id);
                                    $data2['status'] = 'A';
                                    $this->_dbInsert($data2, 'table_target_incentive_salesman');

                                }
                            }

                        }
                    }


                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else
            return $str_err_array;


    }


    // Import for Secondary Target : Domar : 17-mar-2025 : Brand

    function uploadTargetBrandFile()
    {

        $fields = array('Target Description*','Start Date(dd-mm-yyyy)','End Date(dd-mm-yyyy)','Target For*','Target Criteria*', $this->AliaseUsers['salesman'] . ' Code*','Brand Name*','Target Value*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

       $strErr = "";

       $row = 0;
       $fErr = "no";
       $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

       $remove = array("\n", "\r\n", "\r", '"', ',');

       while (!feof($file)) {

           $arrFile = fgetcsv($file);

           // print_r($arrFile);
           // echo '<pre>';
           // print_r($fields);die;

           $flag = true;


           if ($row == 0) {
                if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "Brand Name*" && trim($arrFile[7]) == "Target Value*") {
                    $flag2 = true;

                } else {
            
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }


            if (  $flag2 && $row > 0 && is_array($arrFile)) {

                if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "Brand Name*" && trim($arrFile[7]) == "Target Value*"){

                        if (empty($arrFile[0])) {

                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[1])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[2])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[3])) {
    
                        $strErr .= "Error in Row - " . $row;
    
                        for ($i = 0; $i < count($fields); $i++) {
    
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                        }
    
                        $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";
    
                        } 

                        elseif (empty($arrFile[4])) {

                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[4] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[5])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[5] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[6])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[6] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[7])) {
    
                        $strErr .= "Error in Row - " . $row;
    
                        for ($i = 0; $i < count($fields); $i++) {
    
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                        }
    
                        $strErr .= " ," . $fields[7] . " shouldn't be empty. \n";
    
                        } 
                    
                        $str_err_array = array($strErr);
    
                        $flag = false;
                }


                $target_name = mysql_escape_string(trim($arrFile[0]));

                // $start_date = mysql_escape_string(trim($arrFile[1]));

                // $end_date = mysql_escape_string(trim($arrFile[2]));

                // $month = mysql_escape_string(trim($arrFile[1]));

                // $year = mysql_escape_string(trim($arrFile[2]));


                $target_value = mysql_escape_string($arrFile[7]);


                if(ucwords(strtolower(($arrFile[3]))) == 'Order'){
                    $targetFor = '1';
                }elseif(ucwords(strtolower(($arrFile[3]))) == 'Delivery'){
                    $targetFor = '2';
                }

                if(ucwords(strtolower(($arrFile[4]))) == 'Quantity'){
                    $targetCritiria = '1';
                }elseif(ucwords(strtolower(($arrFile[4]))) == 'Amount'){
                    $targetCritiria = '2';
                }



                if ($flag) {

                    if (!empty(trim($arrFile[1])) && trim($arrFile[1]) != '') {

                        $startDate = trim($arrFile[1]);

                        if (strtotime($startDate) !== false) {

                            $start_date = date('Y-m-d', strtotime($startDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Start date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                

                }

                if ($flag) {

                    if (!empty(trim($arrFile[2])) && trim($arrFile[2]) != '') {

                        $endDate = trim($arrFile[2]);

                        // echo $endDatel;die;

                        if (strtotime($endDate) !== false) {

                            $end_date = date('Y-m-d', strtotime($endDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , End date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                   

                }



                if ($flag) {

                    $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($arrFile[5]))) . "'  AND  status = 'A' ";

                    $retTypeRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);
                    $salesman_id = $retTypeRec[0]->salesman_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                            $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . "," . $this->AliaseUsers['salesman'] . " Does not exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $condi = " LOWER(brand_name)='" . mysql_escape_string(strtolower(trim($arrFile[6]))) . "'  AND  status = 'A' ";

                    $retTypeRec = $this->_getSelectList('table_brands', "brand_id", '', $condi);
                    $brand_id = $retTypeRec[0]->brand_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                            $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . ", Brand Name Does not exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }



                if ($flag) {

                   // $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";
 $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND primary_values!='" . mysql_escape_string(trim($target_value)) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";
                    $retTypeRec = $this->_getSelectList('table_target_incentive', "target_incentive_id", '', $condi);

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] .  ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                 if ($flag) {

                     $condi = " d.description='" . mysql_escape_string(trim($arrFile[0])) . "' AND i.salesman_id='" . mysql_escape_string(trim($salesman_id)) . "' AND d.primary_values='" . mysql_escape_string(trim($target_value)) . "' AND d.start_date = '" . $start_date . "' and d.end_date = '" . $end_date . "' ";


  $retTypeRec = $this->_getSelectList('table_target_incentive as d 
				left join table_target_incentive_duration as r on r.target_incentive_id=d.target_incentive_id 
                left join table_target_incentive_salesman as i on i.duration_id=r.duration_id ',
                " d.target_incentive_id", '', $condi, '');

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] .  ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {


                    $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                    $data['description'] = mysql_escape_string($target_name);

                    $data['target_incentive_type'] = mysql_escape_string('1');

                    $data['target_for'] = mysql_escape_string('secondary'); 

        
                    $data['type_id'] = mysql_escape_string('14');    

                    // $data['dur_id'] = mysql_escape_string('4');

                    $data['primary_values'] = mysql_escape_string($target_value);

                    $data['start_date'] = mysql_escape_string($start_date);

                    $data['end_date'] = mysql_escape_string($end_date);

                    $data['qualifiers_type'] = mysql_escape_string('1');

                    $data['last_update_date'] = date('Y-m-d H:i:s');

                    $data['last_update_status'] = "New";

                    $data['status'] = mysql_escape_string('A');

                    $data['target_for_qty_amt'] = $targetFor;

                    $data['target_critiria'] = $targetCritiria;

                    // print_r($data);die;

                    $id = $this->_dbInsert($data, 'table_target_incentive');

                    // echo $id;die;
                    if($id != ''){
                        $data3['target_incentive_id'] = $id;
                        $data3['ref_id'] = $brand_id;
                        $this->_dbInsert($data3, 'table_target_incentive_type');
                    }


                    if ($id != '') {
                        $duration = mysql_escape_string('1');
        //                        $start_date = date('Y-m-d', strtotime($_POST['from']));
        //                        $end_date = date('Y-m-d', strtotime($_POST['end_date']));
        //        $durationNumber = 0;
                            $durationNumber = 1;
                            $duration_dates = $this->_getDuration($duration, $start_date, $end_date);
        //                        foreach ($duration_dates as $value) {
        //                            //$duration_start_date = $value[0];
        //                            //$duration_end_date = $value[1];
        //                            $enddate = strtotime('-1 days', strtotime($duration_end_date));
        //                            $enddate = date('Y-m-d', $enddate);
                            $data1['target_incentive_id'] = mysql_escape_string($id);
        //            $durationNumber = ++$durationNumber;
                        $data1['duration_number'] = mysql_escape_string($durationNumber);
                        $durationNumber++;
                        $data1['primary_values'] = mysql_escape_string($target_value);
                        $data['secondary_values'] = mysql_escape_string("");
                        //$data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
                        $data1['from_date'] = mysql_escape_string($start_date);

                        $data1['to_date'] = mysql_escape_string($end_date);

                        $data1['status'] = 'A';

                        $duration_id = $this->_dbInsert($data1, 'table_target_incentive_duration');

                        if ($duration != '') {

                            if ((count($arrFile[1]) > 0)) {
                                for ($i = 0; $i < count($arrFile[1]); $i++) {
                                    $data2 = [];
                                    //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                    $data2['salesman_id'] = $salesman_id;
                                    //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                    $data2['added_date'] = date('Y-m-d');
                                    $data2['duration_id'] = mysql_escape_string($duration_id);
                                    $data2['status'] = 'A';
                                    $this->_dbInsert($data2, 'table_target_incentive_salesman');

                                }
                            }

                        }
                    }


                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else
            return $str_err_array;


    }



     // Import for Secondary Target : Domar : 17-mar-2025 : No. of Retailer to visit

     function uploadTargetNoRetaileToVisistFile()
     {
 
         $fields = array('Target Description*','Start Date(dd-mm-yyyy)','End Date(dd-mm-yyyy)','Target For*','Target Criteria*', $this->AliaseUsers['salesman'] . ' Code*','No. of Retailer to Visit*');
 
         $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
 
        $strErr = "";
 
        $row = 0;
        $fErr = "no";
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";
 
        $remove = array("\n", "\r\n", "\r", '"', ',');
 
        while (!feof($file)) {
 
            $arrFile = fgetcsv($file);
 
            // print_r($arrFile);
            // echo '<pre>';
            // print_r($fields);die;
 
            $flag = true;
 
 
            if ($row == 0) {
                 if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "No. of Retailer to Visit*") {
                     $flag2 = true;
 
                 } else {
             
                     $flag2 = false;
                     $fErr = "fnot";
                 }
             }
 
 
             if (  $flag2 && $row > 0 && is_array($arrFile)) {
 
                 if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "No. of Retailer to Visit*"){
 
                         if (empty($arrFile[0])) {
 
                             $strErr .= "Error in Row - " . $row;
     
                             for ($i = 0; $i < count($fields); $i++) {
     
                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                             }
     
                             $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";
     
                         } elseif (empty($arrFile[1])) {
     
                             $strErr .= "Error in Row - " . $row;
     
                             for ($i = 0; $i < count($fields); $i++) {
     
                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                             }
     
                             $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";
     
                         } elseif (empty($arrFile[2])) {
     
                             $strErr .= "Error in Row - " . $row;
     
                             for ($i = 0; $i < count($fields); $i++) {
     
                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                             }
     
                             $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";
     
                         } elseif (empty($arrFile[3])) {
     
                         $strErr .= "Error in Row - " . $row;
     
                         for ($i = 0; $i < count($fields); $i++) {
     
                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                         }
     
                         $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";
     
                         } 
 
                         elseif (empty($arrFile[4])) {
 
                             $strErr .= "Error in Row - " . $row;
     
                             for ($i = 0; $i < count($fields); $i++) {
     
                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                             }
     
                             $strErr .= " ," . $fields[4] . " shouldn't be empty. \n";
     
                         } elseif (empty($arrFile[5])) {
     
                             $strErr .= "Error in Row - " . $row;
     
                             for ($i = 0; $i < count($fields); $i++) {
     
                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                             }
     
                             $strErr .= " ," . $fields[5] . " shouldn't be empty. \n";
     
                         } elseif (empty($arrFile[6])) {
     
                             $strErr .= "Error in Row - " . $row;
     
                             for ($i = 0; $i < count($fields); $i++) {
     
                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                             }
     
                             $strErr .= " ," . $fields[6] . " shouldn't be empty. \n";
     
                         } 
                     
                         $str_err_array = array($strErr);
     
                         $flag = false;
                 }
 
 
                 $target_name = mysql_escape_string(trim($arrFile[0]));
 
                 $start_date = mysql_escape_string(trim($arrFile[1]));
 
                 $end_date = mysql_escape_string(trim($arrFile[2]));
 
                 // $month = mysql_escape_string(trim($arrFile[1]));
 
                 // $year = mysql_escape_string(trim($arrFile[2]));
 
 
                 $target_value = mysql_escape_string($arrFile[7]);
 
 
                 if(ucwords(strtolower(($arrFile[3]))) == 'Order'){
                     $targetFor = '1';
                 }elseif(ucwords(strtolower(($arrFile[3]))) == 'Delivery'){
                     $targetFor = '2';
                 }
 
                 if(ucwords(strtolower(($arrFile[4]))) == 'Quantity'){
                     $targetCritiria = '1';
                 }elseif(ucwords(strtolower(($arrFile[4]))) == 'Amount'){
                     $targetCritiria = '2';
                 }
 
 
 
                 if ($flag) {

                    if (!empty(trim($arrFile[1])) && trim($arrFile[1]) != '') {

                        $startDate = trim($arrFile[1]);

                        if (strtotime($startDate) !== false) {

                            $start_date = date('Y-m-d', strtotime($startDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Start date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                

                }

                if ($flag) {

                    if (!empty(trim($arrFile[2])) && trim($arrFile[2]) != '') {

                        $endDate = trim($arrFile[2]);

                        // echo $endDatel;die;

                        if (strtotime($endDate) !== false) {

                            $end_date = date('Y-m-d', strtotime($endDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , End date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                   

                }

 
                 if ($flag) {
 
                     $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($arrFile[5]))) . "'  AND  status = 'A' ";
 
                     $retTypeRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);
                     $salesman_id = $retTypeRec[0]->salesman_id;
 
                     if (!is_array($retTypeRec)) {
 
                         $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                             $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                             $arrFile[5] . "," . $arrFile[6] . "," . $this->AliaseUsers['salesman'] . " Does not exits \n";
 
                         $str_err_array = array($strErr);
 
                         $flag = false;
 
                     }
 
                 }
 
 
               
 
 
                 if ($flag) {
 
                   //  $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";
  $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND primary_values!='" . mysql_escape_string(trim($target_value)) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";
                     $retTypeRec = $this->_getSelectList('table_target_incentive', "target_incentive_id", '', $condi);
 
                     if (is_array($retTypeRec) && count($retTypeRec) > 0) {
 
                         $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                         $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                         $arrFile[5] . "," . $arrFile[6] . ",Target name is already exits \n";
 
                         $str_err_array = array($strErr);
 
                         $flag = false;
 
                     }
 
                 }

                  if ($flag) {

                     $condi = " d.description='" . mysql_escape_string(trim($arrFile[0])) . "' AND i.salesman_id='" . mysql_escape_string(trim($salesman_id)) . "' AND d.primary_values='" . mysql_escape_string(trim($target_value)) . "' AND d.start_date = '" . $start_date . "' and d.end_date = '" . $end_date . "' ";


  $retTypeRec = $this->_getSelectList('table_target_incentive as d 
				left join table_target_incentive_duration as r on r.target_incentive_id=d.target_incentive_id 
                left join table_target_incentive_salesman as i on i.duration_id=r.duration_id ',
                " d.target_incentive_id", '', $condi, '');

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] .  ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }
 
 
                 if ($flag) {
 
 
                     $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
 
                     $data['description'] = mysql_escape_string($target_name);
 
                     $data['target_incentive_type'] = mysql_escape_string('1');
 
                     $data['target_for'] = mysql_escape_string('secondary'); 
 
         
                     $data['type_id'] = mysql_escape_string('7');    
 
                     // $data['dur_id'] = mysql_escape_string('4');
 
                     $data['primary_values'] = mysql_escape_string($target_value);
 
                     $data['start_date'] = mysql_escape_string($start_date);
 
                     $data['end_date'] = mysql_escape_string($end_date);
 
                     $data['qualifiers_type'] = mysql_escape_string('1');
 
                     $data['last_update_date'] = date('Y-m-d H:i:s');
 
                     $data['last_update_status'] = "New";
 
                     $data['status'] = mysql_escape_string('A');
 
                     $data['target_for_qty_amt'] = $targetFor;
 
                     $data['target_critiria'] = $targetCritiria;
 
                     // print_r($data);die;
 
                     $id = $this->_dbInsert($data, 'table_target_incentive');
 
                     // echo $id;die;
                    //  if($id != ''){
                    //      $data3['target_incentive_id'] = $id;
                    //      $data3['ref_id'] = $brand_id;
                    //      $this->_dbInsert($data3, 'table_target_incentive_type');
                    //  }
 
 
                     if ($id != '') {
                         $duration = mysql_escape_string('1');
         //                        $start_date = date('Y-m-d', strtotime($_POST['from']));
         //                        $end_date = date('Y-m-d', strtotime($_POST['end_date']));
         //        $durationNumber = 0;
                             $durationNumber = 1;
                             $duration_dates = $this->_getDuration($duration, $start_date, $end_date);
         //                        foreach ($duration_dates as $value) {
         //                            //$duration_start_date = $value[0];
         //                            //$duration_end_date = $value[1];
         //                            $enddate = strtotime('-1 days', strtotime($duration_end_date));
         //                            $enddate = date('Y-m-d', $enddate);
                             $data1['target_incentive_id'] = mysql_escape_string($id);
         //            $durationNumber = ++$durationNumber;
                         $data1['duration_number'] = mysql_escape_string($durationNumber);
                         $durationNumber++;
                         $data1['primary_values'] = mysql_escape_string($target_value);
                         $data['secondary_values'] = mysql_escape_string("");
                         //$data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
                         $data1['from_date'] = mysql_escape_string($start_date);
 
                         $data1['to_date'] = mysql_escape_string($end_date);
 
                         $data1['status'] = 'A';
 
                         $duration_id = $this->_dbInsert($data1, 'table_target_incentive_duration');
 
                         if ($duration != '') {
 
                             if ((count($arrFile[1]) > 0)) {
                                 for ($i = 0; $i < count($arrFile[1]); $i++) {
                                     $data2 = [];
                                     //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                     $data2['salesman_id'] = $salesman_id;
                                     //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                     $data2['added_date'] = date('Y-m-d');
                                     $data2['duration_id'] = mysql_escape_string($duration_id);
                                     $data2['status'] = 'A';
                                     $this->_dbInsert($data2, 'table_target_incentive_salesman');
 
                                 }
                             }
 
                         }
                     }
 
 
                 }
 
             }
 
             $row++;
 
         }
 
         fclose($file);
 
         if ($row <= 2 || $fErr == 'fnot')
 
             return $fErr;
 
         else
             return $str_err_array;
 
 
     }


      // Import for Secondary Target : Domar : 17-mar-2025 : No. of Retailer to Add

      function uploadTargetNoRetaileToAddFile()
      {
  
          $fields = array('Target Description*','Start Date(dd-mm-yyyy)','End Date(dd-mm-yyyy)','Target For*','Target Criteria*', $this->AliaseUsers['salesman'] . ' Code*','No. of Retailer to Add*');
  
          $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
  
         $strErr = "";
  
         $row = 0;
         $fErr = "no";
         $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";
  
         $remove = array("\n", "\r\n", "\r", '"', ',');
  
         while (!feof($file)) {
  
             $arrFile = fgetcsv($file);
  
             // print_r($arrFile);
             // echo '<pre>';
             // print_r($fields);die;
  
             $flag = true;
  
  
             if ($row == 0) {
                  if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "No. of Retailer to Add*") {
                      $flag2 = true;
  
                  } else {
              
                      $flag2 = false;
                      $fErr = "fnot";
                  }
              }
  
  
              if (  $flag2 && $row > 0 && is_array($arrFile)) {
  
                  if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "No. of Retailer to Add*"){
  
                          if (empty($arrFile[0])) {
  
                              $strErr .= "Error in Row - " . $row;
      
                              for ($i = 0; $i < count($fields); $i++) {
      
                                  $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
      
                              }
      
                              $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";
      
                          } elseif (empty($arrFile[1])) {
      
                              $strErr .= "Error in Row - " . $row;
      
                              for ($i = 0; $i < count($fields); $i++) {
      
                                  $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
      
                              }
      
                              $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";
      
                          } elseif (empty($arrFile[2])) {
      
                              $strErr .= "Error in Row - " . $row;
      
                              for ($i = 0; $i < count($fields); $i++) {
      
                                  $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
      
                              }
      
                              $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";
      
                          } elseif (empty($arrFile[3])) {
      
                          $strErr .= "Error in Row - " . $row;
      
                          for ($i = 0; $i < count($fields); $i++) {
      
                              $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
      
                          }
      
                          $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";
      
                          } 
  
                          elseif (empty($arrFile[4])) {
  
                              $strErr .= "Error in Row - " . $row;
      
                              for ($i = 0; $i < count($fields); $i++) {
      
                                  $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
      
                              }
      
                              $strErr .= " ," . $fields[4] . " shouldn't be empty. \n";
      
                          } elseif (empty($arrFile[5])) {
      
                              $strErr .= "Error in Row - " . $row;
      
                              for ($i = 0; $i < count($fields); $i++) {
      
                                  $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
      
                              }
      
                              $strErr .= " ," . $fields[5] . " shouldn't be empty. \n";
      
                          } elseif (empty($arrFile[6])) {
      
                              $strErr .= "Error in Row - " . $row;
      
                              for ($i = 0; $i < count($fields); $i++) {
      
                                  $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
      
                              }
      
                              $strErr .= " ," . $fields[6] . " shouldn't be empty. \n";
      
                          } 
                      
                          $str_err_array = array($strErr);
      
                          $flag = false;
                  }
  
  
                  $target_name = mysql_escape_string(trim($arrFile[0]));
  
                  $start_date = mysql_escape_string(trim($arrFile[1]));
  
                  $end_date = mysql_escape_string(trim($arrFile[2]));
  
                  // $month = mysql_escape_string(trim($arrFile[1]));
  
                  // $year = mysql_escape_string(trim($arrFile[2]));
  
  
                  $target_value = mysql_escape_string($arrFile[6]);
  
  
                  if(ucwords(strtolower(($arrFile[3]))) == 'Order'){
                      $targetFor = '1';
                  }elseif(ucwords(strtolower(($arrFile[3]))) == 'Delivery'){
                      $targetFor = '2';
                  }
  
                  if(ucwords(strtolower(($arrFile[4]))) == 'Quantity'){
                      $targetCritiria = '1';
                  }elseif(ucwords(strtolower(($arrFile[4]))) == 'Amount'){
                      $targetCritiria = '2';
                  }
  
  
  
                  
  
                  if ($flag) {

                    if (!empty(trim($arrFile[1])) && trim($arrFile[1]) != '') {

                        $startDate = trim($arrFile[1]);

                        if (strtotime($startDate) !== false) {

                            $start_date = date('Y-m-d', strtotime($startDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Start date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                

                }

                if ($flag) {

                    if (!empty(trim($arrFile[2])) && trim($arrFile[2]) != '') {

                        $endDate = trim($arrFile[2]);

                        // echo $endDatel;die;

                        if (strtotime($endDate) !== false) {

                            $end_date = date('Y-m-d', strtotime($endDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , End date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                   

                }

  
  
                  if ($flag) {
  
                      $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($arrFile[5]))) . "'  AND  status = 'A' ";
  
                      $retTypeRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);
                      $salesman_id = $retTypeRec[0]->salesman_id;
  
                      if (!is_array($retTypeRec)) {
  
                          $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                              $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                              $arrFile[5] . "," . $arrFile[6] . "," . $this->AliaseUsers['salesman'] . " Does not exits \n";
  
                          $str_err_array = array($strErr);
  
                          $flag = false;
  
                      }
  
                  }
  
  
  
  
                  if ($flag) {
  
                    //  $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";
    $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND primary_values!='" . mysql_escape_string(trim($target_value)) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";

                      $retTypeRec = $this->_getSelectList('table_target_incentive', "target_incentive_id", '', $condi);
  
                      if (is_array($retTypeRec) && count($retTypeRec) > 0) {
  
                          $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                          $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                          $arrFile[5] . "," . $arrFile[6] . ",Target name is already exits \n";
  
                          $str_err_array = array($strErr);
  
                          $flag = false;
  
                      }
  
                  }
                   if ($flag) {

                     $condi = " d.description='" . mysql_escape_string(trim($arrFile[0])) . "' AND i.salesman_id='" . mysql_escape_string(trim($salesman_id)) . "' AND d.primary_values='" . mysql_escape_string(trim($target_value)) . "' AND d.start_date = '" . $start_date . "' and d.end_date = '" . $end_date . "' ";


  $retTypeRec = $this->_getSelectList('table_target_incentive as d 
				left join table_target_incentive_duration as r on r.target_incentive_id=d.target_incentive_id 
                left join table_target_incentive_salesman as i on i.duration_id=r.duration_id ',
                " d.target_incentive_id", '', $condi, '');

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] .  ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }
  
  
                  if ($flag) {
  
  
                      $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
  
                      $data['description'] = mysql_escape_string($target_name);
  
                      $data['target_incentive_type'] = mysql_escape_string('1');
  
                      $data['target_for'] = mysql_escape_string('secondary'); 
  
          
                      $data['type_id'] = mysql_escape_string('10');    
  
                      // $data['dur_id'] = mysql_escape_string('4');
  
                      $data['primary_values'] = mysql_escape_string($target_value);
  
                      $data['start_date'] = mysql_escape_string($start_date);
  
                      $data['end_date'] = mysql_escape_string($end_date);
  
                      $data['qualifiers_type'] = mysql_escape_string('1');
  
                      $data['last_update_date'] = date('Y-m-d H:i:s');
  
                      $data['last_update_status'] = "New";
  
                      $data['status'] = mysql_escape_string('A');
  
                      $data['target_for_qty_amt'] = $targetFor;
  
                      $data['target_critiria'] = $targetCritiria;
  
                      // print_r($data);die;
  
                      $id = $this->_dbInsert($data, 'table_target_incentive');
  
                      // echo $id;die;
                     //  if($id != ''){
                     //      $data3['target_incentive_id'] = $id;
                     //      $data3['ref_id'] = $brand_id;
                     //      $this->_dbInsert($data3, 'table_target_incentive_type');
                     //  }
  
  
                      if ($id != '') {
                          $duration = mysql_escape_string('1');
          //                        $start_date = date('Y-m-d', strtotime($_POST['from']));
          //                        $end_date = date('Y-m-d', strtotime($_POST['end_date']));
          //        $durationNumber = 0;
                              $durationNumber = 1;
                              $duration_dates = $this->_getDuration($duration, $start_date, $end_date);
          //                        foreach ($duration_dates as $value) {
          //                            //$duration_start_date = $value[0];
          //                            //$duration_end_date = $value[1];
          //                            $enddate = strtotime('-1 days', strtotime($duration_end_date));
          //                            $enddate = date('Y-m-d', $enddate);
                              $data1['target_incentive_id'] = mysql_escape_string($id);
          //            $durationNumber = ++$durationNumber;
                          $data1['duration_number'] = mysql_escape_string($durationNumber);
                          $durationNumber++;
                          $data1['primary_values'] = mysql_escape_string($target_value);
                          $data['secondary_values'] = mysql_escape_string("");
                          //$data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
                          $data1['from_date'] = mysql_escape_string($start_date);
  
                          $data1['to_date'] = mysql_escape_string($end_date);
  
                          $data1['status'] = 'A';
  
                          $duration_id = $this->_dbInsert($data1, 'table_target_incentive_duration');
  
                          if ($duration != '') {
  
                              if ((count($arrFile[1]) > 0)) {
                                  for ($i = 0; $i < count($arrFile[1]); $i++) {
                                      $data2 = [];
                                      //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                      $data2['salesman_id'] = $salesman_id;
                                      //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                      $data2['added_date'] = date('Y-m-d');
                                      $data2['duration_id'] = mysql_escape_string($duration_id);
                                      $data2['status'] = 'A';
                                      $this->_dbInsert($data2, 'table_target_incentive_salesman');
  
                                  }
                              }
  
                          }
                      }
  
  
                  }
  
              }
  
              $row++;
  
          }
  
          fclose($file);
  
          if ($row <= 2 || $fErr == 'fnot')
  
              return $fErr;
  
          else
              return $str_err_array;
  
  
      }


      // Import for Secondary Target : Domar : 17-mar-2025 : Total Order Amount

    function uploadTargetTotalOrderAmountFile()
    {

        $fields = array('Target Description*','Start Date(dd-mm-yyyy)','End Date(dd-mm-yyyy)','Target For*','Target Criteria*', $this->AliaseUsers['salesman'] . ' Code*','Target Value*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

       $strErr = "";

       $row = 0;
       $fErr = "no";
       $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

       $remove = array("\n", "\r\n", "\r", '"', ',');

       while (!feof($file)) {

           $arrFile = fgetcsv($file);

           // print_r($arrFile);
           // echo '<pre>';
           // print_r($fields);die;

           $flag = true;


           if ($row == 0) {
                if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "Target Value*") {
                    $flag2 = true;

                } else {
            
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }


            if (  $flag2 && $row > 0 && is_array($arrFile)) {

                if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "Target Value*"){

                        if (empty($arrFile[0])) {

                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[1])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[2])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[3])) {
    
                        $strErr .= "Error in Row - " . $row;
    
                        for ($i = 0; $i < count($fields); $i++) {
    
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                        }
    
                        $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";
    
                        } 

                        elseif (empty($arrFile[4])) {

                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[4] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[5])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[5] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[6])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[6] . " shouldn't be empty. \n";
    
                        } 
                    
                        $str_err_array = array($strErr);
    
                        $flag = false;
                }


                $target_name = mysql_escape_string(trim($arrFile[0]));

                // $start_date = mysql_escape_string(trim($arrFile[1]));

                // $end_date = mysql_escape_string(trim($arrFile[2]));

                // $month = mysql_escape_string(trim($arrFile[1]));

                // $year = mysql_escape_string(trim($arrFile[2]));


                $target_value = mysql_escape_string($arrFile[6]);


                if(ucwords(strtolower(($arrFile[3]))) == 'Order'){
                    $targetFor = '1';
                }elseif(ucwords(strtolower(($arrFile[3]))) == 'Delivery'){
                    $targetFor = '2';
                }

                if(ucwords(strtolower(($arrFile[4]))) == 'Quantity'){
                    $targetCritiria = '1';
                }elseif(ucwords(strtolower(($arrFile[4]))) == 'Amount'){
                    $targetCritiria = '2';
                }



                if ($flag) {

                    if (!empty(trim($arrFile[1])) && trim($arrFile[1]) != '') {

                        $startDate = trim($arrFile[1]);

                        if (strtotime($startDate) !== false) {

                            $start_date = date('Y-m-d', strtotime($startDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Start date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                

                }

                if ($flag) {

                    if (!empty(trim($arrFile[2])) && trim($arrFile[2]) != '') {

                        $endDate = trim($arrFile[2]);

                        // echo $endDatel;die;

                        if (strtotime($endDate) !== false) {

                            $end_date = date('Y-m-d', strtotime($endDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , End date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                   

                }


                if ($flag) {

                    $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($arrFile[5]))) . "'  AND  status = 'A' ";

                    $retTypeRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);
                    $salesman_id = $retTypeRec[0]->salesman_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                            $arrFile[5] . "," . $arrFile[6] .  "," . $this->AliaseUsers['salesman'] . " Does not exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }



                if ($flag) {

                  //  $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";
  $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND primary_values!='" . mysql_escape_string(trim($target_value)) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";

                    $retTypeRec = $this->_getSelectList('table_target_incentive', "target_incentive_id", '', $condi);

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                 if ($flag) {

                     $condi = " d.description='" . mysql_escape_string(trim($arrFile[0])) . "' AND i.salesman_id='" . mysql_escape_string(trim($salesman_id)) . "' AND d.primary_values='" . mysql_escape_string(trim($target_value)) . "' AND d.start_date = '" . $start_date . "' and d.end_date = '" . $end_date . "' ";


  $retTypeRec = $this->_getSelectList('table_target_incentive as d 
				left join table_target_incentive_duration as r on r.target_incentive_id=d.target_incentive_id 
                left join table_target_incentive_salesman as i on i.duration_id=r.duration_id ',
                " d.target_incentive_id", '', $condi, '');

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] .  ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }



                if ($flag) {


                    $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                    $data['description'] = mysql_escape_string($target_name);

                    $data['target_incentive_type'] = mysql_escape_string('1');

                    $data['target_for'] = mysql_escape_string('secondary'); 

        
                    $data['type_id'] = mysql_escape_string('12');    

                    // $data['dur_id'] = mysql_escape_string('4');

                    $data['primary_values'] = mysql_escape_string($target_value);

                    $data['start_date'] = mysql_escape_string($start_date);

                    $data['end_date'] = mysql_escape_string($end_date);

                    $data['qualifiers_type'] = mysql_escape_string('1');

                    $data['last_update_date'] = date('Y-m-d H:i:s');

                    $data['last_update_status'] = "New";

                    $data['status'] = mysql_escape_string('A');

                    $data['target_for_qty_amt'] = $targetFor;

                    $data['target_critiria'] = $targetCritiria;

                    // print_r($data);die;

                    $id = $this->_dbInsert($data, 'table_target_incentive');

                    // echo $id;die;
                    // if($id != ''){
                    //     $data3['target_incentive_id'] = $id;
                    //     $data3['ref_id'] = $brand_id;
                    //     $this->_dbInsert($data3, 'table_target_incentive_type');
                    // }


                    if ($id != '') {
                        $duration = mysql_escape_string('1');
        //                        $start_date = date('Y-m-d', strtotime($_POST['from']));
        //                        $end_date = date('Y-m-d', strtotime($_POST['end_date']));
        //        $durationNumber = 0;
                            $durationNumber = 1;
                            $duration_dates = $this->_getDuration($duration, $start_date, $end_date);
        //                        foreach ($duration_dates as $value) {
        //                            //$duration_start_date = $value[0];
        //                            //$duration_end_date = $value[1];
        //                            $enddate = strtotime('-1 days', strtotime($duration_end_date));
        //                            $enddate = date('Y-m-d', $enddate);
                            $data1['target_incentive_id'] = mysql_escape_string($id);
        //            $durationNumber = ++$durationNumber;
                        $data1['duration_number'] = mysql_escape_string($durationNumber);
                        $durationNumber++;
                        $data1['primary_values'] = mysql_escape_string($target_value);
                        $data['secondary_values'] = mysql_escape_string("");
                        //$data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
                        $data1['from_date'] = mysql_escape_string($start_date);

                        $data1['to_date'] = mysql_escape_string($end_date);

                        $data1['status'] = 'A';

                        $duration_id = $this->_dbInsert($data1, 'table_target_incentive_duration');

                        if ($duration != '') {

                            if ((count($arrFile[1]) > 0)) {
                                for ($i = 0; $i < count($arrFile[1]); $i++) {
                                    $data2 = [];
                                    //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                    $data2['salesman_id'] = $salesman_id;
                                    //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                    $data2['added_date'] = date('Y-m-d');
                                    $data2['duration_id'] = mysql_escape_string($duration_id);
                                    $data2['status'] = 'A';
                                    $this->_dbInsert($data2, 'table_target_incentive_salesman');

                                }
                            }

                        }
                    }


                }

            }

            $row++;

        }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else
            return $str_err_array;


    }



     // Import for Secondary Target : Domar : 17-mar-2025 : Payment Collection 

     function uploadTargetPaymentCollectionFile()
     {
 
         $fields = array('Target Description*','Start Date(dd-mm-yyyy)','End Date(dd-mm-yyyy)','Target For*','Target Criteria*', $this->AliaseUsers['salesman'] . ' Code*','Target Value*');
 
         $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");
 
        $strErr = "";
 
        $row = 0;
        $fErr = "no";
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";
 
        $remove = array("\n", "\r\n", "\r", '"', ',');
 
        while (!feof($file)) {
 
            $arrFile = fgetcsv($file);
 
            // print_r($arrFile);
            // echo '<pre>';
            // print_r($fields);die;
 
            $flag = true;
 
 
            if ($row == 0) {
                 if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "Target Value*") {
                     $flag2 = true;
 
                 } else {
             
                     $flag2 = false;
                     $fErr = "fnot";
                 }
             }
 
 
             if (  $flag2 && $row > 0 && is_array($arrFile)) {
 
                 if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "Target Value*"){
 
                         if (empty($arrFile[0])) {
 
                             $strErr .= "Error in Row - " . $row;
     
                             for ($i = 0; $i < count($fields); $i++) {
     
                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                             }
     
                             $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";
     
                         } elseif (empty($arrFile[1])) {
     
                             $strErr .= "Error in Row - " . $row;
     
                             for ($i = 0; $i < count($fields); $i++) {
     
                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                             }
     
                             $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";
     
                         } elseif (empty($arrFile[2])) {
     
                             $strErr .= "Error in Row - " . $row;
     
                             for ($i = 0; $i < count($fields); $i++) {
     
                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                             }
     
                             $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";
     
                         } elseif (empty($arrFile[3])) {
     
                         $strErr .= "Error in Row - " . $row;
     
                         for ($i = 0; $i < count($fields); $i++) {
     
                             $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                         }
     
                         $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";
     
                         } 
 
                         elseif (empty($arrFile[4])) {
 
                             $strErr .= "Error in Row - " . $row;
     
                             for ($i = 0; $i < count($fields); $i++) {
     
                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                             }
     
                             $strErr .= " ," . $fields[4] . " shouldn't be empty. \n";
     
                         } elseif (empty($arrFile[5])) {
     
                             $strErr .= "Error in Row - " . $row;
     
                             for ($i = 0; $i < count($fields); $i++) {
     
                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                             }
     
                             $strErr .= " ," . $fields[5] . " shouldn't be empty. \n";
     
                         } elseif (empty($arrFile[6])) {
     
                             $strErr .= "Error in Row - " . $row;
     
                             for ($i = 0; $i < count($fields); $i++) {
     
                                 $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
     
                             }
     
                             $strErr .= " ," . $fields[6] . " shouldn't be empty. \n";
     
                         } 
                     
                         $str_err_array = array($strErr);
     
                         $flag = false;
                 }
 
 
                 $target_name = mysql_escape_string(trim($arrFile[0]));
 
                 $start_date = mysql_escape_string(trim($arrFile[1]));
 
                 $end_date = mysql_escape_string(trim($arrFile[2]));
 
                 // $month = mysql_escape_string(trim($arrFile[1]));
 
                 // $year = mysql_escape_string(trim($arrFile[2]));
 
 
                 $target_value = mysql_escape_string($arrFile[6]);
 
 
                 if(ucwords(strtolower(($arrFile[3]))) == 'Order'){
                     $targetFor = '1';
                 }elseif(ucwords(strtolower(($arrFile[3]))) == 'Delivery'){
                     $targetFor = '2';
                 }
 
                 if(ucwords(strtolower(($arrFile[4]))) == 'Quantity'){
                     $targetCritiria = '1';
                 }elseif(ucwords(strtolower(($arrFile[4]))) == 'Amount'){
                     $targetCritiria = '2';
                 }
 
 
 
                 if ($flag) {

                    if (!empty(trim($arrFile[1])) && trim($arrFile[1]) != '') {

                        $startDate = trim($arrFile[1]);

                        if (strtotime($startDate) !== false) {

                            $start_date = date('Y-m-d', strtotime($startDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Start date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                

                }

                if ($flag) {

                    if (!empty(trim($arrFile[2])) && trim($arrFile[2]) != '') {

                        $endDate = trim($arrFile[2]);

                        // echo $endDatel;die;

                        if (strtotime($endDate) !== false) {

                            $end_date = date('Y-m-d', strtotime($endDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , End date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                   

                }

 
                 if ($flag) {
 
                     $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($arrFile[5]))) . "'  AND  status = 'A' ";
 
                     $retTypeRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);
                     $salesman_id = $retTypeRec[0]->salesman_id;
 
                     if (!is_array($retTypeRec)) {
 
                         $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                             $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                             $arrFile[5] . "," . $arrFile[6] .  "," . $this->AliaseUsers['salesman'] . " Does not exits \n";
 
                         $str_err_array = array($strErr);
 
                         $flag = false;
 
                     }
 
                 }
 

 
 
                 if ($flag) {
 
                   //  $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";
   $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND primary_values!='" . mysql_escape_string(trim($target_value)) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";
                     $retTypeRec = $this->_getSelectList('table_target_incentive', "target_incentive_id", '', $condi);
 
                     if (is_array($retTypeRec) && count($retTypeRec) > 0) {
 
                         $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                         $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                         $arrFile[5] . "," . $arrFile[6] . ",Target name is already exits \n";
 
                         $str_err_array = array($strErr);
 
                         $flag = false;
 
                     }
 
                 }

                  if ($flag) {

                     $condi = " d.description='" . mysql_escape_string(trim($arrFile[0])) . "' AND i.salesman_id='" . mysql_escape_string(trim($salesman_id)) . "' AND d.primary_values='" . mysql_escape_string(trim($target_value)) . "' AND d.start_date = '" . $start_date . "' and d.end_date = '" . $end_date . "' ";


  $retTypeRec = $this->_getSelectList('table_target_incentive as d 
				left join table_target_incentive_duration as r on r.target_incentive_id=d.target_incentive_id 
                left join table_target_incentive_salesman as i on i.duration_id=r.duration_id ',
                " d.target_incentive_id", '', $condi, '');

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] .  ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

 
 
                 if ($flag) {
 
 
                     $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
 
                     $data['description'] = mysql_escape_string($target_name);
 
                     $data['target_incentive_type'] = mysql_escape_string('1');
 
                     $data['target_for'] = mysql_escape_string('secondary'); 
 
         
                     $data['type_id'] = mysql_escape_string('14');    
 
                     // $data['dur_id'] = mysql_escape_string('4');
 
                     $data['primary_values'] = mysql_escape_string($target_value);
 
                     $data['start_date'] = mysql_escape_string($start_date);
 
                     $data['end_date'] = mysql_escape_string($end_date);
 
                     $data['qualifiers_type'] = mysql_escape_string('1');
 
                     $data['last_update_date'] = date('Y-m-d H:i:s');
 
                     $data['last_update_status'] = "New";
 
                     $data['status'] = mysql_escape_string('A');
 
                     $data['target_for_qty_amt'] = $targetFor;
 
                     $data['target_critiria'] = $targetCritiria;
 
                     // print_r($data);die;
 
                     $id = $this->_dbInsert($data, 'table_target_incentive');
 
                     
 
                     if ($id != '') {
                         $duration = mysql_escape_string('1');
         //                        $start_date = date('Y-m-d', strtotime($_POST['from']));
         //                        $end_date = date('Y-m-d', strtotime($_POST['end_date']));
         //        $durationNumber = 0;
                             $durationNumber = 1;
                             $duration_dates = $this->_getDuration($duration, $start_date, $end_date);
         //                        foreach ($duration_dates as $value) {
         //                            //$duration_start_date = $value[0];
         //                            //$duration_end_date = $value[1];
         //                            $enddate = strtotime('-1 days', strtotime($duration_end_date));
         //                            $enddate = date('Y-m-d', $enddate);
                             $data1['target_incentive_id'] = mysql_escape_string($id);
         //            $durationNumber = ++$durationNumber;
                         $data1['duration_number'] = mysql_escape_string($durationNumber);
                         $durationNumber++;
                         $data1['primary_values'] = mysql_escape_string($target_value);
                         $data['secondary_values'] = mysql_escape_string("");
                         //$data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
                         $data1['from_date'] = mysql_escape_string($start_date);
 
                         $data1['to_date'] = mysql_escape_string($end_date);
 
                         $data1['status'] = 'A';
 
                         $duration_id = $this->_dbInsert($data1, 'table_target_incentive_duration');
 
                         if ($duration != '') {
 
                             if ((count($arrFile[1]) > 0)) {
                                 for ($i = 0; $i < count($arrFile[1]); $i++) {
                                     $data2 = [];
                                     //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                     $data2['salesman_id'] = $salesman_id;
                                     //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                     $data2['added_date'] = date('Y-m-d');
                                     $data2['duration_id'] = mysql_escape_string($duration_id);
                                     $data2['status'] = 'A';
                                     $this->_dbInsert($data2, 'table_target_incentive_salesman');
 
                                 }
                             }
 
                         }
                     }
 
 
                 }
 
             }
 
             $row++;
 
         }
 
         fclose($file);
 
         if ($row <= 2 || $fErr == 'fnot')
 
             return $fErr;
 
         else
             return $str_err_array;
 
 
     }
 


     
    // Import for Secondary Target : Domar : 17-mar-2025 : Sub Category 

    function uploadTargetSubCategoryFile()
    {

        $fields = array('Target Description*','Start Date(dd-mm-yyyy)','End Date(dd-mm-yyyy)','Target For*','Target Criteria*', $this->AliaseUsers['salesman'] . ' Code*','Sub-Category Name*','Target Value*');

        $file = fopen($_FILES['fileToUpload']['tmp_name'], "r");

       $strErr = "";

       $row = 0;
       $fErr = "no";
       $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";

       $remove = array("\n", "\r\n", "\r", '"', ',');

       while (!feof($file)) {

           $arrFile = fgetcsv($file);

           // print_r($arrFile);
           // echo '<pre>';
           // print_r($fields);die;

           $flag = true;


           if ($row == 0) {
                if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "Sub-Category Name*" && trim($arrFile[7]) == "Target Value*") {
                    $flag2 = true;

                } else {
            
                    $flag2 = false;
                    $fErr = "fnot";
                }
            }


            if (  $flag2 && $row > 0 && is_array($arrFile)) {

                if (count($arrFile) == 8 && trim($arrFile[0]) == "Target Description*" && trim($arrFile[1]) == "Start Date(dd-mm-yyyy)" && trim($arrFile[2]) == "End Date(dd-mm-yyyy)" && trim($arrFile[3]) == "Target For*" && trim($arrFile[4]) == "Target Criteria*" && trim($arrFile[5]) == $this->AliaseUsers['salesman'] . ' Code*'  && trim($arrFile[6]) == "Sub-Category Name*" && trim($arrFile[7]) == "Target Value*"){

                        if (empty($arrFile[0])) {

                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[0] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[1])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[1] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[2])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[2] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[3])) {
    
                        $strErr .= "Error in Row - " . $row;
    
                        for ($i = 0; $i < count($fields); $i++) {
    
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                        }
    
                        $strErr .= " ," . $fields[3] . " shouldn't be empty. \n";
    
                        } 

                        elseif (empty($arrFile[4])) {

                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[4] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[5])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[5] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[6])) {
    
                            $strErr .= "Error in Row - " . $row;
    
                            for ($i = 0; $i < count($fields); $i++) {
    
                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                            }
    
                            $strErr .= " ," . $fields[6] . " shouldn't be empty. \n";
    
                        } elseif (empty($arrFile[7])) {
    
                        $strErr .= "Error in Row - " . $row;
    
                        for ($i = 0; $i < count($fields); $i++) {
    
                            $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);
    
                        }
    
                        $strErr .= " ," . $fields[7] . " shouldn't be empty. \n";
    
                        } 
                    
                        $str_err_array = array($strErr);
    
                        $flag = false;
                }


                $target_name = mysql_escape_string(trim($arrFile[0]));

                // $start_date = mysql_escape_string(trim($arrFile[1]));

                // $end_date = mysql_escape_string(trim($arrFile[2]));

                // $month = mysql_escape_string(trim($arrFile[1]));

                // $year = mysql_escape_string(trim($arrFile[2]));


                $target_value = mysql_escape_string($arrFile[7]);


                if(ucwords(strtolower(($arrFile[3]))) == 'Order'){
                    $targetFor = '1';
                }elseif(ucwords(strtolower(($arrFile[3]))) == 'Delivery'){
                    $targetFor = '2';
                }

                if(ucwords(strtolower(($arrFile[4]))) == 'Quantity'){
                    $targetCritiria = '1';
                }elseif(ucwords(strtolower(($arrFile[4]))) == 'Amount'){
                    $targetCritiria = '2';
                }



                
                if ($flag) {

                    if (!empty(trim($arrFile[1])) && trim($arrFile[1]) != '') {

                        $startDate = trim($arrFile[1]);

                        if (strtotime($startDate) !== false) {

                            $start_date = date('Y-m-d', strtotime($startDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , Start date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                

                }

                if ($flag) {

                    if (!empty(trim($arrFile[2])) && trim($arrFile[2]) != '') {

                        $endDate = trim($arrFile[2]);

                        // echo $endDatel;die;

                        if (strtotime($endDate) !== false) {

                            $end_date = date('Y-m-d', strtotime($endDate));

                        } else {

                            $strErr .= "Error in Row - " . $row;

                            for ($i = 0; $i < count($fields); $i++) {

                                $strErr .= "," . str_replace($remove, ' ', $arrFile[$i]);

                            }

                            $strErr .= " , End date format not match. \n";

                            $str_err_array = array($strErr);

                            $flag = false;
                        }


                    } 
                   

                }


                

                


                if ($flag) {

                    $condi = " LOWER(employee_code)='" . mysql_escape_string(strtolower(trim($arrFile[5]))) . "'  AND  status = 'A' ";

                    $retTypeRec = $this->_getSelectList('table_salesman', "salesman_id", '', $condi);
                    $salesman_id = $retTypeRec[0]->salesman_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                            $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . "," . $this->AliaseUsers['salesman'] . " Does not exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {

                    $condi = " LOWER(subcategory_name)='" . mysql_escape_string(strtolower(trim($arrFile[6]))) . "'  AND  status = 'A' ";

                    $retTypeRec = $this->_getSelectList('table_subcategory', "subcategory_id", '', $condi);
                    $subcategory_id = $retTypeRec[0]->subcategory_id;

                    if (!is_array($retTypeRec)) {

                        $strErr .= "Error in Row" . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                            $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                            $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] . ", Sub-Category Name Does not exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }



                if ($flag) {

                   // $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";
  $condi = " description='" . mysql_escape_string(trim($arrFile[0])) . "' AND primary_values!='" . mysql_escape_string(trim($target_value)) . "' AND start_date = '" . $start_date . "' and end_date = '" . $end_date . "' ";
                    $retTypeRec = $this->_getSelectList('table_target_incentive', "target_incentive_id", '', $condi);

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] .  ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }

                 if ($flag) {

                     $condi = " d.description='" . mysql_escape_string(trim($arrFile[0])) . "' AND i.salesman_id='" . mysql_escape_string(trim($salesman_id)) . "' AND d.primary_values='" . mysql_escape_string(trim($target_value)) . "' AND d.start_date = '" . $start_date . "' and d.end_date = '" . $end_date . "' ";


  $retTypeRec = $this->_getSelectList('table_target_incentive as d 
				left join table_target_incentive_duration as r on r.target_incentive_id=d.target_incentive_id 
                left join table_target_incentive_salesman as i on i.duration_id=r.duration_id ',
                " d.target_incentive_id", '', $condi, '');

                    if (is_array($retTypeRec) && count($retTypeRec) > 0) {

                        $strErr .= "Error in Row"  . $row . " ," . $arrFile[0] . "," . $arrFile[1] . " ," .
                        $arrFile[2] . "," . $arrFile[3] . "," . $arrFile[4] . "," .
                        $arrFile[5] . "," . $arrFile[6] . "," . $arrFile[7] .  ",Target name is already exits \n";

                        $str_err_array = array($strErr);

                        $flag = false;

                    }

                }


                if ($flag) {


                    $data['account_id'] = mysql_escape_string($_SESSION['accountId']);

                    $data['description'] = mysql_escape_string($target_name);

                    $data['target_incentive_type'] = mysql_escape_string('1');

                    $data['target_for'] = mysql_escape_string('secondary'); 

        
                    $data['type_id'] = mysql_escape_string('13');    

                    // $data['dur_id'] = mysql_escape_string('4');

                    $data['primary_values'] = mysql_escape_string($target_value);

                    $data['start_date'] = mysql_escape_string($start_date);

                    $data['end_date'] = mysql_escape_string($end_date);

                    $data['qualifiers_type'] = mysql_escape_string('1');

                    $data['last_update_date'] = date('Y-m-d H:i:s');

                    $data['last_update_status'] = "New";

                    $data['status'] = mysql_escape_string('A');

                    $data['target_for_qty_amt'] = $targetFor;

                    $data['target_critiria'] = $targetCritiria;

                    // print_r($data);die;

                    $id = $this->_dbInsert($data, 'table_target_incentive');

                    // echo $id;die;
                    if($id != ''){
                        $data3['target_incentive_id'] = $id;
                        $data3['ref_id'] = $subcategory_id;
                        $this->_dbInsert($data3, 'table_target_incentive_type');
                    }


                    if ($id != '') {
                            $duration = mysql_escape_string('1');
        //                        $start_date = date('Y-m-d', strtotime($_POST['from']));
        //                        $end_date = date('Y-m-d', strtotime($_POST['end_date']));
        //        $durationNumber = 0;
                            $durationNumber = 1;
                            $duration_dates = $this->_getDuration($duration, $start_date, $end_date);
        //                        foreach ($duration_dates as $value) {
        //                            //$duration_start_date = $value[0];
        //                            //$duration_end_date = $value[1];
        //                            $enddate = strtotime('-1 days', strtotime($duration_end_date));
        //                            $enddate = date('Y-m-d', $enddate);
                            $data1['target_incentive_id'] = mysql_escape_string($id);
        //            $durationNumber = ++$durationNumber;
                        $data1['duration_number'] = mysql_escape_string($durationNumber);
                        $durationNumber++;
                        $data1['primary_values'] = mysql_escape_string($target_value);
                        $data['secondary_values'] = mysql_escape_string("");
                        //$data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
                        $data1['from_date'] = mysql_escape_string($start_date);

                        $data1['to_date'] = mysql_escape_string($end_date);

                        $data1['status'] = 'A';

                        $duration_id = $this->_dbInsert($data1, 'table_target_incentive_duration');

                        if ($duration != '') {

                            if ((count($arrFile[1]) > 0)) {
                                for ($i = 0; $i < count($arrFile[1]); $i++) {
                                    $data2 = [];
                                    //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                    $data2['salesman_id'] = $salesman_id;
                                    //Todo start : sudhasnhu : 07 march 2024 as discussed with ritu insert salesman code to salesman id
                                    $data2['added_date'] = date('Y-m-d');
                                    $data2['duration_id'] = mysql_escape_string($duration_id);
                                    $data2['status'] = 'A';
                                    $this->_dbInsert($data2, 'table_target_incentive_salesman');

                                }
                            }

                        }
                        }


                    }

                }

                $row++;

            }

        fclose($file);

        if ($row <= 2 || $fErr == 'fnot')

            return $fErr;

        else
            return $str_err_array;


    }









}

// End of class

?>