<?php

class Admin extends Db_Action
{
    public $weekArray = array('1' => 'Monday', '2' => 'Tuesday', '3' => 'Wednesday', '4' => 'Thrusday', '5' => 'friday', '6' => 'Saturday', '7' => 'Sunday');

    function __construct($pagerFunName = 'frmsubmit')
    {
        parent::__construct();
        $this->autMsg = "";
    }

    function generateNumericCode($length)
    {
        $characters = '0123456789';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    function sortArrayByColumn($Array, $SortBy = array(), $Sort = SORT_ASC)
    {
        if (is_array($Array) && count($Array) > 0 && !empty($SortBy)) {
            $Map = array();
            foreach ($Array as $Key => $Val) {
                $Sort_key = '';
                foreach ($SortBy as $Key_key) {
                    $Sort_key .= $Val->$Key_key;
                }
                //   echo $Sort_key;
                $Map[$Key] = $Sort_key;
            }

            // print_r($Map);die;
            asort($Map, $Sort);
            $Sorted = array();
            foreach ($Map as $Key => $Val) {
                //echo $Array[$Key];
                $Sorted[] = $Array[$Key];
            }
            // print_r($Sorted);die;
            //  return array_reverse($Sorted);
            return $Sorted;
        }
        return $Array;
    }

    function toCamelCase($string) {

        // Split the string into words
        $words = explode(' ', trim($string)); // Trim to avoid empty elements

        // Capitalize the first letter of each word and lowercase the rest
        $camelCaseWords = array_map('ucfirst', array_map('strtolower', $words));

        // Join the words with a space
        return implode(' ', $camelCaseWords);
        }




    // Distance between two latlong 24 Aug 2023 Sudhanshu

    function distance($lat1, $lon1, $lat2, $lon2, $unit)
    {

        $theta = $lon1 - $lon2;
        $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) + cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
        $dist = acos($dist);
        $dist = rad2deg($dist);
        $miles = $dist * 60 * 1.1515;
        $unit = strtoupper($unit);

        if ($unit == "K") {
            return ($miles * 1.609344);
        } else if ($unit == "N") {
            return ($miles * 0.8684);
        } else {
            return $miles;
        }
    }

// Distance between two latlong 24 Aug 2023 Sudhanshu

    function generateAlphaNumericCode($length)
    {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    function validateForm($expr, $value)
    {

        $clear = preg_replace($expr, '', $value);
        return $clear;
    }

    // brand level access
    function getDistributorGeoData($level, $tabAlias)
    {
        $geoData = array();
        $levelData = '';
        if ($_SESSION['userLoginType'] == 3) {
            $distributor_id = $_SESSION['distributorId'];
            $where = " d.distributor_id = " . $distributor_id;
            $auRec = $this->_getSelectList('table_distributors as d 
				left join table_retailer as r on r.distributor_id=d.distributor_id and r.status="A" ',
                " d.country,d.state,d.city,d.location,r.country as ret_country,r.state as ret_state ,r.city as ret_city,r.location_id as ret_location", '', $where, '');

            if (count($auRec) > 0) {
                foreach ($auRec as $key => $value) {
                    $geoData['country'][$value->country] = $value->country;
                    $geoData['country'][$value->ret_country] = $value->ret_country;

                    $geoData['state'][$value->state] = $value->state;
                    $geoData['state'][$value->ret_state] = $value->ret_state;

                    $geoData['city'][$value->city] = $value->city;
                    $geoData['city'][$value->ret_city] = $value->ret_city;

                    $geoData['location'][$value->location] = $value->location;
                    $geoData['location'][$value->ret_location] = $value->ret_location;
                }
            }
            if (isset($geoData[$level])) {

                $levelData = " AND " . $tabAlias . " IN(" . rtrim(implode(',', $geoData[$level]), ',') . ")";
            }
        }
        return $levelData;
    }

    function getBrandsOrder($RoleBrands, $brandWhere)
    {
        $orderids = '';
        if (!empty($RoleBrands)) {
            $where = " i.brand_id IN(" . $RoleBrands . ") and " . $brandWhere;
            $auRec = $this->_getSelectList('table_order as o 
				inner join table_order_detail as od on od.order_id=o.order_id 
				inner join table_item as i on i.item_id=od.item_id', " group_concat(o.order_id) as order_id", '', $where, '');
            if (count($auRec) > 0 && $auRec[0]->order_id != '' && $auRec[0]->order_id != null) {
                $orderids = " and o.order_id IN (" . $auRec[0]->order_id . ")";
            }
        }
        return $orderids;
    }

    function getCountryPhoneNoLenght($account)
    {

        $where = " o.account_id=" . $account;
        $getCountryId = $this->_getSelectList2('table_account as o
                left join country c on o.country_id=c.country_id ',
            'c.contact_max_length,c.contact_min_length', '', $where);
        if (is_array($getCountryId) && count($getCountryId) > 0) {
            return $getCountryId;
        }
    }


    function getUserRoleBrand()
    {
        if ((!empty($_SESSION['salesmanId']) && (intval($_SESSION['salesmanId']) > 0)) && (!empty($_SESSION['role_id']) && (intval($_SESSION['role_id']) > 0))) {
            $salesmanid = $_SESSION['salesmanId'];
            $roleid = $_SESSION['role_id'];
            $where = " rsm.salesman_id=" . $salesmanid . " and rsm.role_id=" . $roleid . " GROUP BY rsm.salesman_id ";
            $auRec = $this->_getSelectList2('table_role_salesman_mapping as rsm		
		left join table_role_brand_mapping as rsbm on rsm.role_id=rsbm.role_id		
		left join table_brands as b on b.brand_id=rsbm.brand_id',
                'GROUP_CONCAT(rsbm.brand_id) as brands', '', $where, '');
            if (is_array($auRec) && count($auRec) > 0) {
                return $auRec[0]->brands;
            } else {
                return '';
            }
        } else {
            return '';
        }
    }

    function getRouteWiseDistributors($salesmanId, $account_id, $featureID = '')
    {
        if (empty($featureID)) {
            $featureList = $this->getAccountFeaturesList($account_id);
        } else {
            $featureList = $featureID;
        }

        $currDate = date('Y-m-d');
        $_objArrayList = new ArrayList();
        $retIdArr = [];

        //Get distributor mapped with the Salesman directly
        $condition = "  d.status='A' AND sdm.salesman_id='" . $salesmanId . "' AND sdm.distributor_id != 0 ";
        $getDis = $this->_getSelectList("table_salesman_distributor_mapping as sdm
    INNER join table_distributors as d on d.distributor_id=sdm.distributor_id", "DISTINCT(sdm.distributor_id) as distributor_id", "", " $condition ");

        if (is_array($getDis) && count($getDis) > 0) {
            foreach ($getDis as $key => $retData) {
                $retIdArr[] = $retData->distributor_id;
            }
        }

        //first we will fetch the logged in salesman's route retailers
        // Route List Month Wise
        if (count($featureList) > 0 && in_array(94, $featureList)) {
            $condition = " sd.status='A' AND r.status='A' AND  sd.month='" . date('n') . "' and  sd.year='" . date('Y') . "' and sd.salesman_id='" . $salesmanId . "' and d.assign_day<='" . date('j') . "' AND rr.distributor_id > 0 ORDER BY rr.distributor_id ASC";

            $getDis = $this->_getSelectList("table_route_scheduled as sd 
		left join table_route_schedule_details as d on sd.route_schedule_id=d.route_schedule_id  
		left join table_route as r on r.route_id=d.route_id 
		left join table_route_retailer as ret on ret.route_id = r.route_id
		inner join table_retailer as rr on ret.retailer_id = rr.retailer_id", "DISTINCT(rr.distributor_id) as distributor_id", "", " $condition ");

            if (is_array($getDis) && (count($getDis) > 0)) {
                foreach ($getDis as $key => $retData) {
                    $retIdArr[] = $retData->distributor_id;
                }
            }
        } else if (count($featureList) > 0 && in_array(95, $featureList)) {
            // Route Retailer Wise
            $condition = " rsd.assign_day<='" . date('j') . "' and rs.salesman_id = '" . $salesmanId . "' and rs.month='" . date('n') . "' and rs.year='" . date('Y') . "' and rs.status='A' and rsd.status='A' and r.retailer_id and r.distributor_id > 0 ORDER BY r.distributor_id ASC";

            $getDis = $this->_getSelectList("table_salesman_retailer_assignment as rs
		left join table_salesman_retailer_assignment_details as rsd on rs.route_schedule_id=rsd.route_schedule_id left join table_retailer as r on r.retailer_id = rsd.retailer_id ",
                "DISTINCT(r.distributor_id) as distributor_id", "", " $condition ");

            if (is_array($getDis) && (count($getDis) > 0)) {
                foreach ($getDis as $key => $retData) {
                    $retIdArr[] = $retData->distributor_id;
                }
            }
        } else if (count($featureList) > 0 && in_array(119, $featureList)) {
//            Route Salesman Retailer Mapping Wise
            $condition = " rsd.salesman_id = '" . $salesmanId . "' AND retMas.status='A' AND retMas.distributor_id != 0 GROUP BY retMas.distributor_id ";

            $getDis = $this->_getSelectList("table_customer_salesman_mapping as rsd
		inner join table_retailer as retMas on retMas.retailer_id=rsd.retailer_id", "DISTINCT(retMas.distributor_id) as distributor_id", "", " $condition ");

            if (is_array($getDis) && (count($getDis) > 0)) {
                foreach ($getDis as $key => $retData) {
                    $retIdArr[] = $retData->distributor_id;
                }
            }
        } else {
            $condition = " s.from_date<='" . $currDate . "' and s.to_date>='" . $currDate . "' and s.status='A' and r.status='A' and  s.salesman_id='" . $salesmanId . "' AND ret.distributor_id != 0 AND ret.status='A' GROUP BY ret.distributor_id ";

            $getDis = $this->_getSelectList("table_route_schedule as s
left join table_route_schedule_by_day as d on s.route_schedule_id=d.route_schedule_id
left join table_route as r on FIND_IN_SET(r.route_id,concat(if(d.Sun='',0,d.Sun),',',if(d.Mon='',0,d.Mon),',',if(d.Tue='',0,d.Tue),',',if(d.Wed='',0,d.Wed),',',if(d.Thu='',0,d.Thu),',',if(d.Fri='',0,d.Fri),',',if(d.Sat='',0,d.Sat)))
left join table_route_retailer as rr on rr.route_id = r.route_id
INNER join table_retailer as ret on ret.retailer_id = rr.retailer_id", 'DISTINCT(ret.distributor_id) as distributor_id', '', " $condition ");

            if (is_array($getDis) && (count($getDis) > 0)) {
                foreach ($getDis as $key => $retData) {
                    $retIdArr[] = $retData->distributor_id;
                }
            }
        }


        //now we will fetch the logged in salesman's direct or indirect user's  route retailers

        $getSortOrder = $this->_getSelectList("table_salesman_hierarchy_relationship AS SHR 
        LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
        LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id", "SH.sort_order", "", "   SHR.salesman_id = $salesmanId ORDER BY SH.sort_order ASC ");
        if (is_array($getSortOrder) && (count($getSortOrder) > 0)) {
            $sortOrder = $getSortOrder[0]->sort_order;
            $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanId), $sortOrder, $account_id);

            if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                if (count($featureList) > 0 && in_array(94, $featureList)) {
                    $condition = " sd.status='A' AND r.status='A' AND  sd.month='" . date('n') . "' and  sd.year='" . date('Y') . "' and sd.salesman_id IN(" . $bottomUsersIds . ") and d.assign_day<='" . date('j') . "' AND ret.distributor_id > 0 ORDER BY ret.distributor_id ASC";

                    $getRet = $this->_getSelectList("table_route_scheduled as sd 
		left join table_route_schedule_details as d on sd.route_schedule_id=d.route_schedule_id  
		left join table_route as r on r.route_id=d.route_id 
		left join table_route_retailer as ret on ret.route_id = r.route_id", "DISTINCT(ret.distributor_id) as distributor_id", "", " $condition ");

                    if (is_array($getRet) && (count($getRet) > 0)) {
                        foreach ($getRet as $key => $retData) {
                            $retIdArr[] = $retData->distributor_id;
                        }
                    }
                } else if (count($featureList) > 0 && in_array(95, $featureList)) {

                    $condition = " rsd.assign_day<='" . date('j') . "' and rs.salesman_id IN(" . $bottomUsersIds . ") and rs.month='" . date('n') . "' and rs.year='" . date('Y') . "' and rs.status='A' and r.status='A' and r.distributor_id > 0 ORDER BY r.distributor_id ASC";

                    $getRet = $this->_getSelectList("table_salesman_retailer_assignment as rs
		left join table_salesman_retailer_assignment_details as rsd on rs.route_schedule_id=rsd.route_schedule_id left join table_retailer as r on r.retailer_id = rsd.retailer_id", "DISTINCT(r.distributor_id) as distributor_id", "", " $condition ");

                    if (is_array($getRet) && (count($getRet) > 0)) {
                        foreach ($getRet as $key => $retData) {
                            $retIdArr[] = $retData->distributor_id;
                        }
                    }
                } else if (count($featureList) > 0 && in_array(119, $featureList)) {
                    $condition = " rsd.salesman_id IN(" . $bottomUsersIds . ") AND r.distributor_id > 0  ORDER BY r.distributor_id ASC ";

                    $getRet = $this->_getSelectList("table_customer_salesman_mapping as rsd
					inner join table_retailer as r on r.retailer_id=rsd.retailer_id",
                        "DISTINCT(r.distributor_id) as distributor_id", "", " $condition ");

                    if (is_array($getRet) && (count($getRet) > 0)) {
                        foreach ($getRet as $key => $retData) {
                            $retIdArr[] = $retData->distributor_id;
                        }
                    }
                } else {
                    $condition = " s.from_date<='" . $currDate . "' and s.to_date>='" . $currDate . "' and s.status='A' and ret.distributor_id > 0 AND r.status='A' and s.salesman_id IN(" . $bottomUsersIds . ") ORDER BY ret.distributor_id ASC ";

                    $getRet = $this->_getSelectList("table_route_schedule as s 
		LEFT JOIN table_route_schedule_by_day as d on s.route_schedule_id=d.route_schedule_id 
		LEFT JOIN table_route as r on FIND_IN_SET(r.route_id,concat(if(d.Sun='',0,d.Sun),',',if(d.Mon='',0,d.Mon),',',if(d.Tue='',0,d.Tue),',',if(d.Wed='',0,d.Wed),',',if(d.Thu='',0,d.Thu),',',if(d.Fri='',0,d.Fri),',',if(d.Sat='',0,d.Sat)))
		LEFT JOIN table_route_retailer as ret on ret.route_id = r.route_id", 'DISTINCT(ret.distributor_id) as distributor_id', '', " $condition ");

                    if (is_array($getRet) && (count($getRet) > 0)) {
                        foreach ($getRet as $key => $retData) {
                            $retIdArr[] = $retData->distributor_id;
                        }
                    }
                }
            }
        }

//        echo '<pre>';
//        print_r($retIdArr);
//        print_r(implode(',', array_unique($retIdArr)));
//        die(' die here');

        if (is_array($retIdArr) && (count($retIdArr) > 0)) {
            return array_unique($retIdArr);
        } else {
            return [];
        }
    }

    function getAdminRec($condi = '', $field = 'u.*,a.company_name', $limit = '')
    {
        $aRec = $this->_getSelectList('table_web_users as u left join table_account as a on u.account_id=a.account_id left join table_account_admin as m on u.account_id=m.account_id left join table_distributors as d on u.account_id=d.account_id left join table_retailer as r on u.account_id=r.account_id left join table_salesman as s on u.account_id=s.account_id', $field, $limit, $condi);
        return $aRec;
    }

    function getUserTypeId($salesmanId)
    {
        $userTypeId = 0;
        $userRec = $this->_getSelectList2('table_salesman as s
LEFT JOIN table_web_users as wb ON wb.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy_relationship as shr ON shr.salesman_id = s.salesman_id', "wb.user_type,shr.hierarchy_id,s.account_id", "", " s.salesman_id = $salesmanId ");

        if (is_array($userRec) && (count($userRec) > 0)) {
            $user_type = $userRec[0]->user_type;
            $account_id = $userRec[0]->account_id;
            $hierarchy_id = $userRec[0]->hierarchy_id;

            $userTypeRec = $this->_getSelectList2('table_user_type', 'id', '', "status = 'A' AND account_id = $account_id  AND parentType = $user_type AND hierarchy_id = $hierarchy_id");

            $userTypeId = $userTypeRec[0]->id;
        }
        return $userTypeId;
    }

    function getUserAppVersion($salesmanId)
    {
        $app_version = 0;
        $userRec = $this->_getSelectList2('table_pepup_app_version', "app_version", "", " salesman_id = $salesmanId ");

        if (is_array($userRec) && (count($userRec) > 0)) {
            $app_version = $userRec[0]->app_version;
        }
        return $app_version;
    }

    // Todo Start : 5 Nov 2023 Get NA Batch Id account wise

    function getAccountWisebatchId($account_id)
    {

        $batchIds = $this->_getSelectList2('table_color', "color_id", "", " color_desc='NA' And account_id='$account_id' And status='A' ");

        if (is_array($batchIds) && (count($batchIds) > 0)) {
            $batch_id = $batchIds[0]->color_id;
        } else {
            $data['color_code'] = 'NA';
            $data['color_desc'] = 'NA';
            $data['account_id'] = $account_id;
            $data['created_date'] = date('Y-m-d H:i:s');
            $data['status'] = 'A';
            $batch_id = $this->_dbInsert($data, 'table_color');
        }
        return $batch_id;

    }

    // Todo End : 5 Nov 2023 Get NA Batch Id account wise

    // Todo Start : 6 Dec 2023 : Get Account Billing details

    function getAccountBillingDetails($account_id)
    {

        $getAccntDtl = $this->_getSelectList2('table_account_billing_detail as u', " u.* ", '', " u.account_id= '$account_id' order by u.acc_bill_id ");

        $bill_date = $getAccntDtl[0]->bill_due_date;
        $no_of_days = $getAccntDtl[0]->no_of_days;

        // Start : Calculate days
        $date = date('Y-m-d');
        $day_cal = strtotime($bill_date) - strtotime($date);

        // End : Calculate days


        $days_diff = date('Y-m-d', strtotime($bill_date . '-' . $no_of_days . 'days'));

        if (is_array($getAccntDtl) && !empty($getAccntDtl) && $getAccntDtl[0]->bill_paid != 'Y') {
            if ($getAccntDtl[0]->account_hold == 'Y' && $bill_date < $date) {
                $_SESSION['showMsg'] = "The payment is overdue  " . round(-$day_cal / (60 * 60 * 24)) . " days. The account is currently on hold due to non payment. Please get the payment processed for continued services.";
                return '0';
            } else {

                if ($getAccntDtl[0]->bill_paid != 'Y' && ($date >= $days_diff)) {

                    if ($date >= $days_diff && $date < $bill_date) {
//                        $popupmessage = "The Payment Will be due in " . round($day_cal / (60 * 60 * 24)) . " days ";
                        $popupmessage = "The payment is due in next " . round($day_cal / (60 * 60 * 24)) . " days. Please process the payment for continued services .Please ignore if already paid.";

                        return $popupmessage;
                    } else if ($date == $bill_date) {
                        $popupmessage = "The payment is due today. Please process the payment for continued services. Please ignore if already paid.";
                        return $popupmessage;
                    } else if ($date > $bill_date) {
//                        $popupmessage = "Payment was due " . -round($day_cal / (60 * 60 * 24)) . " days ago";
                        $popupmessage = "The payment is overdue  " . round(-$day_cal / (60 * 60 * 24)) . " days. Please process the payment ASAP for continued services else the account might get on hold.";
                        return $popupmessage;
                    } else {
                        return '1';
                    }

                } else {
                    return '1';
                }

            }
        } else {
            return '1';
        }


    }
    // Todo End : 6 Dec 2023 : Get Account Billing details

    //getAccountFeaturesList
    function getAccountFeaturesList($accountId = '', $userTypeId = '')
    {
        if (empty($accountId) || $accountId == '') {
            $accountId = $_SESSION['accountId'];
        }

//        if (isset($userTypeId) && !empty($userTypeId) && (intval($userTypeId) > 0)) {
//            $aRec = $this->_getSelectList2('table_features_list as fm ', 'fm.feature_id', '', 'fm.status="A" and fm.account_id=' . $accountId . ' and fm.user_type_id=' . $userTypeId);
//        } else {
        $aRec = $this->_getSelectList2('table_feature_map as fm ', 'fm.feature_id', '', 'fm.status="A" and fm.account_id=' . $accountId);
//        }

        if (is_array($aRec) && count($aRec) > 0) {
            //$temparr = array_column($aRec,'feature_id');
            foreach ($aRec as $key => $value) {
                $temparr[] = $value->feature_id;
            }
            return $temparr;
        } else {
            return array();
        }
    }

    // Todo Start : Jatin : 4 Sep 2024 : Get designation wise feature
    function getSalDesignationFeaturesList($accountId = '', $salesman_id = '')
    {
        if (empty($accountId) || $accountId == '') {
            $accountId = $_SESSION['accountId'];
        }

        $userTypeId = $this->_getSelectList2('table_salesman as s
        LEFT JOIN table_web_users as wb ON wb.salesman_id = s.salesman_id
        LEFT JOIN table_salesman_hierarchy_relationship as shr ON shr.salesman_id = s.salesman_id ', 'wb.user_type,shr.hierarchy_id,s.account_id', '', 's.account_id=' . $accountId . ' and s.salesman_id=' . $salesman_id);

        $user_type = $userTypeId[0]->user_type;
        $account_id = $userTypeId[0]->account_id;
        $hierarchy_id = $userTypeId[0]->hierarchy_id;

        $userhierTypeId = $this->_getSelectList2('table_user_type', 'id', '', "status = 'A' AND parentType = $user_type AND hierarchy_id = $hierarchy_id");

        if (is_array($userhierTypeId) && count($userhierTypeId) > 0) {
            $aRec = $this->_getSelectList2('table_features_list as fm ', 'fm.feature_id', '', 'fm.status="A" and fm.account_id=' . $accountId . ' and fm.user_type_id=' . $userhierTypeId[0]->id);
        }

        if (is_array($aRec) && count($aRec) > 0) {
            foreach ($aRec as $key => $value) {
                $temparr[] = $value->feature_id;
            }
            return $temparr;
        } else {
            return array();
        }
    }

    // Todo End : Jatin : 4 Sep 2024 : Get designation wise feature

    function getRouteWiseRetailers($salesmanId, $account_id, $featureID = '')
    {
        if (empty($featureID)) {
            $featureList = $this->getAccountFeaturesList($account_id);
        } else {
            $featureList = $featureID;
        }
        $currDate = date('Y-m-d');
        $_objArrayList = new ArrayList();
        $retIdArr = [];

        //first we will fetch the logged in salesman's route retailers
        if (count($featureList) > 0 && in_array(94, $featureList)) {
            $condition = " sd.status='A' AND r.status='A' AND  sd.month='" . date('n') . "' and  sd.year='" . date('Y') . "' and sd.salesman_id='" . $salesmanId . "' and d.assign_day<='" . date('j') . "' AND ret.retailer_id > 0 ORDER BY ret.retailer_id ASC";

            $getRet = $this->_getSelectList("table_route_scheduled as sd 
		left join table_route_schedule_details as d on sd.route_schedule_id=d.route_schedule_id  
		left join table_route as r on r.route_id=d.route_id 
		left join table_route_retailer as ret on ret.route_id = r.route_id", "DISTINCT(ret.retailer_id) as retailer_id", "", " $condition ");

            if (is_array($getRet) && (count($getRet) > 0)) {
                foreach ($getRet as $key => $retData) {
                    $retIdArr[] = $retData->retailer_id;
                }
            }
        } else if (count($featureList) > 0 && in_array(95, $featureList)) {

            $condition = " rsd.assign_day<='" . date('j') . "' and rs.salesman_id = '" . $salesmanId . "' and rs.month='" . date('n') . "' and rs.year='" . date('Y') . "' and rs.status='A' and rsd.status='A' and rsd.retailer_id > 0 ORDER BY rsd.retailer_id ASC";

            $getRet = $this->_getSelectList("table_salesman_retailer_assignment as rs
		left join table_salesman_retailer_assignment_details as rsd on rs.route_schedule_id=rsd.route_schedule_id", "DISTINCT(rsd.retailer_id) as retailer_id", "", " $condition ");

            if (is_array($getRet) && (count($getRet) > 0)) {
                foreach ($getRet as $key => $retData) {
                    $retIdArr[] = $retData->retailer_id;
                }
            }
        } else if (count($featureList) > 0 && in_array(119, $featureList)) {
            $condition = "  rsd.salesman_id = '" . $salesmanId . "' AND rsd.retailer_id > 0  ORDER BY rsd.retailer_id ASC ";

            $getRet = $this->_getSelectList("table_customer_salesman_mapping as rsd", "DISTINCT(rsd.retailer_id) as retailer_id", "", " $condition ");

            if (is_array($getRet) && (count($getRet) > 0)) {
                foreach ($getRet as $key => $retData) {
                    $retIdArr[] = $retData->retailer_id;
                }
            }
        } else {
            $condition = " s.from_date<='" . $currDate . "' and s.to_date>='" . $currDate . "' and s.status='A' and ret.retailer_id > 0 AND r.status='A' and s.salesman_id='" . $salesmanId . "' ORDER BY ret.retailer_id ASC ";

            $getRet = $this->_getSelectList("table_route_schedule as s 
		LEFT JOIN table_route_schedule_by_day as d on s.route_schedule_id=d.route_schedule_id 
		LEFT JOIN table_route as r on FIND_IN_SET(r.route_id,concat(if(d.Sun='',0,d.Sun),',',if(d.Mon='',0,d.Mon),',',if(d.Tue='',0,d.Tue),',',if(d.Wed='',0,d.Wed),',',if(d.Thu='',0,d.Thu),',',if(d.Fri='',0,d.Fri),',',if(d.Sat='',0,d.Sat)))
		LEFT JOIN table_route_retailer as ret on ret.route_id = r.route_id", 'DISTINCT(ret.retailer_id) as retailer_id', '', " $condition ");

            if (is_array($getRet) && (count($getRet) > 0)) {
                foreach ($getRet as $key => $retData) {
                    $retIdArr[] = $retData->retailer_id;
                }
            }
        }

        //now we will fetch the logged in salesman's direct or indirect user's  route retailers

        $getSortOrder = $this->_getSelectList("table_salesman_hierarchy_relationship AS SHR 
        LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
        LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id", "SH.sort_order", "", " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanId ORDER BY SH.sort_order ASC ");
        if (is_array($getSortOrder) && (count($getSortOrder) > 0)) {
            $sortOrder = $getSortOrder[0]->sort_order;
            $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanId), $sortOrder, $account_id);

            if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                if (count($featureList) > 0 && in_array(94, $featureList)) {
                    $condition = " sd.status='A' AND r.status='A' AND  sd.month='" . date('n') . "' and  sd.year='" . date('Y') . "' and sd.salesman_id IN(" . $bottomUsersIds . ") and d.assign_day<='" . date('j') . "' AND ret.retailer_id > 0 ORDER BY ret.retailer_id ASC";

                    $getRet = $this->_getSelectList("table_route_scheduled as sd 
		left join table_route_schedule_details as d on sd.route_schedule_id=d.route_schedule_id  
		left join table_route as r on r.route_id=d.route_id 
		left join table_route_retailer as ret on ret.route_id = r.route_id", "DISTINCT(ret.retailer_id) as retailer_id", "", " $condition ");

                    if (is_array($getRet) && (count($getRet) > 0)) {
                        foreach ($getRet as $key => $retData) {
                            $retIdArr[] = $retData->retailer_id;
                        }
                    }
                } else if (count($featureList) > 0 && in_array(95, $featureList)) {

                    $condition = " rsd.assign_day<='" . date('j') . "' and rs.salesman_id IN(" . $bottomUsersIds . ") and rs.month='" . date('n') . "' and rs.year='" . date('Y') . "' and rs.status='A' and rsd.status='A' and rsd.retailer_id > 0 ORDER BY rsd.retailer_id ASC";

                    $getRet = $this->_getSelectList("table_salesman_retailer_assignment as rs
		left join table_salesman_retailer_assignment_details as rsd on rs.route_schedule_id=rsd.route_schedule_id", "DISTINCT(rsd.retailer_id) as retailer_id", "", " $condition ");

                    if (is_array($getRet) && (count($getRet) > 0)) {
                        foreach ($getRet as $key => $retData) {
                            $retIdArr[] = $retData->retailer_id;
                        }
                    }
                } else if (count($featureList) > 0 && in_array(119, $featureList)) {
                    $condition = "  rsd.salesman_id IN(" . $bottomUsersIds . ") AND rsd.retailer_id > 0  ORDER BY rsd.retailer_id ASC ";

                    $getRet = $this->_getSelectList("table_customer_salesman_mapping as rsd", "DISTINCT(rsd.retailer_id) as retailer_id", "", " $condition ");

                    if (is_array($getRet) && (count($getRet) > 0)) {
                        foreach ($getRet as $key => $retData) {
                            $retIdArr[] = $retData->retailer_id;
                        }
                    }
                } else {
                    $condition = " s.from_date<='" . $currDate . "' and s.to_date>='" . $currDate . "' and s.status='A' and ret.retailer_id > 0 AND r.status='A' and s.salesman_id IN(" . $bottomUsersIds . ") ORDER BY ret.retailer_id ASC ";

                    $getRet = $this->_getSelectList("table_route_schedule as s 
		LEFT JOIN table_route_schedule_by_day as d on s.route_schedule_id=d.route_schedule_id 
		LEFT JOIN table_route as r on FIND_IN_SET(r.route_id,concat(if(d.Sun='',0,d.Sun),',',if(d.Mon='',0,d.Mon),',',if(d.Tue='',0,d.Tue),',',if(d.Wed='',0,d.Wed),',',if(d.Thu='',0,d.Thu),',',if(d.Fri='',0,d.Fri),',',if(d.Sat='',0,d.Sat)))
		LEFT JOIN table_route_retailer as ret on ret.route_id = r.route_id", 'DISTINCT(ret.retailer_id) as retailer_id', '', " $condition ");

                    if (is_array($getRet) && (count($getRet) > 0)) {
                        foreach ($getRet as $key => $retData) {
                            $retIdArr[] = $retData->retailer_id;
                        }
                    }
                }
            }
        }

//        echo '<pre>';
//        print_r($retIdArr);
//        print_r(implode(',',array_unique($retIdArr)));
//        die(' die here');

        if (is_array($retIdArr) && (count($retIdArr) > 0)) {
            return array_unique($retIdArr);
        } else {
            return [];
        }
    }

    //Todo Start: Sagar: 13th March 2023: generate bill no.
    function OldgenerateBillNo($accountId)
    {
        $getConfig = $this->_getSelectList2('table_bill_no_configuration as cfg ', 'cfg.*', '', ' cfg.account_id=' . $accountId);

        $getAccountCode = $this->_getSelectList2('table_account ', 'account_id,account_code', '', ' account_id=' . $accountId);
        if (is_array($getAccountCode) && (count($getAccountCode) > 0)) {
            $accCode = $getAccountCode[0]->account_code;
        }

        //now check the existing sequence
        $getExistingCode = $this->_getSelectList2('table_item_delivery', 'order_id,account_id,bill_no', '', " account_id = $accountId AND bill_no != '' ORDER BY order_id DESC LIMIT 1");

        $bill_no = strtoupper($accCode);
        if (is_array($getConfig) && (count($getConfig) > 0)) {
            $configObj = $getConfig[0];
            $seqLength = strlen($configObj->sequence);
            if (isset($configObj->dynamic_string) && !empty($configObj->dynamic_string)) {
                $bill_no .= '-' . strtoupper($configObj->dynamic_string);
            }

            if (isset($configObj->year_type) && !empty($configObj->year_type)) {
                if (strtolower($configObj->year_type = 'f')) {
                    if (intval(date('m')) < 4) {
                        $bill_no .= '-' . (intval(date('Y')) - 1);
                    } else {
                        $bill_no .= '-' . intval(date('Y'));
                    }
                } else {
                    $bill_no .= '-' . intval(date('Y'));
                }
            }

            if (is_array($getExistingCode) && (count($getExistingCode) > 0)) {

                $lastBillNoArr = explode('-', $getExistingCode[0]->bill_no);
                $lastKey = (count($lastBillNoArr) - 1);
                $lastSeq = intval($lastBillNoArr[$lastKey]);
                $format = "%0" . $seqLength . "s";
                $lastSeq++;
                $newSeq = sprintf($format, $lastSeq);
                $bill_no .= '-' . $newSeq;


//                echo '<pre>';
//                print_r($bill_no);
//                echo '<br>';
//                print_r($getExistingCode);
//                echo '<br>';
//                print_r($lastBillNoArr);
//                echo '<br>';
//                print_r($lastKey);
//                echo '<br>';
//                print_r($lastSeq);
//                echo '<br>';
//                print_r($seqLength);
//                echo '<br>';
//                print_r($format);
//                echo '<br>';
//                print_r($newSeq);
//                die(' die here ');
            } else {
                $format = "%0" . $seqLength . "s";
                $newSeq = sprintf($format, '1');
                $bill_no .= '-' . $newSeq;
            }
        } else {
            //create bill no. only by account code, current year and default sequence i.e - 000
            $bill_no .= '-' . intval(date('Y'));

            if (is_array($getExistingCode) && (count($getExistingCode) > 0)) {
                $lastBillNoArr = explode('-', $getExistingCode[0]->bill_no);
                $lastKey = (count($lastBillNoArr) - 1);
                $lastSeq = intval($lastBillNoArr[$lastKey]);
                $lastSeq++;
                $newSeq = sprintf("%03s", $lastSeq);
                $bill_no .= '-' . $newSeq;
            } else {
                $newSeq = sprintf("%03s", '1');
                $bill_no .= '-' . $newSeq;
            }
        }

        return $bill_no;
    }
    //Todo End: Sagar: 13th March 2023: generate bill no.

    //Todo Start : Jatin : 19th June 2023 generate bill no new function

    function generateBillNo($accountId)
    {
        $getConfig = $this->_getSelectList2('table_bill_no_configuration as cfg ', 'cfg.*', '', ' cfg.account_id=' . $accountId);

        $getAccountCode = $this->_getSelectList2('table_account ', 'account_id,account_code', '', ' account_id=' . $accountId);
        if (is_array($getAccountCode) && (count($getAccountCode) > 0)) {
            $accCode = $getAccountCode[0]->account_code;
        }

        //now check the existing sequence
        $getExistingCode = $this->_getSelectList2('table_item_delivery', 'order_id,account_id,bill_no', '', " account_id = $accountId AND bill_no != '' ORDER BY order_id DESC LIMIT 1");


        $bill_code = strtoupper($accCode);
        $bill_no = array();
        if (isset($bill_code) && !empty($bill_code)) {
            $bill_no[0] = $bill_code;
        }

        if (is_array($getConfig) && (count($getConfig) > 0)) {

            $configObj = $getConfig[0];
            $seqLength = strlen($configObj->sequence);
            if (isset($configObj->dynamic_string) && !empty($configObj->dynamic_string)) {
                $bill_no[1] = strtoupper($configObj->dynamic_string);
            }

            if (isset($configObj->year_type) && !empty($configObj->year_type)) {
                if (strtolower($configObj->year_type = 'f')) {
                    if (intval(date('m')) < 4) {
                        $bill_no[2] = (intval(date('Y')) - 1);
                    } else {
                        $bill_no[3] = intval(date('Y'));
                    }
                } else {
                    $bill_no[4] = intval(date('Y'));
                }
            }

            if (is_array($getExistingCode) && (count($getExistingCode) > 0)) {

                $lastBillNoArr = explode('-', $getExistingCode[0]->bill_no);
                $lastKey = (count($lastBillNoArr) - 1);
                $lastSeq = intval($lastBillNoArr[$lastKey]);
                $format = "%0" . $seqLength . "s";
                $lastSeq++;
                $newSeq = sprintf($format, $lastSeq);
                $bill_no[5] = $newSeq;

            } else {
                $format = "%0" . $seqLength . "s";
                $newSeq = sprintf($format, '1');
                $bill_no[6] = $newSeq;
            }
        } else {
            //create bill no. only by account code, current year and default sequence i.e - 000
            $bill_no[7] = intval(date('Y'));

            if (is_array($getExistingCode) && (count($getExistingCode) > 0)) {
                $lastBillNoArr = explode('-', $getExistingCode[0]->bill_no);
                $lastKey = (count($lastBillNoArr) - 1);
                $lastSeq = intval($lastBillNoArr[$lastKey]);
                $lastSeq++;
                $newSeq = sprintf("%03s", $lastSeq);
                $bill_no[8] = $newSeq;
            } else {
                $newSeq = sprintf("%03s", '1');
                $bill_no[9] = $newSeq;
            }
        }
        if (is_array($bill_no) && count($bill_no) > 0) {
            foreach ($bill_no as $key => $value) {
                $implode[] = $value;
            }
        } else {
            $implode = '';
        }

        $implode = implode('-', $implode);


        return $implode;
    }

    //Todo End : Jatin : 19th June 2023 generate bill no new function


    //Todo start: Sagar: 25th July 2022: get retailer & distributor account features
    function getRetailerAccountFeaturesList($accountId = '')
    {
        if (empty($accountId) || $accountId == '') {
            $accountId = $_SESSION['accountId'];
        }
        $aRec = $this->_getSelectList2('table_retailer_feature_map as fm ', 'fm.feature_id', '', 'fm.status="A" and fm.account_id=' . $accountId);
        if (is_array($aRec) && count($aRec) > 0) {
            foreach ($aRec as $key => $value) {
                $temparr[] = $value->feature_id;
            }
            return $temparr;
        } else {
            return array();
        }
    }

    function getDistributorAccountFeaturesList($accountId = '')
    {
        if (empty($accountId) || $accountId == '') {
            $accountId = $_SESSION['accountId'];
        }
        $aRec = $this->_getSelectList2('table_distributor_feature_map as fm ', 'fm.feature_id', '', 'fm.status="A" and fm.account_id=' . $accountId);
        if (is_array($aRec) && count($aRec) > 0) {
            foreach ($aRec as $key => $value) {
                $temparr[] = $value->feature_id;
            }
            return $temparr;
        } else {
            return array();
        }
    }
    //Todo end: Sagar: 25th July 2022: get retailer & distributor account features
    //Sagar : 13th Sep 2021 : Compress image
    function compressImage($source, $destination)
    {
        $info = getimagesize($source);
        $imgsize = round(filesize($source) / 1024, 0);
        if ($imgsize <= 100) {
            $quality = 20;
        } elseif ($imgsize > 100 && $imgsize <= 500) {
            $quality = 18;
        } elseif ($imgsize > 500 && $imgsize <= 1024) {
            $quality = 16;
        } else {
            $quality = 15;
        }
        if ($info['mime'] == 'image/jpeg')
            $image = imagecreatefromjpeg($source);
        elseif ($info['mime'] == 'image/gif')
            $image = imagecreatefromgif($source);
        elseif ($info['mime'] == 'image/png')
            $image = imagecreatefrompng($source);
        return imagejpeg($image, $destination, $quality);
    }

    function updateProfileAccount($id)
    {
        $data['company_name'] = mysql_escape_string($_POST['name']);
		$data['comp_legal_name'] = mysql_escape_string($_POST['comp_legal_name']);
        $data['comp_gst_number'] = mysql_escape_string($_POST['comp_gst_number']);
        $data['company_address'] = mysql_escape_string($_POST['address']);
        $data['company_phone_no'] = mysql_escape_string($_POST['phone_no']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['zipcode'] = mysql_escape_string($_POST['zipcode']);
        $aid = $this->_dbUpdate($data, 'table_account', " account_id=" . $id);
    }

    function updateProfileManageUser($id)
    {
        $data['operator_name'] = mysql_escape_string($_POST['name']);
        $data['operator_phone_number'] = mysql_escape_string($_POST['phone_no']);
        $aid = $this->_dbUpdate($data, 'table_account_admin', " operator_id=" . $id);
    }

    function ClearURL($string)
    {
        $str = preg_replace("/[,.')(* -]+/", '', $string);
        $str = str_replace('/', '', $str);
        $str = str_replace('*', '', $str);
        //$str = strtolower($str);
        return $str;
    }

    function updateProfileDistributor($id)
    {
        $data['distributor_name'] = mysql_escape_string($_POST['name']);
        $data['distributor_address'] = mysql_escape_string($_POST['address']);
        $data['distributor_phone_no'] = mysql_escape_string($_POST['phone_no']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['zipcode'] = mysql_escape_string($_POST['zipcode']);
        $data['contact_person'] = mysql_escape_string($_POST['contact_person']);
        $data['contact_number'] = mysql_escape_string($_POST['contact_number']);
        $aid = $this->_dbUpdate($data, 'table_distributors', " distributor_id=" . $id);
    }

    function updateProfileRetailer($id)
    {
        $data['retailer_name'] = mysql_escape_string($_POST['name']);
        $data['retailer_address'] = mysql_escape_string($_POST['address']);
        $data['retailer_phone_no'] = mysql_escape_string($_POST['phone_no']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['zipcode'] = mysql_escape_string($_POST['zipcode']);
        $data['contact_person'] = mysql_escape_string($_POST['contact_person']);
        $data['contact_number'] = mysql_escape_string($_POST['contact_number']);
        $aid = $this->_dbUpdate($data, 'table_retailer', " retailer_id=" . $id);
    }

    function updateProfileSalesman($id)
    {
        $data['salesman_name'] = mysql_escape_string($_POST['name']);
        $data['salesman_address'] = mysql_escape_string($_POST['address']);
        $data['salesman_phome_no'] = mysql_escape_string($_POST['phone_no']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['zipcode'] = mysql_escape_string($_POST['zipcode']);
        $aid = $this->_dbUpdate($data, 'table_salesman', " salesman_id=" . $id);
    }

    function updateEmail($id)
    {
        $data['email_id'] = mysql_escape_string($_POST['email']);
        $wid = $this->_dbUpdate($data, 'table_web_users', " web_user_id=" . $id);
    }

    function updatePassword($id)
    {
        $data['password'] = mysql_escape_string(md5($_POST['new_password']));
        $wid = $this->_dbUpdate($data, 'table_web_users', " web_user_id=" . $id);
    }

    function addAccountlogo($id)
    {
        if ($_FILES['image_file']['name'] != '') {
            $date = date('dmY-His');
            $target_folder = 'logo/';
            $newname = rand(1, 9) . $date . basename(str_replace(" ", "", $_FILES['image_file']['name']));
            $upload_image = $target_folder . $newname;
            if (move_uploaded_file($_FILES['image_file']['tmp_name'], $upload_image)) {
                if ($_FILES["image_file"]["type"] == "image/jpeg") {
                    $thumbnail = $target_folder . $newname;
                } elseif ($_FILES["image_file"]["type"] == "image/gif") {
                    $thumbnail = $target_folder . $newname;
                } elseif ($_FILES["image_file"]["type"] == "image/png") {
                    $thumbnail = $target_folder . $newname;
                } elseif ($_FILES["image_file"]["type"] == "image/pjpeg") {
                    $thumbnail = $target_folder . $newname;
                }
                $thumb_name = str_replace($target_folder, "", $thumbnail);
                // Set the thumbnail name
                $actual = $target_folder . $newname; // Set the actual image name
                list($width, $height) = getimagesize($upload_image);
                $newwidth = 150; // This can be a set value or a percentage of original size ($width)
                $newheight = 150; // This can be a set value or a percentage of original size ($height)
                $thumb = imagecreatetruecolor($newwidth, $newheight);
                if ($_FILES["image_file"]["type"] == "image/jpeg") {
                    $source = imagecreatefromjpeg($upload_image);
                } elseif ($_FILES["image_file"]["type"] == "image/gif") {
                    $source = imagecreatefromgif($upload_image);
                } elseif ($_FILES["image_file"]["type"] == "image/png") {
                    $source = imagecreatefrompng($upload_image);
                } elseif ($_FILES["image_file"]["type"] == "image/pjpeg") {
                    $source = imagecreatefromjpeg($upload_image);
                }
                imagecopyresized($thumb, $source, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);
                if ($_FILES["image_file"]["type"] == "image/jpeg") {
                    imagejpeg($thumb, $thumbnail, 100);
                } elseif ($_FILES["image_file"]["type"] == "image/gif") {
                    imagegif($thumb, $thumbnail, 100);
                } elseif ($_FILES["image_file"]["type"] == "image/png") {
                    imagepng($thumb, $thumbnail, 100);
                } elseif ($_FILES["image_file"]["type"] == "image/pjpeg") {
                    imagejpeg($thumb, $thumbnail, 100);
                }
                rename($upload_image, $actual);
                $data['logo'] = $newname;
            }
        }
        $id = $this->_dbUpdate($data, 'table_account', " account_id=" . $id);
    }

    function updateUser($id)
    {
        $data['user_name'] = mysql_escape_string($_POST['email']);
        $data['start_date'] = mysql_escape_string($_POST['startdate']);
        $data['end_date'] = mysql_escape_string($_POST['enddate']);
        if ($_POST['status1'] == 'A')
            $sts = "A";
        else
            $sts = "I";
        $data['status'] = $sts;
        if ($_POST['pass'] != '')
            $data['password'] = $_POST['pass'];
        $cid = $this->_dbUpdate($data, 'user', " user_id=" . $id);
    }

    function addLogin()
    {
        if ($_POST['comp_acc_id'] != '') {
            $data['account_id'] = mysql_escape_string($_POST['comp_acc_id']);
        } else {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
        }
        $data['username'] = mysql_escape_string($_POST['username']);
        $data['password'] = mysql_escape_string(md5($_POST['password_confirmation']));
//        $data['email_id'] = ''mysql_escape_string($_POST['email'])'';
        $data['stockist_id'] = mysql_escape_string($_POST['stockist_id']);
        $data['distributor_id'] = mysql_escape_string($_POST['dis_id']);
        $data['retailer_id'] = mysql_escape_string($_POST['ret_id']);
        $data['salesman_id'] = mysql_escape_string($_POST['sal_id']);
        $data['operator_id'] = mysql_escape_string($_POST['ope_id']);
        $data['user_type'] = mysql_escape_string($_POST['user_type']);
        $data['start_date'] = mysql_escape_string($_POST['start_date']);
        // $data['end_date']=mysql_escape_string($_POST['end_date']); //commented by sachin as per dhavika's request
        if ($_POST['user_type'] == '1') {
            $data['status'] = mysql_escape_string($_POST['comp_status']);
        } else {
            $data['status'] = 'A';
        }
        $web_id = $this->_dbInsert($data, 'table_web_users');
        /* start add in table table_retailer_app_user*/
        if ($web_id != '' && $_POST['ret_id'] != '') {
            if ($_POST['comp_acc_id'] != '') {
                $data2['account_id'] = mysql_escape_string($_POST['comp_acc_id']);
            } else {
                $data2['account_id'] = mysql_escape_string($_POST['account_id']);
            }
            $data2['username'] = mysql_escape_string($_POST['username']);
            $data2['password'] = mysql_escape_string($_POST['password_confirmation']);
            $data2['retailer_id'] = mysql_escape_string($_POST['ret_id']);
            $data2['status'] = 'A';
            $ret_id = $this->_dbInsert($data2, 'table_retailer_app_user');
        }
        /* end add in table table_retailer_app_user*/
        return $web_id;
    }

    function UpdateLogin($id)
    {
        /*echo "<pre>";
		print_r($_POST);exit;*/
        $data['username'] = mysql_escape_string($_POST['username']);
        $data['email_id'] = mysql_escape_string($_POST['email']);
        if ($_POST['password_confirmation'] != '') {
            $data['password'] = mysql_escape_string(md5($_POST['password_confirmation']));
        }
        if ($_POST['user_type'] == '1') {
            $data['status'] = mysql_escape_string($_POST['comp_status']);
            $data['start_date'] = mysql_escape_string($_POST['start_date']);
            $data['end_date'] = mysql_escape_string($_POST['end_date']);
        }
        $cid = $this->_dbUpdate2($data, 'table_web_users', " web_user_id=" . $id);
        /* start update in table table_retailer_app_user*/
        if ($cid = '') {
            $data2['username'] = mysql_escape_string($_POST['username']);
            $data2['password'] = mysql_escape_string($_POST['password_confirmation']);
            //$data2['retailer_id']=mysql_escape_string($_POST['ret_id']);
            $data2['status'] = 'A';
            $ret_id = $this->_dbUpdate2($data2, 'table_retailer_app_user');
        }
        /* end update in table table_retailer_app_user*/
    }

    function updateStockistMap($id)
    {
        $data['lat'] = mysql_escape_string($_POST['latitude']);
        $data['lng'] = mysql_escape_string($_POST['longitude']);
        $data['lat_lng_capcure_date'] = mysql_escape_string(date('Y-m-d'));
        $cid = $this->_dbUpdate($data, 'table_stockist', " stockist_id=" . $id);
    }

    function updateDistributorsMap($id)
    {
        $data['lat'] = mysql_escape_string($_POST['latitude']);
        $data['lng'] = mysql_escape_string($_POST['longitude']);
        $data['lat_lng_capcure_date'] = mysql_escape_string(date('Y-m-d'));
        $cid = $this->_dbUpdate($data, 'table_distributors', " distributor_id=" . $id);
    }

    function updateRetailerMap($id)
    {
        $data['lat'] = mysql_escape_string($_POST['latitude']);
        $data['lng'] = mysql_escape_string($_POST['longitude']);
        $cid = $this->_dbUpdate($data, 'table_retailer', " retailer_id=" . $id);
    }


    // This is old code
    // function addCategory()
    // {
    //     $data['category_name'] = mysql_escape_string(trim($_POST['category_name']));
    //     $data['category_code'] = mysql_escape_string(trim($_POST['category_code']));
    //     $data['account_id'] = mysql_escape_string($_POST['account_id']);
    //     $data['parent_id'] = mysql_escape_string($_POST['parent_id']);
    //     $data['type'] = "I";
    //     $data['last_update_date'] = date('Y-m-d');
    //     $data['last_update_status'] = 'New';
    //     $data['status'] = 'A';
    //     $id = $this->_dbInsert($data, 'table_category');
    //     return $id;
    // }

    //This is new code of rohit

    function addCategory()
    {
        $data['category_name'] = trim($_POST['category_name']);
        $data['category_code'] = trim($_POST['category_code']);
        $data['account_id'] = $_POST['account_id'];
        $data['parent_id'] = $_POST['parent_id'];
        $data['type'] = "I";
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_category');
        if(empty($data['category_code']))
        {
            $update_data=array('category_code'=>$id);
            $this->_dbUpdate($update_data, 'table_category', " category_id=" . $id);

        }
        return $id;
    }

    //Rohit Code end

    //This is old code
    // function updateCategory($id)
    // {
    //     $data['category_name'] = mysql_escape_string(trim($_POST['category_name']));
    //     $data['category_code'] = mysql_escape_string(trim($_POST['category_code']));
    //     $data['parent_id'] = mysql_escape_string($_POST['parent_id']);
    //     $data['type'] = "I";
    //     $data['last_update_date'] = date('Y-m-d');
    //     $data['last_update_status'] = 'Update';
    //     $data['status'] = 'A';
    //     $id = $this->_dbUpdate($data, 'table_category', " category_id=" . $id);
    //     return $id;
    // }

    //This is new code

    function updateCategory($id)
    {
        $data['category_name'] = mysql_escape_string(trim($_POST['category_name']));
        $data['category_code'] = mysql_escape_string(trim($_POST['category_code']));
        $data['parent_id'] = mysql_escape_string($_POST['parent_id']);
        $data['type'] = "I";
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_category', " category_id=" . $id);

        if(empty($data['category_code']))
        {
            $update_data=array('category_code'=>$id);
            $this->_dbUpdate($update_data, 'table_category', " category_id=" . $id);

        }

        return $id;
    }

    function addAttType()
    {
        $data['tag_type'] = mysql_escape_string(trim($_POST['tag_type']));
        $data['tag_description'] = mysql_escape_string(trim($_POST['tag_description']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_tags');
        return $id;
    }


    function addCallType()
    {
        $data['call_type'] = mysql_escape_string(trim($_POST['call_type']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated_on'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_master_call');
        return $id;
    }

    function updateCallType($id)
    {
        $data['call_type'] = mysql_escape_string(trim($_POST['call_type']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated_on'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_master_call', " master_call_id=" . $id);
        return $id;
    }

    function addTag()
    {
        $data['tag_type'] = mysql_escape_string($_POST['tag_type']);
        $data['tag_description'] = mysql_escape_string($_POST['tag_description']);
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_tags');
        return $id;
    }

    function updateTag($id)
    {
        $data['tag_type'] = mysql_escape_string(trim($_POST['tag_type']));
        $data['tag_description'] = mysql_escape_string(trim($_POST['tag_description']));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_tags', " tag_id=" . $id);
        return $id;
    }

    function addColor()
    {
        $data['color_code'] = mysql_escape_string(trim($_POST['color_name']));
        $data['color_desc'] = mysql_escape_string(trim($_POST['color_desc']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_color');
        return $id;
    }

    function updateColor($id)
    {
        $data['color_code'] = mysql_escape_string(trim($_POST['color_name']));
        $data['color_desc'] = mysql_escape_string(trim($_POST['color_desc']));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_color', " color_id=" . $id);
        return $id;
    }

    function addRelationship()
    {
        $data['relationship_code'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['relationship_code'])));
        //  $data['relationship_desc'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['relationship_desc'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_relationship');
        return $id;
    }

    function updateRelationship($id)
    {
        $data['relationship_code'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['relationship_code'])));
        //$data['relationship_desc'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['relationship_desc'])));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_relationship', " relationship_id=" . $id);
        return $id;
    }

    function addRoute()
    {
        $remove = array("\n", "\r\n", "\r", "\t", "'");
        $data = [];
        $data['state_id'] = implode(',', $_POST['state']);
        $data['city_id'] = implode(',', $_POST['city']);
        $data['locations'] = implode(',', $_POST['market']);
        // $data['classification_id']=implode(',', $_POST['classification']); // AJAY@2016-06-17
//        $data['route_name'] = mysql_escape_string(trim($_POST['route_name']));
        $data['route_name'] = mysqli_real_escape_string($this->db_connect_id, ucwords(preg_replace('/[^a-zA-Z0-9-_&,.|( )]/', '', str_replace($remove, '', trim($_POST['route_name'])))));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $data['new'] = '0';
        //Todo Start : Sudhanshu 20 may 2024 : add upadted and created date
        $data['created_at'] = date('Y-m-d H:i:s');
        $data['updated_at'] = date('Y-m-d H:i:s');
        //Todo End : Sudhanshu 20 may 2024 : add upadted and created date

        $rou_id = $this->_dbInsert($data, 'table_route');
        // Check the user Type
        $userType = ArrayList::checkUserType();
        if (isset($userType) && $userType > 1) {
            // Relationship with user
            $data2['account_id'] = mysql_escape_string($_POST['account_id']);
            $data2['route_id'] = $rou_id;
            $data2['user_type'] = $_SESSION['userLoginType'];
            $data2['web_user_id'] = $_SESSION['WEBUSERID'];
            $data2['salesman_id'] = $_SESSION['salesmanId'];
            $rou_rel_id = $this->_dbInsert($data2, 'table_user_relationships');
        }
        return $rou_id;
    }

    function updateRoute($id)
    {
        $remove = array("\n", "\r\n", "\r", "\t", "'");
        $data = [];
        $data['state_id'] = implode(',', $_POST['state']);
        $data['city_id'] = implode(',', $_POST['city']);
        $data['locations'] = implode(',', $_POST['market']);
//        $data['route_name'] = mysql_escape_string(trim($_POST['route_name']));
        //Todo Start : sudhasnhu 16 may 2024 add updated date in db
        $data['updated_at'] = date('Y-m-d H:i:s');
        //Todo End : sudhasnhu 16 may 2024 add updated date in db
        $data['route_name'] = mysqli_real_escape_string($this->db_connect_id, ucwords(preg_replace('/[^a-zA-Z0-9-_&,.|( )]/', '', str_replace($remove, '', trim($_POST['route_name'])))));
        $this->_dbUpdate($data, 'table_route', " route_id=" . $id);
        return $id;
    }

    function addRouteRetailer($id)
    {
        $count = 1;
        for ($i = 0; $i < count($_POST['retailer_id']); $i++) {
            if ($_POST['retailer_id'][$i] != '') {
                $data['account_id'] = mysql_escape_string($_POST['account_id']);
                $data['route_id'] = mysql_escape_string($id);
                $data['retailer_id'] = mysql_escape_string($_POST['retailer_id'][$i]);
                $data['sort_order'] = mysql_escape_string($count);
                $rut_ret_id = $this->_dbInsert($data, 'table_route_retailer');
            }
            $count++;
        }
    }

    function addRouteSchedule()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['salesman_id'] = mysql_escape_string($_POST['salesman_id']);
        $data['from_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data['to_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
        $data['status'] = 'A';
        //echo "<pre>"; print_r($data); exit;
        $rou_sch_id = $this->_dbInsert($data, 'table_route_schedule');
        return $rou_sch_id;
    }

    function updateRouteSchedule($id)
    {
        $data['salesman_id'] = mysql_escape_string($_POST['salesman_id']);
        $data['from_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data['to_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
        $rut_sch_id = $this->_dbUpdate($data, 'table_route_schedule', " route_schedule_id=" . $id);
        return $rut_sch_id;
    }

    function addRouteScheduleDay($id)
    {
        /* Updated by : Yogesh on 2016-08-19
			** Desc : to store weekday wise route*/
        $routeData = $_POST['town'];
        foreach ($routeData as $key => $value) {
            $routeByDay = array();
            $routeId = '';
            $getRouteID = $this->_getSelectList('table_route', "route_id", '', "status='A' AND route_name = '" . $value . "' ");
            $routeId = $getRouteID[0]->route_id;
            $routeByDay = $_POST['daynumber' . $key];
            foreach ($routeByDay as $DayKey => $DayValue) {
                $data['account_id'] = mysql_escape_string($_POST['account_id']);
                $data['route_schedule_id'] = mysql_escape_string($id);
                $data['status'] = 'A';
                $data[$DayValue] = $routeId;
            }
            $rut_day_id = $this->_dbInsert($data, 'table_route_schedule_by_day');
            unset($data);
        }
        /*$mon=count($_POST['mon_route_id']);
		$tus=count($_POST['tus_route_id']);
		$wed=count($_POST['wed_route_id']);
		$thu=count($_POST['thu_route_id']);
		$fri=count($_POST['fri_route_id']);
		$sat=count($_POST['sat_route_id']);
		$sun=count($_POST['sun_route_id']);
		$val = max($mon, $tus, $wed, $thu, $fri, $sat, $sun);
		//$val_num=strlen($val);
		for($i=0;$i<$val;$i++){
			$data['account_id']=mysql_escape_string($_POST['account_id']);
			$data['route_schedule_id']=mysql_escape_string($id);
			$data['Sun']=mysql_escape_string($_POST['sun_route_id'][$i]);
			$data['Mon']=mysql_escape_string($_POST['mon_route_id'][$i]);
			$data['Tue']=mysql_escape_string($_POST['tus_route_id'][$i]);
			$data['Wed']=mysql_escape_string($_POST['wed_route_id'][$i]);
			$data['Thu']=mysql_escape_string($_POST['thu_route_id'][$i]);
			$data['Fri']=mysql_escape_string($_POST['fri_route_id'][$i]);
			$data['Sat']=mysql_escape_string($_POST['sat_route_id'][$i]);
			$data['status']= 'A';
			$rut_day_id=$this->_dbInsert($data,'table_route_schedule_by_day');
		}*/
    }

    function addMonRouteSchedule()
    {
        for ($i = 0; $i < count($_POST['mon_route_id']); $i++) {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['route_schedule_id'] = mysql_escape_string($_POST['route_schedule_id']);
            $data['Mon'] = mysql_escape_string($_POST['mon_route_id'][$i]);
            $data['status'] = 'A';
            $rou_sch_id = $this->_dbInsert($data, 'table_route_schedule_by_day');
        }
    }

    function addTueRouteSchedule()
    {
        for ($i = 0; $i < count($_POST['tue_route_id']); $i++) {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['route_schedule_id'] = mysql_escape_string($_POST['route_schedule_id']);
            $data['Tue'] = mysql_escape_string($_POST['tue_route_id'][$i]);
            $data['status'] = 'A';
            $rou_sch_id = $this->_dbInsert($data, 'table_route_schedule_by_day');
        }
    }

    function addWedRouteSchedule()
    {
        for ($i = 0; $i < count($_POST['wed_route_id']); $i++) {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['route_schedule_id'] = mysql_escape_string($_POST['route_schedule_id']);
            $data['Wed'] = mysql_escape_string($_POST['wed_route_id'][$i]);
            $data['status'] = 'A';
            $rou_sch_id = $this->_dbInsert($data, 'table_route_schedule_by_day');
        }
    }

    function addThuRouteSchedule()
    {
        for ($i = 0; $i < count($_POST['thu_route_id']); $i++) {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['route_schedule_id'] = mysql_escape_string($_POST['route_schedule_id']);
            $data['Thu'] = mysql_escape_string($_POST['thu_route_id'][$i]);
            $data['status'] = 'A';
            $rou_sch_id = $this->_dbInsert($data, 'table_route_schedule_by_day');
        }
    }

    function addFriRouteSchedule()
    {
        for ($i = 0; $i < count($_POST['fri_route_id']); $i++) {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['route_schedule_id'] = mysql_escape_string($_POST['route_schedule_id']);
            $data['Fri'] = mysql_escape_string($_POST['fri_route_id'][$i]);
            $data['status'] = 'A';
            $rou_sch_id = $this->_dbInsert($data, 'table_route_schedule_by_day');
        }
    }

    function addSatRouteSchedule()
    {
        for ($i = 0; $i < count($_POST['sat_route_id']); $i++) {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['route_schedule_id'] = mysql_escape_string($_POST['route_schedule_id']);
            $data['Sat'] = mysql_escape_string($_POST['sat_route_id'][$i]);
            $data['status'] = 'A';
            $rou_sch_id = $this->_dbInsert($data, 'table_route_schedule_by_day');
        }
    }

    function addSunRouteSchedule()
    {
        for ($i = 0; $i < count($_POST['sun_route_id']); $i++) {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['route_schedule_id'] = mysql_escape_string($_POST['route_schedule_id']);
            $data['Sun'] = mysql_escape_string($_POST['sun_route_id'][$i]);
            $data['status'] = 'A';
            $rou_sch_id = $this->_dbInsert($data, 'table_route_schedule_by_day');
        }
    }

    function getItemSequenceNo($catid)
    {
        $sequenceNo = 1;
        $condi = " category_id=" . $catid;
        $resultset = $this->_getSelectList('table_item', 'MAX(sequence_order) as sequence_order', '', $condi);
        if (count($resultset) > 0) {
            $sequenceNo = ($resultset[0]->sequence_order + 1);
        }
        return $sequenceNo;
    }

    function addItem()
    {
        $data = [];
        if ($_FILES['item_image']['name'] != '') {
            $date = date('dmY-His');
            $target_folder = 'item_image/';
            $original_image_name = $_FILES['item_image']['name'];
            $image_type = pathinfo($original_image_name, PATHINFO_EXTENSION);
            $newname = rand(1, 9) . $date . basename(str_replace(" ", "", $_FILES['item_image']['name']));
            $upload_image = $target_folder . $newname;
            if ($this->compressImage($_FILES['item_image']['tmp_name'], $upload_image)) {
                $data['original_image_name'] = $original_image_name;
                $data['image_type'] = $image_type;
                $data['item_image'] = $newname;
            }
        }

        if ($_POST['hsn_code'] != '') {
            $resultset = $this->_getSelectList2('table_HSN_code_master', '*', '', ' HSN_Code = "' . $_POST['hsn_code'] . '"');
            if (!empty($resultset)) {
                $hsn_id = $resultset[0]->hsn_id;
            } else {
                $data1['HSN_Code'] = mysql_escape_string(trim($_POST['hsn_code']));
                $data1['created_at'] = date('Y-m-d H:i:s');
                $hsn_id = $this->_dbInsert($data1, 'table_HSN_code_master');
            }

        }

        $data['item_name'] = mysql_escape_string(trim(preg_replace('/\s+/', ' ', $_POST['item_name'])));
        $data['item_size'] = mysql_escape_string(trim($_POST['item_size']));
        /* Added sku name and varient name */
        $data['variant_id'] = mysql_escape_string(trim($_POST['variant_id']));
        $data['sku_id'] = mysql_escape_string(trim($_POST['sku_id']));
        $data['HSN_id'] = mysql_escape_string(trim($hsn_id));
        $data['item_code'] = mysql_escape_string(trim(preg_replace('/\s+/', ' ', $_POST['item_code'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['category_id'] = mysql_escape_string($_POST['category_id']);
        $data['subcategory_id'] = mysql_escape_string($_POST['subcategory_id']);
        $data['brand_id'] = mysql_escape_string($_POST['brand_id']);
        $data['grade_id'] = mysql_escape_string($_POST['grade_id']);
      //		$data['offer_id']=mysql_escape_string($_POST['offer_id']);
        $data['item_erp_code'] = mysql_escape_string(trim($_POST['item_erp_code']));

        $data['item_type'] = mysql_escape_string(trim($_POST['focItem']));

        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['rank_id'] = mysql_escape_string($_POST['item_rank_id']);
        $data['status'] = 'A';
        if ($_POST['account_id'] == 5) {
            $data['sequence_order'] = $this->getItemSequenceNo($_POST['category_id']);
        }
        $itemid = $this->_dbInsert($data, 'table_item');
        $data1 = [];
        $data1['account_id'] = mysql_escape_string($_POST['account_id']);
        $data1['item_id'] = $itemid;
        $data1['item_mrp'] = mysql_escape_string(trim($_POST['item_mrp']));
        $data1['item_dp'] = (isset($_POST['item_dp']) && !empty($_POST['item_dp']) && (intval($_POST['item_dp']) > 0)) ? mysql_escape_string($_POST['item_dp']) : mysql_escape_string($_POST['item_mrp']);
        $data1['last_update_date'] = date('Y-m-d');
        $data1['last_update_status'] = 'New';
        $data1['start_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data1['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
        // $data['rank_id'] = mysql_escape_string($_POST['item_rank_id']);
        $data1['status'] = 'A';
        $data1['dist_price'] = mysql_escape_string(trim($_POST['item_price_dist']));
        $data1['stockist_price'] = mysql_escape_string(trim($_POST['item_stk_dist']));
        $id = $this->_dbInsert($data1, 'table_price');
        if (isset($_POST['tax_rate']) && !empty($_POST['tax_rate'])) {
            $tax_data = array();
            $tax_data['item_id'] = $itemid;
            $tax_data['tax'] = mysql_escape_string($_POST['tax_rate']);
            $this->_dbInsert($tax_data, 'table_item_gst');
        }
        //Todo Start : Sagar : 12th Oct 2022
        /* Description : Add cases into case master and mapp with the item */
        if (isset($_POST['item_case_size']) && !empty($_POST['item_case_size']) && (intval($_POST['item_case_size']) > 0)) {
            $case = [];
            $case['account_id'] = mysql_escape_string($_POST['account_id']);
            $case['case_description'] = mysql_escape_string(trim($_POST['item_code'])) . '-' . mysql_escape_string(trim($_POST['item_case_size']));
            $case['case_size'] = mysql_escape_string(trim($_POST['item_case_size']));
            $case['case_price_ptr'] = (trim($_POST['item_mrp']) * trim($_POST['item_case_size']));
            $case['case_price_mrp'] = (isset($_POST['item_dp']) && !empty($_POST['item_dp']) && (intval($_POST['item_dp']) > 0)) ? ($_POST['item_dp'] * $_POST['item_case_size']) : ($_POST['item_mrp'] * $_POST['item_case_size']);
            $case['case_price_distributor'] = (isset($_POST['item_price_dist']) && !empty($_POST['item_price_dist']) && (intval($_POST['item_price_dist']) > 0)) ? ($_POST['item_price_dist'] * $_POST['item_case_size']) : '';
            $case['case_price_stockist'] = (isset($_POST['item_stk_dist']) && !empty($_POST['item_stk_dist']) && (intval($_POST['item_stk_dist']) > 0)) ? ($_POST['item_stk_dist'] * $_POST['item_case_size']) : '';
            $case['created_date'] = date('Y-m-d H:i:s');
            $case['updated_date'] = date('Y-m-d H:i:s');
            $case['status'] = 'A';
            $caseId = $this->_dbInsert($case, 'table_cases');
            if ($caseId > 0) {
                $data2 = [];
                $data2['item_id'] = $itemid;
                $data2['case_id'] = $caseId;
                $this->_dbInsert($data2, 'table_item_case_relationship');
                // Default inserted a record with attribute ID
                $stock_enabale = 1;
                if ($stock_enabale == 1) {
                    $data3 = [];
                    $batch_no = 'No Batch';
                    $condi = " LOWER(color_code)='" . strtolower($batch_no) . "'";
                    $resultset = $this->_getSelectList('table_color', 'color_id', '', $condi);
                    if (is_array($resultset) && (count($resultset) > 0)) {
                        $color_id = $resultset[0]->color_id;
                    }
                    $data3['account_id'] = mysql_escape_string($_POST['account_id']);
                    $data3['item_id'] = $itemid;
                    $data3['category_id'] = mysql_escape_string($_POST['category_id']);
                    $data3['attribute_value_id'] = mysql_escape_string($caseId);
                    $data3['color_id'] = $color_id;
                    $data3['stock_value'] = 0;
                    $data3['last_updated_date'] = date('Y-m-d');
                    $data3['last_update_datetime'] = date('Y-m-d H:i:s');
                    $data3['status'] = 'A';
                    $this->_dbInsert($data3, 'table_item_ndc_stock');
                }
            }
        }
        //Todo End : Sagar : 12th Oct 2022
        return $id;
    }

    function addSKUChainRelationship($item_id, $chainList)
    {
        //echo "<pre>";
        //print_r($_REQUEST);
        //print_r($_REQUEST['chain_id']);
        //exit;
        $condition = " WHERE item_id = " . $item_id;
        mysql_query('Delete FROM table_item_chain_relationship' . $condition);
        if (isset($item_id) && !empty($item_id) && isset($chainList) && sizeof($chainList) > 0) {
            //$chainIds = implode(',', $chainList);
            //$condition = " item_id = ".$item_id." AND retailer_id NOT IN (".$chainIds.")";
            //$this->delete ('', 'table_item_chain_relationship', '', $condition);
            foreach ($chainList as $value) :
                $data[item_id] = $item_id;
                $data['chain_id'] = $value;
                $this->_dbInsert($data, 'table_item_chain_relationship');
            endforeach;
        }
    }

    function updateItem($id)
    {
        $data = [];
        if ($_FILES['item_image']['name'] != '') {
            $date = date('dmY-His');
            $target_folder = 'item_image/';
            $original_image_name = $_FILES['item_image']['name'];
            $image_type = pathinfo($original_image_name, PATHINFO_EXTENSION);
            $newname = rand(1, 9) . $date . basename(str_replace(" ", "", $_FILES['item_image']['name']));
            $upload_image = $target_folder . $newname;
            if ($this->compressImage($_FILES['item_image']['tmp_name'], $upload_image)) {
                $data['original_image_name'] = $original_image_name;
                $data['image_type'] = $image_type;
                $data['item_image'] = $newname;
            }
        }
        if ($_POST['hsn_code'] != '') {
            $resultset = $this->_getSelectList2('table_HSN_code_master', '*', '', ' HSN_Code = "' . mysql_escape_string(trim($_POST['hsn_code'])) . '"');
            if (!empty($resultset)) {
                $hsn_id = $resultset[0]->hsn_id;
            } else {
                $data1['HSN_Code'] = mysql_escape_string(trim($_POST['hsn_code']));
                $data1['created_at'] = date('Y-m-d H:i:s');
                $hsn_id = $this->_dbInsert($data1, 'table_HSN_code_master');
            }

        }
        $data['item_name'] = mysql_escape_string(trim(preg_replace('/\s+/', ' ', $_POST['item_name'])));
        $data['item_size'] = mysql_escape_string(trim($_POST['item_size']));
        /* Added sku name and varient name */
        $data['variant_id'] = mysql_escape_string(trim($_POST['variant_id']));
        $data['sku_id'] = mysql_escape_string(trim($_POST['sku_id']));
        $data['item_code'] = mysql_escape_string(trim(preg_replace('/\s+/', ' ', $_POST['item_code'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['category_id'] = mysql_escape_string($_POST['category_id']);
        $data['subcategory_id'] = mysql_escape_string($_POST['subcategory_id']);
        $data['brand_id'] = mysql_escape_string($_POST['brand_id']);
        $data['grade_id'] = mysql_escape_string($_POST['grade_id']);
        $data['HSN_id'] = mysql_escape_string($hsn_id);
//		$data['offer_id']	=	mysql_escape_string($_POST['offer_id']);
        $data['item_erp_code'] = mysql_escape_string(trim($_POST['item_erp_code']));

        $data['item_type'] = mysql_escape_string(trim($_POST['focItem']));

        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['rank_id'] = mysql_escape_string($_POST['item_rank_id']);
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_item', " item_id=" . $id);
        // Update item price AJAY@2016-01-13
        $data1 = [];
        $data1['item_mrp'] = mysql_escape_string(trim($_POST['item_mrp']));
        $data1['item_dp'] = (isset($_POST['item_dp']) && !empty($_POST['item_dp']) && (intval($_POST['item_dp']) > 0)) ? mysql_escape_string($_POST['item_dp']) : mysql_escape_string($_POST['item_mrp']);
        $data1['last_update_date'] = date('Y-m-d');
        $data1['last_update_status'] = 'Update';
        //$data1['start_date']		=	date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data1['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
        $data1['status'] = 'A';
        $data1['dist_price'] = mysql_escape_string(trim($_POST['item_price_dist']));
        $data1['stockist_price'] = mysql_escape_string(trim($_POST['item_stk_dist']));
        $this->_dbUpdate($data1, 'table_price', " item_id=" . $id);
        if (isset($_POST['tax_rate']) && !empty($_POST['tax_rate'])) {
            $tax_data = array();
            $tax_data['tax'] = mysql_escape_string($_POST['tax_rate']);
            $taxid = $this->_dbUpdate2($tax_data, 'table_item_gst', " item_id=" . $id);
        }
        //Todo Start : Sagar : 12th Oct 2022
        /* Description : Add cases into case master and mapp with the item */
        if (isset($_POST['item_case_size']) && !empty($_POST['item_case_size']) && (intval($_POST['item_case_size']) > 0) && (intval($_POST['case_ids']) > 0)) {
            $case_id = $_POST['case_ids'];
            $case = [];
//            $case['account_id'] = mysql_escape_string($_POST['account_id']);
            $case['case_description'] = mysql_escape_string(trim($_POST['item_code'])) . '-' . mysql_escape_string(trim($_POST['item_case_size']));
            $case['case_size'] = mysql_escape_string(trim($_POST['item_case_size']));
            $case['case_price_ptr'] = (trim($_POST['item_mrp']) * trim($_POST['item_case_size']));
            $case['case_price_mrp'] = (isset($_POST['item_dp']) && !empty($_POST['item_dp']) && (intval($_POST['item_dp']) > 0)) ? ($_POST['item_dp'] * $_POST['item_case_size']) : ($_POST['item_mrp'] * $_POST['item_case_size']);
            $case['case_price_distributor'] = (isset($_POST['item_price_dist']) && !empty($_POST['item_price_dist']) && (intval($_POST['item_price_dist']) > 0)) ? ($_POST['item_price_dist'] * $_POST['item_case_size']) : '';
            $case['case_price_stockist'] = (isset($_POST['item_stk_dist']) && !empty($_POST['item_stk_dist']) && (intval($_POST['item_stk_dist']) > 0)) ? ($_POST['item_stk_dist'] * $_POST['item_case_size']) : '';
//            $case['created_date'] = date('Y-m-d H:i:s');
            $case['updated_date'] = date('Y-m-d H:i:s');
            $case['status'] = 'A';
            $this->_dbUpdate($case, 'table_cases', " case_id = " . $case_id);
        }
        //Todo End : Sagar : 12th Oct 2022
        // Added sku chain relationship added by AJAY & created on 06 jan 2015
        //$this->addSKUChainRelationship ($id, $_POST['chain_id']);
        // Updated NDC STOCK TABLE with attribute ID
        $stock_enabale = 1;
        if ($stock_enabale == 1) {
            $check = $this->_getSelectList('table_item_ndc_stock', "stock_id", '', ' category_id = ' . mysql_escape_string($_POST['category_id']) . ' AND item_id = ' . mysql_escape_string($id) . ' AND attribute_value_id = ' . mysql_escape_string($case_id));
            if (!is_array($check) && (count($check) <= 0)) {
                $batch_no = 'No Batch';
                $condi = " LOWER(color_code)='" . strtolower($batch_no) . "'";
                $resultset = $this->_getSelectList('table_color', 'color_id', '', $condi);
                if (is_array($resultset) && (count($resultset) > 0)) {
                    $color_id = $resultset[0]->color_id;
                }
                $data3 = [];
                $data3['account_id'] = mysql_escape_string($_POST['account_id']);
                $data3['item_id'] = $id;
                $data3['category_id'] = mysql_escape_string($_POST['category_id']);
                $data3['attribute_value_id'] = mysql_escape_string($case_id);
                $data3['color_id'] = mysql_escape_string($color_id);
                $data3['stock_value'] = 0;
                $data3['last_updated_date'] = date('Y-m-d');
                $data3['last_update_datetime'] = date('Y-m-d H:i:s');
                $data3['status'] = 'A';
                $this->_dbInsert($data3, 'table_item_ndc_stock');
            }
        }
        return $id;
    }

    /* Description : Update item cases.
        Project 	: MED
        By 			: Nizam
        Date 		: 29 May
     */
    function addItemCases($id)
    {
        /* Update caseItem relationship  */
        for ($i = 0; $i < count($_POST['case_id']); $i++) {
            /* $caseval['item_id']=mysql_escape_string($id);
			$caseval['case_id']=mysql_escape_string($_POST['case_ids']);
			echo "<pre>";
			print_r($caseval);
			exit;
		  */
            $itemid = $this->_dbUpdate2($caseval, 'table_item_case_relationship', " item_id=" . $id);
            $id = $this->_dbInsert($data, 'table_item_case_relationship');
            $case['case_description'] = mysql_escape_string($_POST['item_code']) . '-' . mysql_escape_string($_POST['case_id'][$i]);
            $case['case_size'] = mysql_escape_string($_POST['case_id'][$i]);
            $case['account_id'] = mysql_escape_string($_POST['account_id']);
            $case['status'] = 'A';
            $itemid = $this->_dbUpdate($case, 'table_cases', " case_id=" . $_POST['case_ids']);
            // Updated NDC STOCK TABLE with attribute ID
            $stock_enabale = 1;
            if ($stock_enabale == 1) {
                $check = $this->_getSelectList('table_item_ndc_stock', "stock_id", '', ' category_id = ' . mysql_escape_string($_POST['category_id']) . ' AND item_id = ' . mysql_escape_string($_POST['id']) . ' AND attribute_value_id = ' . mysql_escape_string($_POST['case_id'][$i]) . '');
                if (!is_array($check) && $check['0']->stock_id == '') {
                    $data3['account_id'] = mysql_escape_string($_POST['account_id']);
                    $data3['item_id'] = $_POST['id'];
                    $data3['category_id'] = mysql_escape_string($_POST['category_id']);
                    $data3['attribute_value_id'] = mysql_escape_string($_POST['case_id'][$i]);
                    $data3['last_updated_date'] = date('Y-m-d');
                    $data3['last_update_datetime'] = date('Y-m-d h:i:s');
                    $data3['status'] = 'A';
                    $ndc_stk_id = $this->_dbInsert($data3, 'table_item_ndc_stock');
                } else {
                    $data3['account_id'] = mysql_escape_string($_POST['account_id']);
                    $data3['item_id'] = $_POST['id'];
                    $data3['category_id'] = mysql_escape_string($_POST['category_id']);
                    $data3['attribute_value_id'] = mysql_escape_string($_POST['case_id'][$i]);
                    $data3['last_updated_date'] = date('Y-m-d');
                    $data3['last_update_datetime'] = date('Y-m-d h:i:s');
                    $data3['status'] = 'A';
                    $stock_id = $this->_dbUpdate($data3, 'table_item_ndc_stock', " stock_id = '" . $check[0]->stock_id . "'");
                }
            }
        } // End of foreach loop
        // Inactive some items stock
        if (count($_POST['case_id']) > 0) {
            $attribute_value_ids = implode(',', $_POST['case_id']);
            $data4['last_updated_date'] = date('Y-m-d');
            $data4['last_update_datetime'] = date('Y-m-d h:i:s');
            $data4['status'] = 'I';
            $stock_id = $this->_dbUpdate($data4, 'table_item_ndc_stock', ' category_id = ' . mysql_escape_string($_POST['category_id']) . ' AND item_id = ' . mysql_escape_string($_POST['id']) . ' AND attribute_value_id NOT IN (' . $attribute_value_ids . ')');
        } else {
            $data4['last_updated_date'] = date('Y-m-d');
            $data4['last_update_datetime'] = date('Y-m-d h:i:s');
            $data4['status'] = 'I';
            $stock_id = $this->_dbUpdate($data4, 'table_item_ndc_stock', ' category_id = ' . mysql_escape_string($_POST['category_id']) . ' AND item_id = ' . mysql_escape_string($_POST['id']) . '');
        }
    } // End of function

    function addPrice()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['item_id'] = mysql_escape_string($_POST['item_id']);
        $data['item_mrp'] = mysql_escape_string($_POST['item_mrp']);
        $data['item_dp'] = mysql_escape_string($_POST['item_dp']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['start_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_price');
        return $id;
    }

    function updatePrice($id)
    {
        $data['item_mrp'] = mysql_escape_string($_POST['item_mrp']);
        $data['item_dp'] = mysql_escape_string($_POST['item_dp']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['start_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_price', " price_id=" . $id);
        return $id;
    }

    function updatePTRPrice($id)
    {
        $data['item_price'] = mysql_escape_string($_POST['item_price']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['start_date'] = mysql_escape_string($_POST['from']);
        $data['end_date'] = mysql_escape_string($_POST['to']);
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_ptr', " prt_id=" . $id);
        return $id;
    }

    function addPriceDetail()
    {
        for ($i = 0; $i < count($_POST['city_id']); $i++) {
            if ($_POST['city_id'][$i] != '') {
                if (!empty($_POST['price' . $i . ''])) {
                    $data['account_id'] = mysql_escape_string($_POST['account_id']);
                    $data['state_id'] = mysql_escape_string($_POST['state_id']);
                    $data['city_id'] = mysql_escape_string($_POST['city_id'][$i]);
                    $data['price_type'] = mysql_escape_string($_POST['price' . $i . '']);
                    $data['last_update_date'] = date('Y-m-d');
                    $id = $this->_dbInsert($data, 'price_city_applicable');
                }
            }
        }
    }

    function updateDiscount($id)
    {
        $data1['discount_desc'] = mysql_escape_string(trim($_POST['dis_desc']));
        $data['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        //$data['status'] = 'A';
        $dis_id = $this->_dbUpdate($data, 'table_discount', " discount_id=" . $id);
        $id = $this->_dbUpdate2($data1, 'table_discount_detail', " discount_id=" . $id);
        return $id;
    }

    function addDiscount()
    {
        $data['discount'] = mysql_escape_string($_POST['discount']);
        $data['party_type'] = mysql_escape_string($_POST['party_type']);
        $data['account_id'] = $_SESSION['accountId'];
        if ($_POST['dis_mode'] == 1) {
            $data['item_type'] = mysql_escape_string($_POST['item_type']);
        }
        $data['mode'] = mysql_escape_string($_POST['dis_mode']);
        $data['start_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $dis_id = $this->_dbInsert($data, 'table_discount');
        // Check the user Type
        $userType = ArrayList::checkUserType();
        if (isset($userType) && $userType > 1) {
            // Relationship with user
            $data2['account_id'] = mysql_escape_string($_SESSION['accountId']);
            $data2['discount_id'] = $dis_id;
            $data2['user_type'] = $_SESSION['userLoginType'];
            $data2['web_user_id'] = $_SESSION['WEBUSERID'];
            $data2['salesman_id'] = $_SESSION['salesmanId'];
            $rel_id = $this->_dbInsert($data2, 'table_user_relationships');
        }
        return $dis_id;
    }

    //   Todo start jatin 23-Sep-2022
    function addAliasData()
    {

        $store = array('salesman', 'retailer', 'distributor', 'stockist', 'adhoc');
        foreach ($store as $show) {
            $data['column_name'] = $show;
            $data['account_id'] = $_SESSION['accountWise'];
            if ($data['column_name'] == 'salesman') {
                $data['alias_name'] = $_POST['salesman'];
            }
            if ($data['column_name'] == 'retailer') {
                $data['alias_name'] = $_POST['retailer'];
            }
            if ($data['column_name'] == 'distributor') {
                $data['alias_name'] = $_POST['distributor'];
            }
            if ($data['column_name'] == 'stockist') {
                $data['alias_name'] = $_POST['stockist'];
            }
            // Todo Start : sudhanshu 27 may 2024 : add Nomenclature for adhoc
            if ($data['column_name'] == 'adhoc') {
                $data['alias_name'] = $_POST['adhoc'];
            }
            // Todo End : sudhanshu 27 may 2024 : add Nomenclature for adhoc
            $data['created'] = date('y-m-d H:i:s');
            $dis_id = $this->_dbInsert($data, 'alias_data_table');
        }
        return $dis_id;
    }
//   Todo End jatin 23-Sep-2022
// Todo Start jatin 27-sep-2022

    function updateAliasData()
    {
        $auRec = $this->_getSelectList2('alias_data_table', "*", '', " account_id='" . $_SESSION['accountWise'] . "' ");
        $upd = array('salesman', 'retailer', 'distributor', 'stockist', 'adhoc', 'route');
        if (is_array($auRec)) {
            for ($i = 0; $i < count($auRec); $i++) {
                foreach ($auRec as $key => $value) {
                    $sid[] = $value->id;
                }
                $sal = $_POST['salesman'];
                $ret = $_POST['retailer'];
                $dis = $_POST['distributor'];
                $stk = $_POST['stockist'];
                $adhoc = $_POST['adhoc'];

                $route = $_POST['route'];

                foreach ($upd as $show) {
                    $data['column_name'] = $show;
                    $data['account_id'] = $_SESSION['accountWise'];
                    if ($data['column_name'] == 'salesman') {
                        $data['alias_name'] = $sal;
                        $data['last_update'] = date('Y-m-d H:i:s');
                        $id = $this->_dbUpdate2($data, 'alias_data_table', " id=" . $sid[0]);
                    }
                    if ($data['column_name'] == 'retailer') {
                        $data['alias_name'] = $ret;
                        $data['last_update'] = date('Y-m-d H:i:s');
                        $id = $this->_dbUpdate2($data, 'alias_data_table', " id=" . $sid[1]);
                    }
                    if ($data['column_name'] == 'distributor') {
                        $data['alias_name'] = $dis;
                        $data['last_update'] = date('Y-m-d H:i:s');
                        $id = $this->_dbUpdate2($data, 'alias_data_table', " id=" . $sid[2]);
                    }
                    if ($data['column_name'] == 'stockist') {
                        $data['alias_name'] = $stk;
                        $data['last_update'] = date('Y-m-d H:i:s');
                        $id = $this->_dbUpdate2($data, 'alias_data_table', " id=" . $sid[3]);
                    }
                    // Todo Start : sudhanshu 27 may 2024 : add Nomenclature for adhoc
                    if ($data['column_name'] == 'adhoc') {
                        $data['alias_name'] = $adhoc;
                        $data['last_update'] = date('Y-m-d H:i:s');
                        $id = $this->_dbUpdate2($data, 'alias_data_table', " id=" . $sid[4]);
                    }
                    // Todo End : sudhanshu 27 may 2024 : add Nomenclature for adhoc


                     // Todo Start : Domar : 09-01-2025 : add Nomenclature for route
                     if ($data['column_name'] == 'route') {
                        $data['alias_name'] = $route;
                        $data['last_update'] = date('Y-m-d H:i:s');
                        $id = $this->_dbUpdate2($data, 'alias_data_table', " id=" . $sid[5]);
                    }
                    // Todo End : Domar : 09-01-2025 : add Nomenclature for route



                }
                return $id;
            }
        }
        // return $id;
    }

// Todo End jatin 27-sep-2022
    function addIncentive()
    {
        //$duration=mysql_escape_string($_POST['description']);
        //$type=mysql_escape_string($_POST['type']);
        $data['description'] = mysql_escape_string(trim($_POST['description']));
        $data['dur_id'] = mysql_escape_string(trim($_POST['duration']));
        $data['account_id'] = $_SESSION['accountId'];
        $data['start_date'] = date('Y-m-d', strtotime($_POST['from']));
        $data['end_date'] = date('Y-m-d', strtotime($_POST['end_date']));
        $data['target_incentive_type'] = mysql_escape_string(trim($_POST['target_incentive_type']));
        $data['target_for'] = mysql_escape_string(trim($_POST['target_for']));
        $data['type_id'] = mysql_escape_string(trim($_POST['type']));
        $data['qualifiers_type'] = mysql_escape_string(trim($_POST['qualifiers_type']));
        $data['party_type_id'] = mysql_escape_string(trim($_POST['party_type']));
        if ($_POST['secondary_value'] != '') {
            $data['secondary_values'] = mysql_escape_string(trim($_POST['secondary_value']));
        }
        $data['primary_values'] = mysql_escape_string(trim($_POST['value']));
        //$data['incentive_reward_amount']=mysql_escape_string($_POST['reward_amount']);
        // $data['primary_values'] = mysql_escape_string(trim($_POST['value']));

        if(empty($data['primary_values'])){
            $data['primary_values'] = mysql_escape_string(trim($_POST['t_value']));
        }


        $data['incentive_reward_type'] = mysql_escape_string(trim($_POST['reward']));
        $data['incentive_reward_amount'] = mysql_escape_string(trim($_POST['reward_amount']));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';

        $data['target_for_qty_amt'] = mysql_escape_string(trim($_POST['targetfor']));
        $data['target_critiria'] = mysql_escape_string(trim($_POST['targetcriteria']));

        // print_r($data);die;


        $incen_id = $this->_dbInsert($data, 'table_target_incentive');
        // Check the user Type
        $userType = ArrayList::checkUserType();
        if (isset($userType) && $userType > 1) {
            // Relationship with user
            $data2['account_id'] = mysql_escape_string($_SESSION['accountId']);
            $data2['target_incentive_id'] = $incen_id;
            $data2['user_type'] = $_SESSION['userLoginType'];
            $data2['web_user_id'] = $_SESSION['WEBUSERID'];
            $data2['salesman_id'] = $_SESSION['salesmanId'];
            $rou_rel_id = $this->_dbInsert($data2, 'table_user_relationships');
        }
        return $incen_id;
    }

    function addIncentiveSlab($incen_id)
    {
        for ($i = 0; $i < count($_POST['percentage_of_criteria']); $i++) {
            $data['account_id'] = $_SESSION['accountId'];
            $data['target_incentive_id'] = $incen_id;
            $data['slab_description'] = mysql_escape_string($_POST['slab_description'][$i]);
            $data['percentage_of_criteria'] = mysql_escape_string($_POST['percentage_of_criteria'][$i]);
            $data['percentage_of_reward_amount'] = mysql_escape_string($_POST['percentage_of_reward_amount'][$i]);
            $data['added_date'] = date('Y-m-d');
            $data['status'] = 'A';
            $SlabChk = $this->_getSelectList2('table_target_incentive_slab', "slab_id", '', " target_incentive_id='" . $incen_id . "' and percentage_of_criteria='" . $_POST['percentage_of_criteria'][$i] . "'");
            if (!is_array($SlabChk)) {
                $sb_id = $this->_dbInsert($data, 'table_target_incentive_slab');
            }
        }
    }

    function updateIncentive($id)
    {
        $data['description'] = mysql_escape_string(trim($_POST['description']));
        $data['end_date'] = date('Y-m-d', strtotime($_POST['end_date']));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        if ($_POST['secondary_value'] != '') {
            $data['secondary_values'] = mysql_escape_string(trim($_POST['secondary_value']));
        }
        // $data['primary_values'] = mysql_escape_string(trim($_POST['primary_values']));

        $data['primary_values'] = mysql_escape_string(trim($_POST['value']));
//        $data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
//        if(isset($_POST['target_for']) && !empty($_POST['target_for'])) {
//            $data['target_for'] = mysql_escape_string($_POST['target_for']);
//        }
//        else{
//            $data['target_for'] = '';
//        }
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_target_incentive', " target_incentive_id=" . $id);

//        $status = 'A';
//        $condi = " target_incentive_id='" . $id . "' AND '" . date('Y-m-d') . "' between from_date and to_date";
//        $auRec = $this->_getSelectList2('table_target_incentive_duration', "duration_id", '', $condi);
//        $durID = $auRec[0]->duration_id;
//        //$condiDur = " target_incentive_id='".$id."' AND duration_id>'".$durID. '"';
//        $condiDur = ' target_incentive_id="' . $id . '" AND duration_id>="' . $durID . '"';
//        $auDuration = $this->_getSelectList2('table_target_incentive_duration', "duration_id", '', $condiDur);
//        foreach ($auDuration as $key => $value) {
//            $durId = $this->_dbUpdate2(array("status" => $status), 'table_target_incentive_duration', " duration_id='" . $value->duration_id . "'");
//            $salId = $this->_dbUpdate2(array("status" => $status), 'table_target_incentive_salesman', " duration_id='" . $value->duration_id . "'");
//        }
//        $incentiveId = $this->_dbUpdate(array("status" => $status, "last_update_status" => 'Update', "last_update_date" => date('Y-m-d')), 'table_target_incentive', " target_incentive_id='" . $id . "'");
//        $new_id = $this->_dbUpdate($data, 'table_target_incentive', " target_incentive_id=" . $id);
        return $id;
    }

    function updateIncentiveDuration($id)
    {
        $getDateRec = $this->_getSelectList('table_target_incentive', "start_date", '', " target_incentive_id='" . $id . "'");
        if (date('Y-m-d') < $getDateRec[0]->start_date) {
            $condi = " target_incentive_id='" . $id . "'";
        } else {
            $condi = " target_incentive_id='" . $id . "' AND '" . date('Y-m-d') . "' between from_date and to_date";
        }

        $auRec = $this->_getSelectList2('table_target_incentive_duration', "duration_id", '', $condi);
        $durID = $auRec[0]->duration_id;
        //$condiDur = " target_incentive_id='".$id."' AND duration_id>'".$durID. '"';
        $condiDur = " target_incentive_id='" . $id . "' AND duration_id>='" . $durID . "'";
        $auDuration = $this->_getSelectList2('table_target_incentive_duration', "duration_id", '', $condiDur);
        foreach ($auDuration as $key => $value) {
            $data = [];
            $data['primary_values'] = mysql_escape_string($_POST['primary_values']);
            if ($_POST['secondary_value'] != '') {
                $data['secondary_values'] = mysql_escape_string($_POST['secondary_value']);
            }
//            $data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
            //$data['status']='A';
            $this->_dbUpdate2($data, 'table_target_incentive_duration', " duration_id=" . $value->duration_id);
        }
    }

    function addIncentiveState($incen_id)
    {
        /*echo "<pre>";
		print_r($_POST);exit;*/
        $state_list = mysql_escape_string($_POST['state_list']);
        $state = explode(",", $state_list);
        for ($i = 0; $i < count($state); $i++) {
            if ($state[$i] != '') {
                $data1['target_incentive_id'] = mysql_escape_string($incen_id);
                $auSateRec = $this->_getSelectList2('state', "state_id", '', " LOWER(state_name)='" . strtolower($state[$i]) . "'");
                if (is_array($auSateRec)) {
                    $data1['state_id'] = $auSateRec[0]->state_id;
                    $SateChk = $this->_getSelectList2('table_target_incentive_party', "target_party_id", '', " state_id='" . $auSateRec[0]->state_id . "' and target_incentive_id='" . $incen_id . "'");
                    if (!is_array($SateChk)) {
                        $st_id = $this->_dbInsert($data1, 'table_target_incentive_party');
                    }
                }
            }
        }
    }

    function addIncentiveCity($incen_id)
    {
        $city_list = mysql_escape_string($_POST['city_list']);
        $city = explode(",", $city_list);
        for ($i = 0; $i < count($city); $i++) {
            if ($city[$i] != '') {
                $data2['target_incentive_id'] = mysql_escape_string($incen_id);
                $auCityRec = $this->_getSelectList2('city', "city_id", '', " LOWER(city_name)='" . strtolower($city[$i]) . "'");
                if (is_array($auCityRec)) {
                    $data2['city_id'] = $auCityRec[0]->city_id;
                    $CityChk = $this->_getSelectList2('table_target_incentive_party', "target_party_id", '', " city_id='" . $auCityRec[0]->city_id . "' and target_incentive_id='" . $incen_id . "'");
                    if (!is_array($CityChk)) {
                        $cy_id = $this->_dbInsert($data2, 'table_target_incentive_party');
                    }
                }
            }
        }
    }

    // category check
    function addIncentiveCatCheck()
    {
        $cat_list = mysql_escape_string($_POST['category_list']);
        $cat = explode(",", $cat_list);
        $j = 1;
        for ($i = 0; $i < count($cat); $i++) {
            if ($cat[$i] != '') {
                $auCatRec = $this->_getSelectList('table_category', "category_id", '', " LOWER(category_code)='" . strtolower($cat[$i]) . "'");
                $catid = $auCatRec[0]->category_id;
                if ($catid == '') {
                    $j = 0;
                }
            }
        }
        return $j;
    }

    //item check
    function addIncentiveItemCheck()
    {
        $type = mysql_escape_string($_POST['type']);
        if ($type == 9) {
            $item_list = mysql_escape_string($_POST['focus_item_list']);
        } else {
            $item_list = mysql_escape_string($_POST['item_list']);
        }
        $item = explode(",", $item_list);
        $k = 1;
        for ($i = 0; $i < count($item); $i++) {
            if ($item[$i] != '') {
                $auItemRec = $this->_getSelectList('table_item', "item_id", '', " LOWER(item_code)='" . strtolower($item[$i]) . "'");
                $item_id = $auItemRec[0]->item_id;
                if ($item_id == '') {
                    $k = 0;
                }
            }
        }
        return $k;
    }

    // function addIncentiveCat($incen_id)
    // {
    //     $cat_list = mysql_escape_string($_POST['category_list']);
    //     $cat = explode(",", $cat_list);
    //     $cat = array_filter($cat);
    //     for ($i = 0; $i < count($cat); $i++) {
    //         if ($cat[$i] != '') {
    //             $data['target_incentive_id'] = mysql_escape_string($incen_id);
    //             $auCatRec = $this->_getSelectList('table_category', "category_id", '', " LOWER(category_code)='" . strtolower($cat[$i]) . "'");
    //             if (is_array($auCatRec)) {
    //                 $data['ref_id'] = $auCatRec[0]->category_id;
    //                 $catChk = $this->_getSelectList2('table_target_incentive_type', "", '', " ref_id='" . $auCatRec[0]->category_id . "' and target_incentive_id='" . $incen_id . "'");
    //                 if (!is_array($catChk)) {
    //                     $cat_id = $this->_dbInsert($data, 'table_target_incentive_type');
    //                 }
    //             }
    //         }
    //     }
    //     return $cat_id;
    // }
    function addIncentiveCat($incen_id)
    {
       
        $categoryList = array_filter($_POST['category_list']);
        
        foreach ($categoryList as $category) {
            if (!empty($category)) {
                $data = [
                    'target_incentive_id' => (int)$incen_id // Sanitize the incentive ID
                ];
                
                // Fetch category record from 'table_category' based on category code
                $categoryRecord = $this->_getSelectList('table_category', 'category_id', '', "LOWER(category_code) = '" . strtolower($category) . "'");
                
                if (is_array($categoryRecord) && isset($categoryRecord[0]->category_id)) {
                    $data['ref_id'] = $categoryRecord[0]->category_id;
                    
                    // Check if this category is already linked to the incentive
                    $categoryCheck = $this->_getSelectList2('table_target_incentive_type', '', '', "ref_id = '" . $categoryRecord[0]->category_id . "' AND target_incentive_id = '" . $incen_id . "'");
                    
                    // If no existing record, insert the new category-incentive link
                    if (!is_array($categoryCheck)) {
                        $cat_id = $this->_dbInsert($data, 'table_target_incentive_type');
                    }
                }
            }
        }
        
        // Return the last inserted category ID (optional, based on your requirement)
        return isset($cat_id) ? $cat_id : null;
    }

    function addIncentiveSubCat($incen_id)
    {
        
        $subcategoryList = array_filter($_POST['subcategory_list']);
    
        foreach ($subcategoryList as $subcategory) {
            if (!empty($subcategory)) {
                $data = [
                    'target_incentive_id' => (int)$incen_id // Sanitize the incentive ID
                ];
                
                // Fetch category record from 'table_category' based on category code
                $subcategoryRecord = $this->_getSelectList('table_subcategory', 'subcategory_id', '', "LOWER(subcategory_code) = '" . strtolower($subcategory) . "'");
     
                if (is_array($subcategoryRecord) && isset($subcategoryRecord[0]->subcategory_id)) {
                    $data['ref_id'] = $subcategoryRecord[0]->subcategory_id;
                    
                    // Check if this category is already linked to the incentive
                    $subcategoryCheck = $this->_getSelectList2('table_target_incentive_type', '', '', "ref_id = '" . $subcategoryRecord[0]->subcategory_id . "' AND target_incentive_id = '" . $incen_id . "'");
                    
                    // If no existing record, insert the new category-incentive link
                    if (!is_array($subcategoryCheck)) {
                        $subcat_id = $this->_dbInsert($data, 'table_target_incentive_type');
                    }
                }
            }
        }
        
        // Return the last inserted category ID (optional, based on your requirement)
        return isset($subcat_id) ? $subcat_id : null;
        
    }


    function addIncentiveBrand($incen_id)
    {
        
        $brandList = array_filter($_POST['brand_list']);
    
        // print_r($brandList);die;

        foreach ($brandList as $brand) {
            if (!empty($brand)) {
                $data = [
                    'target_incentive_id' => (int)$incen_id // Sanitize the incentive ID
                ];
                
                // Fetch category record from 'table_category' based on category code
                $brandRecord = $this->_getSelectList('table_brands', 'brand_id', '', "brand_id = '" . strtolower($brand) . "'");
     
                if (is_array($brandRecord) && isset($brandRecord[0]->brand_id)) {
                    $data['ref_id'] = $brandRecord[0]->brand_id;
                    
                    // Check if this category is already linked to the incentive
                    $brandCheck = $this->_getSelectList2('table_target_incentive_type', '', '', "ref_id = '" . $brandRecord[0]->brand_id . "' AND target_incentive_id = '" . $incen_id . "'");
                    
                    // If no existing record, insert the new category-incentive link
                    if (!is_array($brandCheck)) {
                        $brd_id = $this->_dbInsert($data, 'table_target_incentive_type');
                    }
                }
            }
        }
        
        // Return the last inserted category ID (optional, based on your requirement)
        return isset($brd_id) ? $brd_id : null;
        
    }




    function addIncentiveItem($incen_id)
    {
        $type = mysql_escape_string($_POST['type']);
        if ($type == 9) {
            $item_list = mysql_escape_string($_POST['focus_item_list']);
        } else {
            //$item_list = mysql_escape_string($_POST['item_list']);
            $item_list = $_POST['item_list'];
        }
        // $item = explode(",", $item_list); commented 06 oct 2023
        $item = $item_list;
        $item = array_filter($item);
        for ($i = 0; $i < count($item); $i++) {
            if ($item[$i] != '') {
                $data['target_incentive_id'] = mysql_escape_string($incen_id);
                $auItemRec = $this->_getSelectList('table_item', "item_id", '', " LOWER(item_code)='" . strtolower($item[$i]) . "'");
                if (is_array($auItemRec)) {
                    $data['ref_id'] = $auItemRec[0]->item_id;
                    //print_r($auItemRec[0]->item_id);exit;
                    $itemChk = $this->_getSelectList2('table_target_incentive_type', "", '', " ref_id='" . $auItemRec[0]->item_id . "' and target_incentive_id='" . $incen_id . "'");
                    if (!is_array($itemChk)) {
                        $item_id = $this->_dbInsert($data, 'table_target_incentive_type');
                    }
                }
            }
        }
        //return $item_id;
    }

    function addIncentiveDuration($incen_id)
    {
        $duration = mysql_escape_string($_POST['duration']);
        $start_date = date('Y-m-d', strtotime($_POST['from']));
        $end_date = date('Y-m-d', strtotime($_POST['end_date']));
//        $durationNumber = 0;
        $durationNumber = 1;
        $duration_dates = $this->_getDuration($duration, $start_date, $end_date);
        foreach ($duration_dates as $value) {
            $duration_start_date = $value[0];
            $duration_end_date = $value[1];
            $enddate = strtotime('-1 days', strtotime($duration_end_date));
            $enddate = date('Y-m-d', $enddate);
            $data['target_incentive_id'] = mysql_escape_string($incen_id);
//            $durationNumber = ++$durationNumber;
            $data['duration_number'] = mysql_escape_string($durationNumber);
            $durationNumber++;
            $data['primary_values'] = mysql_escape_string($_POST['value']);
            if ($_POST['secondary_value'] != '') {
                $data['secondary_values'] = mysql_escape_string($_POST['secondary_value']);
            }
            $data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
            $data['from_date'] = mysql_escape_string($duration_start_date);
            $data['to_date'] = mysql_escape_string($enddate);
            $data['status'] = 'A';
            $duration_id = $this->_dbInsert($data, 'table_target_incentive_duration');

            if (is_array($_POST['salesman_id']) && (count($_POST['salesman_id']) > 0)) {
                if ($_POST['salesman_id'][0] == 'all') {
                    $getAccAllSalesman = $this->_getSelectList('table_salesman as s', "s.salesman_id", '', " s.status='A' ORDER BY s.salesman_id ASC");

                    if (is_array($getAccAllSalesman) && (count($getAccAllSalesman))) {
                        foreach ($getAccAllSalesman as $key1 => $accSal) {
                            $data1 = [];
                            $data1['salesman_id'] = $accSal->salesman_id;
                            $data1['added_date'] = date('Y-m-d');
                            $data1['duration_id'] = mysql_escape_string($duration_id);
                            $data1['status'] = 'A';
                            $this->_dbInsert($data1, 'table_target_incentive_salesman');
                        }
                    }
                } else {
                    for ($i = 0; $i < count($_POST['salesman_id']); $i++) {
                        $data1 = [];
                        $data1['salesman_id'] = mysql_escape_string($_POST['salesman_id'][$i]);
                        $data1['added_date'] = date('Y-m-d');
                        $data1['duration_id'] = mysql_escape_string($duration_id);
                        $data1['status'] = 'A';
                        $this->_dbInsert($data1, 'table_target_incentive_salesman');
                    }
                }
            }
        }
        return $duration_id;
    }

    function addIncentiveQualifire($id)
    {
        $auQuaRec = $this->_getSelectList2('table_temp_incentive', "*", '', " guid='" . $_SESSION['Guid'] . "'");
        if (is_array($auQuaRec)) {
            for ($i = 0; $i < count($auQuaRec); $i++) {
                $data['description'] = mysql_escape_string($_POST['description']);
                $data['account_id'] = $_SESSION['accountId'];
                $data['dur_id'] = mysql_escape_string($_POST['duration']);
                $data['start_date'] = date('Y-m-d', strtotime($_POST['from']));
                $data['end_date'] = date('Y-m-d', strtotime($_POST['end_date']));
                $data['target_incentive_type'] = mysql_escape_string($_POST['target_incentive_type']);
                $data['type_id'] = $auQuaRec[$i]->type_id;
                $data['qualifiers_type'] = $auQuaRec[$i]->qualifiers_type;
                $data['party_type_id'] = mysql_escape_string($_POST['party_type']);
                $data['secondary_values'] = $auQuaRec[$i]->secondary_values;
                $data['primary_values'] = $auQuaRec[$i]->primary_values;
                $data['applied_incentive_id'] = $id;
                $data['incentive_reward_amount'] = mysql_escape_string($_POST['reward_amount']);
                $data['last_update_date'] = date('Y-m-d');
                $data['last_update_status'] = 'New';
                $data['status'] = 'A';
                $incen_id = $this->_dbInsert($data, 'table_target_incentive');
                $auQuaTypRec = $this->_getSelectList2('table_temp_incentive_type', "*", '', " guid='" . $_SESSION['Guid'] . "' and id='" . $auQuaRec[$i]->id . "'");
                if (is_array($auQuaTypRec)) {
                    for ($a = 0; $a < count($auQuaTypRec); $a++) {
                        $data1['target_incentive_id'] = $incen_id;
                        $data1['ref_id'] = $auQuaTypRec[$a]->ref_id;
                        $item_id = $this->_dbInsert($data1, 'table_target_incentive_type');
                    }
                }
            }
        }
    }

    function updateIncentiveSalesman($id)
    {
        $postSalesmanIdArr = [];
        if (is_array($_POST['salesman_id']) && (count($_POST['salesman_id']) > 0)) {
            if ($_POST['salesman_id'][0] == 'all') {
                $getAccAllSalesman = $this->_getSelectList('table_salesman as s', "s.salesman_id", '', " s.status='A' ORDER BY s.salesman_id ASC");

                if (is_array($getAccAllSalesman) && (count($getAccAllSalesman))) {
                    foreach ($getAccAllSalesman as $key1 => $accSal) {
                        $postSalesmanIdArr[] = $accSal->salesman_id;
                    }
                }
            } else {
                $postSalesmanIdArr = $_POST['salesman_id'];
            }
        }

        $getDateRec = $this->_getSelectList('table_target_incentive', "start_date", '', " target_incentive_id='" . $id . "'");
        if (date('Y-m-d') < $getDateRec[0]->start_date) {
            $condi = " target_incentive_id='" . $id . "'";
        } else {
            $condi = " target_incentive_id='" . $id . "' AND '" . date('Y-m-d') . "' between from_date and to_date";
        }
        $auRec = $this->_getSelectList2('table_target_incentive_duration', "duration_id", '', $condi);
        if (is_array($auRec) && (count($auRec) > 0)) {
            $durID = $auRec[0]->duration_id;
            $condiDur = " target_incentive_id='" . $id . "' AND duration_id >='" . $durID . "'";
//            $j = 0;
//            $durationList = array();
            $auDuration = $this->_getSelectList2('table_target_incentive_duration', "duration_id", '', $condiDur);
            foreach ($auDuration as $key => $value) {
                //first insert the new ones
                if (is_array($postSalesmanIdArr) && (count($postSalesmanIdArr) > 0)) {
                    foreach ($postSalesmanIdArr as $key1 => $postSalesmanId) {
                        $checkSal = $this->_getSelectList2('table_target_incentive_salesman', "salesman_id,status", '', " duration_id='" . $value->duration_id . "' AND salesman_id = $postSalesmanId ");
                        if (!is_array($checkSal) && (count($checkSal) <= 0)) {
                            $data1 = [];
                            $data1['duration_id'] = $value->duration_id;
                            $data1['salesman_id'] = mysql_escape_string($postSalesmanId);
                            $data1['added_date'] = date('Y-m-d');
                            $data1['status'] = 'A';
                            $this->_dbInsert($data1, 'table_target_incentive_salesman');
                        }
                    }
                }

                //now update the status of existing ones if status is inactive
                $auRecSal = $this->_getSelectList2('table_target_incentive_salesman', "salesman_id,status", '', " duration_id='" . $value->duration_id . "'");

                if (is_array($auRecSal) && (count($auRecSal) > 0)) {
                    foreach ($auRecSal as $key1 => $valuenew) {
                        $sID = $valuenew->salesman_id;
                        if (in_array($sID, $postSalesmanIdArr)) {
                            if (strtolower($valuenew->status) == 'i') {
                                $data = [];
                                $data['added_date'] = date('Y-m-d');
                                $data['removal_date'] = '';
                                $data['status'] = "A";
                                $this->_dbUpdate2($data, 'table_target_incentive_salesman', " duration_id=" . $value->duration_id . " AND salesman_id=" . $sID . "");
                            }
                        }
                    }
                }

                //now inactive the other ones which is not selected
                $postSalesmanIds = implode(',', $postSalesmanIdArr);
                $dataInactive = [];
                $dataInactive['removal_date'] = date('Y-m-d');
                $dataInactive['status'] = "I";
                $this->_dbUpdate2($dataInactive, 'table_target_incentive_salesman', " duration_id=" . $value->duration_id . " AND salesman_id NOT IN(" . $postSalesmanIds . ") AND status = 'A' ");

            }
        }
    }

    function addTempIncentive()
    {
        $data['type_id'] = mysql_escape_string($_POST['type']);
        $data['qualifiers_type'] = mysql_escape_string($_POST['qualifiers_type']);
        if ($_POST['secondary_value'] != '') {
            $data['secondary_values'] = mysql_escape_string($_POST['secondary_value']);
        }
        $data['primary_values'] = mysql_escape_string($_POST['value']);
        $data['guid'] = mysql_escape_string($_POST['guid']);
        $temp_id = $this->_dbInsert($data, 'table_temp_incentive');
        return $temp_id;
    }

    function addTempIncentiveCat($temp_id)
    {
        $cat_list = mysql_escape_string($_POST['category_list']);
        $cat = explode(",", $cat_list);
        for ($i = 0; $i < count($cat); $i++) {
            if ($cat[$i] != '') {
                $data['id'] = mysql_escape_string($temp_id);
                $data['guid'] = mysql_escape_string($_POST['guid']);
                $auCatRec = $this->_getSelectList('table_category', "category_id", '', " LOWER(category_code)='" . strtolower($cat[$i]) . "'");
                if (is_array($auCatRec)) {
                    $data['ref_id'] = $auCatRec[0]->category_id;
                    $catChk = $this->_getSelectList2('table_temp_incentive_type', "", '', " ref_id='" . $auCatRec[0]->category_id . "' and id='" . $temp_id . "'");
                    if (!is_array($catChk)) {
                        $cat_id = $this->_dbInsert($data, 'table_temp_incentive_type');
                    }
                }
            }
        }
        return $cat_id;
    }

    function addTempIncentiveItem($temp_id)
    {
        $type = mysql_escape_string($_POST['type']);
        if ($type == 9) {
            $item_list = mysql_escape_string($_POST['focus_item_list']);
        } else {
            $item_list = mysql_escape_string($_POST['item_list']);
        }
        $item = explode(",", $item_list);
        for ($i = 0; $i < count($item); $i++) {
            if ($item[$i] != '') {
                $data['id'] = mysql_escape_string($temp_id);
                $data['guid'] = mysql_escape_string($_POST['guid']);
                $auItemRec = $this->_getSelectList('table_item', "item_id", '', " LOWER(item_code)='" . strtolower($item[$i]) . "'");
                if (is_array($auItemRec)) {
                    $data['ref_id'] = $auItemRec[0]->item_id;
                    //print_r($auItemRec[0]->item_id);exit;
                    $itemChk = $this->_getSelectList2('table_temp_incentive_type', "", '', " ref_id='" . $auItemRec[0]->item_id . "' and id='" . $temp_id . "'");
                    if (!is_array($itemChk)) {
                        $item_id = $this->_dbInsert($data, 'table_temp_incentive_type');
                    }
                }
            }
        }
        //return $item_id;
    }

    function addQuaIncentive()
    {
        $data['description'] = mysql_escape_string($_POST['description']);
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['target_incentive_type'] = mysql_escape_string($_POST['target_incentive_type']);
        $data['type_id'] = mysql_escape_string($_POST['type']);
        $data['dur_id'] = mysql_escape_string($_POST['dur_id']);
        if ($_POST['secondary_value'] != '') {
            $data['secondary_values'] = mysql_escape_string($_POST['secondary_value']);
        }
        $data['primary_values'] = mysql_escape_string($_POST['primary_values']);
        $data['incentive_reward_amount'] = mysql_escape_string($_POST['incentive_reward_amount']);
        $data['party_type_id'] = mysql_escape_string($_POST['party_type_id']);
        $data['start_date'] = date('Y-m-d');
        $data['end_date'] = mysql_escape_string($_POST['end_date']);
        $data['applied_incentive_id'] = mysql_escape_string($_POST['applied_incentive_id']);
        $data['qualifiers_type'] = mysql_escape_string($_POST['qualifiers_type']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = "New";
        $data['status'] = "A";
        $temp_id = $this->_dbInsert($data, 'table_target_incentive');
        return $temp_id;
    }

    function addQuaIncentiveCat($temp_id)
    {
        $cat_list = mysql_escape_string($_POST['category_list']);
        $cat = explode(",", $cat_list);
        for ($i = 0; $i < count($cat); $i++) {
            if ($cat[$i] != '') {
                $data['target_incentive_id'] = mysql_escape_string($temp_id);
                $auCatRec = $this->_getSelectList('table_category', "category_id", '', " LOWER(category_code)='" . strtolower($cat[$i]) . "'");
                if (is_array($auCatRec)) {
                    $data['ref_id'] = $auCatRec[0]->category_id;
                    $catChk = $this->_getSelectList2('table_target_incentive_type', "", '', " ref_id='" . $auCatRec[0]->category_id . "' and target_incentive_id='" . $temp_id . "'");
                    if (!is_array($catChk)) {
                        $cat_id = $this->_dbInsert($data, 'table_target_incentive_type');
                    }
                }
            }
        }
        return $cat_id;
    }

    function addQuaIncentiveItem($temp_id)
    {
        $type = mysql_escape_string($_POST['type']);
        if ($type == 9) {
            $item_list = mysql_escape_string($_POST['focus_item_list']);
        } else {
            $item_list = mysql_escape_string($_POST['item_list']);
        }
        $item = explode(",", $item_list);
        for ($i = 0; $i < count($item); $i++) {
            if ($item[$i] != '') {
                $data['target_incentive_id'] = mysql_escape_string($temp_id);
                $auItemRec = $this->_getSelectList('table_item', "item_id", '', " LOWER(item_code)='" . strtolower($item[$i]) . "'");
                if (is_array($auItemRec)) {
                    $data['ref_id'] = $auItemRec[0]->item_id;
                    //print_r($auItemRec[0]->item_id);exit;
                    $itemChk = $this->_getSelectList2('table_target_incentive_type', "", '', " ref_id='" . $auItemRec[0]->item_id . "' and target_incentive_id='" . $temp_id . "'");
                    if (!is_array($itemChk)) {
                        $item_id = $this->_dbInsert($data, 'table_target_incentive_type');
                    }
                }
            }
        }
        //return $item_id;
    }

    function addDiscountDetail($dis_id)
    {
        $data['discount_id'] = mysql_escape_string($dis_id);
        $data['discount_desc'] = mysql_escape_string(trim($_POST['dis_desc']));
        $data['discount_type'] = mysql_escape_string($_POST['Dis_type']);
        $data['minimum_amount'] = mysql_escape_string($_POST['min_amt']);
        $data['minimum_quantity'] = mysql_escape_string($_POST['min_qty']);
        $data['discount_amount'] = mysql_escape_string($_POST['dis_amt']);
        $data['discount_percentage'] = mysql_escape_string($_POST['dis_per']);
        $dis_id = $this->_dbInsert($data, 'table_discount_detail');
        return $dis_id;
    }

    function addDiscountCat($dis_id)
    {
        $data['discount_id'] = mysql_escape_string($dis_id);
        $data['category_id'] = mysql_escape_string($_POST['cat']);
        $id = $this->_dbInsert($data, 'table_discount_item');
        return $id;
    }

    function addDiscountItem($dis_id)
    {
        $data['discount_id'] = mysql_escape_string($dis_id);
        $data['item_id'] = mysql_escape_string($_POST['item']);
        $id = $this->_dbInsert($data, 'table_discount_item');
        return $id;
    }

    function addDiscountState($dis_id)
    {
        $state_list = mysql_escape_string($_POST['state_list']);
        $state = explode(",", $state_list);
        for ($i = 0; $i < count($state); $i++) {
            if ($state[$i] != '') {
                $data['discount_id'] = mysql_escape_string($dis_id);
                $auSateRec = $this->_getSelectList2('state', "state_id", '', " LOWER(state_name)='" . strtolower($state[$i]) . "'");
                if (is_array($auSateRec)) {
                    $data['state_id'] = $auSateRec[0]->state_id;
                    $SateChk = $this->_getSelectList2('table_discount_party', "discount_party_id", '', " state_id='" . $auSateRec[0]->state_id . "' and discount_id='" . $dis_id . "'");
                    if (!is_array($SateChk)) {
                        $id = $this->_dbInsert($data, 'table_discount_party');
                    }
                }
            }
        }
    }

    function addDiscountCity($dis_id)
    {
        $city_list = mysql_escape_string($_POST['city_list']);
        $city = explode(",", $city_list);
        for ($i = 0; $i < count($city); $i++) {
            if ($city[$i] != '') {
                $data['discount_id'] = mysql_escape_string($dis_id);
                $auCityRec = $this->_getSelectList2('city', "city_id", '', " LOWER(city_name)='" . strtolower($city[$i]) . "'");
                if (is_array($auCityRec)) {
                    $data['city_id'] = $auCityRec[0]->city_id;
                    $CityChk = $this->_getSelectList2('table_discount_party', "discount_party_id", '', " city_id='" . $auCityRec[0]->city_id . "' and discount_id='" . $dis_id . "'");
                    if (!is_array($CityChk)) {
                        $id = $this->_dbInsert($data, 'table_discount_party');
                    }
                }
            }
        }
    }
// geeta code
    function removeDiscountRetailer($dis_id,$retailerid)
    {
        if($retailerid==0){
            $this->mysql_query("DELETE FROM table_discount_party WHERE discount_id = $dis_id ");
        }else{
        $this->mysql_query("DELETE FROM table_discount_party WHERE discount_id = $dis_id AND retailer_id IN ( $retailerid )");
        }
    }

    

    // end geeta code

    function addDiscountRetailer($dis_id)
    {
        $ret_list = mysql_escape_string($_POST['ret_list']);
        $Ret = explode(",", $ret_list);
        for ($i = 0; $i < count($Ret); $i++) {
            if ($Ret[$i] != '') {
                // geeta code
                if($_POST['isfileupload']==1){
                $Retid = explode("(", $Ret[$i]);
                $remove = array("And");
                $data['discount_id'] = mysql_escape_string($dis_id);
                $auRetRec = $this->_getSelectList('table_retailer', "retailer_id", '', " retailer_id='" . strtolower(str_replace($remove, '&', $Retid[0])) . "'");
                if (is_array($auRetRec)) {
                    $data['retailer_id'] = $auRetRec[0]->retailer_id;
                    $RetChk = $this->_getSelectList2('table_discount_party', "discount_party_id", '', " retailer_id='" . $auRetRec[0]->retailer_id . "' and discount_id='" . $dis_id . "'");
                    if (!is_array($RetChk)) {
                        $id = $this->_dbInsert($data, 'table_discount_party');
                    }
                }
            }else{

                // end geeta code
                $remove = array("And");
                $data['discount_id'] = mysql_escape_string($dis_id);
                $auRetRec = $this->_getSelectList('table_retailer', "retailer_id", '', " LOWER(retailer_name)='" . strtolower(str_replace($remove, '&', $Ret[$i])) . "'");
                if (is_array($auRetRec)) {
                    $data['retailer_id'] = $auRetRec[0]->retailer_id;
                    $RetChk = $this->_getSelectList2('table_discount_party', "discount_party_id", '', " retailer_id='" . $auRetRec[0]->retailer_id . "' and discount_id='" . $dis_id . "'");
                    if (!is_array($RetChk)) {
                        $id = $this->_dbInsert($data, 'table_discount_party');
                    }
                } 
                  // geeta code
            }
              // end geeta code else
        }
        }
    }

    function addDiscountRetailerbk($dis_id)
    {
        $ret_list = mysql_escape_string($_POST['ret_list']);
        $Ret = explode(",", $ret_list);
        for ($i = 0; $i < count($Ret); $i++) {
            if ($Ret[$i] != '') {
              
                $remove = array("And");
                $data['discount_id'] = mysql_escape_string($dis_id);
                $auRetRec = $this->_getSelectList('table_retailers', "retailer_id", '', " LOWER(retailer_name)='" . strtolower(str_replace($remove, '&', $Ret[$i])) . "'");
                if (is_array($auRetRec)) {
                    $data['retailer_id'] = $auRetRec[0]->retailer_id;
                    $RetChk = $this->_getSelectList2('table_discount_party', "discount_party_id", '', " retailer_id='" . $auRetRec[0]->retailer_id . "' and discount_id='" . $dis_id . "'");
                    if (!is_array($RetChk)) {
                        $id = $this->_dbInsert($data, 'table_discount_party');
                    }
                }
            }
        }
    }

    function addDiscountFOC($dis_id)
    {
        $auFocRec = $this->_getSelectList2('table_foc_detail', "max(foc_id) as foc");
        $foc_id = $auFocRec[0]->foc + 1;
        $data['foc_id'] = mysql_escape_string($foc_id);
        $data['free_item_id'] = mysql_escape_string($_POST['free_item']);
        $data['free_qty'] = mysql_escape_string($_POST['disquanity']);
        $id = $this->_dbInsert($data, 'table_foc_detail');
        $data1['foc_id'] = mysql_escape_string($foc_id);
        $id = $this->_dbUpdate2($data1, 'table_discount_detail', " discount_id=" . $dis_id);
    }

    function updateDiscountState($dis_id)
    {
        $state_list = mysql_escape_string($_POST['state_list']);
        $state = explode(",", $state_list);
        for ($i = 0; $i < count($state); $i++) {
            if ($state[$i] != '') {
                $data['discount_id'] = mysql_escape_string($dis_id);
                $auSateRec = $this->_getSelectList2('state', "state_id", '', " LOWER(state_name)='" . strtolower($state[$i]) . "'");
                if (is_array($auSateRec)) {
                    $data['state_id'] = $auSateRec[0]->state_id;
                    $SateChk = $this->_getSelectList2('table_discount_party', "discount_party_id", '', " state_id='" . $auSateRec[0]->state_id . "' and discount_id='" . $dis_id . "'");
                    if (!is_array($SateChk)) {
                        $id = $this->_dbInsert($data, 'table_discount_party');
                    }
                }
            }
        }
    }

    function updateDiscountCity($dis_id)
    {
        $city_list = mysql_escape_string($_POST['city_list']);
        $city = explode(",", $city_list);
        for ($i = 0; $i < count($city); $i++) {
            if ($city[$i] != '') {
                $data['discount_id'] = mysql_escape_string($dis_id);
                $auCityRec = $this->_getSelectList2('city', "city_id", '', " LOWER(city_name)='" . strtolower($city[$i]) . "'");
                if (is_array($auCityRec)) {
                    $data['city_id'] = $auCityRec[0]->city_id;
                    $CityChk = $this->_getSelectList2('table_discount_party', "discount_party_id", '', " city_id='" . $auCityRec[0]->city_id . "' and discount_id='" . $dis_id . "'");
                    if (!is_array($CityChk)) {
                        $id = $this->_dbInsert($data, 'table_discount_party');
                    }
                }
            }
        }
    }

    function updateDiscountRetailerbk($dis_id)
    {
        $ret_list = mysql_escape_string($_POST['ret_list']);
        $Ret = explode(",", $ret_list);

       
        for ($i = 0; $i < count($Ret); $i++) {
            if ($Ret[$i] != '') {

 // geeta code
 if($_POST['isfileupload']==1){
    $Retid = explode("(", $Ret[$i]);
    $remove = array("And");
    $data['discount_id'] = mysql_escape_string($dis_id);
    $auRetRec = $this->_getSelectList('table_retailer', "retailer_id", '', " retailer_id='" . strtolower(str_replace($remove, '&', $Retid[0])) . "'");
    if (is_array($auRetRec)) {
        $data['retailer_id'] = $auRetRec[0]->retailer_id;
        $RetChk = $this->_getSelectList2('table_discount_party', "discount_party_id", '', " retailer_id='" . $auRetRec[0]->retailer_id . "' and discount_id='" . $dis_id . "'");
        if (!is_array($RetChk)) {
            $id = $this->_dbInsert($data, 'table_discount_party');
        }
    }
}else{
     $data['discount_id'] = mysql_escape_string($dis_id);
                $auRetRec = $this->_getSelectList('table_retailer', "retailer_id", '', " LOWER(retailer_name)='" . strtolower($Ret[$i]) . "'");
                if (is_array($auRetRec)) {
                    $data['retailer_id'] = $auRetRec[0]->retailer_id;
                    $RetChk = $this->_getSelectList2('table_discount_party', "discount_party_id", '', " retailer_id='" . $auRetRec[0]->retailer_id . "' and discount_id='" . $dis_id . "'");
                    if (!is_array($RetChk)) {
                        $id = $this->_dbInsert($data, 'table_discount_party');
                    }
                }
            }
            }
        }
    }

    function updateDiscountRetailer($dis_id)
    {
        $ret_list = mysql_escape_string($_POST['ret_list']);
        $Ret = explode(",", $ret_list);
       
        for ($i = 0; $i < count($Ret); $i++) {
            if ($Ret[$i] != '') {
                $data['discount_id'] = mysql_escape_string($dis_id);
                $Rett = explode("(", $Ret[$i]);
                if(isset($Rett[1]) && $Rett[1]!=''){
                    $Rettdata = explode(")", $Rett[1]);
                    $retdata=$Rettdata[0];
                    $auRetRec = $this->_getSelectList('table_retailer', "retailer_id", '', " LOWER(retailer_id)='" . strtolower($retdata) . "'");
               
                }else{
                    $retdata=$Ret[$i];
                    $auRetRec = $this->_getSelectList('table_retailer', "retailer_id", '', " LOWER(retailer_name)='" . strtolower($retdata) . "'");
               
                } 
               
                if (is_array($auRetRec)) {
                    $data['retailer_id'] = $auRetRec[0]->retailer_id;
                    $RetChk = $this->_getSelectList2('table_discount_party', "discount_party_id", '', " retailer_id='" . $auRetRec[0]->retailer_id . "' and discount_id='" . $dis_id . "'");
                    if (!is_array($RetChk)) {
                        $id = $this->_dbInsert($data, 'table_discount_party');
                    }
                }
            }
        }
    }

    function addDiscountCombo($dis_id)
    {
        $item_list = mysql_escape_string($_POST['item_list']);
        $items = explode(",", $item_list);
        for ($i = 0; $i < count($items); $i++) {
            if ($items[$i] != '') {
                $data['discount_id'] = mysql_escape_string($dis_id);
                $auItemRec = $this->_getSelectList('table_item', "item_id", '', " LOWER(item_code)='" . strtolower($items[$i]) . "'");
                if (is_array($auItemRec)) {
                    $data['item_id'] = $auItemRec[0]->item_id;
                    $ItemChk = $this->_getSelectList2('table_discount_item', "discount_item_id", '', " item_id='" . $auItemRec[0]->item_id . "' and discount_id='" . $dis_id . "'");
                    if (!is_array($ItemChk)) {
                        $id = $this->_dbInsert($data, 'table_discount_item');
                    }
                }
            }
        }
    }

    function addDistributor()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['distributor_code'] = mysql_escape_string(trim($_POST['distributor_code']));
        /* Add relationship ids */
//        $data['relationship_id'] = mysql_escape_string($_POST['relationship_id']);
        $data['distributor_type_id'] = mysql_escape_string($_POST['distributor_type_id']);
//        $data['region_id'] = mysql_escape_string($_POST['region_id']);
        $data['distributor_name'] = mysql_escape_string(trim($_POST['distributors_name']));
        $data['distributor_address'] = trim($_POST['distributor_address'][0]);
        $data['distributor_address2'] = mysql_escape_string(trim($_POST['distributor_address2']));
        if (isset($_POST['address1']) && !empty($_POST['address1'])) {
            $locId = $_POST['address1'];
            $locName = '';
            $auLoc = $this->_getSelectList2('table_location', "location_id,location_name", '', " status='A' AND location_id = $locId ");
            if (is_array($auLoc) && (count($auLoc) > 0)) {
                $locName = $auLoc[0]->location_name;
            }
        }
        $data['distributor_location'] = mysql_escape_string(trim($locName));
        $data['gst_no'] = mysql_escape_string(trim($_POST['gst_no']));
        $data['pan_no'] = mysql_escape_string(trim($_POST['pan_no']));
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['location'] = mysql_escape_string(trim($_POST['address1']));
        $data['zipcode'] = trim($_POST['zipcode'][0]);
        $data['distributor_phone_no'] = mysql_escape_string(trim($_POST['distributor_phone_no']));
        $data['sms_number'] = mysql_escape_string(trim($_POST['sms_number']));
        $data['distributor_phone_no2'] = mysql_escape_string(trim($_POST['distributor_phone_no2']));
//        $data['distributor_phone_no3'] = mysql_escape_string($_POST['distributor_phone_no3']);
//        $data['distributor_leadline_no'] = mysql_escape_string($_POST['distributor_leadline_no']);
        $data['distributor_email'] = mysql_escape_string($_POST['distributor_email']);
        $data['distributor_email2'] = mysql_escape_string($_POST['distributor_email2']);
//        $data['distributor_email3'] = mysql_escape_string($_POST['distributor_email3']);
        $data['contact_person'] = mysql_escape_string(trim($_POST['contact_person']));
        $data['contact_person2'] = mysql_escape_string(trim($_POST['contact_person2']));
//        $data['contact_person3'] = mysql_escape_string($_POST['contact_person3']);
        $data['contact_number'] = mysql_escape_string(trim($_POST['contact_number']));
        $data['contact_number2'] = mysql_escape_string(trim($_POST['contact_number2']));
//        $data['contact_number3'] = mysql_escape_string($_POST['contact_number3']);
        if ($_POST['distributor_dob'] != '') {
            $data['distributor_dob'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['distributor_dob'])));
        }
        $data['start_date'] = mysql_escape_string($_POST['start_date']);
        //$data['end_date']	=	mysql_escape_string($_POST['end_date']); //commented by sachin as per dhavika's request
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $data['survey_status'] = 'I';
        /* Add stockist ids */
        $data['stockist_id'] = mysql_escape_string($_POST['stockist_id']);
        $dis_id = $this->_dbInsert($data, 'table_distributors');

        if ($dis_id > 0) {
            if (empty($_POST['distributor_code']) || $_POST['distributor_code'] == '') {
                $dataDistCode = [];
                $dataDistCode['distributor_code'] = $dis_id;
                $this->_dbUpdate($dataDistCode, 'table_distributors', " distributor_id=" . $dis_id);
            }

            //Todo Start : sudhanshu 03 may 2024 : insert multiple stocksit mapping
            $mapping['distributor_id'] = $dis_id;
            $mapping['stockist_id'] = mysql_escape_string($_POST['stockist_id']);
            $mapping['status'] = 'A';
            $mapping['account_id'] = $_SESSION['accountId'];
            $mappingId = $this->_dbInsert($mapping, 'table_stockist_distributor_mapping');
            //Todo Start : sudhanshu 03 may 2024 : insert multiple stocksit mapping

            //Todo Start Sudhanshu 15 may 2024 : add multiple address
            $address = $_POST['distributor_address'];
            $zipcodeArr = $_POST['zipcode'];

//            if (trim($address) != '') {
//                $addr['distributor_id'] = $dis_id;
//                $addr['account_id'] = $_SESSION['accountId'];
//                $addr['address'] = trim($address);
//                $addr['zipcode'] = mysql_escape_string(trim($_POST['zipcode']));
//                $addr['status'] = 'A';
//                $addr['created_at'] = date('Y-m-d H:i:s');
//                $addr['updated_at'] = date('Y-m-d H:i:s');
//                $adrId = $this->_dbInsert($addr, 'table_distributor_address');
//
//                    $datat2['address_id'] = $adrId;
//                    $this->_dbUpdate($datat2, 'table_distributors', " distributor_id=" . $dis_id);
//
//
//            }
            if (!empty($address) && count($address) > 0) {
                $row = 0;
                foreach ($address as $key11 => $adr) {
                    if (trim($adr) != '') {
                        $addr['distributor_id'] = $dis_id;
                        $addr['account_id'] = $_SESSION['accountId'];
                        $addr['address'] = trim($adr);
                        $addr['zipcode'] = $zipcodeArr[$key11];
                        $addr['status'] = 'A';
                        $addr['created_at'] = date('Y-m-d H:i:s');
                        $addr['updated_at'] = date('Y-m-d H:i:s');
                        $adrId = $this->_dbInsert($addr, 'table_distributor_address');
                        if ($row == 0) {
                            $datat2['address_id'] = $adrId;
                            $this->_dbUpdate($datat2, 'table_distributors', " distributor_id=" . $dis_id);
                        }

                    }

                    $row++;

                }

            }
            //Todo End Sudhanshu 15 may 2024 : add multiple address

        }

        if (($dis_id > 0) && is_array($_POST['add_route']) && (count($_POST['add_route']) > 0)) {
            $sortOrder = 1;
            for ($i = 0; $i < count($_POST['add_route']); $i++) {
                $data1 = [];
                $route_id = mysql_escape_string($_POST['add_route'][$i]);
                $data1['account_id'] = $_POST['account_id'];
                $data1['route_id'] = mysql_escape_string($_POST['add_route'][$i]);
                $data1['distributor_id'] = $dis_id;
                $data1['sort_order'] = $sortOrder;
                $this->_dbInsert($data1, 'table_route_retailer');
                $sortOrder++;
                //UPDATE STATE AND CITY OF TABLE ROUTE
                $auRec = $this->_getSelectList('table_route', "*", '', " route_id=" . $route_id);
                $stateArr = array_filter(explode(',', $auRec[0]->state_id));
                $cityArr = array_filter(explode(',', $auRec[0]->city_id));
                $locationArr = array_filter(explode(',', $auRec[0]->locations));
                array_push($stateArr, $_POST['state']);
                array_push($cityArr, $_POST['address2']);
                array_push($locationArr, $_POST['address1']);
                $comma_separated_state = implode(",", array_unique($stateArr));
                $comma_separated_city = implode(",", array_unique($cityArr));
                $comma_separated_location = implode(",", array_unique($locationArr));
                $data2 = [];
                $data2['state_id'] = $comma_separated_state;
                $data2['city_id'] = $comma_separated_city;
                $data2['locations'] = $comma_separated_location;
                $this->_dbUpdate($data2, 'table_route', " route_id=" . $route_id);
            }
        }
        return $dis_id;
    }

    function UpdateDistributor($id)
    {
        $data['distributor_code'] = mysql_escape_string(trim($_POST['distributor_code']));
        /* Update relationship ids */
//        $data['relationship_id'] = mysql_escape_string($_POST['relationship_id']);
        $data['distributor_type_id'] = mysql_escape_string($_POST['distributor_type_id']);
//        $data['region_id'] = mysql_escape_string($_POST['region_id']);
        $data['distributor_name'] = mysql_escape_string($_POST['distributors_name']);
        $data['distributor_address'] = trim($_POST['distributor_address'][0]);
        $data['distributor_address2'] = mysql_escape_string($_POST['distributor_address2']);
        if (isset($_POST['address1']) && !empty($_POST['address1'])) {
            $locId = $_POST['address1'];
            $locName = '';
            $auLoc = $this->_getSelectList2('table_location', "location_id,location_name", '', " status='A' AND location_id = $locId ");
            if (is_array($auLoc) && (count($auLoc) > 0)) {
                $locName = $auLoc[0]->location_name;
            }
        }
        $data['distributor_location'] = mysql_escape_string(trim($locName));
        $data['gst_no'] = mysql_escape_string(trim($_POST['gst_no']));
        $data['pan_no'] = mysql_escape_string(trim($_POST['pan_no']));
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['location'] = mysql_escape_string(trim($_POST['address1']));
        $data['zipcode'] = trim($_POST['zipcode'][0]);
        $data['distributor_phone_no'] = mysql_escape_string(trim($_POST['distributor_phone_no']));
        $data['distributor_phone_no2'] = mysql_escape_string(trim($_POST['distributor_phone_no2']));
//        $data['distributor_phone_no3'] = mysql_escape_string($_POST['distributor_phone_no3']);
//        $data['distributor_leadline_no'] = mysql_escape_string($_POST['distributor_leadline_no']);

        $data['sms_number'] = mysql_escape_string(trim($_POST['sms_number']));
        $data['distributor_email'] = mysql_escape_string(trim($_POST['distributor_email']));
        $data['distributor_email2'] = mysql_escape_string(trim($_POST['distributor_email2']));
//        $data['distributor_email3'] = mysql_escape_string($_POST['distributor_email3']);
        $data['contact_person'] = mysql_escape_string(trim($_POST['contact_person']));
        $data['contact_person2'] = mysql_escape_string(trim($_POST['contact_person2']));
//        $data['contact_person3'] = mysql_escape_string($_POST['contact_person3']);
        $data['contact_number'] = mysql_escape_string(trim($_POST['contact_number']));
        $data['contact_number2'] = mysql_escape_string(trim($_POST['contact_number2']));
//        $data['contact_number3'] = mysql_escape_string($_POST['contact_number3']);
        if ($_POST['distributor_dob'] != '') {
            $data['distributor_dob'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['distributor_dob'])));
        }
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        if ($_POST['status'] == 'I') {
            $data['end_date'] = date('Y-m-d');
        }
        $data['status'] = 'A';
        $data['new'] = '';
        /* Add stockist ids */
        $data['stockist_id'] = mysql_escape_string($_POST['stockist_id']);
        $this->_dbUpdate($data, 'table_distributors', " distributor_id=" . $id);

        if ($id > 0) {
            if (empty($_POST['distributor_code']) || $_POST['distributor_code'] == '') {
                $dataDistCode = [];
                $dataDistCode['distributor_code'] = $id;
                $this->_dbUpdate($dataDistCode, 'table_distributors', " distributor_id=" . $id);
            }
        }

        //Todo Start : sudhanshu 03 may 2024 : stocksit mappng multiple
        $old_stockist = mysql_escape_string($_POST['old_stockist_id']);
        $old_stockist_id = mysql_escape_string($_POST['old_stockist_id']) . ',' . $_POST['stockist_id'];


        $aDisStockCondi = " LOWER(stockist_id) = '". $old_stockist . "' and LOWER(distributor_id)='" .  mysql_escape_string(strtolower($id)) . "' and LOWER(status)='A'";
        $aDisStockRec= $this->_getSelectList('table_distributors_new', '*', '', $aDisStockCondi);
         
        if (!empty($aDisStockRec)) {

            /// Update status D (Delete) of previous stocklist to new table table_distributors_new
            if ($aDisStockRec[0]->stockist_id !== $_POST['stockist_id']) {
                $status ='D';  // Delete
                $stockistId =  mysql_escape_string($_POST['stockist_id']);
                $distributorId =  $id;
                $this->_dbUpdate2(array("status" => $status, "updated_time" => date('h:i:sa'), "updated_date" => date('Y-m-d')), 'table_distributors_new', "stockist_id='" .$aDisStockRec[0]->stockist_id . "' and distributor_id='" . $distributorId . "'");

            
                $newDisStockdata['account_id'] = $this->clean($_SESSION['accountId']);
                $newDisStockdata['stockist_id'] = mysql_escape_string($_POST['stockist_id']);
                $newDisStockdata['distributor_id'] = mysql_escape_string($id);
                $newDisStockdata['created_date'] = date('Y-m-d');
                $newDisStockdata['created_time'] = date('h:i:sa');
                $newDisStockdata['status'] = 'A';
                $dist_new_id = $this->_dbInsert($newDisStockdata, 'table_distributors_new');
            }
        } else {
            $newDisStockdata['account_id'] = $this->clean($_SESSION['accountId']);
            $newDisStockdata['stockist_id'] = mysql_escape_string($_POST['stockist_id']);
            $newDisStockdata['distributor_id'] = mysql_escape_string($id);
            $newDisStockdata['created_date'] = date('Y-m-d');
            $newDisStockdata['created_time'] = date('h:i:sa');
            $newDisStockdata['status'] = 'A';
            $dist_new_id = $this->_dbInsert($newDisStockdata, 'table_distributors_new');
        }
        $this->mysql_query("DELETE FROM table_stockist_distributor_mapping WHERE distributor_id = $id AND stockist_id IN ( $old_stockist_id )");
        $mapping['distributor_id'] = $id;
        $mapping['stockist_id'] = mysql_escape_string($_POST['stockist_id']);
        $mapping['account_id'] = $_SESSION['accountId'];
        $mapping['status'] = 'A';
        $this->_dbInsert($mapping, 'table_stockist_distributor_mapping');
        //Todo End : sudhanshu 03 may 2024 : stocksit mappng multiple
        //Todo Start : sudhanshu 15 may 2024 : add multiple address

        $address_id = $_POST['address_id'];
        $address = $_POST['distributor_address'];
        $zipcode = $_POST['zipcode'];

        if (count($address) > 0) {
            foreach ($address as $key => $value) {

                if ($key == 0) {
                    if (trim($value) != '') {
                        $auAddr = $this->_getSelectList('table_distributor_address', "address_id", '', "   address_id = $address_id ");
                        if (is_array($auAddr) && (count($auAddr) > 0)) {
                            $addData['address'] = trim($value);
                            $addData['zipcode'] = trim($zipcode[$key]);
                            $addData['updated_at'] = date('Y-m-d H:i:s');
                            $this->_dbUpdate($addData, 'table_distributor_address', " address_id=" . $address_id);
                        } else {
                            $addr['distributor_id'] = $id;
                            $addr['account_id'] = $_SESSION['accountId'];
                            $addr['address'] = trim($value);
                            $addr['zipcode'] = trim($zipcode[$key]);
                            $addr['status'] = 'A';
                            $addr['created_at'] = date('Y-m-d H:i:s');
                            $addr['updated_at'] = date('Y-m-d H:i:s');
                            $adrId = $this->_dbInsert($addr, 'table_distributor_address');

                            $addr2['address_id'] = $adrId;
                            $this->_dbUpdate($addr2, 'table_distributors', " distributor_id = " . $id);
                        }
                    } else {
                        $addr2['address_id'] = '0';
                        $this->_dbUpdate($addr2, 'table_distributors', " distributor_id = " . $id);
                        $this->mysql_query("DELETE FROM table_distributor_address WHERE address_id = $address_id  ");
                    }

                } else {
                    if (trim($value) != '') {
                        $addr['distributor_id'] = $id;
                        $addr['account_id'] = $_SESSION['accountId'];
                        $addr['address'] = trim($value);
                        $addr['zipcode'] = trim($zipcode[$key]);
                        $addr['status'] = 'A';
                        $addr['created_at'] = date('Y-m-d H:i:s');
                        $addr['updated_at'] = date('Y-m-d H:i:s');
                        $adrId = $this->_dbInsert($addr, 'table_distributor_address');
                    }

                }
            }


        } else {

            $this->mysql_query("DELETE FROM table_distributor_address WHERE address_id = $address_id  ");

        }
//        if (trim($_POST['distributor_address']) != '') {
//            $auAddr = $this->_getSelectList('table_distributor_address', "address_id", '', "   address_id = $address_id ");
//            if (is_array($auAddr) && (count($auAddr) > 0)) {
//                $addData['address'] = mysql_escape_string(trim($_POST['distributor_address']));
//                $addData['zipcode'] = mysql_escape_string(trim($_POST['zipcode']));
//                $addData['updated_at'] = date('Y-m-d H:i:s');
//                $this->_dbUpdate($addData, 'table_distributor_address', " address_id=" . $address_id);
//            } else {
//                $addr['distributor_id'] = $id;
//                $addr['account_id'] = $_SESSION['accountId'];
//                $addr['address'] = mysql_escape_string(trim($_POST['distributor_address']));
//                $addr['zipcode'] = mysql_escape_string(trim($_POST['zipcode']));
//                $addr['status'] = 'A';
//                $addr['created_at'] = date('Y-m-d H:i:s');
//                $addr['updated_at'] = date('Y-m-d H:i:s');
//                $adrId = $this->_dbInsert($addr, 'table_distributor_address');
//
//                $addr2['address_id'] = $adrId;
//                $this->_dbUpdate($addr2, 'table_distributors', " distributor_id=" . $id);
//            }
//
//        } else {
//
//            $this->mysql_query("DELETE FROM table_distributor_address WHERE address_id = $address_id  ");
//
//        }

        //Todo End : sudhanshu 15 may 2024 : add multiple address
        if (($id > 0) && is_array($_POST['add_route']) && (count($_POST['add_route']) > 0)) {

            $this->mysql_query("DELETE FROM table_route_retailer WHERE distributor_id = $id");
            $sortOrder = 1;
            for ($i = 0; $i < count($_POST['add_route']); $i++) {
                $data1 = [];
                $route_id = mysql_escape_string($_POST['add_route'][$i]);
                $data1['account_id'] = $_POST['account_id'];
                $data1['route_id'] = mysql_escape_string($_POST['add_route'][$i]);
                $data1['distributor_id'] = $id;
                $data1['sort_order'] = $sortOrder;
                $this->_dbInsert($data1, 'table_route_retailer');
                $sortOrder++;
                //UPDATE STATE AND CITY OF TABLE ROUTE
                $auRec = $this->_getSelectList('table_route', "*", '', " route_id=" . $route_id);
                $stateArr = array_filter(explode(',', $auRec[0]->state_id));
                $cityArr = array_filter(explode(',', $auRec[0]->city_id));
                $locationArr = array_filter(explode(',', $auRec[0]->locations));
                array_push($stateArr, $_POST['state']);
                array_push($cityArr, $_POST['address2']);
                array_push($locationArr, $_POST['address1']);
                $comma_separated_state = implode(",", array_unique($stateArr));
                $comma_separated_city = implode(",", array_unique($cityArr));
                $comma_separated_location = implode(",", array_unique($locationArr));
                $data2 = [];
                $data2['state_id'] = $comma_separated_state;
                $data2['city_id'] = $comma_separated_city;
                $data2['locations'] = $comma_separated_location;
                $this->_dbUpdate($data2, 'table_route', " route_id=" . $route_id);
            }
        }

        return $id;
    }

    function ApproveRejectNewDistributor($id)
    {
        $data['distributor_code'] = mysql_escape_string($_POST['distributor_code']);
        /* Update relationship ids */
        $data['relationship_id'] = mysql_escape_string($_POST['relationship_id']);
        $data['region_id'] = mysql_escape_string($_POST['region_id']);
        $data['distributor_name'] = mysql_escape_string($_POST['distributors_name']);
        $data['distributor_address'] = mysql_escape_string($_POST['distributor_address']);
        $data['distributor_address2'] = mysql_escape_string($_POST['distributor_address2']);
        if (isset($_POST['address1']) && !empty($_POST['address1'])) {
            $locId = $_POST['address1'];
            $locName = '';
            $auLoc = $this->_getSelectList2('table_location', "location_id,location_name", '', " status='A' AND location_id = $locId ");
            if (is_array($auLoc) && (count($auLoc) > 0)) {
                $locName = $auLoc[0]->location_name;
            }
        }
        $data['distributor_location'] = mysql_escape_string($locName);
        $data['gst_no'] = mysql_escape_string($_POST['gst_no']);
        $data['pan_no'] = mysql_escape_string($_POST['pan_no']);
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['location'] = mysql_escape_string($_POST['address1']);
        $data['zipcode'] = mysql_escape_string($_POST['zipcode']);
        $data['distributor_phone_no'] = mysql_escape_string($_POST['distributor_phone_no']);
        $data['distributor_phone_no2'] = mysql_escape_string($_POST['distributor_phone_no2']);
        $data['distributor_phone_no3'] = mysql_escape_string($_POST['distributor_phone_no3']);
        $data['distributor_leadline_no'] = mysql_escape_string($_POST['distributor_leadline_no']);
        $data['sms_number'] = mysql_escape_string($_POST['sms_number']);
        $data['distributor_email'] = mysql_escape_string($_POST['distributor_email']);
        $data['distributor_email2'] = mysql_escape_string($_POST['distributor_email2']);
        $data['distributor_email3'] = mysql_escape_string($_POST['distributor_email3']);
        $data['contact_person'] = mysql_escape_string($_POST['contact_person']);
        $data['contact_person2'] = mysql_escape_string($_POST['contact_person2']);
        $data['contact_person3'] = mysql_escape_string($_POST['contact_person3']);
        $data['contact_number'] = mysql_escape_string($_POST['contact_number']);
        $data['contact_number2'] = mysql_escape_string($_POST['contact_number2']);
        $data['contact_number3'] = mysql_escape_string($_POST['contact_number3']);
        if ($_POST['distributor_dob'] != '') {
            $data['distributor_dob'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['distributor_dob'])));
        }
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        if ($_POST['status'] == 'I') {
            $data['end_date'] = date('Y-m-d');
        }
        if (isset($_POST['submit']) && !empty($_POST['submit']) && (strtolower($_POST['submit']) == 'approve')) {
            $data['new'] = '';
            $data['status'] = 'A';
        }
        if (isset($_POST['submit']) && !empty($_POST['submit']) && (strtolower($_POST['submit']) == 'reject')) {
            $data['new'] = '2';
            $data['status'] = 'I';
        }
        /* Add stockist ids */
        $data['stockist_id'] = mysql_escape_string($_POST['stockist_id']);
        $this->_dbUpdate($data, 'table_distributors', " distributor_id=" . $id);
        if (isset($_POST['submit']) && !empty($_POST['submit']) && (strtolower($_POST['submit']) == 'approve')) {
            if (is_array($_POST['add_route']) && (count($_POST['add_route']) > 0)) {
                foreach ($_POST['add_route'] as $key => $routeId) {
                    $data2 = [];
                    $data2['account_id'] = $_POST['account_id'];
                    $data2['route_id'] = $routeId;
                    $data2['distributor_id'] = $id;
                    $this->_dbInsert($data2, 'table_route_retailer');
                }
            }
        }
        return $id;
    }

    function addDisCat($dis_id)
    {
        $Category = $this->_getSelectList('table_category', "*", '', " status='A' ");
        //$query1 = "SELECT * FROM `table_category`  where status='A' and account_id='".$_SESSION['accountId']."' ";
        //$catigory = mysql_query($query1);
        foreach ($Category as $key => $value) {
            $data['distributor_id'] = $dis_id;
            $data['category_id'] = $value->category_id;
            $id = $this->_dbInsert($data, 'table_distributors_category');
        }
        /*for($i=0;$i<count($_POST['category_id']);$i++){
		$data['distributor_id']=$dis_id;
		$data['category_id']=mysql_escape_string($_POST['category_id'][$i]);
		$id=$this->_dbInsert($data,'table_distributors_category');
		}*/
    }

    function addRetailer()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['retailer_name'] = mysql_escape_string(trim($_POST['retailer_name']));
        $data['retailer_code'] = mysql_escape_string(trim($_POST['retailer_code']));
        $data['relationship_id'] = mysql_escape_string($_POST['relationship_id']);
        /* new added */
        $data['channel_id'] = mysql_escape_string($_POST['retailer_channel']);
        if ($_SESSION['userLoginType'] == 3) {
            $data['distributor_id'] = mysql_escape_string($_SESSION['distributorId']);
            $data['added_by_distributor_id'] = mysql_escape_string($_SESSION['distributorId']);
        } else {
            $data['distributor_id'] = mysql_escape_string($_POST['distributor_id']);
            $data['added_by_distributor_id'] = 0;
        }
        $data['display_outlet'] = mysql_escape_string($_POST['display_outlet']);
        $data['type_id'] = mysql_escape_string($_POST['retailer_type']);
        //$data['chain_id']=mysql_escape_string($_POST['chain_id']);
        $data['retailer_address'] = $_POST['retailer_address'][0];
//        $data['retailer_address2'] = mysql_escape_string($_POST['retailer_address2']);
        $data['retailer_location'] = mysql_escape_string(trim($_POST['retailer_location']));
//		$data['retailer_location']=mysql_escape_string($_POST['address1']);
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['location_id'] = mysql_escape_string($_POST['address1']);
        $data['zipcode'] = trim($_POST['zipcode'][0]);
        $data['retailer_phone_no'] = mysql_escape_string(trim($_POST['retailer_number']));
        $data['retailer_phone_no2'] = mysql_escape_string(trim($_POST['retailer_number2']));
//        $data['retailer_leadline_no'] = mysql_escape_string($_POST['retailer_leadline_no']);
//        $data['pre_day'] = mysql_escape_string($_POST['pre_day']);
//        $data['off_day'] = mysql_escape_string($_POST['off_day']);
        $data['shop_desc'] = mysql_escape_string(trim($_POST['shop_desc']));
        $data['retailer_email'] = mysql_escape_string(trim($_POST['retailer_email']));
        $data['retailer_email2'] = mysql_escape_string(trim($_POST['retailer_email2']));
        $data['contact_person'] = mysql_escape_string(trim($_POST['contact_person']));
        $data['contact_number'] = mysql_escape_string(trim($_POST['contact_number']));
        $data['contact_person2'] = mysql_escape_string(trim($_POST['contact_person2']));
        $data['contact_number2'] = mysql_escape_string(trim($_POST['contact_number2']));
        if ($_POST['retailer_dob'] != '') {
            $data['retailer_dob'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['retailer_dob'])));
        }
        if ($_POST['anniversary_date'] != '') {
            $data['anniversary_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['anniversary_date'])));
        }
        $data['gst_no'] = mysql_escape_string(trim($_POST['gst_no']));
        $data['aadhar_no'] = mysql_escape_string(trim($_POST['aadhar_no']));
        $data['pan_no'] = mysql_escape_string(trim($_POST['pan_no']));
        $data['start_date'] = mysql_escape_string(trim($_POST['start_date']));
        //$data['end_date']=mysql_escape_string($_POST['end_date']); //commented by sachin as per dhavika's request
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['group_id'] = mysql_escape_string(trim($_POST['group_id']));
        $data['status'] = 'A';
        $data['survey_status'] = 'I';
//        echo "<pre>";print_r($data);die;
        $id = $this->_dbInsert($data, 'table_retailer');
        /*if($id!=''){
			for($i=0;$i<count($_POST['add_route']);$i++){
			$data1['account_id']=1;
			$data1['route_id']=mysql_escape_string($_POST['add_route'][$i]);
			$data1['retailer_id']=$id;
			$routeid=$this->_dbInsert($data1,'table_route_retailer');
			}
		}*/
        if ($id > 0) {
            if (empty($_POST['retailer_code'])) {
                $dataRetCode = [];
                $dataRetCode['retailer_code'] = $id;
                $this->_dbUpdate($dataRetCode, 'table_retailer', " retailer_id=" . $id);
            }
            //get location name if exists otherwise and map it to the retailer
            /*
            $location_id = mysql_escape_string($_POST['address1']);
            $getLoc = $this->_getSelectList2('table_location',"location_name",''," location_id = $location_id ");
            if(is_array($getLoc) && (count($getLoc) > 0)){
                $location_name = $getLoc[0]->location_name;
            }
            if(isset($location_name) && !empty($location_name)){
                $dataRetLoc = [];
                $dataRetLoc['retailer_location'] = $location_name;
                $this->_dbUpdate($dataRetLoc,'table_retailer', " retailer_id=".$id);
            }*/
        }
        //Todo Start Sudhanshu 15 may 2024 : add multiple address
        $address = $_POST['retailer_address'];
        $zipcodeArr = $_POST['zipcode'];
//        if (trim($address) != '') {
//            $addr['retailer_id'] = $id;
//            $addr['account_id'] = $_SESSION['accountId'];
//            $addr['address'] = trim($address);
//            $addr['zipcode'] =  mysql_escape_string(trim($_POST['zipcode']));
//            $addr['status'] = 'A';
//            $addr['created_at'] = date('Y-m-d H:i:s');
//            $addr['updated_at'] = date('Y-m-d H:i:s');
//            $adrId = $this->_dbInsert($addr, 'table_retailer_address');
//
//                $datat2['address_id'] = $adrId;
//                $this->_dbUpdate($datat2, 'table_retailer', " retailer_id=" . $id);
//
//
//        }

        if (!empty($address) && count($address) > 0) {
            $row = 0;
            foreach ($address as $key11 => $adr) {
                if (trim($adr) != '') {
                    $addr['retailer_id'] = $id;
                    $addr['account_id'] = $_SESSION['accountId'];
                    $addr['address'] = trim($adr);
                    $addr['zipcode'] = $zipcodeArr[$key11];
                    $addr['status'] = 'A';
                    $addr['created_at'] = date('Y-m-d H:i:s');
                    $addr['updated_at'] = date('Y-m-d H:i:s');
                    $adrId = $this->_dbInsert($addr, 'table_retailer_address');
                    if ($row == 0) {
                        $datat2['address_id'] = $adrId;
                        $this->_dbUpdate($datat2, 'table_retailer', " retailer_id=" . $id);
                    }

                }

                $row++;

            }

        }
        //Todo End Sudhanshu 15 may 2024 : add multiple address

        if (($id > 0) && is_array($_POST['add_route']) && (count($_POST['add_route']) > 0)) {
            $sortOrder = 1;
            for ($i = 0; $i < count($_POST['add_route']); $i++) {
                $route_id = mysql_escape_string($_POST['add_route'][$i]);
                $data1 = [];
                $data1['account_id'] = $_POST['account_id'];
                $data1['route_id'] = mysql_escape_string($_POST['add_route'][$i]);
                $data1['retailer_id'] = $id;
                $data1['sort_order'] = $sortOrder;
                $this->_dbInsert($data1, 'table_route_retailer');
                $sortOrder++;
                //UPDATE STATE AND CITY OF TABLE ROUTE
                $auRec = $this->_getSelectList('table_route', "*", '', " route_id=" . $route_id);
                $stateArr = array_filter(explode(',', $auRec[0]->state_id));
                $cityArr = array_filter(explode(',', $auRec[0]->city_id));
                $locationArr = array_filter(explode(',', $auRec[0]->locations));
                array_push($stateArr, $_POST['state']);
                array_push($cityArr, $_POST['address2']);
                array_push($locationArr, $_POST['address1']);
                $comma_separated_state = implode(",", array_unique($stateArr));
                $comma_separated_city = implode(",", array_unique($cityArr));
                $comma_separated_location = implode(",", array_unique($locationArr));
                $data2 = [];
                $data2['state_id'] = $comma_separated_state;
                $data2['city_id'] = $comma_separated_city;
                $data2['locations'] = $comma_separated_location;
                $this->_dbUpdate($data2, 'table_route', " route_id=" . $route_id);
            }
        }
        if (($id > 0) && is_array($_POST['mapped_salesman_id']) && (count($_POST['mapped_salesman_id']) > 0)) {
            foreach ($_POST['mapped_salesman_id'] as $keycsm => $salesmanId) {
                $dataCsm = [];
                $dataCsm['account_id'] = $_POST['account_id'];
                $dataCsm['retailer_id'] = $id;
                $dataCsm['salesman_id'] = $salesmanId;
                $dataCsm['created_date'] = date('Y-m-d H:i:s');
                $this->_dbInsert($dataCsm, 'table_customer_salesman_mapping');
            }
        }
        if ($id != '') {
            $data3['account_id'] = 5;
            $data3['state_id'] = mysql_escape_string($_POST['state']);
            $data3['city_id'] = mysql_escape_string($_POST['address2']);
            $data3['price_type'] = '2';
            $data3['retailer_id'] = $id;
            $data3['last_update_date'] = date('Y-m-d');
            $price_id = $this->_dbInsert($data3, 'price_city_applicable');
        }
        $cusdata['retailer_id'] = $id;
        $cusdata['salesman_id'] = 0;
        $cusdata['designation_id'] = $_POST['designation_id'];
        $cusdata['customer_email'] = $_POST['customer_email'];
        $cusdata['customer_name'] = mysql_escape_string($_POST['contact_person']);
        $cusdata['customer_phone_no'] = mysql_escape_string($_POST['contact_number']);
        $cusdata['customer_phone_no2'] = mysql_escape_string($_POST['contact_number2']);
        $cusdata['server_date'] = date("Y-m-d");
        $cusdata['server_time'] = date("H:m:s");
        $cusdata['account_id'] = $_POST['account_id'];
        $cusdata['last_update_date'] = date("Y-m-d");
        $cusdata['last_update_status'] = 'New';
        $cusdata['status'] = 'A';
        $customerId = $this->_dbInsert($cusdata, 'table_customer');
        return $id;
    }

    function UpdateRetailer($id)
    {
        $data['retailer_name'] = mysql_escape_string(trim($_POST['retailer_name']));
        $data['retailer_code'] = (!empty(trim($_POST['retailer_code']))) ? mysql_escape_string(trim($_POST['retailer_code'])) : $id;
        $data['retailer_address'] = trim($_POST['retailer_address'][0]);
        $data['relationship_id'] = mysql_escape_string($_POST['relationship_id']);
        /* new added */
        $data['channel_id'] = mysql_escape_string($_POST['retailer_channel']);
//        $data['distributor_id'] = mysql_escape_string($_POST['distributor_id']);
        if ($_SESSION['userLoginType'] == 3) {
            $data['distributor_id'] = mysql_escape_string($_SESSION['distributorId']);
            $data['added_by_distributor_id'] = mysql_escape_string($_SESSION['distributorId']);
        } else {
            $data['distributor_id'] = mysql_escape_string($_POST['distributor_id']);
            $data['added_by_distributor_id'] = 0;
        }

        $data['display_outlet'] = mysql_escape_string($_POST['display_outlet']);
        $data['type_id'] = mysql_escape_string($_POST['retailer_type']);
        //$data['chain_id']=mysql_escape_string($_POST['chain_id']);
        //$data['retailer_address'] = mysql_escape_string(trim($_POST['retailer_address']));
//        $data['retailer_address2'] = mysql_escape_string($_POST['retailer_address2']);
        $data['retailer_location'] = mysql_escape_string(trim($_POST['retailer_location']));
//		$data['retailer_location']=mysql_escape_string($_POST['address1']);
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['location_id'] = mysql_escape_string(trim($_POST['address1']));
        $data['zipcode'] = trim($_POST['zipcode'][0]);
        $data['retailer_phone_no'] = mysql_escape_string(trim($_POST['retailer_number']));
        $data['retailer_phone_no2'] = mysql_escape_string(trim($_POST['retailer_number2']));
//        $data['retailer_leadline_no'] = mysql_escape_string($_POST['retailer_leadline_no']);
//        $data['pre_day'] = mysql_escape_string($_POST['pre_day']);
//        $data['off_day'] = mysql_escape_string($_POST['off_day']);
        $data['shop_desc'] = mysql_escape_string(trim($_POST['shop_desc']));
        $data['retailer_email'] = mysql_escape_string(trim($_POST['retailer_email']));
        $data['retailer_email2'] = mysql_escape_string(trim($_POST['retailer_email2']));
        $data['contact_person'] = mysql_escape_string(trim($_POST['contact_person']));
        $data['contact_number'] = mysql_escape_string(trim($_POST['contact_number']));
        $data['contact_person2'] = mysql_escape_string(trim($_POST['contact_person2']));
        $data['contact_number2'] = mysql_escape_string(trim($_POST['contact_number2']));
        if ($_POST['retailer_dob'] != '') {
            $data['retailer_dob'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['retailer_dob'])));
        }
        if ($_POST['anniversary_date'] != '') {
            $data['anniversary_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['anniversary_date'])));
        }
        $data['gst_no'] = mysql_escape_string(trim($_POST['gst_no']));
        $data['aadhar_no'] = mysql_escape_string(trim($_POST['aadhar_no']));
        $data['pan_no'] = mysql_escape_string(trim($_POST['pan_no']));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['group_id'] = mysql_escape_string(trim($_POST['group_id']));
        //$data['start_date']=mysql_escape_string($_POST['start_date']);
        //$data['end_date']=mysql_escape_string($_POST['end_date']);
        if ($_POST['status'] == 'I') {
            $data['end_date'] = date('Y-m-d');
        }

        if ($_POST['submit'] == 'Approve') {
            $data['new'] = '';
            $data['status'] = 'A';
            $data['approval_status'] = 'approved';
            $data['approval_status_updated_at'] = date('Y-m-d H:i:s');
        }

        $this->_dbUpdate($data, 'table_retailer', " retailer_id=" . $id);
        /*if($id!=''){
			for($i=0;$i<count($_POST['add_route']);$i++){
			$data1['account_id']=1;
			$data1['route_id']=mysql_escape_string($_POST['add_route'][$i]);
			$data1['retailer_id']=$id;
			$routeid=$this->_dbInsert($data1,'table_route_retailer');
			}
		}*/
        //get location name if exists and map it to the retailer
        /*
        $location_id = mysql_escape_string($_POST['address1']);
        $getLoc = $this->_getSelectList2('table_location',"location_name",''," location_id = $location_id ");
        if(is_array($getLoc) && (count($getLoc) > 0)){
            $location_name = $getLoc[0]->location_name;
        }
        if(isset($location_name) && !empty($location_name)){
            $dataRetLoc = [];
            $dataRetLoc['retailer_location'] = $location_name;
            $this->_dbUpdate($dataRetLoc,'table_retailer', " retailer_id=".$id);
        }*/
        if (is_array($_POST['add_route']) && (count($_POST['add_route']) > 0)) {
            $this->mysql_query("DELETE FROM table_route_retailer WHERE retailer_id = '" . $id . "' ");
            $sortOrder = 1;
            for ($i = 0; $i < count($_POST['add_route']); $i++) {
                $route_id = mysql_escape_string($_POST['add_route'][$i]);
                $data1 = [];
                $data1['account_id'] = $_POST['account_id'];
                $data1['route_id'] = $route_id;
                $data1['retailer_id'] = $id;
                $data1['sort_order'] = $sortOrder;
                $this->_dbInsert($data1, 'table_route_retailer');
                $sortOrder++;
                //UPDATE STATE AND CITY OF TABLE ROUTE
                $auRec = $this->_getSelectList('table_route', "*", '', " route_id=" . $route_id);
                $stateArr = array_filter(explode(',', $auRec[0]->state_id));
                $cityArr = array_filter(explode(',', $auRec[0]->city_id));
                $locationArr = array_filter(explode(',', $auRec[0]->locations));
                array_push($stateArr, $_POST['state']);
                array_push($cityArr, $_POST['address2']);
                array_push($locationArr, $_POST['address1']);
                $comma_separated_state = implode(",", array_unique($stateArr));
                $comma_separated_city = implode(",", array_unique($cityArr));
                $comma_separated_location = implode(",", array_unique($locationArr));
                $data2 = [];
                $data2['state_id'] = $comma_separated_state;
                $data2['city_id'] = $comma_separated_city;
                $data2['locations'] = $comma_separated_location;
                $this->_dbUpdate($data2, 'table_route', " route_id=" . $route_id);
            }
        }
        if (($id > 0) && is_array($_POST['mapped_salesman_id']) && (count($_POST['mapped_salesman_id']) > 0)) {
            $this->mysql_query("DELETE FROM table_customer_salesman_mapping WHERE account_id='" . $_POST['account_id'] . "' AND retailer_id = '" . $id . "'");
            foreach ($_POST['mapped_salesman_id'] as $keycsm => $salesmanId) {
                $dataCsm = [];
                $dataCsm['account_id'] = $_POST['account_id'];
                $dataCsm['retailer_id'] = $id;
                $dataCsm['salesman_id'] = $salesmanId;
                $dataCsm['created_date'] = date('Y-m-d H:i:s');
                $this->_dbInsert($dataCsm, 'table_customer_salesman_mapping');
            }
        }
        if ($id != '') {
            $auRec = $this->_getSelectList('price_city_applicable', "*", '', " retailer_id=" . $id);
            if ($auRec > 0) {
                $data3['state_id'] = mysql_escape_string($_POST['state']);
                $data3['city_id'] = mysql_escape_string($_POST['address2']);
                $data3['price_type'] = '2';
                $data3['last_update_date'] = date('Y-m-d');
                //echo "<pre>";print_r($data3);die;
                $price_id = $this->_dbUpdate($data3, 'price_city_applicable', " retailer_id=" . $id);
            } else {
                $data3['state_id'] = mysql_escape_string($_POST['state']);
                $data3['city_id'] = mysql_escape_string($_POST['address2']);
                $data3['price_type'] = '2';
                $data3['retailer_id'] = $id;
                $data3['last_update_date'] = date('Y-m-d');
                //echo "<pre>";print_r($data3);die;
                $price_id = $this->_dbInsert($data3, 'price_city_applicable');
            }
        }
        if ($id != '') {
            $auCust = $this->_getSelectList('table_customer', "*", '', " retailer_id=" . $id);
            if ($auCust > 0) {
                $cusdata['retailer_id'] = $id;
                $cusdata['salesman_id'] = 0;
                $cusdata['designation_id'] = $_POST['designation_id'];
                $cusdata['customer_email'] = $_POST['customer_email'];
                $cusdata['customer_name'] = mysql_escape_string($_POST['contact_person']);
                $cusdata['customer_phone_no'] = mysql_escape_string($_POST['contact_number']);
                $cusdata['customer_phone_no2'] = mysql_escape_string($_POST['contact_number2']);
                $cusdata['server_date'] = date("Y-m-d");
                $cusdata['server_time'] = date("H:m:s");
                $cusdata['account_id'] = $_POST['account_id'];
                $cusdata['last_update_date'] = date("Y-m-d");
                $cusdata['last_update_status'] = 'Update';
                $cusdata['status'] = 'A';
                $customerId = $this->_dbUpdate($cusdata, 'table_customer', "retailer_id=" . $id . " ");
            } else {
                $cusdata['retailer_id'] = $id;
                $cusdata['salesman_id'] = 0;
                $cusdata['designation_id'] = $_POST['designation_id'];
                $cusdata['customer_email'] = $_POST['customer_email'];
                $cusdata['customer_name'] = mysql_escape_string($_POST['contact_person']);
                $cusdata['customer_phone_no'] = mysql_escape_string($_POST['contact_number']);
                $cusdata['customer_phone_no2'] = mysql_escape_string($_POST['contact_number2']);
                $cusdata['server_date'] = date("Y-m-d");
                $cusdata['server_time'] = date("H:m:s");
                $cusdata['account_id'] = $_POST['account_id'];
                $cusdata['last_update_date'] = date("Y-m-d");
                $cusdata['last_update_status'] = 'New';
                $cusdata['status'] = 'A';
                $customerId = $this->_dbInsert($cusdata, 'table_customer');
            }
        }
        //Todo Start : sudhanshu 15 may 2024 : add multiple address

//        $address_id = $_POST['address_id'];
//        if (trim($_POST['retailer_address']) != '') {
//            $auAddr = $this->_getSelectList('table_retailer_address', "address_id", '', "   address_id = $address_id ");
//            if (is_array($auAddr) && (count($auAddr) > 0)) {
//                $addData['address'] = mysql_escape_string(trim($_POST['retailer_address']));
//                $addData['zipcode'] = mysql_escape_string(trim($_POST['zipcode']));
//                $addData['updated_at'] = date('Y-m-d H:i:s');
//                $this->_dbUpdate($addData, 'table_retailer_address', " address_id=" . $address_id);
//            } else {
//                $addr['retailer_id'] = $id;
//                $addr['account_id'] = $_SESSION['accountId'];
//                $addr['address'] = mysql_escape_string(trim($_POST['retailer_address']));
//                $addr['zipcode'] = mysql_escape_string(trim($_POST['zipcode']));
//                $addr['status'] = 'A';
//                $addr['created_at'] = date('Y-m-d H:i:s');
//                $addr['updated_at'] = date('Y-m-d H:i:s');
//                $adrId = $this->_dbInsert($addr, 'table_retailer_address');
//
//                $addr2['address_id'] = $adrId;
//                $this->_dbUpdate($addr2, 'table_retailer', " retailer_id = " . $id);
//            }
//
//        } else {
//
//            $this->mysql_query("DELETE FROM table_retailer_address WHERE address_id = $address_id  ");
//
//        }


        $address_id = $_POST['address_id'];
        $address = $_POST['retailer_address'];
        $zipcode = $_POST['zipcode'];
        if (count($address) > 0) {
            foreach ($address as $key => $value) {

                if ($key == 0) {
                    if (trim($value) != '') {
                        $auAddr = $this->_getSelectList('table_retailer_address', "address_id", '', "   address_id = $address_id ");
                        if (is_array($auAddr) && (count($auAddr) > 0)) {
                            $addData['address'] = trim($value);
                            $addData['zipcode'] = trim($zipcode[$key]);
                            $addData['updated_at'] = date('Y-m-d H:i:s');
                            $this->_dbUpdate($addData, 'table_retailer_address', " address_id=" . $address_id);
                        } else {
                            $addr['retailer_id'] = $id;
                            $addr['account_id'] = $_SESSION['accountId'];
                            $addr['address'] = trim($value);
                            $addr['zipcode'] = trim($zipcode[$key]);
                            $addr['status'] = 'A';
                            $addr['created_at'] = date('Y-m-d H:i:s');
                            $addr['updated_at'] = date('Y-m-d H:i:s');
                            $adrId = $this->_dbInsert($addr, 'table_retailer_address');

                            $addr2['address_id'] = $adrId;
                            $this->_dbUpdate($addr2, 'table_retailer', " retailer_id = " . $id);
                        }
                    } else {
                        $addr2['address_id'] = '0';
                        $this->_dbUpdate($addr2, 'table_retailer', " retailer_id = " . $id);
                        $this->mysql_query("DELETE FROM table_retailer_address WHERE address_id = $address_id  ");
                    }

                } else {
                    if (trim($value) != '') {
                        $addr['retailer_id'] = $id;
                        $addr['account_id'] = $_SESSION['accountId'];
                        $addr['address'] = trim($value);
                        $addr['zipcode'] = trim($zipcode[$key]);
                        $addr['status'] = 'A';
                        $addr['created_at'] = date('Y-m-d H:i:s');
                        $addr['updated_at'] = date('Y-m-d H:i:s');
                        $adrId = $this->_dbInsert($addr, 'table_retailer_address');
                    }

                }
            }


        } else {

            $this->mysql_query("DELETE FROM table_retailer_address WHERE address_id = $address_id  ");

        }

        //Todo End : sudhanshu 15 may 2024 : add multiple address
        return $id;
    }

    function RejectRetailer($id)
    {
        if ($_POST['submit'] == 'Reject') {
            $data = [];
            $data['new'] = '1';
            $data['status'] = 'I';
            $data['approval_status'] = 'rejected';
            $data['approval_status_updated_at'] = date('Y-m-d H:i:s');
            $this->_dbUpdate($data, 'table_retailer', " retailer_id=" . $id);
            return $id;
        }
    }

    function addRetCat($ret_id)
    {
        for ($i = 0; $i < count($_POST['category_id']); $i++) {
            $data['retailer_id'] = $ret_id;
            $data['category_id'] = mysql_escape_string($_POST['category_id'][$i]);
            $data['distributor_id'] = mysql_escape_string($_POST['distributor_id'][$i]);
            $id = $this->_dbInsert($data, 'table_retailer_to_distributer');
        }
    }

    // Added salesman TADA Allowances Slab Amount 04 July 2014
    function addSalesmanTadaAllowance($salesmen_id)
    {
        $data = array();
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['salesman_id'] = $salesmen_id;
        //echo "<pre>";
        //print_r($_POST);
        $i = 0;
        $allId = array();
        if (is_array($_POST['allowance_tag_id']) && is_array($_POST['allwns_cat_id'])) {
            foreach ($_POST['allowance_tag_id'] as $key => $value) :
                $allowanceAmtList = array_filter($_POST['allowance' . $value], 'is_numeric');
                $remove = array(0);
                $allowanceAmtList = array_diff($allowanceAmtList, $remove);
                if (is_array($allowanceAmtList) && !empty($allowanceAmtList)) {
                    //print_r(array_filter($_POST['allowance'.$value]));
                    $data['id'] = $value;
                    foreach ($allowanceAmtList as $key => $val) :
                        $data['allwns_cat_id'] = $_POST['allwns_cat_id'][$key];
                        $data['allwns_value'] = intval($val);
                        $data['last_update_date'] = date('Y-m-d H:i:s');
                        $data['status'] = 'A';
                        // check already exists this record
                        $records = $this->_getSelectList('table_salesman_allwns_slab_category_amt', "slab_amt_id", '', " salesman_id='" . $salesmen_id . "' AND `id` = '" . $value . "' AND allwns_cat_id = '" . $_POST['allwns_cat_id'][$key] . "'");
                        if (is_array($records) && sizeof($records) > 0) {
                            //print_r($records);
                            // Update Data
                            $this->_dbUpdate($data, 'table_salesman_allwns_slab_category_amt', " salesman_id='" . $salesmen_id . "' AND `id` = '" . $value . "' AND allwns_cat_id = '" . $_POST['allwns_cat_id'][$key] . "'");
                            $allwnsid = $records['0']->slab_amt_id;
                        } else {
                            // Insert Data
                            $allwnsid = $this->_dbInsert($data, 'table_salesman_allwns_slab_category_amt');
                        }
                        $allId[] = $allwnsid;
                    endforeach;
                }
            endforeach;
        }
        if (is_array($allId) && sizeof($allId) > 0) {
            echo $slab_amt_id = implode(',', $allId);
            $this->mysql_query("DELETE FROM table_salesman_allwns_slab_category_amt WHERE account_id='" . $_POST['account_id'] . "' AND slab_amt_id NOT IN (" . $slab_amt_id . ") AND salesman_id = '" . $salesmen_id . "'");
        } else {
            $this->mysql_query("DELETE FROM table_salesman_allwns_slab_category_amt WHERE account_id='" . $_POST['account_id'] . "' AND salesman_id = '" . $salesmen_id . "'");
        }
        //print_r($allId);
        //exit;
    }

    // Added salesman TADA Allowances Slab Amount 04 July 2014
    function addSalesman()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['salesman_name'] = mysql_escape_string(trim($_POST['salesman_name']));
        $data['employee_code'] = mysql_escape_string(trim($_POST['employee_code']));
        $data['salesman_address'] = mysql_escape_string(trim($_POST['salesman_address']));
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['location'] = mysql_escape_string(trim($_POST['address1']));
        $data['salesman_phome_no'] = mysql_escape_string(trim($_POST['salesman_number']));
        $data['salesman_email'] = mysql_escape_string(trim($_POST['salesman_email']));
        $data['start_date'] = mysql_escape_string($_POST['start_date']);
        //$data['end_date']=mysql_escape_string($_POST['end_date']);  //commented by sachin as per dhavika's request
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['dis_stock'] = 2;
        $data['is_editable'] = mysql_escape_string($_POST['is_editable']);
        if (!empty($_POST['joining_date']) && $_POST['joining_date'] != '') {
            $data['joining_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['joining_date'])));
        }
        $data['sal_salary'] = mysql_escape_string($_POST['sal_salary']);
        $data['status'] = 'A';

        $id = $this->_dbInsert($data, 'table_salesman');
        if (($id > 0) && (empty($_POST['employee_code']) || (trim($_POST['employee_code']) == ''))) {
            $dataSalCode = [];
            $dataSalCode['employee_code'] = $id;
            $this->_dbUpdate($dataSalCode, 'table_salesman', " salesman_id=" . $id);
        }
        // Salesman TADA 01 July 2014
        $this->addSalesmanTadaAllowance($id);
        // Salesman TADA 01 July 2014
        // Hierarchy ADD
        $data2['account_id'] = mysql_escape_string($_POST['account_id']);
        $data2['salesman_id'] = $id;
        $data2['hierarchy_id'] = mysql_escape_string($_POST['hierarchy_id']);
        $data2['rpt_hierarchy_id'] = mysql_escape_string($_POST['rpt_hierarchy_id']);
        $data2['rpt_user_id'] = mysql_escape_string($_POST['rpt_user_id']);
        $data2['user_type'] = $_SESSION['userLoginType'];
        $data2['web_user_id'] = $_SESSION['ChckPepUpSalesUserId'];
        //$data['status']= 1;
        $this->_dbInsert($data2, 'table_salesman_hierarchy_relationship');
        return $id;
    }

    function UpdateSalesman($salesman_id)
    {

        $data['salesman_name'] = mysql_escape_string(trim($_POST['salesman_name']));
        $data['employee_code'] = mysql_escape_string(trim($_POST['employee_code']));
        $data['salesman_address'] = mysql_escape_string(trim($_POST['salesman_address']));
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['location'] = mysql_escape_string(trim($_POST['address1']));
        $data['salesman_phome_no'] = mysql_escape_string(trim($_POST['salesman_number']));
        $data['salesman_email'] = mysql_escape_string(trim($_POST['salesman_email']));
//        $data['start_date']=mysql_escape_string($_POST['start_date']);
        //$data['end_date']=date('Y-m-d');
        if ($_POST['status'] == 'I') {
            $data['end_date'] = date('Y-m-d');
        }
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['is_editable'] = mysql_escape_string($_POST['is_editable']);
        $data['dis_stock'] = 2;
        if (!empty($_POST['joining_date']) && $_POST['joining_date'] != '') {
            $data['joining_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['joining_date'])));
        }
        $data['sal_salary'] = mysql_escape_string($_POST['sal_salary']);
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_salesman', " salesman_id=" . $salesman_id);

        if (($salesman_id > 0) && (empty($_POST['employee_code']) || (trim($_POST['employee_code']) == ''))) {
            $dataSalCode = [];
            $dataSalCode['employee_code'] = $salesman_id;
            $this->_dbUpdate($dataSalCode, 'table_salesman', " salesman_id=" . $salesman_id);
        }
        // Salesman TADA 01 July 2014
        $this->addSalesmanTadaAllowance($salesman_id);
        // Salesman TADA 01 July 2014
        // Hierarchy Update
        if (isset($_POST['hierarchy_id']) && $_POST['hierarchy_id'] != '') {
            $ausals = $this->_getSelectList('table_salesman_hierarchy_relationship', "relation_id", '', " salesman_id=" . $salesman_id);

            if (is_array($ausals)) {
                $data2['account_id'] = mysql_escape_string($_POST['account_id']);
                $data2['salesman_id'] = $salesman_id;
                $data2['hierarchy_id'] = mysql_escape_string($_POST['hierarchy_id']);
                $data2['rpt_hierarchy_id'] = mysql_escape_string($_POST['rpt_hierarchy_id']);
                $data2['rpt_user_id'] = mysql_escape_string($_POST['rpt_user_id']);
                $data2['user_type'] = $_SESSION['userLoginType'];
                $data2['web_user_id'] = $_SESSION['ChckPepUpSalesUserId'];
                //$data['status']= 1;
                //$this->_dbInsert($data2,'table_salesman_hierarchy_relationship');
                $this->_dbUpdate($data2, 'table_salesman_hierarchy_relationship', " salesman_id=" . $salesman_id);
                $this->updatedSalesmanReportingPerson($data2);
            } else {
                $data2['account_id'] = mysql_escape_string($_POST['account_id']);
                $data2['salesman_id'] = $salesman_id;
                $data2['hierarchy_id'] = mysql_escape_string($_POST['hierarchy_id']);
                $data2['rpt_hierarchy_id'] = mysql_escape_string($_POST['rpt_hierarchy_id']);
                $data2['rpt_user_id'] = mysql_escape_string($_POST['rpt_user_id']);
                $data2['user_type'] = $_SESSION['userLoginType'];
                $data2['web_user_id'] = $_SESSION['ChckPepUpSalesUserId'];
                //$data['status']= 1;
                $this->_dbInsert($data2, 'table_salesman_hierarchy_relationship');
            }
        }
        return $id;
    }

    /* Updated salesman hierarchy relationship while changed salesman designated by AJAY (11 Dec 2014) */
    function updatedSalesmanReportingPerson($dataset)
    {
        /*echo "<pre>";
	print_r($dataset);*/
        //exit;
        $rpt_user_id = 0;
        $rpt_hierarchy_id = 0;
        $data = array();
        $resultset = array();
        if (is_array($dataset) && isset($dataset['salesman_id']) && isset($dataset['hierarchy_id'])) {
            $rpt_user_id = $dataset['salesman_id'];
            $rpt_hierarchy_id = $dataset['hierarchy_id'];
            $resultset = $this->_getSelectList('`table_salesman_hierarchy_relationship` AS SHR LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SHR.`hierarchy_id` LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SHR.`rpt_hierarchy_id`', " SHR.salesman_id AS salesman_id, SHR.rpt_user_id AS parent_id, H.hierarchy_id AS salesman_hierarchy_id, H2.hierarchy_id AS parent_hierarchy_id, H.sort_order AS salesman_level, H2.sort_order AS parent_level ", '', " SHR.rpt_user_id =" . $rpt_user_id);
            /*print_r($resultset);
			exit;*/
            foreach ($resultset as $key => $value) :
                $data['rpt_user_id'] = $rpt_user_id;
                $data['rpt_hierarchy_id'] = $rpt_hierarchy_id;
                if ($value->parent_level < $value->salesman_level) {
                    $this->_dbUpdate($data, 'table_salesman_hierarchy_relationship', " rpt_user_id=" . $rpt_user_id);
                } else if ($value->parent_level >= $value->salesman_level) {
                    $data = array();
                    $data['rpt_user_id'] = 0;
                    $data['rpt_hierarchy_id'] = 0;
                    $this->_dbUpdate($data, 'table_salesman_hierarchy_relationship', " rpt_user_id=" . $rpt_user_id);
                }
            endforeach;
        }
    }
    /* Updated salesman hierarchy relationship while changed salesman designated by AJAY (11 Dec 2014) */
    /* This function modification all category assign to this new salesman */
    function addSalCat($sal_id)
    {
        $Category = $this->_getSelectList('table_category', "*", '', " status='A' ");
        //$query1 = "SELECT * FROM `table_category`  where status='A' and account_id='".$_SESSION['accountId']."' ";
        //$catigory = mysql_query($query1);
        foreach ($Category as $key => $value) {
            $data['salesman_id'] = $sal_id;
            $data['category_id'] = $value->category_id;
            $id = $this->_dbInsert($data, 'table_salesman_category');
        }
        /*
		for($i=0;$i<count($_POST['category_id']);$i++){
		$data['salesman_id']=$sal_id;
		$data['category_id']=mysql_escape_string($_POST['category_id'][$i]);
		$id=$this->_dbInsert($data,'table_salesman_category');
		}*/
    }

    function addManageUser()
    {
        /*echo "<pre>";
print_r($_POST);exit;*/
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['operator_name'] = mysql_escape_string($_POST['operator_name']);
        $data['operator_phone_number'] = mysql_escape_string($_POST['operator_phone_number']);
        if ($_POST['manage_items'] != '') {
            $data['manage_items'] = mysql_escape_string($_POST['manage_items']);
        } else {
            $data['manage_items'] = 'No';
        }
        if ($_POST['manage_distributors'] != '') {
            $data['manage_distributors'] = mysql_escape_string($_POST['manage_distributors']);
        } else {
            $data['manage_distributors'] = 'No';
        }
        if ($_POST['manage_retailer'] != '') {
            $data['manage_retailer'] = mysql_escape_string($_POST['manage_retailer']);
        } else {
            $data['manage_retailer'] = 'No';
        }
        if ($_POST['manage_salesman'] != '') {
            $data['manage_salesman'] = mysql_escape_string($_POST['manage_salesman']);
        } else {
            $data['manage_salesman'] = 'No';
        }
        if ($_POST['manage_route'] != '') {
            $data['manage_route'] = mysql_escape_string($_POST['manage_route']);
        } else {
            $data['manage_route'] = 'No';
        }
        if ($_POST['manage_report'] != '') {
            $data['view_activity_report'] = mysql_escape_string($_POST['manage_report']);
        } else {
            $data['view_activity_report'] = 'No';
        }
        if ($_POST['manage_retailer_relationship'] != '') {
            $data['manage_retailer_relationship'] = mysql_escape_string($_POST['manage_retailer_relationship']);
        } else {
            $data['manage_retailer_relationship'] = 'No';
        }
        $data['start_date'] = mysql_escape_string($_POST['start_date']);
        $data['end_date'] = mysql_escape_string($_POST['end_date']);
        $data['privilege_pages'] = mysql_escape_string(implode(',', $_POST['privilege_pages']));
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_account_admin');
        return $id;
    }

    function UpdateManageUser($id)
    {
        $data['operator_name'] = mysql_escape_string($_POST['operator_name']);
        $data['operator_phone_number'] = mysql_escape_string($_POST['operator_phone_number']);
        if ($_POST['manage_items'] != '') {
            $data['manage_items'] = mysql_escape_string($_POST['manage_items']);
        } else {
            $data['manage_items'] = 'No';
        }
        if ($_POST['manage_distributors'] != '') {
            $data['manage_distributors'] = mysql_escape_string($_POST['manage_distributors']);
        } else {
            $data['manage_distributors'] = 'No';
        }
        if ($_POST['manage_retailer'] != '') {
            $data['manage_retailer'] = mysql_escape_string($_POST['manage_retailer']);
        } else {
            $data['manage_retailer'] = 'No';
        }
        if ($_POST['manage_salesman'] != '') {
            $data['manage_salesman'] = mysql_escape_string($_POST['manage_salesman']);
        } else {
            $data['manage_salesman'] = 'No';
        }
        if ($_POST['manage_route'] != '') {
            $data['manage_route'] = mysql_escape_string($_POST['manage_route']);
        } else {
            $data['manage_route'] = 'No';
        }
        if ($_POST['manage_report'] != '') {
            $data['view_activity_report'] = mysql_escape_string($_POST['manage_report']);
        } else {
            $data['view_activity_report'] = 'No';
        }
        if ($_POST['manage_retailer_relationship'] != '') {
            $data['manage_retailer_relationship'] = mysql_escape_string($_POST['manage_retailer_relationship']);
        } else {
            $data['manage_retailer_relationship'] = 'No';
        }
        $data['end_date'] = mysql_escape_string($_POST['end_date']);
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_account_admin', " operator_id=" . $id);
        return $id;
    }

    function addTempOrder()
    {
        $auPriceRec = $this->_getSelectList('table_price', "*", '', " price_id=" . $_POST['price']);
        $Price = $auPriceRec[0]->item_price;
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['salesman_id'] = mysql_escape_string($_POST['sal_id']);
        $data['item_id'] = mysql_escape_string($_POST['item']);
        $data['price_id'] = mysql_escape_string($_POST['price']);
        $data['quantity'] = mysql_escape_string($_POST['quantity']);
        $data['total'] = $Price * $_POST['quantity'];
        $data['guid'] = mysql_escape_string($_POST['guid']);
        $id = $this->_dbInsert($data, 'table_temporder');
        return $id;
    }

    function addOrder()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['salesman_id'] = mysql_escape_string($_POST['sal_id']);
        $data['distributor_id'] = mysql_escape_string($_POST['dis_id']);
        $data['retailer_id'] = mysql_escape_string($_POST['ret_id']);
        $data['date_of_order'] = mysql_escape_string($_POST['date']);
        $data['time_of_order'] = mysql_escape_string($_POST['time']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['order_type'] = 'Yes';
        $data['order_status'] = 'A';
        $id = $this->_dbInsert($data, 'table_order');
        return $id;
    }

    function addOrderDetail($id)
    {
        for ($i = 0; $i < count($_POST['item_id']); $i++) {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['order_id'] = mysql_escape_string($id);
            $data['item_id'] = mysql_escape_string($_POST['item_id'][$i]);
            $data['price_id'] = mysql_escape_string($_POST['price_id'][$i]);
            $data['quantity'] = mysql_escape_string($_POST['quantity'][$i]);
            $data['total'] = mysql_escape_string($_POST['total'][$i]);
            $data['last_update_date'] = date('Y-m-d');
            $data['last_update_status'] = 'New';
            $data['order_detail_status'] = '1';
            $rut_day_id = $this->_dbInsert($data, 'table_order_detail');
        }
    }

    function addNoOrder()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['salesman_id'] = mysql_escape_string($_POST['sal_id']);
        $data['distributor_id'] = mysql_escape_string($_POST['dis_id']);
        $data['retailer_id'] = mysql_escape_string($_POST['ret_id']);
        $data['date_of_order'] = mysql_escape_string($_POST['date']);
        $data['time_of_order'] = mysql_escape_string($_POST['time']);
        $data['comments'] = mysql_escape_string($_POST['comments']);
        $data['order_type'] = 'No';
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['order_status'] = 'A';
        $id = $this->_dbInsert($data, 'table_order');
        return $id;
    }

    function UpdateLocation()
    {
        $auRec = $this->_getSelectList('table_retailer_location', "*", '', " location_id=" . $_POST['location_id']);
        //$Price=$auRec[0]->item_price;
        $data['lat'] = $auRec[0]->lat;
        $data['lng'] = $auRec[0]->lng;
        $data['lat_lng_capcure_by'] = $auRec[0]->lat_lng_capcure_by;
        $data['lat_lng_capcure_date'] = $auRec[0]->lat_lng_capcure_date;
        $data['lat_lng_capcure_accuracy'] = $auRec[0]->lat_lng_capcure_accuracy;
        $data['capcure_mode'] = $auRec[0]->capcure_mode;
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $id = $this->_dbUpdate($data, 'table_retailer', " retailer_id=" . $auRec[0]->retailer_id);
        return $id;
    }

    function OrderReject($id)
    {
        $auRec = $this->_getSelectList2('table_order_detail', "*", '', " order_detail_id=" . $id);
        $order_id = $auRec[0]->order_id;
        $item_id = $auRec[0]->item_id;
        //OLD INVOICE AMOUNT
        $old_amt = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as old_amt", '', " order_id=$order_id and item_id=$item_id and type=1 ");
        //OLD DISCOUNT AMOUNT
        $old_dis = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as old_dis", '', " order_id=$order_id and item_id=$item_id and type=2 ");
        $total_old_amt = $old_amt[0]->old_amt - $old_dis[0]->old_dis;
        $data['tag_id'] = mysql_escape_string($_POST['tag_id']);
        $data['acc_quantity'] = '0';
        $data['acc_total'] = '0';
        $data['order_detail_status'] = '3';
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $id = $this->_dbUpdate2($data, 'table_order_detail', " order_detail_id=" . $id);
        //Calculate Items wise scheme
        $itemDis = $this->_getSelectList2('table_order_detail as det left join table_discount_detail as d on d.discount_id=det.acc_discount_id left join table_foc_detail as f on f.foc_id=d.foc_id', "det.order_detail_id,d.discount_type,d.minimum_quantity,d.discount_amount,d.discount_percentage,f.free_qty", '', " det.item_id=$item_id and det.type=2 and det.order_id='$order_id' ");
        //New Amount
        $itemTotal = $this->_getSelectList2('table_order_detail', "SUM(acc_quantity) as total_items,SUM(acc_total) as total_amt", '', " order_id=$order_id and item_id=$item_id and type=1 ");
        $netItem = $itemTotal[0]->total_items;
        $netAmt = $itemTotal[0]->total_amt;
        if (is_array($itemDis)) {
            //Percentage scheme calcutate
            if ($itemDis[0]->discount_type == 1) {
                $order_detail_id = $itemDis[0]->order_detail_id;
                $apply_scheme = $itemDis[0]->discount_percentage;
                $min_qty = $itemDis[0]->minimum_quantity;
                if ($netItem >= $min_qty) {
                    $dis_amt = $netAmt * $apply_scheme / 100;
                    $datadis1['acc_total'] = $dis_amt;
                    $datadis1['order_detail_status'] = '4';
                    $datadis1['last_update_date'] = date('Y-m-d');
                    $datadis1['last_update_status'] = 'Update';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                } else {
                    $datadis1['acc_total'] = '';
                    $datadis1['order_detail_status'] = '5';
                    $datadis1['last_update_date'] = date('Y-m-d');
                    $datadis1['last_update_status'] = 'Update';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                }
                //Update Invoice Amount
                $new_item_amt = $netAmt - $dis_amt;
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total - $total_old_amt;
                $acc_amt = $net_total + $new_item_amt;
                //$datainv['acc_total_invoice_amount']=$acc_amt;
                /* $data1['order_status']='I';
					$data1['last_update_date']=date('Y-m-d');
					$data1['last_update_status']='Update'; */
                //$id=$this->_dbUpdate($datainv,'table_order', " order_id=".$orRec[0]->order_id);
            }
            //Amount scheme calcutate
            if ($itemDis[0]->discount_type == 2) {
                $order_detail_id = $itemDis[0]->order_detail_id;
                $apply_scheme = $itemDis[0]->discount_amount;
                $min_qty = $itemDis[0]->minimum_quantity;
                if ($netItem >= $min_qty) {
                    $dis = floor($netItem / $min_qty);
                    $dis_amt = $dis * $apply_scheme;
                    $datadis1['acc_total'] = $dis_amt;
                    $datadis1['order_detail_status'] = '4';
                    $datadis1['last_update_date'] = date('Y-m-d');
                    $datadis1['last_update_status'] = 'Update';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                } else {
                    $datadis1['acc_total'] = '';
                    $datadis1['order_detail_status'] = '5';
                    $datadis1['last_update_date'] = date('Y-m-d');
                    $datadis1['last_update_status'] = 'Update';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                }
                //Update Invoice Amount
                $new_item_amt = $netAmt - $dis_amt;
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total - $total_old_amt;
                $acc_amt = $net_total + $netItem;
                //$datainv['acc_total_invoice_amount']=$acc_amt;
                /* $data1['order_status']='I';
					$data1['last_update_date']=date('Y-m-d');
					$data1['last_update_status']='Update'; */
                //$id=$this->_dbUpdate($datainv,'table_order', " order_id=".$orRec[0]->order_id);
            }
            //FOC scheme calcutate
            if ($itemDis[0]->discount_type == 3) {
                $order_detail_id = $itemDis[0]->order_detail_id;
                $apply_scheme = $itemDis[0]->free_qty;
                $min_qty = $itemDis[0]->minimum_quantity;
                if ($netItem >= $min_qty) {
                    $dis = floor($netItem / $min_qty);
                    $dis_qty = $dis * $apply_scheme;
                    $datadis1['acc_free_item_qty'] = $dis_qty;
                    $datadis1['order_detail_status'] = '4';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                } else {
                    $datadis1['acc_free_item_qty'] = '';
                    $datadis1['order_detail_status'] = '5';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                }
                //Update Invoice Amount
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total - $total_old_amt;
                $acc_amt = $net_total + $netAmt;
                /*$datainv['acc_total_invoice_amount']=$acc_amt;
					$id=$this->_dbUpdate($datainv,'table_order', " order_id=".$orRec[0]->order_id); */
            }
        } else {
            $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
            $total = $orRec[0]->acc_total_invoice_amount;
            $net_total = $total - $total_old_amt;
            $acc_amt = $net_total + $netAmt;
        }
        //Update Invoice
        $data1['acc_total_invoice_amount'] = $acc_amt;
        //$data1['order_status']='I';
        $data1['last_update_date'] = date('Y-m-d');
        $data1['last_update_status'] = 'Update';
        $id = $this->_dbUpdate($data1, 'table_order', " order_id=" . $order_id);
        //Combo wise scheme
        $comDis = $this->_getSelectList2('table_order_combo_detail as c left join table_discount_detail as d on d.discount_id=c.discount_id left join table_foc_detail as f on f.foc_id=d.foc_id', "c.apply_item_id,c.discount_id as discount,c.acc_discount_amount,d.discount_type,d.minimum_amount,d.discount_amount,d.discount_percentage,f.free_qty", '', " c.order_id=$order_id and FIND_IN_SET($item_id, apply_item_id)");
        if (is_array($comDis)) {
            //Percentage scheme calcutate
            if ($comDis[0]->discount_type == 1) {
                $dis_id = $comDis[0]->discount;
                $apply_scheme = $comDis[0]->discount_percentage;
                $min_amt = $comDis[0]->minimum_amount;
                $apply_items_id = $comDis[0]->apply_item_id;
                $old_dis_com = $comDis[0]->acc_discount_amount;
                $total_combo = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 and item_id in ($apply_items_id)");
                $com_amt = $total_combo[0]->total_amt;
                if ($com_amt >= $min_amt) {
                    $dis_amt = $com_amt * $apply_scheme / 100;
                    $datadis2['acc_discount_amount'] = $dis_amt;
                    $datadis2['status'] = '4';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                } else {
                    $datadis2['acc_discount_amount'] = '';
                    $datadis2['status'] = '5';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                }
                //Update Invoice Amount
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total + $old_dis_com;
                $acc_amt = $net_total - $dis_amt;
                $datacom['acc_total_invoice_amount'] = $acc_amt;
                $id = $this->_dbUpdate($datacom, 'table_order', " order_id=" . $orRec[0]->order_id);
            }
            //Amount scheme calcutate
            if ($comDis[0]->discount_type == 2) {
                $dis_id = $comDis[0]->discount;
                $apply_scheme = $comDis[0]->discount_amount;
                $min_amt = $comDis[0]->minimum_amount;
                $apply_items_id = $comDis[0]->apply_item_id;
                $old_dis_com = $comDis[0]->acc_discount_amount;
                $total_combo = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 and item_id in ($apply_items_id)");
                $com_amt = $total_combo[0]->total_amt;
                if ($com_amt >= $min_amt) {
                    $dis = floor($com_amt / $min_amt);
                    $dis_amt = $dis * $apply_scheme;
                    //$dis_amt=$com_amt*$apply_scheme/100;
                    $datadis2['acc_discount_amount'] = $dis_amt;
                    $datadis2['status'] = '4';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                } else {
                    $datadis2['acc_discount_amount'] = '';
                    $datadis2['status'] = '5';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                }
                //Update Invoice Amount
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total + $old_dis_com;
                $acc_amt = $net_total - $dis_amt;
                $datacom['acc_total_invoice_amount'] = $acc_amt;
                $id = $this->_dbUpdate($datacom, 'table_order', " order_id=" . $orRec[0]->order_id);
            }
            if ($comDis[0]->discount_type == 3) {
                $dis_id = $comDis[0]->discount;
                $apply_scheme = $comDis[0]->free_qty;
                $min_amt = $comDis[0]->minimum_amount;
                $apply_items_id = $comDis[0]->apply_item_id;
                $old_dis_com = $comDis[0]->acc_discount_amount;
                $total_combo = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 and item_id in ($apply_items_id)");
                $com_amt = $total_combo[0]->total_amt;
                if ($com_amt >= $min_amt) {
                    $dis = floor($com_amt / $min_amt);
                    $dis_qty = $dis * $apply_scheme;
                    //$dis_amt=$com_amt*$apply_scheme/100;
                    $datadis2['acc_free_item_qty'] = $dis_qty;
                    $datadis2['status'] = '4';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                } else {
                    $datadis2['acc_free_item_qty'] = '';
                    $datadis2['status'] = '5';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                }
            }
        }
        //Invoice wise scheme
        $invDis = $this->_getSelectList2('table_order as o left join table_discount_detail as d on d.discount_id=o.discount_id left join table_foc_detail as f on f.foc_id=d.foc_id', "o.order_id,o.acc_total_invoice_amount,o.discount_id as discount,d.discount_type,d.minimum_amount,d.discount_amount,d.discount_percentage,f.free_qty", '', " o.discount_id!='0' and o.order_id=$order_id ");
        if (is_array($invDis)) {
            //Percentage scheme calcutate
            if ($invDis[0]->discount_type == 1) {
                $dis_id = $invDis[0]->discount;
                $apply_scheme = $invDis[0]->discount_percentage;
                $min_amt = $invDis[0]->minimum_amount;
                $total_invoice = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 ");
                $inv_amt = $total_invoice[0]->total_amt;
                if ($inv_amt >= $min_amt) {
                    $dis_amt = $inv_amt * $apply_scheme / 100;
                    $datadis['acc_discount_id'] = $dis_id;
                    $datadis['acc_discount_amount'] = $dis_amt;
                    $datadis['acc_total_invoice_amount'] = $inv_amt - $dis_amt;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                } else {
                    $datadis['acc_discount_id'] = '';
                    $datadis['acc_discount_amount'] = '';
                    $datadis['acc_total_invoice_amount'] = $inv_amt;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                }
            }
            //Amount scheme calcutate
            if ($invDis[0]->discount_type == 2) {
                $dis_id = $invDis[0]->discount;
                $apply_scheme = $invDis[0]->discount_amount;
                $min_amt = $invDis[0]->minimum_amount;
                $total_invoice = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 ");
                $inv_amt = $total_invoice[0]->total_amt;
                if ($inv_amt >= $min_amt) {
                    $dis = floor($inv_amt / $min_amt);
                    $dis_amt = $dis * $apply_scheme;
                    $datadis['acc_discount_id'] = $dis_id;
                    $datadis['acc_discount_amount'] = $dis_amt;
                    $datadis['acc_total_invoice_amount'] = $inv_amt - $dis_amt;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                } else {
                    $datadis['acc_discount_id'] = '';
                    $datadis['acc_discount_amount'] = '';
                    $datadis['acc_total_invoice_amount'] = $inv_amt;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                }
            }
            //FOC scheme calcutate
            if ($invDis[0]->discount_type == 3) {
                $dis_id = $invDis[0]->discount;
                $apply_scheme = $invDis[0]->free_qty;
                $min_amt = $invDis[0]->minimum_amount;
                $inv_amt = $invDis[0]->acc_total_invoice_amount;
                if ($inv_amt >= $min_amt) {
                    $dis = floor($inv_amt / $min_amt);
                    $dis_qty = $dis * $apply_scheme;
                    $datadis['acc_discount_id'] = $dis_id;
                    $datadis['acc_free_item_qty'] = $dis_qty;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                } else {
                    $datadis['acc_discount_id'] = '';
                    $datadis['acc_free_item_qty'] = '';
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                }
            }
        }
    }

    function OrderAccept($id)
    {
        $auRec = $this->_getSelectList2('table_order_detail', "*", '', " order_detail_id=" . $id);
        $order_id = $auRec[0]->order_id;
        $item_id = $auRec[0]->item_id;
        $item_total = $auRec[0]->acc_total;
        $item_price = $auRec[0]->price;
        $quantity = $auRec[0]->acc_quantity;
        if ($quantity == 0) {
            $item_order = $auRec[0]->quantity;
        } else {
            $item_order = $auRec[0]->acc_quantity;
        }
        $total_price = $item_order * $item_price;
        $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
        //OLD INVOICE AMOUNT
        $old_amt = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as old_amt", '', " order_id=$order_id and item_id=$item_id and type=1 ");
        //OLD DISCOUNT AMOUNT
        $old_dis = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as old_dis", '', " order_id=$order_id and item_id=$item_id and type=2 ");
        $total_old_amt = $old_amt[0]->old_amt - $old_dis[0]->old_dis;
        $data['tag_id'] = '';
        $data['acc_total'] = $total_price;
        $data['acc_quantity'] = $item_order;
        $data['order_detail_status'] = '2';
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $id = $this->_dbUpdate2($data, 'table_order_detail', " order_detail_id=" . $id);
        //Calculate Items wise scheme
        $itemDis = $this->_getSelectList2('table_order_detail as det left join table_discount_detail as d on d.discount_id=det.acc_discount_id left join table_foc_detail as f on f.foc_id=d.foc_id', "det.order_detail_id,d.discount_type,d.minimum_quantity,d.discount_amount,d.discount_percentage,f.free_qty", '', " det.item_id=$item_id and det.type=2 and det.order_id=$order_id ");
        //New Amount
        $itemTotal = $this->_getSelectList2('table_order_detail', "SUM(acc_quantity) as total_items,SUM(acc_total) as total_amt", '', " order_id=$order_id and item_id=$item_id and type=1 ");
        $netItem = $itemTotal[0]->total_items;
        $netAmt = $itemTotal[0]->total_amt;
        if (is_array($itemDis)) {
            //Percentage scheme calcutate
            if ($itemDis[0]->discount_type == 1) {
                $order_detail_id = $itemDis[0]->order_detail_id;
                $apply_scheme = $itemDis[0]->discount_percentage;
                $min_qty = $itemDis[0]->minimum_quantity;
                if ($netItem >= $min_qty) {
                    $dis_amt = $netAmt * $apply_scheme / 100;
                    $datadis1['acc_total'] = $dis_amt;
                    $datadis1['order_detail_status'] = '4';
                    $datadis1['last_update_date'] = date('Y-m-d');
                    $datadis1['last_update_status'] = 'Update';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                } else {
                    $datadis1['acc_total'] = '';
                    $datadis1['order_detail_status'] = '5';
                    $datadis1['last_update_date'] = date('Y-m-d');
                    $datadis1['last_update_status'] = 'Update';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                }
                //Update Invoice Amount
                $new_item_amt = $netAmt - $dis_amt;
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total - $total_old_amt;
                $acc_amt = $net_total + $new_item_amt;
                /* $datainv['acc_total_invoice_amount']=$acc_amt;
					$id=$this->_dbUpdate($datainv,'table_order', " order_id=".$order_id); */
            }
            //Amount scheme calcutate
            if ($itemDis[0]->discount_type == 2) {
                $order_detail_id = $itemDis[0]->order_detail_id;
                $apply_scheme = $itemDis[0]->discount_amount;
                $min_qty = $itemDis[0]->minimum_quantity;
                if ($netItem >= $min_qty) {
                    $dis = floor($netItem / $min_qty);
                    $dis_amt = $dis * $apply_scheme;
                    $datadis1['acc_total'] = $dis_amt;
                    $datadis1['order_detail_status'] = '4';
                    $datadis1['last_update_date'] = date('Y-m-d');
                    $datadis1['last_update_status'] = 'Update';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                } else {
                    $datadis1['acc_total'] = '';
                    $datadis1['order_detail_status'] = '5';
                    $datadis1['last_update_date'] = date('Y-m-d');
                    $datadis1['last_update_status'] = 'Update';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                }
                //Update Invoice Amount
                $new_item_amt = $netAmt - $dis_amt;
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total - $total_old_amt;
                $acc_amt = $net_total + $new_item_amt;
                /* $datainv['acc_total_invoice_amount']=$acc_amt;
					$id=$this->_dbUpdate($datainv,'table_order', " order_id=".$order_id); */
            }
            //FOC scheme calcutate
            if ($itemDis[0]->discount_type == 3) {
                $order_detail_id = $itemDis[0]->order_detail_id;
                $apply_scheme = $itemDis[0]->free_qty;
                $min_qty = $itemDis[0]->minimum_quantity;
                if ($netItem >= $min_qty) {
                    $dis = floor($netItem / $min_qty);
                    $dis_qty = $dis * $apply_scheme;
                    $datadis1['acc_free_item_qty'] = $dis_qty;
                    $datadis1['order_detail_status'] = '4';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                } else {
                    $datadis1['acc_free_item_qty'] = '';
                    $datadis1['order_detail_status'] = '5';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                }
                //Update Invoice Amount
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total - $total_old_amt;
                $acc_amt = $net_total + $netAmt;
                /* $datainv['acc_total_invoice_amount']=$acc_amt;
					$id=$this->_dbUpdate($datainv,'table_order', " order_id=".$orRec[0]->order_id); */
            }
        } else {
            $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
            $total = $orRec[0]->acc_total_invoice_amount;
            $net_total = $total - $total_old_amt;
            $acc_amt = $net_total + $netAmt;
        }
        //Update Invoine
        $data1['acc_total_invoice_amount'] = $acc_amt;
        //$data1['order_status']='I';
        $data1['last_update_date'] = date('Y-m-d');
        $data1['last_update_status'] = 'Update';
        $id = $this->_dbUpdate($data1, 'table_order', " order_id=" . $orRec[0]->order_id);
        //Combo wise scheme
        //Combo wise scheme
        $comDis = $this->_getSelectList2('table_order_combo_detail as c left join table_discount_detail as d on d.discount_id=c.discount_id left join table_foc_detail as f on f.foc_id=d.foc_id', "c.apply_item_id,c.discount_id as discount,c.acc_discount_amount,d.discount_type,d.minimum_amount,d.discount_amount,d.discount_percentage,f.free_qty", '', " c.order_id=$order_id and FIND_IN_SET($item_id, apply_item_id)");
        if (is_array($comDis)) {
            //Percentage scheme calcutate
            if ($comDis[0]->discount_type == 1) {
                $dis_id = $comDis[0]->discount;
                $apply_scheme = $comDis[0]->discount_percentage;
                $min_amt = $comDis[0]->minimum_amount;
                $apply_items_id = $comDis[0]->apply_item_id;
                $old_dis_com = $comDis[0]->acc_discount_amount;
                $total_combo = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 and item_id in ($apply_items_id)");
                $com_amt = $total_combo[0]->total_amt;
                if ($com_amt >= $min_amt) {
                    $dis_amt = $com_amt * $apply_scheme / 100;
                    $datadis2['acc_discount_amount'] = $dis_amt;
                    $datadis2['status'] = '4';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                } else {
                    $datadis2['acc_discount_amount'] = '';
                    $datadis2['status'] = '5';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                }
                //Update Invoice Amount
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total + $old_dis_com;
                $acc_amt = $net_total - $dis_amt;
                $datacom['acc_total_invoice_amount'] = $acc_amt;
                $id = $this->_dbUpdate($datacom, 'table_order', " order_id=" . $orRec[0]->order_id);
            }
            //Amount scheme calcutate
            if ($comDis[0]->discount_type == 2) {
                $dis_id = $comDis[0]->discount;
                $apply_scheme = $comDis[0]->discount_amount;
                $min_amt = $comDis[0]->minimum_amount;
                $apply_items_id = $comDis[0]->apply_item_id;
                $old_dis_com = $comDis[0]->acc_discount_amount;
                $total_combo = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 and item_id in ($apply_items_id)");
                $com_amt = $total_combo[0]->total_amt;
                if ($com_amt >= $min_amt) {
                    $dis = floor($com_amt / $min_amt);
                    $dis_amt = $dis * $apply_scheme;
                    //$dis_amt=$com_amt*$apply_scheme/100;
                    $datadis2['acc_discount_amount'] = $dis_amt;
                    $datadis2['status'] = '4';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                } else {
                    $datadis2['acc_discount_amount'] = '';
                    $datadis2['status'] = '5';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                }
                //Update Invoice Amount
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total + $old_dis_com;
                $acc_amt = $net_total - $dis_amt;
                $datacom['acc_total_invoice_amount'] = $acc_amt;
                $id = $this->_dbUpdate($datacom, 'table_order', " order_id=" . $orRec[0]->order_id);
            }
            if ($comDis[0]->discount_type == 3) {
                $dis_id = $comDis[0]->discount;
                $apply_scheme = $comDis[0]->free_qty;
                $min_amt = $comDis[0]->minimum_amount;
                $apply_items_id = $comDis[0]->apply_item_id;
                $old_dis_com = $comDis[0]->acc_discount_amount;
                $total_combo = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 and item_id in ($apply_items_id)");
                $com_amt = $total_combo[0]->total_amt;
                if ($com_amt >= $min_amt) {
                    $dis = floor($com_amt / $min_amt);
                    $dis_qty = $dis * $apply_scheme;
                    //$dis_amt=$com_amt*$apply_scheme/100;
                    $datadis2['acc_free_item_qty'] = $dis_qty;
                    $datadis2['status'] = '4';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                } else {
                    $datadis2['acc_free_item_qty'] = '';
                    $datadis2['status'] = '5';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                }
            }
        }
        //Invoice wise scheme
        $invDis = $this->_getSelectList2('table_order as o left join table_discount_detail as d on d.discount_id=o.discount_id left join table_foc_detail as f on f.foc_id=d.foc_id', "o.order_id,o.acc_total_invoice_amount,o.discount_id as discount,d.discount_type,d.minimum_amount,d.discount_amount,d.discount_percentage,f.free_qty", '', " o.discount_id!='0' and o.order_id=$order_id ");
        if (is_array($invDis)) {
            //Percentage scheme calcutate
            if ($invDis[0]->discount_type == 1) {
                $dis_id = $invDis[0]->discount;
                $apply_scheme = $invDis[0]->discount_percentage;
                $min_amt = $invDis[0]->minimum_amount;
                $total_invoice = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 ");
                $inv_amt = $total_invoice[0]->total_amt;
                if ($inv_amt >= $min_amt) {
                    $dis_amt = $inv_amt * $apply_scheme / 100;
                    $datadis['acc_discount_id'] = $dis_id;
                    $datadis['acc_discount_amount'] = $dis_amt;
                    $datadis['acc_total_invoice_amount'] = $inv_amt - $dis_amt;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                } else {
                    $datadis['acc_discount_id'] = '';
                    $datadis['acc_discount_amount'] = '';
                    $datadis['acc_total_invoice_amount'] = $inv_amt;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                }
            }
            //Amount scheme calcutate
            if ($invDis[0]->discount_type == 2) {
                $dis_id = $invDis[0]->discount;
                $apply_scheme = $invDis[0]->discount_amount;
                $min_amt = $invDis[0]->minimum_amount;
                $total_invoice = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 ");
                $inv_amt = $total_invoice[0]->total_amt;
                if ($inv_amt >= $min_amt) {
                    $dis = floor($inv_amt / $min_amt);
                    $dis_amt = $dis * $apply_scheme;
                    $datadis['acc_discount_id'] = $dis_id;
                    $datadis['acc_discount_amount'] = $dis_amt;
                    $datadis['acc_total_invoice_amount'] = $inv_amt - $dis_amt;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                } else {
                    $datadis['acc_discount_id'] = '';
                    $datadis['acc_discount_amount'] = '';
                    $datadis['acc_total_invoice_amount'] = $inv_amt;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                }
            }
            //FOC scheme calcutate
            if ($invDis[0]->discount_type == 3) {
                $dis_id = $invDis[0]->discount;
                $apply_scheme = $invDis[0]->free_qty;
                $min_amt = $invDis[0]->minimum_amount;
                $inv_amt = $invDis[0]->acc_total_invoice_amount;
                if ($inv_amt >= $min_amt) {
                    $dis = floor($inv_amt / $min_amt);
                    $dis_qty = $dis * $apply_scheme;
                    $datadis['acc_discount_id'] = $dis_id;
                    $datadis['acc_free_item_qty'] = $dis_qty;
                    //$datadis['order_detail_status']='4';
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                } else {
                    $datadis['acc_discount_id'] = '';
                    $datadis['acc_free_item_qty'] = '';
                    //$datadis['order_detail_status']='5';
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                }
            }
        }
        return $min_amt;
    }

    function OrderUpdate($id, $qty)
    {
        $auRec = $this->_getSelectList2('table_order_detail', "*", '', " order_detail_id=" . $id);
        $order_id = $auRec[0]->order_id;
        $item_id = $auRec[0]->item_id;
        $item_total = $auRec[0]->acc_total;
        $item_price = $auRec[0]->price;
        $item_order = $qty;
        $total_price = $item_order * $item_price;
        $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
        //OLD INVOICE AMOUNT
        $old_amt = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as old_amt", '', " order_id=$order_id and item_id=$item_id and type=1 ");
        //OLD DISCOUNT AMOUNT
        $old_dis = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as old_dis", '', " order_id=$order_id and item_id=$item_id and type=2 ");
        $total_old_amt = $old_amt[0]->old_amt - $old_dis[0]->old_dis;
        $data['tag_id'] = '';
        $data['acc_total'] = $total_price;
        $data['acc_quantity'] = $item_order;
        if ($item_order != 0) {
            $data['order_detail_status'] = '2';
        } else {
            $data['order_detail_status'] = '3';
        }
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $id = $this->_dbUpdate2($data, 'table_order_detail', " order_detail_id=" . $id);
        //Calculate Items wise scheme
        $itemDis = $this->_getSelectList2('table_order_detail as det left join table_discount_detail as d on d.discount_id=det.acc_discount_id left join table_foc_detail as f on f.foc_id=d.foc_id', "det.order_detail_id,d.discount_type,d.minimum_quantity,d.discount_amount,d.discount_percentage,f.free_qty", '', " det.item_id=$item_id and det.type=2 and det.order_id=$order_id ");
        //New Amount
        $itemTotal = $this->_getSelectList2('table_order_detail', "SUM(acc_quantity) as total_items,SUM(acc_total) as total_amt", '', " order_id=$order_id and item_id=$item_id and type=1 ");
        $netItem = $itemTotal[0]->total_items;
        $netAmt = $itemTotal[0]->total_amt;
        if (is_array($itemDis)) {
            //Percentage scheme calcutate
            if ($itemDis[0]->discount_type == 1) {
                $order_detail_id = $itemDis[0]->order_detail_id;
                $apply_scheme = $itemDis[0]->discount_percentage;
                $min_qty = $itemDis[0]->minimum_quantity;
                if ($netItem >= $min_qty) {
                    $dis_amt = $netAmt * $apply_scheme / 100;
                    $datadis1['acc_total'] = $dis_amt;
                    $datadis1['order_detail_status'] = '4';
                    $datadis1['last_update_date'] = date('Y-m-d');
                    $datadis1['last_update_status'] = 'Update';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                } else {
                    $datadis1['acc_total'] = '';
                    $datadis1['order_detail_status'] = '5';
                    $datadis1['last_update_date'] = date('Y-m-d');
                    $datadis1['last_update_status'] = 'Update';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                }
                //Update Invoice Amount
                $new_item_amt = $netAmt - $dis_amt;
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total - $total_old_amt;
                $acc_amt = $net_total + $new_item_amt;
                /* $datainv['acc_total_invoice_amount']=$acc_amt;
					$id=$this->_dbUpdate($datainv,'table_order', " order_id=".$order_id); */
            }
            //Amount scheme calcutate
            if ($itemDis[0]->discount_type == 2) {
                $order_detail_id = $itemDis[0]->order_detail_id;
                $apply_scheme = $itemDis[0]->discount_amount;
                $min_qty = $itemDis[0]->minimum_quantity;
                if ($netItem >= $min_qty) {
                    $dis = floor($netItem / $min_qty);
                    $dis_amt = $dis * $apply_scheme;
                    $datadis1['acc_total'] = $dis_amt;
                    $datadis1['order_detail_status'] = '4';
                    $datadis1['last_update_date'] = date('Y-m-d');
                    $datadis1['last_update_status'] = 'Update';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                } else {
                    $datadis1['acc_total'] = '';
                    $datadis1['order_detail_status'] = '5';
                    $datadis1['last_update_date'] = date('Y-m-d');
                    $datadis1['last_update_status'] = 'Update';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                }
                //Update Invoice Amount
                $new_item_amt = $netAmt - $dis_amt;
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total - $total_old_amt;
                $acc_amt = $net_total + $new_item_amt;
                /* $datainv['acc_total_invoice_amount']=$acc_amt;
					$id=$this->_dbUpdate($datainv,'table_order', " order_id=".$order_id); */
            }
            //FOC scheme calcutate
            if ($itemDis[0]->discount_type == 3) {
                $order_detail_id = $itemDis[0]->order_detail_id;
                $apply_scheme = $itemDis[0]->free_qty;
                $min_qty = $itemDis[0]->minimum_quantity;
                if ($netItem >= $min_qty) {
                    $dis = floor($netItem / $min_qty);
                    $dis_qty = $dis * $apply_scheme;
                    $datadis1['acc_free_item_qty'] = $dis_qty;
                    $datadis1['order_detail_status'] = '4';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                } else {
                    $datadis1['acc_free_item_qty'] = '';
                    $datadis1['order_detail_status'] = '5';
                    $update_dis = $this->_dbUpdate2($datadis1, 'table_order_detail', " order_detail_id=" . $order_detail_id);
                }
                //Update Invoice Amount
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total - $total_old_amt;
                $acc_amt = $net_total + $netAmt;
                /* $datainv['acc_total_invoice_amount']=$acc_amt;
					$id=$this->_dbUpdate($datainv,'table_order', " order_id=".$orRec[0]->order_id); */
            }
        } else {
            $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
            $total = $orRec[0]->acc_total_invoice_amount;
            $net_total = $total - $total_old_amt;
            $acc_amt = $net_total + $netAmt;
        }
        //Update Invoine
        $data1['acc_total_invoice_amount'] = $acc_amt;
        //$data1['order_status']='I';
        $data1['last_update_date'] = date('Y-m-d');
        $data1['last_update_status'] = 'Update';
        $id = $this->_dbUpdate($data1, 'table_order', " order_id=" . $orRec[0]->order_id);
        //Combo wise scheme
        $comDis = $this->_getSelectList2('table_order_combo_detail as c left join table_discount_detail as d on d.discount_id=c.discount_id left join table_foc_detail as f on f.foc_id=d.foc_id', "c.apply_item_id,c.discount_id as discount,c.acc_discount_amount,d.discount_type,d.minimum_amount,d.discount_amount,d.discount_percentage,f.free_qty", '', " c.order_id=$order_id and FIND_IN_SET($item_id, apply_item_id)");
        if (is_array($comDis)) {
            //Percentage scheme calcutate
            if ($comDis[0]->discount_type == 1) {
                $dis_id = $comDis[0]->discount;
                $apply_scheme = $comDis[0]->discount_percentage;
                $min_amt = $comDis[0]->minimum_amount;
                $apply_items_id = $comDis[0]->apply_item_id;
                $old_dis_com = $comDis[0]->acc_discount_amount;
                $total_combo = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 and item_id in ($apply_items_id)");
                $com_amt = $total_combo[0]->total_amt;
                if ($com_amt >= $min_amt) {
                    $dis_amt = $com_amt * $apply_scheme / 100;
                    $datadis2['acc_discount_amount'] = $dis_amt;
                    $datadis2['status'] = '4';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                } else {
                    $datadis2['acc_discount_amount'] = '';
                    $datadis2['status'] = '5';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                }
                //Update Invoice Amount
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total + $old_dis_com;
                $acc_amt = $net_total - $dis_amt;
                $datacom['acc_total_invoice_amount'] = $acc_amt;
                $id = $this->_dbUpdate($datacom, 'table_order', " order_id=" . $orRec[0]->order_id);
            }
            //Amount scheme calcutate
            if ($comDis[0]->discount_type == 2) {
                $dis_id = $comDis[0]->discount;
                $apply_scheme = $comDis[0]->discount_amount;
                $min_amt = $comDis[0]->minimum_amount;
                $apply_items_id = $comDis[0]->apply_item_id;
                $old_dis_com = $comDis[0]->acc_discount_amount;
                $total_combo = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 and item_id in ($apply_items_id)");
                $com_amt = $total_combo[0]->total_amt;
                if ($com_amt >= $min_amt) {
                    $dis = floor($com_amt / $min_amt);
                    $dis_amt = $dis * $apply_scheme;
                    //$dis_amt=$com_amt*$apply_scheme/100;
                    $datadis2['acc_discount_amount'] = $dis_amt;
                    $datadis2['status'] = '4';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                } else {
                    $datadis2['acc_discount_amount'] = '';
                    $datadis2['status'] = '5';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                }
                //Update Invoice Amount
                $orRec = $this->_getSelectList('table_order', "*", '', " order_id=" . $order_id);
                $total = $orRec[0]->acc_total_invoice_amount;
                $net_total = $total + $old_dis_com;
                $acc_amt = $net_total - $dis_amt;
                $datacom['acc_total_invoice_amount'] = $acc_amt;
                $id = $this->_dbUpdate($datacom, 'table_order', " order_id=" . $orRec[0]->order_id);
            }
            //Combo scheme calcutate
            if ($comDis[0]->discount_type == 3) {
                $dis_id = $comDis[0]->discount;
                $apply_scheme = $comDis[0]->free_qty;
                $min_amt = $comDis[0]->minimum_amount;
                $apply_items_id = $comDis[0]->apply_item_id;
                $old_dis_com = $comDis[0]->acc_discount_amount;
                $total_combo = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 and item_id in ($apply_items_id)");
                $com_amt = $total_combo[0]->total_amt;
                if ($com_amt >= $min_amt) {
                    $dis = floor($com_amt / $min_amt);
                    $dis_qty = $dis * $apply_scheme;
                    //$dis_amt=$com_amt*$apply_scheme/100;
                    $datadis2['acc_free_item_qty'] = $dis_qty;
                    $datadis2['status'] = '4';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                } else {
                    $datadis2['acc_free_item_qty'] = '';
                    $datadis2['status'] = '5';
                    $update_dis = $this->_dbUpdate2($datadis2, 'table_order_combo_detail', " order_id=$order_id and FIND_IN_SET($item_id, apply_item_id) ");
                }
            }
        }
        //Invoice wise scheme
        $invDis = $this->_getSelectList2('table_order as o left join table_discount_detail as d on d.discount_id=o.discount_id left join table_foc_detail as f on f.foc_id=d.foc_id', "o.order_id,o.acc_total_invoice_amount,o.discount_id as discount,d.discount_type,d.minimum_amount,d.discount_amount,d.discount_percentage,f.free_qty", '', " o.discount_id!='0' and o.order_id=$order_id ");
        if (is_array($invDis)) {
            //Percentage scheme calcutate
            if ($invDis[0]->discount_type == 1) {
                $dis_id = $invDis[0]->discount;
                $apply_scheme = $invDis[0]->discount_percentage;
                $min_amt = $invDis[0]->minimum_amount;
                $total_invoice = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 ");
                $inv_amt = $total_invoice[0]->total_amt;
                if ($inv_amt >= $min_amt) {
                    $dis_amt = $inv_amt * $apply_scheme / 100;
                    $datadis['acc_discount_id'] = $dis_id;
                    $datadis['acc_discount_amount'] = $dis_amt;
                    $datadis['acc_total_invoice_amount'] = $inv_amt - $dis_amt;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                } else {
                    $datadis['acc_discount_id'] = '';
                    $datadis['acc_discount_amount'] = '';
                    $datadis['acc_total_invoice_amount'] = $inv_amt;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                }
            }
            //Amount scheme calcutate
            if ($invDis[0]->discount_type == 2) {
                $dis_id = $invDis[0]->discount;
                $apply_scheme = $invDis[0]->discount_amount;
                $min_amt = $invDis[0]->minimum_amount;
                $total_invoice = $this->_getSelectList2('table_order_detail', "SUM(acc_total) as total_amt", '', " order_id=$order_id and type=1 ");
                $inv_amt = $total_invoice[0]->total_amt;
                if ($inv_amt >= $min_amt) {
                    $dis = floor($inv_amt / $min_amt);
                    $dis_amt = $dis * $apply_scheme;
                    $datadis['acc_discount_id'] = $dis_id;
                    $datadis['acc_discount_amount'] = $dis_amt;
                    $datadis['acc_total_invoice_amount'] = $inv_amt - $dis_amt;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                } else {
                    $datadis['acc_discount_id'] = '';
                    $datadis['acc_discount_amount'] = '';
                    $datadis['acc_total_invoice_amount'] = $inv_amt;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                }
            }
            //FOC scheme calcutate
            if ($invDis[0]->discount_type == 3) {
                $dis_id = $invDis[0]->discount;
                $apply_scheme = $invDis[0]->free_qty;
                $min_amt = $invDis[0]->minimum_amount;
                $inv_amt = $invDis[0]->acc_total_invoice_amount;
                if ($inv_amt >= $min_amt) {
                    $dis = floor($inv_amt / $min_amt);
                    $dis_qty = $dis * $apply_scheme;
                    $datadis['acc_discount_id'] = $dis_id;
                    $datadis['acc_free_item_qty'] = $dis_qty;
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                } else {
                    $datadis['acc_discount_id'] = '';
                    $datadis['acc_free_item_qty'] = '';
                    $update_dis = $this->_dbUpdate2($datadis, 'table_order', " order_id=" . $order_id);
                }
            }
        }
        return $total;
    }

    function addMessage($id)
    {
        $data['salesman_id'] = mysql_escape_string($id);
        $data['subject'] = mysql_escape_string(preg_replace("/[[:blank:]]+/", " ", $_POST['subject']));
        $data['message'] = mysql_escape_string(preg_replace("/[[:blank:]]+/", " ", $_POST['message']));
        $data['image_required'] = mysql_escape_string($_POST['image_required']);
        $data['send_date'] = date('Y-m-d');
        $data['send_time'] = date("H:i:s");
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_message');
        return $id;
    }

    function showCategory()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasCat']) && $_SESSION['MasCat'] != 'all' && $_SESSION['MasCat'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasCat'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " cat_type = 'C' and type='I' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_category', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_category', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"category.php?stid=' . $auRec[$i]->category_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->category_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_code) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRelationship()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'relationship_code';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasRelationship']) && $_SESSION['MasRelationship'] != 'all' && $_SESSION['MasRelationship'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasRelationship'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " account_id='" . $_SESSION['accountId'] . "' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_relationship', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_relationship', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"relationship.php?stid=' . $auRec[$i]->relationship_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->relationship_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->relationship_code) . '"';
            // $json .= ',"' . addslashes($auRec[$i]->relationship_desc) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


    function showItemColor()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'color_code';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasColItem']) && $_SESSION['MasColItem'] != 'all' && $_SESSION['MasColItem'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasColItem'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " account_id='" . $_SESSION['accountId'] . "' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_color', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_color', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"item_color.php?stid=' . $auRec[$i]->color_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->color_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->color_code) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->color_desc)) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showItem()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'item_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " and b.brand_id IN(" . $RoleBrands . ")";
        }
        //Todo Start Sudhanshu 28 may 2024 : add status filtr
        if (isset($_SESSION['MasStatus']) && $_SESSION['MasStatus'] != '') {
            $status = " And i.status= '" . $_SESSION['MasStatus'] . "' ";
        }

        if (isset($_SESSION['itemType']) && $_SESSION['itemType'] != '') {
            $itemType = " And i.item_type= '" . $_SESSION['itemType'] . "' ";
        }

        //Todo End Sudhanshu 28 may 2024 : add status filtr
        $where = "  i.account_id='" . $_SESSION['accountId'] . "' $brandCnd $status $itemType";

        // echo $_POST['item_type'];die;
        // echo $where;die;

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_item as i 
			left join table_category as c on i.category_id = c.category_id 
             left join table_subcategory as sc on i.subcategory_id = sc.subcategory_id 
			left join table_brands as b on b.brand_id=i.brand_id 
            left join table_grade as gt on gt.grade_id=i.grade_id 
			left join table_item_case_relationship re on re.item_id=i.item_id 
			left join table_cases as cas on cas.case_id=re.case_id
			left join table_variant as va on va.variant_id=i.variant_id 
			LEFT JOIN table_price AS P ON P.item_id = i.item_id
			LEFT JOIN table_item_gst AS it ON it.item_id = i.item_id 
			left join table_sku as sk on sk.sku_id=i.sku_id
			Left join table_HSN_code_master as hsn on hsn.hsn_id = i.HSN_id
               LEFT JOIN table_item_ranking as ir ON ir.item_rank_id = i.rank_id',
            "i.*,c.category_name,sc.subcategory_name,c.status as cate_status,it.tax,b.brand_name,va.variant_name,sk.sku_name,P.item_mrp,P.item_dp,P.dist_price,P.stockist_price,cas.case_description,cas.case_size,gt.grade_name,hsn.HSN_Code,ir.item_rank_name", $rp, $where . '   GROUP BY i.item_id ' . $sort, '');
        $auRecCount = $this->_getSelectList('table_item as i 
			left join table_category as c on i.category_id = c.category_id 
			left join table_brands as b on b.brand_id=i.brand_id 
            left join table_grade as gt on gt.grade_id=i.grade_id 
			left join table_item_case_relationship re on re.item_id=i.item_id 
			left join table_cases as cas on cas.case_id=re.case_id
			left join table_variant as va on va.variant_id=i.variant_id 
			left join table_sku as sk on sk.sku_id=i.sku_id
			Left join table_HSN_code_master as hsn on hsn.hsn_id = i.HSN_id',
            'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";
        for ($i = 0; $i < count($auRec); $i++) {
            $updateDate = $this->_changeDate($auRec[$i]->last_update_date);
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $updateStatus = ($auRec[$i]->status == 'A') ? "Inactive" : "Active";
            $category = ($auRec[$i]->cate_status == 'A') ? $auRec[$i]->category_name : "";
            $status = '<input type=\"button\" class=\"btn btn-info btn-sm btn bg-lgtgreen grid-btn ' . $auRec[$i]->item_id . '\" id=\"btn-AI\" data-id=\"' . $auRec[$i]->item_id . '\" data-href=\"ajax_changeStatus.php?stid=' . $auRec[$i]->item_id . '&value=' . $status . '\" value=\"' . $status . '\" title=\"click to ' . $updateStatus . '\">';
            //$status='<a href=\"item.php?stid='.$auRec[$i]->item_id.'&value='.$status.'\">'.$status.'</a>';
//            $price='<a href=\"item.php?pid='.$auRec[$i]->item_id.'&value=ve\">'.'View / Edit'.'</a>';
//            $ptr='<a href=\"item.php?rid='.$auRec[$i]->item_id.'&value=ve\">View / Edit</a>';
            //$Item_image='<a href="item_image.php?itemId='.base64_encode($auRec[$i]->item_id).'" target="_blank">Item Image</a>';

            if($auRec[$i]->item_type == 'F'){
                $itemType = 'FOC';
            }else if($auRec[$i]->item_type == 'I') {
                $itemType ='Item';
            }
           


            $Item_image = '<a href="rotate_img.php?itemId=' . base64_encode($auRec[$i]->item_id) . '" target="_blank">Item Image</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->item_id . '",';
            $json .= '"cell":["' . addslashes(ucwords(preg_replace($regex, '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';

            $json .= ',"' . addslashes($itemType) . '"';

            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->brand_name)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->HSN_Code)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $category)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->subcategory_name)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->grade_name)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->case_description)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->case_size)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_size)))) . '"';
//            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->variant_name)))) . '"';
//            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->sku_name)))) . '"';
            $json .= ',"' . $auRec[$i]->tax . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_dp)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_mrp)))) . '"';

            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->dist_price)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->stockist_price)))) . '"';

            $json .= ',"' . addslashes($Item_image) . '"';
            $json .= ',"' . addslashes($updateDate) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_rank_name)))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Competition master data
    function showCompetition()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'item_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();

        //Todo Start : sudhanshu 10 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasCom']) && $_SESSION['MasCom'] != 'all' && $_SESSION['MasCom'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasCom'] . "'";
        }
        //Todo End : sudhanshu 10 june 2024 : add status filter

        $where = " c.account_id='" . $_SESSION['accountId'] . "' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_comptition as c',
            "c.*", $rp, $where, '');
        $auRecCount = $this->_getSelectList('table_comptition as c',
            'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"competition_master.php?stid=' . $auRec[$i]->comptition_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->comptition_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->comptition_name) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDiscount($salesmanID)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'discount_id';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY d.last_update_date $sortorder, FIELD(d.last_update_status,'New') $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objArrayList = new ArrayList();
        $cond = $_objArrayList->getFilterCondForRouteSchemeIncentiveTargets($salesmanID);
        //$cond = ArrayList::getFilterCondForRouteSchemeIncentiveTargets($salesmanID);
        $where = " d.last_update_status!='Delete'  $cond";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_discount as d 
		left join table_discount_detail as dd on d.discount_id=dd.discount_id
		LEFT JOIN table_user_relationships AS ur ON ur.discount_id = d.discount_id 
		LEFT JOIN table_salesman AS s ON s.salesman_id = ur.salesman_id ', "d.*,dd.discount_desc,dd.discount_type,dd.minimum_amount,dd.minimum_quantity", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_discount as d 
		left join table_discount_detail as dd on d.discount_id=dd.discount_id
		LEFT JOIN table_user_relationships AS ur ON ur.discount_id = d.discount_id 
		LEFT JOIN table_salesman AS s ON s.salesman_id = ur.salesman_id ', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->mode == '1') {
                $mode = "Quantity";
            } else {
                $auRec2 = $this->_getSelectList2('table_discount_item', "discount_item_id", '', " discount_id = " . $auRec[$i]->discount_id . " ");
                if (is_array($auRec2)) {
                    $mode = "Amount (Item Combo)";
                } else {
                    $mode = "Amount (Invoice)";
                }
            }
            //$mode=($auRec[$i]->mode=='1')?"Quantity":"Amount";
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"discount.php?stid=' . $auRec[$i]->discount_id . '&value=' . $status . '\">' . $status . '</a>';
            $discount = ($auRec[$i]->discount == '1') ? "Exclusive" : "Non Exclusive";
            if ($auRec[$i]->party_type == '1')
                $party_type = "All";
            elseif ($auRec[$i]->party_type == '2')
                $party_type = "State";
            elseif ($auRec[$i]->party_type == '3')
                $party_type = "City";
            elseif ($auRec[$i]->party_type == '4')
                $party_type = "Retailer";
            if ($auRec[$i]->discount_type == '1')
                $discount_type = "Percentage";
            elseif ($auRec[$i]->discount_type == '2')
                $discount_type = "Amount";
            elseif ($auRec[$i]->discount_type == '3')
                $discount_type = "FOC";
            if ($auRec[$i]->item_type == '1')
                $item_type = "All";
            elseif ($auRec[$i]->item_type == '2')
                $item_type = "Category";
            elseif ($auRec[$i]->item_type == '3')
                $item_type = "Items";
            elseif ($auRec[$i]->item_type == '')
                $item_type = "";
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->discount_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->discount_desc) . '"';
            $json .= ',"' . addslashes(ucwords($mode)) . '"';
            $json .= ',"' . addslashes(ucwords($discount)) . '"';
            $json .= ',"' . addslashes(ucwords($item_type)) . '"';
            $json .= ',"' . addslashes(ucwords($party_type)) . '"';
            $json .= ',"' . addslashes(ucwords($discount_type)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->minimum_amount)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->minimum_quantity)) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->start_date))) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->end_date))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showItemPrice()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'start_date';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $where = " i.item_id ='" . $_SESSION['item_price_id'] . "' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_price as p left join table_item as i on p.item_id = i.item_id left join table_category as c on i.category_id = c.category_id', "p.*, i.item_name, i.item_code, c.category_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_price as p left join table_item as i on p.item_id = i.item_id left join table_category as c on i.category_id = c.category_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"item_price.php?stid=' . $auRec[$i]->price_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->price_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_code)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->category_name)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_mrp)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_dp)) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->start_date))) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->end_date))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showItemPTR()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'start_date';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $where = " i.item_id ='" . $_SESSION['item_price_id'] . "' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_ptr as p left join table_item as i on p.item_id = i.item_id left join table_category as c on i.category_id = c.category_id left join city as t on p.city_id=t.city_id left join state as s on t.state_id=s.state_id', "p.*, i.item_name, i.item_code, c.category_name,t.city_name,s.state_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_ptr as p left join table_item as i on p.item_id = i.item_id left join table_category as c on i.category_id = c.category_id left join city as t on p.city_id=t.city_id left join state as s on t.state_id=s.state_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"item_ptr.php?stid=' . $auRec[$i]->prt_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->ptr_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_code)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->category_name)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_price)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->state_name)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->city_name)) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->start_date))) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->end_date))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDistributors()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'distributor_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//        $_objAdmin = new Admin();
        //$where = " 1=1 ";

        $salesmanStateCondi = '';
        if (isset($_SESSION['salesmanId']) && !empty($_SESSION['salesmanId']) && (intval($_SESSION['salesmanId']) > 0) && (intval($_SESSION['userLoginType']) == 5)) {
            //get logged in salesman state
            $stateRec = $this->_getSelectList('table_salesman', 'state', '', 'salesman_id = ' . $_SESSION['salesmanId']);

            if (is_array($stateRec) && (count($stateRec) > 0)) {
                $salesmanStateId = $stateRec[0]->state;
                $salesmanStateCondi = ' AND d.state = ' . $salesmanStateId;
            }
        }

        //Todo Start : sudhanshu 28 may 2024 : add status filet
        $statusCond = '';
        if (isset($_SESSION['disStatus']) && $_SESSION['disStatus'] != '') {
            $statusCond = " AND d.status='" . $_SESSION['disStatus'] . "'";
        }
        //Todo End : sudhanshu 28 may 2024 : add status filet
        $where = " a.account_id =" . $_SESSION['accountId'] . " AND d.new = '' $salesmanStateCondi $statusCond ";
        if ($_SESSION['stockistId'] != "" && $_SESSION['stockistId'] != "0") {
            $dis = " and d.stockist_id='" . $_SESSION['stockistId'] . "'";
        }
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributors as d
        LEFT JOIN table_route_retailer as rr ON rr.distributor_id = d.distributor_id
		LEFT JOIN table_route AS RT ON RT.route_id = rr.route_id 
        left join table_account as a on a.account_id=d.account_id 
        left join table_web_users as w on w.distributor_id=d.distributor_id 
        left join country as con on con.country_id = d.country 
        left join state as s on s.state_id=d.state 
        LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
        left join city as c on c.city_id=d.city 
        left join table_location as loc on loc.location_id = d.location 
        left join table_relationship as tr on tr.relationship_id=d.relationship_id 
        left join table_stockist as ts on ts.stockist_id = d.stockist_id
        left join table_distributor_type_master as tdm on tdm.dis_type_id = d.distributor_type_id', "d.*,w.username,w.email_id,tdm.dis_type_name,w.web_user_id,w.status as loginStatus,con.country_name,s.state_name,c.city_name,loc.location_name, tr.relationship_code, ts.stockist_name,GROUP_CONCAT(DISTINCT RT.route_name SEPARATOR ', ') AS routes,sz.zone_name", $rp, $where . $dis . ' GROUP BY d.distributor_id ' . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributors as d 
        LEFT JOIN table_route_retailer as rr ON rr.distributor_id = d.distributor_id
		LEFT JOIN table_route AS RT ON RT.route_id = rr.route_id
        left join table_account as a on a.account_id=d.account_id
        left join table_web_users as w on w.distributor_id=d.distributor_id 
        left join country as con on con.country_id = d.country 
        left join state as s on s.state_id=d.state 
        LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
        left join city as c on c.city_id=d.city 
        left join table_location as loc on loc.location_id = d.location 
        left join table_relationship as tr on tr.relationship_id=d.relationship_id  
        left join table_stockist as ts on ts.stockist_id = d.stockist_id
        left join table_distributor_type_master as tdm on tdm.dis_type_id = d.distributor_type_id', 'd.distributor_id', '', $where . $dis . ' GROUP BY d.distributor_id ');
        $total = is_array($auRecCount) ? count($auRecCount) : 0;
//        echo '<pre>';
//        print_r($total);
//        die(' die here');

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $surveyStatus = '';
            if (strtolower($auRec[$i]->survey_status) == 'c') {
                $surveyStatus = 'Surveyed';
            } elseif (strtolower($auRec[$i]->survey_status) == 'i') {
                $surveyStatus = 'Not Surveyed';
            } elseif (strtolower($auRec[$i]->survey_status) == 'n') {
                $surveyStatus = 'Rejected';
            } else {
                $surveyStatus = '';
            }
            $start_date = $this->_changeDate($auRec[$i]->start_date);
            if ($auRec[$i]->distributor_dob == "0000-00-00") {
                $distributor_dob = "-";
            } else {
                $distributor_dob = $this->_changeDate($auRec[$i]->distributor_dob);
            }
            //end date
//            if ($auRec[$i]->status == 'I') {
            $end_date = $this->_changeDate($auRec[$i]->end_date);
//            } else {
//                $end_date = ' ';
//            }
            //end date
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"distributors.php?statusId=' . $auRec[$i]->distributor_id . '&value=' . $sts . '\">' . $sts . '</a>';
            //login status
            if ($auRec[$i]->web_user_id != '') {
                if ($auRec[$i]->status == 'A') {
                    $LogStatus = ($auRec[$i]->loginStatus == 'A') ? "Active" : "Inactive";
                    $LogSts = '<a href=\"distributors.php?statusLogId=' . $auRec[$i]->distributor_id . '&value=' . $LogStatus . '\">' . $LogStatus . '</a>';
                } else {
                    $LogSts = 'Inactive';
                }
            } else {
                $LogSts = ' ';
            }
            $survey = '<a href=\"distributor_survey.php?distId=' . $auRec[$i]->distributor_id . '\" target=\"_blank\">View Photo</a>';
            $addressLink = '<a href=\"distributor_address.php?disId=' . $auRec[$i]->distributor_id . '\" target=\"_blank\">View Address</a>';
            //Todo Start : sudhanshu 17 jubne 2024 : survey approval status and remark
            if ($auRec[$i]->survey_approval_status == "A") {
                $survey_approval_status = "Approved";
            } elseif ($auRec[$i]->survey_approval_status == "N") {
                $survey_approval_status = "Rejected";
            } else {
                $survey_approval_status = "Pending";
            }

            if (strtolower($auRec[$i]->survey_status) == 'i') {
                $survey_approval_status = "";
            }
            $verify_by = '';
            if ($auRec[$i]->survey_approve_by_user_type == 1) {
                $userType = "Admin";
                $verify_by = "Admin";
            } elseif ($auRec[$i]->survey_approve_by_user_type == 3) {
                $auApp = $this->_getSelectList('table_distributors', "distributor_name", '', " distributor_id=" . $auRec[$i]->survey_approve_by);
                $userType = $this->AliaseUsers('distributor');
                if (is_array($auApp) && count($auApp) > 0) {
                    $verify_by = $auApp[0]->distributor_name;
                }
            } elseif ($auRec[$i]->survey_approve_by_user_type == 4) {
                $auApp = $this->_getSelectList('table_retailer', "retailer_name", '', " retailer_id=" . $auRec[$i]->survey_approve_by);
                $userType = $this->AliaseUsers('retailer');
                if (is_array($auApp) && count($auApp) > 0) {
                    $verify_by = $auApp[0]->retailer_name;
                }
            } elseif ($auRec[$i]->survey_approve_by_user_type == 7) {
                $auApp = $this->_getSelectList('table_stockist', "stockist_name", '', " stocksit_id=" . $auRec[$i]->survey_approve_by);
                $userType = $this->AliaseUsers('stockist');
                if (is_array($auApp) && count($auApp) > 0) {
                    $verify_by = $auApp[0]->stockist_name;
                }
            } elseif ($auRec[$i]->survey_approve_by_user_type == 5) {
                $auApp = $this->_getSelectList('table_salesman', "salesman_name", '', " salesman_id=" . $auRec[$i]->survey_approve_by);
                $userType = $this->AliaseUsers('salesman');
                if (is_array($auApp) && count($auApp) > 0) {
                    $verify_by = $auApp[0]->salesman_name;
                }
            }
            //Todo End : sudhanshu 17 jubne 2024 : survey approval status and remark
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r", "\t");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"cell":["' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_name))) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_phone_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_phone_no2) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->distributor_address))) . '"';
            //Todo Start : sudhanshu 11 june 2024 : add zipcode column
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->zipcode))) . '"';
            //Todo Start : sudhanshu 11 june 2024 : add zipcode column
            // $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->distributor_address2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->country_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->location_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->stockist_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->dis_type_name))) . '"';
            $json .= ',"' . ucwords(addslashes($surveyStatus)) . '"';
            //Todo Start : sudhanshu 17 jubne 2024 : survey approval status and remark
            $json .= ',"' . ucwords(addslashes($survey_approval_status)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->survey_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($userType)) . '"';
            $json .= ',"' . ucwords(addslashes($verify_by)) . '"';
            //Todo End : sudhanshu 17 jubne 2024 : survey approval status and remark
            $json .= ',"' . ucwords(addslashes($auRec[$i]->gst_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->pan_no)) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';


            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->routes)) . '"';
            // $json .= ',"' . addslashes($auRec[$i]->sms_number) . '"';

//            $json .= ',"' . addslashes($auRec[$i]->distributor_phone_no3) . '"';
//            $json .= ',"' . addslashes($auRec[$i]->distributor_leadline_no) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->contact_person))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->contact_number)) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->contact_number). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_person2)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->contact_number2) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_person3)) . '"';
//            $json .= ',"' . addslashes($auRec[$i]->contact_number3) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->distributor_email)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_email2) . '"';
//            $json .= ',"' . addslashes($auRec[$i]->distributor_email3) . '"';
            $json .= ',"' . addslashes($distributor_dob) . '"';
            $json .= ',"' . addslashes($start_date) . '"';
            $json .= ',"' . addslashes($end_date) . '"';
            $json .= ',"' . $survey . '"';
            $json .= ',"' . $sts . '"';
            $json .= ',"' . $addressLink . '"';
            //$json .= ',"'.$sts. '"';
            $json .= ',"' . $LogSts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRetailer($flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.retailer_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 28 may 2024 : add status filet
        $statusCond = '';
        if (isset($_SESSION['retStatus']) && $_SESSION['retStatus'] != '') {
            $statusCond = " AND r.status='" . $_SESSION['retStatus'] . "'";
        }
        //Todo End : sudhanshu 28 may 2024 : add status filet
        $where = " r.new='' and r.status!='D' $statusCond ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer as r 
        LEFT JOIN table_relationship as tr on tr.relationship_id=r.relationship_id 
        left join table_account as a on a.account_id=r.account_id 
        left join table_web_users as w on w.retailer_id=r.retailer_id 
        left join country as con on con.country_id = r.country
        left join state as s on s.state_id=r.state 
        left join city as c on c.city_id=r.city 
        LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = r.state and szsm.account_id = r.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
        left join table_location as loc ON loc.location_id = r.location_id 
        left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id 
        left join table_retailer_type_master as tm on tm.type_id=r.type_id 
        LEFT JOIN table_route_retailer AS RR ON RR.retailer_id = r.retailer_id
		LEFT JOIN table_route AS RT ON RT.route_id = RR.route_id
        LEFT JOIN table_retailer_group AS rg ON rg.group_id = r.group_id
        left join table_distributors as d on d.distributor_id=r.distributor_id', "r.*,w.username,cm.channel_name,d.distributor_name,d.distributor_code,w.email_id,w.web_user_id,tr.relationship_code,tm.type_name, w.status as loginStatus,con.country_name,s.state_name,c.city_name,loc.location_name,GROUP_CONCAT(DISTINCT RT.route_name SEPARATOR ', ') AS routes,sz.zone_name,rg.group_name", $rp, $where . ' GROUP BY r.retailer_id ' . $sort, '');


        $auRecCount = $this->_getSelectList('table_retailer as r 
        LEFT JOIN table_relationship as tr on tr.relationship_id=r.relationship_id 
        left join table_account as a on a.account_id=r.account_id 
        left join table_web_users as w on w.retailer_id=r.retailer_id 
        left join country as con on con.country_id = r.country
        left join state as s on s.state_id=r.state 
        left join city as c on c.city_id=r.city 
        LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = r.state and szsm.account_id = r.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
        left join table_location as loc ON loc.location_id = r.location_id 
        left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id 
        left join table_retailer_type_master as tm on tm.type_id=r.type_id 
        LEFT JOIN table_route_retailer AS RR ON RR.retailer_id = r.retailer_id
		LEFT JOIN table_route AS RT ON RT.route_id = RR.route_id
        LEFT JOIN table_retailer_group AS rg ON rg.group_id = r.group_id
        left join table_distributors as d on d.distributor_id=r.distributor_id', 'r.retailer_id', '', $where . ' GROUP BY r.retailer_id ');
//        $total= $auRecCount[0]->total;
        $total = count($auRecCount);


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r", "\t");
        for ($i = 0; $i < count($auRec); $i++) {
            $surveyStatus = '';
            if (strtolower($auRec[$i]->survey_status) == 'c') {
                $surveyStatus = 'Surveyed';
            } elseif (strtolower($auRec[$i]->survey_status) == 'i') {
                $surveyStatus = 'Not Surveyed';
            } elseif (strtolower($auRec[$i]->survey_status) == 'n') {
                $surveyStatus = 'Rejected';
            } else {
                $surveyStatus = '';
            }
            // Lat ,lng
            if (!empty($auRec[$i]->lat) && $auRec[$i]->lat != '0.0') {
                $lat = $auRec[$i]->lat;
            } else {
                $lat = '';
            }
            if (!empty($auRec[$i]->lng) && $auRec[$i]->lng != '0.0') {
                $lng = $auRec[$i]->lng;
            } else {
                $lng = '';
            }

            /* Display outlet*/
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'YES';
            } else {
                $outlet = '';
            }
            if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            }
            $start_date = $this->_changeDate($auRec[$i]->start_date);
            if ($auRec[$i]->retailer_dob == "0000-00-00") {
                $retailer_dob = "-";
            } else {
                $retailer_dob = $this->_changeDate($auRec[$i]->retailer_dob);
            }
            if ($auRec[$i]->anniversary_date == "0000-00-00") {
                $anniversary_date = "-";
            } else {
                $anniversary_date = $this->_changeDate($auRec[$i]->anniversary_date);
            }
            //end date
//            if ($auRec[$i]->status == 'I') {
            $end_date = $this->_changeDate($auRec[$i]->end_date);
//            } else {
//                $end_date = ' ';
//            }
            //end date
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"retailer.php?statusId=' . $auRec[$i]->retailer_id . '&value=' . $sts . '\">' . $sts . '</a>';
            //login status
            if ($auRec[$i]->web_user_id != '') {
                if ($auRec[$i]->status == 'A') {
                    $LogStatus = ($auRec[$i]->loginStatus == 'A') ? "Active" : "Inactive";
                    $LogSts = '<a href=\"retailer.php?statusLogId=' . $auRec[$i]->retailer_id . '&value=' . $LogStatus . '\">' . $LogStatus . '</a>';
                } else {
                    $LogSts = 'Inactive';
                }
            } else {
                $LogSts = ' ';
            }
            if ($auRec[$i]->lat != '') {
                $map = '<a href=\"retailer.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View on Map</a>';
            } else {
                $map = "-";
            }
            if ($flag == 1) {
                $survey = '<a href=\"retailer_survey.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Photo</a>';
            }
//            $gstPhotoLink='<a href=\"view_gst_photo.php?retId='.$auRec[$i]->retailer_id.'\" target=\"_blank\">View GST Photo</a>';
            $gstPhotoLink = '<a href=\"rotate_img.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View GST Photo</a>';
//            $aadharPhotoLink='<a href=\"view_aadhar_photo.php?retId='.$auRec[$i]->retailer_id.'\" target=\"_blank\">View Aadhar Photo</a>';
            $aadharPhotoLink = '<a href=\"rotate_img.php?adId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Aadhar Photo</a>';
            $addressLink = '<a href=\"retailer_address.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Address</a>';

            //Todo Start : sudhanshu 17 jubne 2024 : survey approval status and remark
            if ($auRec[$i]->survey_approval_status == "A") {
                $survey_approval_status = "Approved";
            } elseif ($auRec[$i]->survey_approval_status == "N") {
                $survey_approval_status = "Rejected";
            } else {
                $survey_approval_status = "Pending";
            }

            if (strtolower($auRec[$i]->survey_status) == 'i') {
                $survey_approval_status = "";
            }
            $verify_by = '';
            if ($auRec[$i]->survey_approve_by_user_type == 1) {
                $userType = "Admin";
                $verify_by = "Admin";
            } elseif ($auRec[$i]->survey_approve_by_user_type == 3) {
                $auApp = $this->_getSelectList('table_distributors', "distributor_name", '', " distributor_id=" . $auRec[$i]->survey_approve_by);
                $userType = $this->AliaseUsers('distributor');
                if (is_array($auApp) && count($auApp) > 0) {
                    $verify_by = $auApp[0]->distributor_name;
                }
            } elseif ($auRec[$i]->survey_approve_by_user_type == 4) {
                $auApp = $this->_getSelectList('table_retailer', "retailer_name", '', " retailer_id=" . $auRec[$i]->survey_approve_by);
                $userType = $this->AliaseUsers('retailer');
                if (is_array($auApp) && count($auApp) > 0) {
                    $verify_by = $auApp[0]->retailer_name;
                }
            } elseif ($auRec[$i]->survey_approve_by_user_type == 7) {
                $auApp = $this->_getSelectList('table_stockist', "stockist_name", '', " stocksit_id=" . $auRec[$i]->survey_approve_by);
                $userType = $this->AliaseUsers('stockist');
                if (is_array($auApp) && count($auApp) > 0) {
                    $verify_by = $auApp[0]->stockist_name;
                }
            } elseif ($auRec[$i]->survey_approve_by_user_type == 5) {
                $auApp = $this->_getSelectList('table_salesman', "salesman_name", '', " salesman_id=" . $auRec[$i]->survey_approve_by);
                $userType = $this->AliaseUsers('salesman');
                if (is_array($auApp) && count($auApp) > 0) {
                    $verify_by = $auApp[0]->salesman_name;
                }
            }
            //Todo End : sudhanshu 17 jubne 2024 : survey approval status and remark
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->retailer_id . '",';
            $json .= '"cell":["' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->retailer_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->retailer_name))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_phone_no)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_phone_no2)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->country_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->zone_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->state_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->city_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->location_name))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->group_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->channel_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->relationship_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->type_name))) . '"';

            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $surveyStatus))) . '"';
            //Todo Start : sudhanshu 17 june 2024 : add survey apprval status and remark column
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $survey_approval_status))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->survey_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($userType)) . '"';
            $json .= ',"' . ucwords(addslashes($verify_by)) . '"';
            //Todo End : sudhanshu 17 june 2024 : add survey apprval status and remark column
            $json .= ',"' . $lat . '"';
            $json .= ',"' . $lng . '"';
       
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $outlet))) . '"';

            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location))) . '"';
            $json .= ',"' . $map . '"';
            $json .= ',"' . $survey . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->zipcode))) . '"';
//            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->retailer_address2))) . '"';

//            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_leadline_no)) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->contact_person))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->contact_number)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_email)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->contact_person2))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->contact_number2)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_email2)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';

            $json .= ',"' . addslashes(str_replace($remove, ' ', $retailer_dob)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $anniversary_date)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->gst_no)) . '"';
            $json .= ',"' . $gstPhotoLink . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->aadhar_no)) . '"';
            $json .= ',"' . $aadharPhotoLink . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->pan_no)) . '"';
            $json .= ',"' . addslashes($start_date) . '"';
            $json .= ',"' . addslashes($end_date) . '"';
            $json .= ',"' . $sts . '"';
            //Todo start : sudhanshu 13 my 2024 : add view address column
            $json .= ',"' . $addressLink . '"';
            //Todo End : sudhanshu 13 my 2024 : add view address column
            //$json .= ',"'.$sts. '"';
            $json .= ',"' . $LogSts . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->routes)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showNewRetailer($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'retailer_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        if ($_REQUEST['qtype'] == "r.start_date") {
            $query = date('Y-m-d', strtotime(mysql_escape_string($_REQUEST['query'])));
        } else {
            $query = $_REQUEST['query'];
        }
        //$query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //print_r($qtype);exit;
        $_objAdmin = new Admin();
        //$where = " 1=1 ";
        $where = " r.new!='' $salesman and r.status='I' and a.account_id =" . $_SESSION['accountId'];

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

//        $auRec = $this->_getSelectList('table_retailer as r
//			left join table_account as a on a.account_id=r.account_id
//			left join table_web_users as w on w.retailer_id=r.retailer_id
//			left join state as st on st.state_id=r.state
//			left join city as c on c.city_id=r.city
//			left join table_salesman as s on s.salesman_id=r.salesman_id', "r.*,w.username,w.email_id,w.web_user_id,w.status as loginStatus,st.state_name,c.city_name,s.salesman_name", $rp, $where . $sort, '');

        $auRec = $this->_getSelectList('table_retailer as r 
        left join table_salesman as s on s.salesman_id=r.salesman_id
        LEFT JOIN table_relationship as tr on tr.relationship_id=r.relationship_id 
        left join table_account as a on a.account_id=r.account_id 
        left join table_web_users as w on w.retailer_id=r.retailer_id 
        left join country as con on con.country_id = r.country
        left join state as st on st.state_id=r.state 
        left join city as c on c.city_id=r.city 
        left join table_location as loc ON loc.location_id = r.location_id 
        left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id 
        left join table_retailer_type_master as tm on tm.type_id=r.type_id 
        LEFT JOIN table_route_retailer AS RR ON RR.retailer_id = r.retailer_id
        LEFT JOIN table_retailer_group AS rg ON rg.group_id = r.group_id
		LEFT JOIN table_route AS RT ON RT.route_id = RR.route_id
        left join table_distributors as d on d.distributor_id=r.distributor_id', "r.*,w.username,cm.channel_name,s.salesman_name,d.distributor_name,d.distributor_code,w.email_id,w.web_user_id,tr.relationship_code,tm.type_name, w.status as loginStatus,con.country_name,st.state_name,c.city_name,loc.location_name,GROUP_CONCAT(DISTINCT RT.route_name SEPARATOR ', ') AS routes,rg.group_name", $rp, $where . ' GROUP BY r.retailer_id ' . $sort, '');


        $auRecCount = $this->_getSelectList('table_retailer as r 
            left join table_account as a on a.account_id=r.account_id 
			left join state as st on st.state_id=r.state 
			left join city as c on c.city_id=r.city 
			left join table_location as loc ON loc.location_id = r.location_id 
			left join table_salesman as s on s.salesman_id=r.salesman_id', 'COUNT(r.retailer_id) as total', '', $where);

//        echo '<pre>';
//        print_r($auRec);
//        print_r($auRecCount);
//        die(' die here');

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $start_date = $this->_changeDate($auRec[$i]->start_date);
            if ($auRec[$i]->retailer_dob == "0000-00-00") {
                $retailer_dob = "-";
            } else {
                $retailer_dob = $this->_changeDate($auRec[$i]->retailer_dob);
            }

            if ($auRec[$i]->anniversary_date == "0000-00-00") {
                $anniversary_date = "-";
            } else {
                $anniversary_date = $this->_changeDate($auRec[$i]->anniversary_date);
            }

            /* Display outlet*/
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'YES';
            } elseif ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'NO';
            } else {
                $outlet = '';
            }

            $gstPhotoLink = '<a href=\"rotate_img.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View GST Photo</a>';

            $aadharPhotoLink = '<a href=\"rotate_img.php?adId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Aadhar Photo</a>';
            //Todo Start : sudhanshu 04 june add checkbox for approve multiple reatiler at a time
            $chck = '<input type="checkbox" name="stockEdit[]" class="stock-check" value="' . $auRec[$i]->retailer_id . '" onclick="uncheck(this)" /> ';
            //Todo End : sudhanshu 04 june add checkbox for approve multiple reatiler at a time
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->retailer_id . '",';
            $json .= '"cell":["' . addslashes($chck) . '"';
            $json .= ',"' . ucfirst($auRec[$i]->approval_status) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->retailer_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->retailer_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->relationship_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->type_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->channel_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->group_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->salesman_name))) . '"';
            $json .= ',"' . ucwords(addslashes($start_date)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($outlet)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_location)) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->zipcode))) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_phone_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_email) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_leadline_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->gst_no) . '"';
            $json .= ',"' . $gstPhotoLink . '"';
            $json .= ',"' . addslashes($auRec[$i]->aadhar_no) . '"';
            $json .= ',"' . $aadharPhotoLink . '"';
            $json .= ',"' . addslashes($auRec[$i]->pan_no) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_person)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->contact_number) . '"';
            $json .= ',"' . addslashes($retailer_dob) . '"';
            $json .= ',"' . addslashes($anniversary_date) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->routes)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /* OLD  function showSalsman(){
		$page = $_REQUEST['page'];
		$rp = $_REQUEST['rp'];
		$sortname = $_REQUEST['sortname'];
		$sortorder = $_REQUEST['sortorder'];
		if (!$sortname) $sortname = 'salesman_name';
		if (!$sortorder) $sortorder = 'desc';
		$sort = " ORDER BY $sortname $sortorder";
		if (!$page) $page = 1;
		if (!$rp) $rp = 50;
		$start = (($page-1) * $rp);
		$limit = "LIMIT $start, $rp";
		$query = $_REQUEST['query'];
		$qtype = $_REQUEST['qtype'];
		$_objAdmin = new Admin();
		//$where = " 1=1 ";
		$where = " s.status!='D' and a.account_id =".$_SESSION['accountId'];
		if ($query) $where .= " AND $qtype LIKE '%$query%' ";
		$auRec=$this->_getSelectList('table_salesman as s left join table_account as a on a.account_id=s.account_id left join table_web_users as w on w.salesman_id=s.salesman_id',"s.*,w.username,w.email_id,w.web_user_id,w.status as loginStatus",$rp,$where.$sort,'');
		$auRecCount=$this->_getSelectList('table_salesman as s left join table_account as a on a.account_id=s.account_id left join table_web_users as w on w.salesman_id=s.salesman_id','count(*) as total','',$where);
		$total= $auRecCount[0]->total;
		header("Expires: Mon, 26 Jul 1997 05:00:00 GMT" );
		header("Last-Modified: " . gmdate( "D, d M Y H:i:s" ) . "GMT" );
		header("Cache-Control: no-cache, must-revalidate" );
		header("Pragma: no-cache" );
		header("Content-type: text/x-json");
		$json = "";
		$json .= "{\n";
		$json .= "page: $page,\n";
		$json .= "total: $total,\n";
		$json .= "rows: [";
		$rc = false;
		for($i=0;$i<count($auRec);$i++){
		$start_date=$this->_changeDate($auRec[$i]->start_date);
			//end date
			if($auRec[$i]->status=='I' ){
			$end_date=$this->_changeDate($auRec[$i]->end_date);
			} else {
			$end_date=' ';
			}
			//end date
			$sts=($auRec[$i]->status=='A')?"Active":"Inactive";
			$sts="<a href=\"salesman.php?statusId=".$auRec[$i]->salesman_id."&value=".$sts."\">".$sts."</a>";
			//login status
			if($auRec[$i]->web_user_id!=''){
				if($auRec[$i]->status=='A'){
				$LogStatus=($auRec[$i]->loginStatus=='A')?"Active":"Inactive";
				$LogSts="<a href=\"salesman.php?statusLogId=".$auRec[$i]->salesman_id."&value=".$LogStatus."\">".$LogStatus."</a>";
				} else {
				$LogSts='Inactive';
				}
			} else {
			$LogSts=' ';
			}
			if ($rc) $json .= ",";
			$json .= "\n{";
			$json .= "id:'". $auRec[$i]->salesman_id."',";
			$json .= "cell:['".ucwords(addslashes($auRec[$i]->salesman_name))."'";
			$json .= ",'".addslashes($auRec[$i]->username)."'";
			$json .= ",'".addslashes($auRec[$i]->email_id)."'";
			$json .= ",'".addslashes($auRec[$i]->salesman_phome_no)."'";
			$remove = array("\n", "\r\n", "\r");
			$json .= ",'".ucwords(str_replace($remove, ' ',addslashes($auRec[$i]->salesman_address)))."'";
			$json .= ",'".addslashes($start_date)."'";
			$json .= ",'".addslashes($end_date)."'";
			$json .= ",'".addslashes($sts)."'";
			//$json .= ",'".$sts."'";
			$json .= ",'".$LogSts."']";
			$json .= "}";
			$rc = true;
		}
		$json .= "]\n";
		$json .= "}";
		echo $json;
		exit;
	}*/
    function showSalsman($salesman, $checkhierarchyenable)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'salesman_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //echo $salesman;
        //Todo Start : sudhanshu 28 may 2024 : add status filet
        $statusCond = '';
        if (isset($_SESSION['salStatus']) && $_SESSION['salStatus'] != '') {
            $statusCond = " AND s.status='" . $_SESSION['salStatus'] . "'";
        }
        //Todo End : sudhanshu 28 may 2024 : add status filet
        $where = " s.status!='D' $statusCond $salesman ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_salesman AS s 
		LEFT JOIN table_web_users AS w ON w.salesman_id = s.salesman_id
		LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
		LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
		LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
		LEFT JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id
		LEFT JOIN country as con on con.country_id = s.country
		LEFT JOIN state AS ts ON ts.state_id = s.state
		LEFT JOIN city AS c ON c.city_id = s.city 
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = s.state and szsm.account_id = s.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
		LEFT JOIN table_location AS loc ON loc.location_id = s.location 
		', "s.*,w.username,w.email_id,w.web_user_id,w.status as loginStatus, H.description AS des1, H2.description AS des2, S2.salesman_name AS rptPerson,con.country_name,ts.state_name,c.city_name,loc.location_name,sz.zone_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_salesman AS s 
		LEFT JOIN table_web_users AS w ON w.salesman_id = s.salesman_id
		LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
		LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
		LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
		LEFT JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id
		LEFT JOIN country as con on con.country_id = s.country
		LEFT JOIN state AS ts ON ts.state_id = s.state
		LEFT JOIN city AS c ON c.city_id = s.city 
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = s.state and szsm.account_id = s.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
		LEFT JOIN table_location AS loc ON loc.location_id = s.location ', 'count(s.salesman_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $start_date = $this->_changeDate($auRec[$i]->start_date);
            //end date
            //if ($auRec[$i]->status == 'I') {
            $end_date = $this->_changeDate($auRec[$i]->end_date);
//            } else {
//                $end_date = ' ';
//            }
            //end date
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"salesman.php?statusId=' . $auRec[$i]->salesman_id . '&value=' . $sts . '\">' . $sts . '</a>';
            //login status
            if ($auRec[$i]->web_user_id != '') {
                if ($auRec[$i]->status == 'A') {
                    $LogStatus = ($auRec[$i]->loginStatus == 'A') ? "Active" : "Inactive";
                    $LogSts = '<a href=\"salesman.php?statusLogId=' . $auRec[$i]->salesman_id . '&value=' . $LogStatus . '\">' . $LogStatus . '</a>';
                } else {
                    $LogSts = 'Inactive';
                }
            } else {
                $LogSts = ' ';
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->salesman_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->joining_date)) . '"';
            $json .= ',"' . addslashes(number_format($auRec[$i]->sal_salary, 2)) . '"';
            if ($checkhierarchyenable == 1) {
                $json .= ',"' . addslashes($auRec[$i]->des1) . '"';
                $json .= ',"' . addslashes($auRec[$i]->des2) . '"';
                $json .= ',"' . addslashes($auRec[$i]->rptPerson) . '"';
            }
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_email) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_phome_no) . '"';
            $remove = array("\n", "\r\n", "\r");
            $json .= ',"' . ucwords(addslashes($auRec[$i]->country_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->salesman_address))) . '"';
            $json .= ',"' . addslashes($start_date) . '"';
            $json .= ',"' . addslashes($end_date) . '"';
            $json .= ',"' . $sts . '"';
            //$json .= ',"'.$sts. '"';
            $json .= ',"' . $LogSts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showLoginSalsman($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'salesman_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " 1=1 ";
        $where = " s.status='A' $salesman ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_salesman as s 
        LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
        LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
        left join table_account as a on a.account_id=s.account_id
        left join table_pepup_app_version as vs on vs.salesman_id = s.salesman_id
         left join state as st on st.state_id = s.state 
        left join table_web_users as w on w.salesman_id=s.salesman_id', "s.*,w.username,w.email_id,w.web_user_id,w.status as loginStatus,vs.app_type,vs.app_version, H.description AS des1,st.state_name", $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList('table_salesman as s
        LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
        LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id 
        left join table_account as a on a.account_id=s.account_id
        left join table_pepup_app_version as vs on vs.salesman_id = s.salesman_id 
        left join table_web_users as w on w.salesman_id=s.salesman_id', 'count(s.salesman_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->session_id != '') {
                $sts = "Logged In";
                $LogSts = '<a href=\"salesman_list.php?Id=' . base64_encode($auRec[$i]->salesman_id) . '\" >Log out</a>';
            } else {
                $sts = "Logged Out";
                $LogSts = "-";
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->salesman_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes($auRec[$i]->des1) . '"';
            $json .= ',"' . addslashes($auRec[$i]->email_id) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_phome_no) . '"';
            $json .= ',"' . addslashes(ucfirst($auRec[$i]->app_type)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->app_version) . '"';
            $json .= ',"' . $sts . '"';
            $json .= ',"' . $LogSts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showManageUser()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'operator_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " 1=1 ";
        $where = " a.view_activity_report!='Yes' and a.account_id =" . $_SESSION['accountId'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_account_admin as a left join table_web_users as w on w.operator_id=a.operator_id', "a.*,w.username,w.email_id,w.web_user_id,w.status as loginStatus", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_account_admin as a left join table_web_users as w on w.operator_id=a.operator_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $start_date = $this->_changeDate($auRec[$i]->start_date);
            //end date
            if ($auRec[$i]->status == 'I') {
                $end_date = $this->_changeDate($auRec[$i]->end_date);
            } else {
                $end_date = ' ';
            }
            //end date
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"manage_user.php?statusId=' . $auRec[$i]->operator_id . '&value=' . $sts . '\">' . $sts . '</a>';
            //login status
            if ($auRec[$i]->web_user_id != '') {
                if ($auRec[$i]->status == 'A') {
                    $LogStatus = ($auRec[$i]->loginStatus == 'A') ? "Active" : "Inactive";
                    $LogSts = '<a href=\"manage_user.php?statusLogId=' . $auRec[$i]->operator_id . '&value=' . $LogStatus . '\">' . $LogStatus . '</a>';
                } else {
                    $LogSts = 'Inactive';
                }
            } else {
                $LogSts = ' ';
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->operator_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->operator_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes($auRec[$i]->email_id) . '"';
            $json .= ',"' . addslashes($auRec[$i]->operator_phone_number) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->manage_items)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->manage_distributors)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->manage_retailer)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->manage_salesman)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->manage_route)) . '"';
            //$json .= ',"'.ucwords(addslashes($auRec[$i]->view_activity_report)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->manage_retailer_relationship)) . '"';
            $json .= ',"' . addslashes($start_date) . '"';
            $json .= ',"' . addslashes($end_date) . '"';
            $json .= ',"' . $sts . '"';
            //$json .= ',"'.$sts. '"';
            $json .= ',"' . $LogSts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showUserList()
    {
        include("includes/users.inc.php");
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'web_user_id';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $where = " w.user_type!=1 and w.account_id =" . $_SESSION['accountId'];
        if ($qtype == 'user_type' && $query != '') {
            $q = 0;
            foreach ($optionsUserType as $key => $value) {
                if (strtolower($value) == strtolower($query)) {
                    $q = $key;
                }
            }
            $where .= " AND $qtype = $q ";
        } elseif ($query) {
            $where .= " AND $qtype LIKE '%$query%' ";
        }
        $auRec = $this->_getSelectList('table_web_users as w left join table_distributors as d on w.distributor_id=d.distributor_id left join table_retailer as r on w.retailer_id=r.retailer_id left join table_salesman as s on w.salesman_id=s.salesman_id left join table_account_admin as a on w.operator_id=a.operator_id', "w.*,d.distributor_name,d.distributor_phone_no,r.retailer_name,r.retailer_phone_no,s.salesman_name,s.salesman_phome_no,a.operator_name,a.operator_phone_number,a.view_activity_report", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_web_users as w left join table_distributors as d on w.distributor_id=d.distributor_id left join table_retailer as r on w.retailer_id=r.retailer_id left join table_salesman as s on w.salesman_id=s.salesman_id  left join table_account_admin as a on w.operator_id=a.operator_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->view_activity_report == '' || $auRec[$i]->view_activity_report == 'No') {
                if ($auRec[$i]->distributor_name != '' && $auRec[$i]->distributor_phone_no != '') {
                    $name = $auRec[$i]->distributor_name;
                    $phone = $auRec[$i]->distributor_phone_no;
                }
                if ($auRec[$i]->retailer_name != '' && $auRec[$i]->retailer_phone_no != '') {
                    $name = $auRec[$i]->retailer_name;
                    $phone = $auRec[$i]->retailer_phone_no;
                }
                if ($auRec[$i]->salesman_name != '' && $auRec[$i]->salesman_phome_no != '') {
                    $name = $auRec[$i]->salesman_name;
                    $phone = $auRec[$i]->salesman_phome_no;
                }
                if ($auRec[$i]->operator_name != '' && $auRec[$i]->operator_phone_number != '') {
                    $name = $auRec[$i]->operator_name;
                    $phone = $auRec[$i]->operator_phone_number;
                }
                $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
                //$sts="<a href=\"users_list.php?statusId=".$auRec[$i]->web_user_id."&value=".$sts."\">".$sts."</a>";
                if ($rc) $json .= ",";
                $json .= "\n{";
                $json .= '"id":"' . $auRec[$i]->web_user_id . '",';
                $json .= '"cell":["' . ucwords(addslashes($name)) . '"';
                $json .= ',"' . addslashes($auRec[$i]->username) . '"';
                $json .= ',"' . addslashes($auRec[$i]->email_id) . '"';
                $json .= ',"' . addslashes($phone) . '"';
                $json .= ',"' . addslashes($optionsUserType[$auRec[$i]->user_type]) . '"';
                $json .= ',"' . $sts . '"]';
                $json .= "}";
                $rc = true;
            }
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRoute($salesmanID)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'route_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objArrayList = new ArrayList();
        //Todo Start : sudhanshu 28 may 2024 : add status filet
        $statusCond = '';
        if (isset($_SESSION['rutStatus']) && $_SESSION['rutStatus'] != '') {
            $statusCond = " AND r.status='" . $_SESSION['rutStatus'] . "'";
        }
        //Todo End : sudhanshu 28 may 2024 : add status filet
        $where = " new<=0 $statusCond";

        $where .= $_objArrayList->getFilterCondForRouteSchemeIncentiveTargets($salesmanID);
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_route AS r LEFT JOIN table_user_relationships AS ur ON ur.route_id = r.route_id LEFT JOIN table_salesman AS s ON s.salesman_id = ur.salesman_id ', "r.*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_route AS r LEFT JOIN table_user_relationships AS ur ON ur.route_id = r.route_id LEFT JOIN table_salesman AS s ON s.salesman_id = ur.salesman_id ', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        $routeIdArr = [];
        $routeIds = '';
        if (is_array($auRec) && (count($auRec) > 0)) {
            foreach ($auRec as $key => $routeData) {
                $routeIdArr[] = $routeData->route_id;
            }
        }
        if (is_array($routeIdArr) && (count($routeIdArr) > 0)) {
            $routeIds = implode(',', $routeIdArr);
            $stRet = $this->_getSelectList('table_route_retailer as rr 
LEFT JOIN table_retailer as r ON r.retailer_id = rr.retailer_id
LEFT JOIN state as st ON st.state_id = r.state', "rr.route_id,COUNT(DISTINCT r.retailer_id) as ttl_ret, GROUP_CONCAT(DISTINCT st.state_name SEPARATOR ' | ') as states", '', " rr.route_id IN($routeIds) AND r.status = 'A' GROUP BY rr.route_id ");
            $stateRetCountArr = [];
            if (is_array($stRet) && (count($stRet) > 0)) {
                foreach ($stRet as $key1 => $stRetData) {
                    $stateRetCountArr[$stRetData->route_id]['ttl_ret'] = $stRetData->ttl_ret;
                    $stateRetCountArr[$stRetData->route_id]['states'] = $stRetData->states;
                }
            }
        }
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            //Todo Start : sudhanshu 16 may 2024 : add created date and updated date
            $created_date = '';
            $updated_date = '';
            if ($auRec[$i]->created_at != '0000-00-00 00:00:00') {
                $created_date = $this->_changeDate($auRec[$i]->created_at);
            }
            if ($auRec[$i]->updated_at != '0000-00-00 00:00:00') {
                $updated_date = $this->_changeDate($auRec[$i]->updated_at);
            }


            //Todo End : sudhanshu 16 may 2024 : add created date and updated date
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"route.php?statusId=' . $auRec[$i]->route_id . '&value=' . $status . '\">' . $status . '</a>';
            $exportRetLink = '<a href=\"export.inc.php?routeId=' . $auRec[$i]->route_id . '&export_route_retailers_details=yes\">Export</a>';
            $ttl_ret = (isset($stateRetCountArr[$auRec[$i]->route_id]['ttl_ret']) && !empty($stateRetCountArr[$auRec[$i]->route_id]['ttl_ret'])) ? $stateRetCountArr[$auRec[$i]->route_id]['ttl_ret'] : '0';
            $states = (isset($stateRetCountArr[$auRec[$i]->route_id]['states']) && !empty($stateRetCountArr[$auRec[$i]->route_id]['states'])) ? $stateRetCountArr[$auRec[$i]->route_id]['states'] : '';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->route_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->route_name) . '"';
            $json .= ',"' . $ttl_ret . '"';
            $json .= ',"' . $states . '"';
            $json .= ',"' . $status . '"';
            //Todo Start : sudhanshu 16 may 2024 : add created date and updated date
            $json .= ',"' . $created_date . '"';
            $json .= ',"' . $updated_date . '"';
            //Todo End : sudhanshu 16 may 2024 : add created date and updated date
            $json .= ',"' . $exportRetLink . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRouteMaster($salesmanID)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'route_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objArrayList = new ArrayList();
        $where = '';
        $where .= $_objArrayList->getFilterCondForRouteSchemeIncentiveTargets($salesmanID);
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_route AS r LEFT JOIN table_user_relationships AS ur ON ur.route_id = r.route_id LEFT JOIN table_salesman AS s ON s.salesman_id = ur.salesman_id ', "r.*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_route AS r LEFT JOIN table_user_relationships AS ur ON ur.route_id = r.route_id LEFT JOIN table_salesman AS s ON s.salesman_id = ur.salesman_id ', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            //Todo Start : sudhanshu 20 may 2024  : add created and updated column
            $created_date = '';
            $updated_date = '';
            if ($auRec[$i]->created_at != '0000-00-00 00:00:00' && $auRec[$i]->created_at != '') {
                $created_date = $this->_changeDate($auRec[$i]->created_at);
            }
            if ($auRec[$i]->updated_at != '0000-00-00 00:00:00' && $auRec[$i]->updated_at != '') {
                $updated_date = $this->_changeDate($auRec[$i]->updated_at);
            }

            //Todo End : sudhanshu 20 may 2024  : add created and updated column
            $status = '<a href=\"route_master.php?statusId=' . $auRec[$i]->route_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->route_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->route_name) . '"';
            //Todo Start : sudhanshu 20 may 2024  : add created and updated column
            $json .= ',"' . addslashes($created_date) . '"';
            $json .= ',"' . addslashes($updated_date) . '"';
            //Todo End : sudhanshu 20 may 2024  : add created and updated column
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRouteSchedule($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'salesman_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        if ($_REQUEST['qtype'] == "from_date" || $_REQUEST['qtype'] == "to_date") {
            $query = date('Y-m-d', strtotime(mysql_escape_string($_REQUEST['query'])));
        } else {
            $query = $_REQUEST['query'];
        }
        //$query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasRoutSch']) && $_SESSION['MasRoutSch'] != 'all' && $_SESSION['MasRoutSch'] != '') {
            $statusCondi = " AND r.status ='" . $_SESSION['MasRoutSch'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = "$salesman AND s.status='A' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_route_schedule as r left join table_salesman as s on r.salesman_id=s.salesman_id', "r.*,s.salesman_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_route_schedule as r left join table_salesman as s on r.salesman_id=s.salesman_id', 'count(*) as total', '', $where);
		// echo "<pre>"; print_r($auRec); exit;
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $from_date = $this->_changeDate($auRec[$i]->from_date);
            $to_date = $this->_changeDate($auRec[$i]->to_date);
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"route_schedule.php?statusId=' . $auRec[$i]->route_schedule_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->route_schedule_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($from_date) . '"';
            $json .= ',"' . addslashes($to_date) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRouteScheduleByMonth($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'salesman_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 28 may 2024 : add status filet
        $statusCond = '';
        if (isset($_SESSION['rutSchStatus']) && $_SESSION['rutSchStatus'] != '') {
            $statusCond .= " AND r.status='" . $_SESSION['rutSchStatus'] . "'";
        }

        if ($_SESSION['dismonth'] != '') {
            $month = " And r.month='" . $_SESSION['dismonth'] . "'";
        } else {
            $month = " And r.month='" . date('m') . "'";
        }
        if ($_SESSION['disCyear'] != '') {
            $year = "And r.year='" . $_SESSION['disCyear'] . "'";
        } else {
            $year = "And r.year='" . date('Y') . "'";
        }
        //Todo End : sudhanshu 28 may 2024 : add status filet
        $where = "$salesman AND s.status='A' $statusCond $month  $year";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_route_scheduled as r left join table_salesman as s on r.salesman_id=s.salesman_id', "r.*,s.salesman_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_route_scheduled as r left join table_salesman as s on r.salesman_id=s.salesman_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"route_schedule_by_month.php?statusId=' . $auRec[$i]->route_schedule_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->route_schedule_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes(date('M', strtotime('01-' . $auRec[$i]->month . '-' . $auRec[$i]->year))) . '"';
            $json .= ',"' . addslashes(date('Y', strtotime('01-' . $auRec[$i]->month . '-' . $auRec[$i]->year))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showOrderList($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query == 'Yes') {
            $query = 'Y';
        } elseif ($query == 'No') {
            $query = 'N';
        }


//        $_objAdmin = new Admin();
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromOrderList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToOrderList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_type='Adhoc' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_type!='Adhoc' ";
            }
        } else {
            $orderby = "";
        }
        // if( $_SESSION['userLoginType']==3){
        // 	$disLogCond="o.distributor_id='".$_SESSION['distributorId']."' ";
        // }
        switch ($_SESSION['userLoginType']) {
            case '1':
                $disLogCond = '';
                $salesman = '';
                break;
            case '3':
                $disLogCond = " AND r.distributor_id='" . $_SESSION['distributorId'] . "' ";
                $salesman = '';
                break;
            case '4':
                $disLogCond = " AND o.retailer_id='" . $_SESSION['retailerId'] . "' ";
                $salesman = '';
                break;
            case '7':
                $dList = $this->getStockistWiseDistributor($_SESSION['stockistId']);
                $salesman = '';
                if (is_array($dList) && sizeof($dList) > 0) {
                    $disStr = implode(',', array_unique($dList));
                    $disLogCond = " AND o.distributor_id IN($disStr)";
                }
                break;
        }
        $rtype = "o.type='R' ";
        if ($rtype) {
            if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
                $RoleBrands = $this->getUserRoleBrand();
                if (!empty($RoleBrands)) {
                    $salesman = " AND i.brand_id IN(" . $RoleBrands . ")";
                }
            }

            // Todo Start : add order type filter : sudhanhsu : 06 march
            $ordrTypeCond = " ";
            if ($_SESSION['orderType'] != '' && $_SESSION['orderType'] != 'all' && count($_SESSION['orderType']) > 0) {
                $orderCategory = $_SESSION['orderType'];
                $orderCate = "'" . implode("', '", $orderCategory) . "'";
                if (implode(',', $orderCategory) != 'all') {
                    $ordrTypeCond = " AND LOWER(o.order_type) IN (" . $orderCate . ")";
                }
            }
            // Todo End : add order type filter : sudhanhsu : 06 march

            //$where = " $disLogCond and o.date_of_order BETWEEN '" . $fromdate . "' AND '" . $todate . "' $salesman and r.new='' $ordrTypeCond $orderby"; //This is old query code

            //This is new query code by rohit

            $where = " $disLogCond and .o.order_status='A' and o.date_of_order BETWEEN '" . $fromdate . "' AND '" . $todate . "' $salesman and r.new='' $ordrTypeCond $orderby";
            
            //End rohit code

            if ($query) $where .= " AND $qtype LIKE '%$query%' ";
            $auRec = $this->_getSelectList('table_order as o 
            left join table_order_detail as ord on ord.order_id = o.order_id 
            left join table_item as i on i.item_id = ord.item_id 
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            LEFT JOIN table_retailer_group as rg ON rg.group_id = r.group_id
            left join table_retailer_type_master as rtm ON rtm.type_id=r.type_id
            left join table_relationship as rel ON rel.relationship_id=r.relationship_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id
            left join table_salesman_hierarchy_relationship as shr on shr.salesman_id = s.salesman_id
            left join table_salesman as s2 on s2.salesman_id=shr.rpt_user_id
            left join table_distributors as d on o.distributor_id=d.distributor_id 
            left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id 
            left join state as st on st.state_id=r.state 
            left join table_zone_state_mapping as zsm on zsm.state_id = r.state and zsm.account_id = r.account_id
            left join table_zone as z on z.zone_id = zsm.zone_id
            left join city as c on c.city_id=r.city 
            left join table_distributor_type_master as dt on dt.dis_type_id = d.distributor_type_id
            ', "o.*,count(ord.item_id) as total_item,SUM(ord.acc_quantity) as total_ordered_qty,r.retailer_name,r.retailer_code,r.retailer_address,r.retailer_location,r.lat as retlat,cm.channel_name,r.display_outlet,r.lng as retlng,s.salesman_name,s.employee_code,s2.salesman_name as rpt_to,d.distributor_name,d.distributor_code,st.state_name,c.city_name,z.zone_name,rg.group_name,rtm.type_name,rel.relationship_code as relation,r.retailer_phone_no,dt.dis_type_name", $rp, $where . " GROUP BY o.order_id " . $sort, '');

            $auRecCount = $this->_getSelectList('table_order as o 
            left join table_order_detail as ord on ord.order_id = o.order_id 
            left join table_item as i on i.item_id = ord.item_id 
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id
            left join table_salesman_hierarchy_relationship as shr on shr.salesman_id = s.salesman_id
            left join table_salesman as s2 on s2.salesman_id=shr.rpt_user_id
            left join table_distributors as d on o.distributor_id=d.distributor_id 
            left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id 
            left join state as st on st.state_id=r.state
            left join table_zone_state_mapping as zsm on zsm.state_id = r.state and zsm.account_id = r.account_id
            left join table_zone as z on z.zone_id = zsm.zone_id 
            left join city as c on c.city_id=r.city 
        
    ', 'count(o.order_id) as total', '', $where . " GROUP BY o.order_id " . $sort);
        }

        $getRetSurveyLatLng = $this->_getSelectList("table_retailer as r", "r.retailer_id,r.lat,r.lng", "", " r.status = 'A' AND r.lat_lng_capcure_accuracy!=0 AND (r.lat != '0.0' AND r.lng != '0.0') AND (r.lat != '' AND r.lng != '') ORDER BY r.retailer_id ASC");
        $retSurveyLatLngArr = [];
        if (is_array($getRetSurveyLatLng) && (count($getRetSurveyLatLng) > 0)) {
            foreach ($getRetSurveyLatLng as $key => $retSurveyLatLng) {
                $retSurveyLatLngArr[$retSurveyLatLng->retailer_id] = $retSurveyLatLng;
            }
        } //echo "<pre>";print_R($retSurveyLatLngArr);die;

//        $total= $auRecCount[0]->total;
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->order_type == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "P";
            }
            if ($auRec[$i]->order_type == 'No') {
                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
                $color = ($auRec[$i]->order_status == 'A') ? "I" : "P";
//                $NoOrderImage='<a href=\"no_order_image.php?ordId='.base64_encode($auRec[$i]->order_id).'\" '.$targetBlank.'>View Image</a>';
                $NoOrderImage = '<a href=\"rotate_img.php?ordId=' . base64_encode($auRec[$i]->order_id) . '\" ' . $targetBlank . '>View Image</a>';

            } else {
                $NoOrderImage = "-";
            }
            if ($auRec[$i]->order_type == 'Adhoc') {
                if ($auRec[$i]->order_status == 'A') {
                    //Todo Sudhanshu 27 may 2024 : adhoc Nomenclature
                    $status = "New " . $this->AliaseUsers('adhoc') . " Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                //$status=($auRec[$i]->order_status=='A')?"New Adhoc Order":"Processed";
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }

            //----- Order by condtion -----

            switch ($auRec[$i]->order_by) {
                case 'S':
                    $order_by = $this->AliaseUsers['salesman'];
                    break;
                case "D":
                    $order_by = $this->AliaseUsers['distributor'];
                    break;
                case "R":
                    $order_by = $this->AliaseUsers['retailer'];
                    break;
                default :
                    $order_by = '';
            }

            //--------

            if ($auRec[$i]->updated_by_app > 0) {
                $color = 'U';
            }
            if ($flag == 1) {
                $photo = '<a href=\"retailer_survey.php?retId=' . $auRec[$i]->retailer_id . '\" ' . $targetBlank . '>View Survey Photo</a>';
            }
            //Retailer location maping only survey table
            if ($auRec[$i]->lat != '') {


                $center_lat = $retLatLng[$auRec[$i]->retailer_id]->rlat;
                $center_lng = $retLatLng[$auRec[$i]->retailer_id]->rlng;
                $radius = 0.05;
                /*  $query = sprintf("SELECT order_id, lat, lng, ( 6371 * acos( cos( radians('%s') ) * cos( radians( lat ) ) * cos( radians( lng ) - radians('%s') ) + sin( radians('%s') ) * sin( radians( lat ) ) ) ) AS distance FROM table_order where order_id='".$auRec[$i]->order_id."'",
    mysql_real_escape_string($center_lat),
    mysql_real_escape_string($center_lng),
    mysql_real_escape_string($center_lat),
    mysql_real_escape_string($radius));
    $result = mysql_query($query);
    $row = @mysql_fetch_assoc($result);  */
                if ($row['distance'] <= $radius) {
                    $map = '<a href=\"show_map.php?ord=' . base64_encode($auRec[$i]->order_id) . '\" ' . $targetBlank . '>View on Map</a>';
                    $colortd = "in";
                } else {
                    $map = '<a href=\"show_map.php?ord=' . base64_encode($auRec[$i]->order_id) . '\" ' . $targetBlank . '>View on Map</a>';
                    $colortd = "out";
                }
            } else {
                $map = "-";
                $colortd = "out";
            }
            //$status=($auRec[$i]->order_status=='A')?"New Order":"Processed";
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            $salRptTo = '';
//if($auRec[$i]->type=='S'){
            $salRptTo = $auRec[$i]->rpt_to;
//}
            /*----Display Outlet ----*/
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }

            if ((isset($auRec[$i]->lat) && !empty($auRec[$i]->lat) && ($auRec[$i]->lat != '0.0')) && (isset
                    ($auRec[$i]->lng) && !empty($auRec[$i]->lng) && ($auRec[$i]->lng != '0.0')) && (isset($retSurveyLatLngArr[$auRec[$i]->retailer_id]) && !empty($retSurveyLatLngArr[$auRec[$i]->retailer_id]))) {


                $retSurLat = $retSurveyLatLngArr[$auRec[$i]->retailer_id]->lat;
                $retSurLng = $retSurveyLatLngArr[$auRec[$i]->retailer_id]->lng;

                $orderDistance = round($this->distance($auRec[$i]->lat, $auRec[$i]->lng, $retSurLat, $retSurLng, 'K'), 2) . ' KM';
            } else {
                $orderDistance = '-';
            }
//            $ttlItems = isset($orderitms[$auRec[$i]->order_id]) && !empty($orderitms[$auRec[$i]->order_id]) ? $orderitms[$auRec[$i]->order_id] : 0;
            $ttlItems = $auRec[$i]->total_item;

            $date_of_delivery = $this->_changeDate($auRec[$i]->delivery_date);
            $link = '<a style=\"cursor: pointer;color: #37bcef;text-decoration: none;font-size: 15px;font-weight: 900;\" href=\"order_list.php?act_id=' . base64_encode($auRec[$i]->order_id) . '\" ' . $targetBlank . '> ' . $auRec[$i]->order_id . '</a>';
            // $viewOrderImage = '<a href=\"order_image.php?ordId=' . base64_encode($auRec[$i]->order_id) . '\" ' . $targetBlank . '>View Image</a>';
            $viewOrderImage = '<a href="order_image.php?ordId=' . base64_encode($auRec[$i]->order_id) . '" ' . $targetBlank . '>View Image</a>';
            //Todo Start : sudhanshu 28 june 2024 : add download pdf column
            $downPDF = "";
            if (strtolower($auRec[$i]->order_type) != 'no') {
                $downPDF = '<a href="download_order_pdf.php?ordId=' . base64_encode($auRec[$i]->order_id) . '" ' . $targetBlank . '>Download PDF</a>';

            }
            //Todo End : sudhanshu 28 june 2024 : add download pdf column
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");

            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            //$json .= ',"'.date("h:i A.", strtotime($auRec[$i]->time_of_order)). '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords($link) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->acc_total_invoice_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($ttlItems)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total_ordered_qty)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_type_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($salRptTo)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->group_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->relation)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->type_name)) . '"';

            $json .= ',"' . ucwords(addslashes($outlet)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->retailer_phone_no))) . '"';
            $json .= ',"' . $map . '"';
            $json .= ',"' . $photo . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . $order_by . '"';
            $json .= ',"' . $NoOrderImage . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->comments))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . ucwords(addslashes($date_of_delivery)) . '"';
            $json .= ',"' . ucwords(addslashes($orderDistance)) . '"';
            $json .= ',"' . ucwords(addslashes($viewOrderImage)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"';
            $json .= ',"' . ucwords(addslashes($downPDF)) . '"]';

//   $json .= ',"'.ucwords(addslashes($auRec[$i]->must_sell_items_reason)).'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


    function showSalsmanOrderList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " 1=1 ";
        $where = " o.salesman_id=" . $_SESSION['salesmanId'] . " and o.account_id =" . $_SESSION['accountId'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order as o left join table_retailer as r on o.retailer_id=r.retailer_id', "o.*,r.retailer_name,r.retailer_address,r.retailer_location", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_order as o left join table_retailer as r on o.retailer_id=r.retailer_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->order_type == 'Yes') {
                $status = ($auRec[$i]->order_status == 'A') ? "New Order" : "Processed";
            } else {
                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
            }
            //$status=($auRec[$i]->order_status=='A')?"New Order":"Processed";
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . date("h:i A.", strtotime($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location)) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->comments)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->order_type) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRetailerOrderListing()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($qtype == "date_of_order" && $query != '') {
            $query = date("Y-m-d", strtotime($query));
        }
        $_objAdmin = new Admin();
        if ($_SESSION['SalDisList'] != '') {
            $salesman = " and s.salesman_id='" . $_SESSION['SalDisList'] . "'";
        }
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_status='A' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_status='I' ";
            }
            if ($_SESSION['OrderBy'] == 4) {
                $orderby = " and o.order_status='D' ";
            }
        } else {
            $orderby = "";
        }
        if (isset($_SESSION['distributorId']) && $_SESSION['distributorId'] != "A" && $_SESSION['distributorId'] != "0") {
            $distributorCond = " AND o.distributor_id ='" . $_SESSION['distributorId'] . "' ";
        } else {
            $distributorCond = "";
        }
        mysql_query("SET SESSION group_concat_max_len = 100000000");
        $validated_default_date = date("Y-m-d", strtotime("-2 Months"));
        $where = " AND o.order_for='R' AND o.order_status !='D'  and order_type IN('Yes', 'Return', 'Adhoc') and o.distributor_id!=''  $salesman $fromdate $todate $distributorCond $orderby and o.account_id =" . $_SESSION['accountId'];
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order as o
      left join table_retailer as r on o.retailer_id=r.retailer_id
      left join table_salesman as s on o.salesman_id=s.salesman_id     
      left join table_distributors as d on d.distributor_id=o.distributor_id      
      left join state as st on st.state_id=r.state
      
      left join city as c on c.city_id=r.city', "o.*,r.retailer_name, r.retailer_code,r.retailer_address,
	  r.retailer_location,s.salesman_name,d.distributor_name,d.distributor_code, 
	 st.state_name,c.city_name", $rp, $where . $sort, '');
        $retIdArr = [];
        if (is_array($auRec) && (count($auRec) > 0)) {
            foreach ($auRec as $key => $auRecData) {
                if (isset($auRecData->retailer_id) && !empty($auRecData->retailer_id) && (intval($auRecData->retailer_id) > 0)) {
                    $retIdArr[] = $auRecData->retailer_id;
                }
            }
            $retIds = implode(',', array_unique($retIdArr));
            $getRetailerRoutes = $this->_getSelectList("table_route_retailer as rr 
LEFT JOIN table_route as r ON r.route_id = rr.route_id", "rr.retailer_id, GROUP_CONCAT(DISTINCT r.route_name SEPARATOR ' | ') as route_names", "", " rr.retailer_id IN($retIds) GROUP BY rr.retailer_id ORDER BY rr.retailer_id ASC ");
            $retailerWiseRoutesArr = [];
            if (is_array($getRetailerRoutes) && (count($getRetailerRoutes) > 0)) {
                foreach ($getRetailerRoutes as $key => $retRoutes) {
                    if (isset($retRoutes->route_names) && !empty($retRoutes->route_names)) {
                        $retailerWiseRoutesArr[$retRoutes->retailer_id] = $retRoutes->route_names;
                    }
                }
            }
        }
        $auRecCount = $this->_getSelectList('table_order as o
      left join table_retailer as r on o.retailer_id=r.retailer_id
      left join table_salesman as s on o.salesman_id=s.salesman_id
      left join table_distributors as d on d.distributor_id=o.distributor_id
      left join state as st on st.state_id=r.state
      left join city as c on c.city_id=r.city', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $viewInvoice = '';
            if ($auRec[$i]->order_status == 'A') {
                $status = "New Order";
                $color = "N";
            }
            if ($auRec[$i]->order_status == 'I') {
                $status = "Processed";
                $color = "I";
            }
            if ($auRec[$i]->order_status == 'D') {
                // $status="Dispatched";
                $status = "Invoiced";
                // $viewInvoice="<a target=\"blank\" href=\"invoice.php?id=".$auRec[$i]->order_id."\">View Invoice</a>";
                $color = "A";
            }
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            /* Bill Type */
            $billTYPE = '';
            $bill_desc = '';
            switch (strtolower($auRec[$i]->order_for)) {
                case 'r':
                    $order_for = $this->AliaseUsers['retailer'];
                    break;
                case 'd':
                    $order_for = $this->AliaseUsers['distributor'];
                    break;
            }
            if ($auRec[$i]->order_type == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $orderType = "Sales Order";
                    $color = 'A';
                } elseif ($auRec[$i]->order_status == 'I') {
                    $orderType = "Sales Order";
                    $color = 'I';
                }
            }
            if ($auRec[$i]->order_type == 'Return') {
                $orderType = "Return Order";
                $color = 'O';
            }
            $CheckOrderSts = $this->_getSelectList2('table_order as o 
	  inner join table_order_detail as od on o.order_id = od.order_id',
                "od.quantity, od.acc_quantity,od.is_processed ", '', " o.order_id='" . $auRec[$i]->order_id . "' AND (((CAST(od.quantity AS DECIMAL(10,2)) = CAST(od.acc_quantity AS DECIMAL(10,2))) AND od.is_processed=0) OR ((CAST(od.quantity AS DECIMAL(10,2)) > CAST(od.acc_quantity AS DECIMAL(10,2))) AND od.is_processed = 1)) AND od.free_item_id = 0  ");

            $TotalItem = $this->_getSelectList('table_order as o 
	  inner join table_order_detail as od on o.order_id = od.order_id',
                "count(od.order_id) as total_item,sum(od.quantity) as total_qty", '', " o.order_id='" .
                $auRec[$i]->order_id .
                "' group by od.order_id");


            if ($auRec[$i]->order_status == 'A') {
                $orderStatus = 'Fully Pending';
            } else if ($auRec[$i]->order_status == 'C') {
                $orderStatus = 'Cancelled Order';
                $color = 'C';
            } else if (is_array($CheckOrderSts) && count($CheckOrderSts) > 0) {
                $orderStatus = 'Partially Invoiced';
            } else {
                $orderStatus = 'Fully Invoiced';
                $color = 'D';
            }
            //Todo Start : sudhanshu add order by column 19 march 2024

            if ($auRec[$i]->order_by == 'salesman') {
                $orderBy = 'Salesman';
                $ordTakeBy = $auRec[$i]->salesman_name;
            }
            if ($auRec[$i]->order_by == 'D') {
                $orderBy = 'Distributor';
                $ordTakeBy = $auRec[$i]->distributor_name;
            }
            if ($auRec[$i]->order_by == 'R') {
                $orderBy = 'Salesman';
                $ordTakeBy = $auRec[$i]->retailer_name;
            }
            //Todo End : sudhanshu add order by column 19 march 2024
            $date_of_delivery = $this->_changeDate($auRec[$i]->delivery_date);
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            //Todo Start : Sudhanshu 01 May 2024 : add cancel by column
            $cancelByUserType = '';
            $cancel_by = '';
            if (strtolower($auRec[$i]->cancel_by_user_type) == 'admin') {
                $cancelByUserType = 'Admin';
                $cancel_by = 'Admin';
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'stockist') {
                $cancelByUserType = $this->AliaseUsers('stockist');
                $cancel_by = $auRec[$i]->stockist_name;
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'distributor') {
                $cancelByUserType = $this->AliaseUsers('distributor');
                $cancel_by = $auRec[$i]->distributor_name;
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'salesman') {
                $cancelByUserType = $this->AliaseUsers('salesman');
                $cancel_by = $auRec[$i]->salesman_name;
            }
            //Todo End : Sudhanshu 01 may 2024 : add cancel by column
            $routeName = (isset($retailerWiseRoutesArr[$auRec[$i]->retailer_id]) && !empty($retailerWiseRoutesArr[$auRec[$i]->retailer_id])) ? $retailerWiseRoutesArr[$auRec[$i]->retailer_id] : '';
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($order_for)) . '"';
            $json .= ',"' . $orderStatus . '"';
            $json .= ',"' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . date("h:i A", strtotime($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($ordTakeBy)) . '"';
            $json .= ',"' . ucwords(addslashes($orderBy)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->remark)) . '"';
            $json .= ',"' . addslashes($TotalItem[0]->total_item) . '"';
            $json .= ',"' . addslashes($TotalItem[0]->total_qty) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($auRec[$i]->acc_total_invoice_amount, 2))) . '"';
            $json .= ',"' . ucwords(addslashes($billTYPE)) . '"';
            $json .= ',"' . ucwords(addslashes($bill_desc)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($outlet)) . '"';
            $json .= ',"' . ucwords(addslashes($routeName)) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . $orderType . '"';
            $json .= ',"' . $cancelByUserType . '"';
            $json .= ',"' . $cancel_by . '"';
            $json .= ',"' . $date_of_delivery . '"]';
            // $json .= ',"'.$viewInvoice.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDistributoreOrderListing($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($qtype == "date_of_order" && $query != '') {
            $query = date("Y-m-d", strtotime($query));
        }
        $_objAdmin = new Admin();
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromOrderList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToOrderList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_type='Adhoc' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_type!='Adhoc' ";
            }
        } else {
            $orderby = "";
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        } else if (isset($_SESSION['sel_dis']) && $_SESSION['sel_dis'] > 0) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['sel_dis'] . "' ";
        }
        if ($_SESSION['userLoginType'] == 1) {
            $salesman = '';
        }
        if (isset($_SESSION['sel_sal']) && $_SESSION['sel_sal'] > 0) {
            $disLogCond = " AND o.salesman_id='" . $_SESSION['sel_sal'] . "' ";
        }
        $StockistLogCond = '';
        if ($_SESSION['userLoginType'] == 7) {
            //Todo Start : sudhanshu  02 May 2024 : change stockist codition for multi stockist
            //$StockistLogCond = " AND d.stockist_id='" . $_SESSION['stockistId'] . "' ";
            $StockistLogCond = " AND o.stockist_id='" . $_SESSION['stockistId'] . "' ";
            //Todo End : sudhanshu  02 May 2024 : change stockist codition for multi stockist
        }
        if (isset($_SESSION['REGIONID']) && $_SESSION['REGIONID'] > 0) {
            $regionCondition = " AND re.region_id='" . $_SESSION['REGIONID'] . "'  AND REG.region_id IS NOT NULL ";
        }
        if (isset($_SESSION['STATEID']) && $_SESSION['STATEID'] > 0) {
            $stateCondition = " AND st.state_id='" . $_SESSION['STATEID'] . "' ";
        }
        $where = " o.order_for='D' and o.order_type IN('Yes', 'Return', 'Adhoc') $disLogCond $StockistLogCond $fromdate $todate $regionCondition $stateCondition $orderby and o.account_id =" . $_SESSION['accountId'];
        if ($qtype == 'o.date_of_order') {
            $query = date('Y-m-d', strtotime($query));
        }

        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_order as o
    left join table_salesman as s on o.salesman_id=s.salesman_id
  	left join table_distributors as d on d.distributor_id=o.distributor_id
  	left join table_stockist as stk on stk.stockist_id=o.stockist_id
  	left join state as st on st.state_id=d.state
  	left join city as c on c.city_id=d.city
  	', "o.*,s.salesman_name,d.distributor_name,d.distributor_code,d.distributor_location, d.distributor_address, st.state_name, c.city_name,stk.stockist_name,stk.stockist_code", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributor_order as o
    left join table_salesman as s on o.salesman_id=s.salesman_id
  	left join table_distributors as d on d.distributor_id=o.distributor_id
  	left join table_stockist as stk on stk.stockist_id=o.stockist_id
  	left join state as st on st.state_id=d.state
  	left join city as c on c.city_id=d.city
  	', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->order_type == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = "Cancelled";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "P";
            }
            if ($auRec[$i]->order_type == 'No') {
                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
                $color = ($auRec[$i]->order_status == 'A') ? "I" : "P";
            }
            if ($auRec[$i]->order_type == 'Adhoc') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Adhoc Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = "Cancelled";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }
            if ($auRec[$i]->order_type == 'Return') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "Return Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = "Cancelled";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }
            //Todo Start : sudhabshu 18 march 2024 as told by ritu if order is cancelled row should be red
            if ($auRec[$i]->order_status == 'C') {
                $color = 'C';
            }
            //Todo End : sudhabshu 18 march 2024 as told by ritu if order is cancelled row should be red

//            $auRec2 = $this->_getSelectList2('table_distributor_order_detail', "count( distinct(item_id)) as total_item,sum(quantity) as total_qty", '', " order_id = " . $auRec[$i]->order_id . " and type = 1");
//            $CheckOrderSts = $this->_getSelectList2('table_distributor_order as o
//	  inner join table_distributor_order_detail as od on o.order_id = od.order_id',
//                "od.quantity, od.acc_quantity,od.is_processed ", '', " o.order_id='" . $auRec[$i]->order_id . "'
//		AND ((od.quantity = od.acc_quantity AND od.is_processed=0) OR (od.quantity >od.acc_quantity AND od.is_processed=1))
//		and od.free_item_id = 0");
//            if ($auRec[$i]->order_status == 'A') {
//                $orderStatus = 'Fully Pending';
//            } else if ($auRec[$i]->order_status == 'C') {
//                $orderStatus = 'Cancelled';
//            } else if (is_array($CheckOrderSts) && count($CheckOrderSts) > 0) {
//                $orderStatus = 'Partially Invoiced';
//            } else {
//                $orderStatus = 'Fully Invoiced';
//            }

            //Todo Start : sudhanshu 16 April 2024 for  invoice status
            $totalQty = $this->_getSelectList2('table_distributor_order as o 
	  inner join table_distributor_order_detail as od on o.order_id = od.order_id',
                "sum(od.quantity) as total_qty ", '', " o.order_id='" . $auRec[$i]->order_id . "' 
		
		and od.free_item_id = 0");

            $total_order_qty = $totalQty[0]->total_qty;


            $invoicedQty = $this->_getSelectList2('table_distributor_invoice as o 
	  inner join table_distributor_invoice_detail as od on o.invoice_id = od.invoice_id',
                "sum(acc_quantity) as invocie_qty", '', " o.ref_order_id='" . $auRec[$i]->order_id . "' ");

            $total_invoiced_qty = $invoicedQty[0]->invocie_qty;

            if ($auRec[$i]->order_status == 'A') {
                $orderStatus = 'Fully Pending';
            } else if (intval($total_order_qty) > intval($total_invoiced_qty)) {
                $orderStatus = 'Partially Invoiced';
            } else {
                $orderStatus = 'Fully Invoiced';
            }

            //Todo End : sudhanshu 16 April 2024 for  invoice status
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
//      $salDetails = $this->getSalesmanFullDetails($auRec[$i]->salesman_id);
            /* ----Display Outlet ---- */
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            $order_id = $auRec[$i]->order_id;
//            if($auRec[$i]->order_status == 'C'){
//                $order_id ='00';
//            }

            //Todo Start : sudhanshu add order by column 15 march 2024
            if ($auRec[$i]->order_by == 'S') {
                $orderBy = 'Salesman';
                $ordTakeBy = $auRec[$i]->salesman_name;
            }
            if ($auRec[$i]->order_by == 'stockist') {
                $orderBy = 'Stockist';
                $ordTakeBy = $auRec[$i]->stockist_name;
            }
            if ($auRec[$i]->order_by == 'distributor') {
                $orderBy = 'Distributor';
                $ordTakeBy = $auRec[$i]->distributor_name;
            }

            if ($auRec[$i]->order_status == 'C') {
                $orderStatus = '';
            }
            //Todo End : sudhanshu add order by column 15 march 2024
            //Todo Start : Sudhanshu 15 April : add cancel by column
            $cancelByUserType = '';
            $cancel_by = '';
            if (strtolower($auRec[$i]->cancel_by_user_type) == 'admin') {
                $cancelByUserType = 'Admin';
                $cancel_by = 'Admin';
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'stockist') {
                $cancelByUserType = $this->AliaseUsers('stockist');
                $cancel_by = $auRec[$i]->stockist_name;
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'distributor') {
                $cancelByUserType = $this->AliaseUsers('distributor');
                $cancel_by = $auRec[$i]->distributor_name;
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'salesman') {
                $cancelByUserType = $this->AliaseUsers('salesman');
                $cancel_by = $auRec[$i]->salesman_name;
            }
            //Todo End : Sudhanshu 15 April : add cancel by column
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($ordTakeBy)) . '"';
            $json .= ',"' . ucwords(addslashes($orderBy)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->remark)) . '"';
            $json .= ',"' . $orderStatus . '"';
            $json .= ',"' . ucwords(addslashes(number_format($auRec[$i]->acc_total_invoice_amount, 2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec2[0]->total_item)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec2[0]->total_qty)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_location))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->distributor_address))) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . ucwords(addslashes($cancelByUserType)) . '"';
            $json .= ',"' . ucwords(addslashes($cancel_by)) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->comments))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->tag_description)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDisributorOrderList()
    {
        $RoleBrands = $this->getUserRoleBrand();
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //$_objAdmin = new Admin();
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $disList = " o.distributor_id=" . $_SESSION['distributorId'] . " and";
        } else {
            $disList = "";
        }
        if ($_SESSION['userLoginType'] == 7) {
            $stkList = " d.stockist_id=" . $_SESSION['stockistId'] . " and";
        } else {
            $stkList = "";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = " and order_status IN('A','I') ";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_status='A' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_status='I' ";
            }
            if ($_SESSION['OrderBy'] == 4) {
                $orderby = " and o.order_status='D' ";
            }
        } else {
            $orderby = " and order_status IN('A','I') ";
        }
        //$where = " 1=1 ";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $orderIds = '';
        if (is_array($_SESSION['SalDisList']) && (count($_SESSION['SalDisList']) > 0)) {
            $salectedSalIds = implode(',', $_SESSION['SalDisList']);
            $salesman = " AND s.salesman_id IN(" . $salectedSalIds . ") ";
        } else if (!empty($RoleBrands)) {
            $salesman = "";
        }

        if (!empty($RoleBrands)) {
            $brandWhere = " o.order_for='R' and o.order_status !='C' and o.order_type !='Return' and o.distributor_id !='' $fromdate $todate ";
            $orderIds = $this->getBrandsOrder($RoleBrands, $brandWhere);
        }
        $where = " $disList $stkList r.new='' and o.order_for='R' and o.order_status !='C' and o.order_type !='Return' 
		and o.distributor_id!='' $orderIds $orderIds $salesman $fromdate $todate $orderby";

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order as o 
				left join table_retailer as r on o.retailer_id=r.retailer_id 
				left join table_salesman as s on o.salesman_id=s.salesman_id 
				left join table_distributors as d on d.distributor_id=o.distributor_id 
				left join table_retailer_channel_master as cm on cm.channel_id=r.channel_id 
				left join state as st on st.state_id=d.state 
				LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
                LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
				left join city as c on c.city_id=d.city',
            "o.*,r.retailer_name,r.retailer_code,r.retailer_address,r.retailer_location,cm.channel_name,r.display_outlet,s.salesman_name,s.employee_code,
		d.distributor_name,d.distributor_code, st.state_name,c.city_name,sz.zone_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_order as o 
			join table_distributors as d on d.distributor_id=o.distributor_id
			left join table_retailer as r on o.retailer_id=r.retailer_id 
			left join table_salesman as s on o.salesman_id=s.salesman_id
			LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
            LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
			left join table_retailer_channel_master as cm on cm.channel_id=r.channel_id',
            'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->order_status == 'A') {
                $status = "New Order";
                $color = "A";
            }
            if ($auRec[$i]->order_status == 'I') {
                $status = "Processed";
                $color = "I";
            }
            if ($auRec[$i]->order_status == 'D') {
                $status = "Dispatched";
                $color = "N";
            }
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            //----- Order by condtion -----

            switch ($auRec[$i]->order_by) {
                case 'S':
                    $order_by = $this->AliaseUsers['salesman'];
                    break;
                case "D":
                    $order_by = $this->AliaseUsers['distributor'];
                    break;
                case "R":
                    $order_by = $this->AliaseUsers['retailer'];
                    break;
                default :
                    $order_by = '';
            }

            //--------
            //$status=($auRec[$i]->order_status=='A')?"New Adhoc Order":"Processed";
            //$color=($auRec[$i]->order_status=='A')?"O":"P";
            //$status=($auRec[$i]->order_status=='A')?"New Order":"Processed";
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . date("h:i A.", strtotime($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->acc_total_invoice_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes($outlet)) . '"';
            $json .= ',"' . ucwords(addslashes($order_by)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRetailerOrderList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " 1=1 ";
        $where = " o.retailer_id=" . $_SESSION['retailerId'] . " and o.account_id =" . $_SESSION['accountId'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order as o left join table_salesman as s on o.salesman_id=s.salesman_id left join table_distributors as d on o.distributor_id=d.distributor_id', "o.*,s.salesman_name,d.distributor_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_order as o left join table_salesman as s on o.salesman_id=s.salesman_id left join table_distributors as d on o.distributor_id=d.distributor_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->order_type == 'Yes') {
                $status = ($auRec[$i]->order_status == 'A') ? "New Order" : "Processed";
            } else {
                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
            }
            //$status=($auRec[$i]->order_status=='A')?"New Order":"Processed";
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . date("h:i A.", strtotime($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->comments))) . '"';
            $json .= ',"' . addslashes($auRec[$i]->order_type) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Attendance Master Created On 4 Feb 2021
    function showAttendance()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'tag_type';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 10 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasAtte']) && $_SESSION['MasAtte'] != 'all' && $_SESSION['MasAtte'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasAtte'] . "'";
        }
        //Todo End : sudhanshu 10 june 2024 : add status filter
        $where = " tag_type='4'  $statusCondi";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_tags', "*", $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_tags', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"attendance_master.php?statusId=' . $auRec[$i]->tag_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->tag_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addNextStep()
    {
        $data['next_step'] = mysql_escape_string(trim($_POST['next_step']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_date'] = date('Y-m-d');
        $data['last_updated_date'] = date('Y-m-d');
        $data['last_updated_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_next_step_master');
        return $id;
    }

    function updateNextStep($id)
    {
        $data['next_step'] = mysql_escape_string(trim($_POST['next_step']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated_date'] = date('Y-m-d');
        $data['status'] = 'A';
        $data['last_updated_status'] = 'Updated';
        $id = $this->_dbUpdate($data, 'table_next_step_master', " next_step_id=" . $id);
        return $id;
    }

    function showNextStepMaster()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'next_step';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasStep']) && $_SESSION['MasStep'] != 'all' && $_SESSION['MasStep'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasStep'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_next_step_master', "*", $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_next_step_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"next_step_master.php?statusId=' . $auRec[$i]->next_step_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->next_step_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->next_step)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addSalesRetrn()
    {
        $data['sales_return'] = mysql_escape_string(trim($_POST['sales_return']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_date'] = date('Y-m-d');
        $data['last_updated_date'] = date('Y-m-d');
        $data['last_updated_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_sales_return_master');
        return $id;
    }

    function updateSalesRetrn($id)
    {
        $data['sales_return'] = mysql_escape_string(trim($_POST['sales_return']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated_date'] = date('Y-m-d');
        $data['status'] = 'A';
        $data['last_updated_status'] = 'Updated';
        $id = $this->_dbUpdate($data, 'table_sales_return_master', " sales_return_id=" . $id);
        return $id;
    }

    function showSalesMaster()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'sales_return';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasReturn']) && $_SESSION['MasReturn'] != 'all' && $_SESSION['MasReturn'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasReturn'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_sales_return_master', "*", $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_sales_return_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"sales_return_master.php?statusId=' . $auRec[$i]->sales_return_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->sales_return_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->sales_return)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addAsset()
    {
        $data['asset_name'] = mysql_escape_string(trim($_POST['asset_name']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_date'] = date('Y-m-d');
        $data['last_updated_date'] = date('Y-m-d');
        $data['last_updated_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_asset_master');
        return $id;
    }

    function updateAsset($id)
    {
        $data['asset_name'] = mysql_escape_string(trim($_POST['asset_name']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated_date'] = date('Y-m-d');
        $data['status'] = 'A';
        $data['last_updated_status'] = 'Updated';
        $id = $this->_dbUpdate($data, 'table_asset_master', " asset_id=" . $id);
        return $id;
    }

    function showAsset()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'asset_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 10 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasAset']) && $_SESSION['MasAset'] != 'all' && $_SESSION['MasAset'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasAset'] . "'";
        }
        //Todo End : sudhanshu 10 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_asset_master', "*", $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_asset_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"asset_list.php?statusId=' . $auRec[$i]->asset_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->asset_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->asset_name)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addDepartment()
    {

        $data['department_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['department_name'])));
        $data['department_email'] = mysql_escape_string($this->validateForm("/[^A-Za-z0-9@.]/", trim($_POST['department_email'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated_date'] = date('Y-m-d');
        $data['status'] = 'A';

        $id = $this->_dbInsert($data, 'table_department');
        return $id;
    }

    function updateDepartment($id)
    {
        $data['department_name'] = mysql_escape_string(trim($_POST['department_name']));
        $data['department_email'] = mysql_escape_string(trim($_POST['department_email']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated_date'] = date('Y-m-d');
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_department', " department_id=" . $id);
        return $id;
    }

    function showDepartment()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'department_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 10 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasDpt']) && $_SESSION['MasDpt'] != 'all' && $_SESSION['MasDpt'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasDpt'] . "'";
        }
        //Todo End : sudhanshu 10 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_department', "*", $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_department', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"department_list.php?statusId=' . $auRec[$i]->department_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->department_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->department_name)) . '"';
            $json .= ',"' . $auRec[$i]->department_email . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addDesignation()
    {
        $data['designation_code'] = mysql_escape_string(trim($_POST['designation_code']));
        $data['designation_name'] = mysql_escape_string(trim($_POST['designation_name']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_date'] = date('Y-m-d');
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_designation');
        return $id;
    }

    function updateDesignation($id)
    {
        $data['designation_code'] = mysql_escape_string(trim($_POST['designation_code']));
        $data['designation_name'] = mysql_escape_string(trim($_POST['designation_name']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_date'] = date('Y-m-d');
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Updated';
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_designation', " designation_id=" . $id);
        return $id;
    }

    function showDesignation()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'designation_code';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasDesi']) && $_SESSION['MasDesi'] != 'all' && $_SESSION['MasDesi'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasDesi'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_designation', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_designation', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"designation_list.php?statusId=' . $auRec[$i]->designation_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->designation_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->designation_name)) . '"';
            $json .= ',"' . $auRec[$i]->designation_code . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showCallType()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'call_type';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 10 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasCall']) && $_SESSION['MasCall'] != 'all' && $_SESSION['MasCall'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasCall'] . "'";
        }
        //Todo End : sudhanshu 10 june 2024 : add status filter
        $where = " call_type!='' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_master_call', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_master_call', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"call_type_master.php?statusId=' . $auRec[$i]->master_call_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->master_call_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->call_type)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showTagList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'tag_type';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasTag']) && $_SESSION['MasTag'] != 'all' && $_SESSION['MasTag'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasTag'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " tag_type='3' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_tags', "*", $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_tags', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"tag_list.php?statusId=' . $auRec[$i]->tag_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->tag_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showMessage($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'message_id';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if (isset($qtype) && $qtype == 'send_date') {
            $query = date('Y-m-d', strtotime($query));
        }
        $where = " m.status='A' And m.salesman_id >0 $salesman";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_message as m left join table_salesman as s on s.salesman_id=m.salesman_id', "m.*,s.salesman_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_message as m left join table_salesman as s on s.salesman_id=m.salesman_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $send_date = $this->_changeDate($auRec[$i]->send_date);
            if ($rc) $json .= ",";
            if ($auRec[$i]->image_required == 'Yes') {
                $photo = '<a href="message_image.php?msgId=' . $auRec[$i]->message_id . '" target="_blank">View Photo</a>';
            } else {
                $photo = "";
            }
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->message_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->subject)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->message))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->reply))) . '"';
            $json .= ',"' . addslashes($photo) . '"';
            $json .= ',"' . addslashes($auRec[$i]->photo_count) . '"';
            $json .= ',"' . addslashes($send_date) . '"';
            $json .= ',"' . addslashes($auRec[$i]->send_time) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showTroubleTickets($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'trouble_tickets_date';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromTroubleList'] != '') {
            $fromdate = " t.trouble_tickets_date >= '" . date('Y-m-d', strtotime($_SESSION['FromTroubleList'])) . "'";
        } else {
            $fromdate = " t.trouble_tickets_date >= '" . date("Y-m-d", strtotime("-1 day")) . "'";
        }
        if ($_SESSION['ToTroubleList'] != '') {
            $todate = " and t.trouble_tickets_date <= '" . date('Y-m-d', strtotime($_SESSION['ToTroubleList'])) . "'";
        } else {
            $todate = " and t.trouble_tickets_date <= '" . date("Y-m-d", strtotime("-1 day")) . "'";
        }
        $where = " $fromdate $todate $salesman and s.account_id= " . $_SESSION['accountId'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_trouble_tickets as t left join table_salesman as s on s.salesman_id=t.salesman_id', "t.*,s.salesman_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_trouble_tickets as t left join table_salesman as s on s.salesman_id=t.salesman_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            /*if($auRec[$i]->reply_date!='0000-00-00'){
			$reply_date=date('Y-m-d', strtotime($auRec[$i]->reply_date));
			} else {
			$reply_date="";
			}*/
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->trouble_tickets_id . '",';
            $json .= '"cell":["' . addslashes($this->_changeDate($auRec[$i]->trouble_tickets_date)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->message))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->reply))) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->reply_date)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->status) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showIncentive($salesmanID)
    {
        //include("includes/incentive.inc.php");
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'target_incentive_id';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objArrayList = new ArrayList();
        $cond = $_objArrayList->getFilterCondForRouteSchemeIncentiveTargets($salesmanID);
        $where = " i.last_update_status!='Delete' and i.qualifiers_type=1 and target_incentive_type=2 $cond";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_target_incentive as i 
		left join table_type as t on t.type_id=i.type_id 
		left join table_party_type as p on p.party_type_id=i.party_type_id 
		left join table_duration as d on d.dur_id=i.dur_id
		LEFT JOIN table_user_relationships AS ur ON ur.target_incentive_id = i.target_incentive_id 
		LEFT JOIN table_salesman AS s ON s.salesman_id = ur.salesman_id ',
            "i.*,t.type_description,p.party_description,d.dur_description", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_target_incentive as i 
		left join table_type as t on t.type_id=i.type_id 
		left join table_party_type as p on p.party_type_id=i.party_type_id 
		left join table_duration as d on d.dur_id=i.dur_id
		LEFT JOIN table_user_relationships AS ur ON ur.target_incentive_id = i.target_incentive_id 
		LEFT JOIN table_salesman AS s ON s.salesman_id = ur.salesman_id ',
            'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"incentive.php?Inid=' . $auRec[$i]->target_incentive_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->target_incentive_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->description) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->type_description)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->party_description)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->dur_description)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->primary_values)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->incentive_reward_amount)) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->start_date))) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->end_date))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /******************************************* NEW CODES************************************************/
    function showcms()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'page_alias_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_cms', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_cms', 'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $display = ($auRec[$i]->display_to_admin == 1) ? "Yes" : "No";
            $status = '<a href=\"cms.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';
            $del = '<a href=\"cms.php?rid=' . $auRec[$i]->id . '\">Delete</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->page_alias_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->page_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->title) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ordID) . '"';
            $json .= ',"' . addslashes($display) . '"';
            $json .= ',"' . $del . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addcms()
    {
        $data['parentPage'] = mysql_escape_string(trim($_POST['parentPage']));
        $data['account_id'] = 1;
        $data['page_name'] = mysql_escape_string(trim($_POST['page_name']));
        $data['page_alias_name'] = mysql_escape_string($_POST['page_alias_name']);
        $data['title'] = mysql_escape_string($_POST['title']);
        $data['keywords'] = mysql_escape_string($_POST['keywords']);
        $data['description'] = mysql_escape_string($_POST['description']);
        $data['ordID'] = mysql_escape_string(trim($_POST['ordID']));
        $data['status'] = 'A';
        $data['entity_name'] = mysql_escape_string($_POST['entity_name']);
        $data['display_to_admin'] = mysql_escape_string($_POST['display_to_admin']);
        $data['created'] = date('Y-m-d H:i:s');
        //echo "<pre>";print_r($data);die;
        $id = $this->_dbInsert($data, 'table_cms');
        return $id;
    }

    function updatecms($id)
    {
        $data['parentPage'] = mysql_escape_string(trim($_POST['parentPage']));
        $data['account_id'] = 1;
        $data['page_name'] = mysql_escape_string($_POST['page_name']);
        $data['page_alias_name'] = mysql_escape_string($_POST['page_alias_name']);
        $data['title'] = mysql_escape_string($_POST['title']);
        $data['keywords'] = mysql_escape_string($_POST['keywords']);
        $data['description'] = mysql_escape_string($_POST['description']);
        $data['entity_name'] = mysql_escape_string($_POST['entity_name']);
        $data['ordID'] = mysql_escape_string(trim($_POST['ordID']));
        $data['display_to_admin'] = mysql_escape_string($_POST['display_to_admin']);
        $data['status'] = 'A';
        $data['created'] = date('Y-m-d H:i:s');
        $id = $this->_dbUpdate2($data, 'table_cms', " id=" . $id);
        return $id;
    }

    // Show CMS
    function addCompanyAccount()
    {
        $countryIDName = mysql_escape_string($_POST['country']);
        $country = explode(',', $countryIDName);

        $hierarchy_enable = mysql_escape_string($_POST['hierarchy_enable']);
        $access_enable = mysql_escape_string($_POST['access_enable']);
        $data['company_name'] = mysql_escape_string($_POST['company_name']);
        $data['company_address'] = mysql_escape_string($_POST['company_address']);
        $data['company_phone_no'] = mysql_escape_string($_POST['company_phone_no']);
        $data['no_of_employees'] = mysql_escape_string($_POST['no_of_employees']);
        $data['billing_cycle'] = mysql_escape_string($_POST['billing_cycle']);
        $data['start_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
//        $data['country'] = mysql_escape_string($_POST['country']);
        $data['country_id'] = $country[0];
        $data['country'] = $country[1];
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_account');


        if ($id != '') {

            $IdLength = strlen($id);
            $lengthReq = (8 - $IdLength);

            if ($lengthReq > 0) {

                $str = $this->generateAlphaNumericCode($lengthReq);
                $rand = str_shuffle($str);
                $data1['account_code'] = $rand . $id;

            } else {

                $data1['account_code'] = $id;

            }

            $id1 = $this->_dbUpdate2($data1, 'table_account', " account_id=" . $id);

            $data2['account_id'] = $id;
            $data2['feature_id'] = '1';
            $data2['status'] = $hierarchy_enable;
            $hid = $this->_dbInsert($data2, 'table_module_enable');
            $data3['account_id'] = $id;
            $data3['feature_id'] = '2';
            $data3['status'] = $access_enable;
            $AccId = $this->_dbInsert($data3, 'table_module_enable');
        }
        return $id;
    }

    function updateCompanyAccount($id)
    {
        $data = [];
        $countryIDName = mysql_escape_string($_POST['country']);
        $country = explode(',', $countryIDName);
        $hierarchy_enable = mysql_escape_string($_POST['hierarchy_enable']);
        $access_enable = mysql_escape_string($_POST['access_enable']);
        $checkAccCode = $this->_getSelectList2('table_account', "account_code", '', " account_id='" . $id . "'");

        $date_today = $this->_changeDate(date('y-m-d'));
        $get_date = $_POST['to'];
        if (strtotime($date_today) > strtotime($get_date)) {
            $status = 'I';
        } else {
            $status = 'A';
        }
//        if (is_array($checkAccCode) && (count($checkAccCode) > 0)) {
//            if (empty($checkAccCode[0]->account_code)) {
//                $IdLength = strlen($id);
//                $lengthReq = (8 - $IdLength);
//
//                if ($lengthReq > 0) {
//                    $str = $this->generateAlphaNumericCode($lengthReq);
//                    $rand = str_shuffle($str);
//                    $data['account_code'] = $rand . $id;
//                } else {
//                    $data['account_code'] = $id;
//                }
//            }
//        }

        $data['company_name'] = mysql_escape_string($_POST['company_name']);
        $data['company_address'] = mysql_escape_string($_POST['company_address']);
        $data['company_phone_no'] = mysql_escape_string($_POST['company_phone_no']);
        $data['no_of_employees'] = mysql_escape_string($_POST['no_of_employees']);
        $data['billing_cycle'] = mysql_escape_string($_POST['billing_cycle']);
        $data['start_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
//        $data['country'] = mysql_escape_string($_POST['country']);
        $data['country_id'] = $country[0];
        $data['country'] = $country[1];
        $data['status'] = $status;
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);

        $upId = $this->_dbUpdate2($data, 'table_account', " account_id=" . $id);
        // Update end date of price table AJAY@2015-01-13
        $price_array = array('end_date' => $data['end_date']);
        $this->_dbUpdate2($price_array, 'table_price', " account_id=" . $id);
        // Update end date of salesman in web user table AJAY@2015-01-13
        $user_array = array('end_date' => $data['end_date']);
        $this->_dbUpdate2($user_array, 'table_web_users', " account_id=" . $id . " AND user_type = 5");
        if ($id != "") {
            $data_2['start_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
            $data_2['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
            $upId = $this->_dbUpdate2($data_2, 'table_web_users', " account_id=" . $id);
        }
        $chek = $this->_getSelectList2('table_module_enable', "*", '', " account_id='" . $id . "'");
        if ($chek) {
            $data2['account_id'] = $id;
            $data2['feature_id'] = '1';
            $data2['status'] = $hierarchy_enable;
            $hid = $this->_dbUpdate2($data2, 'table_module_enable', " feature_id='1' and account_id=" . $id);
            $data3['account_id'] = $id;
            $data3['feature_id'] = '2';
            $data3['status'] = $access_enable;
            //print_r($data3);exit;
            $AccId = $this->_dbUpdate2($data3, 'table_module_enable', " feature_id='2' and account_id=" . $id);
        } else {
            $data2['account_id'] = $id;
            $data2['feature_id'] = '1';
            $data2['status'] = $hierarchy_enable;
            $hid = $this->_dbInsert($data2, 'table_module_enable');
            $data3['account_id'] = $id;
            $data3['feature_id'] = '2';
            $data3['status'] = $access_enable;
            $AccId = $this->_dbInsert($data3, 'table_module_enable');
        }
        return $id;
    }

    function addQChecker()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['qchecker_name'] = mysql_escape_string($_POST['qchecker_name']);
        $data['qchecker_address'] = mysql_escape_string($_POST['qchecker_address']);
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['qchecker_phone_no'] = mysql_escape_string($_POST['qchecker_number']);
        $data['start_date'] = mysql_escape_string($_POST['start_date']);
        $data['end_date'] = mysql_escape_string($_POST['end_date']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_quality_checker');
        return $id;
    }

    function UpdateQChecker($id)
    {
        $data['qchecker_name'] = mysql_escape_string($_POST['qchecker_name']);
        $data['qchecker_address'] = mysql_escape_string($_POST['qchecker_address']);
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['qchecker_phone_no'] = mysql_escape_string($_POST['qchecker_number']);
        //$data['start_date']=mysql_escape_string($_POST['start_date']);
        $data['end_date'] = date('Y-m-d');
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_quality_checker', " qchecker_id=" . $id);
        return $id;
    }

    function dispatchOrder()
    {
        $category_id = $_POST['category_id'];
        $item_id = $_POST['item_id'];
        $item_quantity = $_POST['item_quantity'];
        foreach ($category_id as $key => $value) {
            $data['category_id'] = mysql_escape_string($value);
            $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
            $data['item_id'] = mysql_escape_string($item_id[$key]);
            $data['item_quantity'] = mysql_escape_string($item_quantity[$key]);
            $data['distributor_id'] = mysql_escape_string($_POST['dis_id']);
            $data['date_of_dispatch'] = mysql_escape_string($_POST['start_date']);
            if (!empty($value) && !empty($item_id[$key]) && !empty($item_quantity[$key])) {
                $dis_id = $this->_dbInsert($data, 'table_dispatch_order');
                $id[] = $dis_id;
            }
        }
        return $id;
    }
    /*******************************************End NEW CODES************************************************/
    /*******************************************Show Function NEW CODES************************************************/
    function showDispatchListByDate()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',date_of_dispatch desc';
        if (!$sortname) $sortname = 'distributor_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        if ($_SESSION['distributorID'] != '') {
            $distributor = " d.distributor_id='" . $_SESSION['distributorID'] . "'";
        } /* else {
  	$distributor= " tdo.dispatch_id!=''";
  }*/
        if ($_SESSION['FromDispatchList'] != '') {
            $fromdate = " and tdo.date_of_dispatch >= '" . date('Y-m-d', strtotime($_SESSION['FromDispatchList'])) . "'";
        } else {
            $fromdate = " and tdo.date_of_dispatch >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDispatchList'] != '') {
            $todate = " and tdo.date_of_dispatch <= '" . date('Y-m-d', strtotime($_SESSION['ToDispatchList'])) . "'";
        } else {
            $todate = " and tdo.date_of_dispatch <= '" . date('Y-m-d') . "'";
        }
        $where = " $distributor $fromdate $todate ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_dispatch_order AS tdo 
  	LEFT JOIN table_distributors AS d ON d.distributor_id=tdo.distributor_id 
	LEFT JOIN table_category AS c ON c.category_id=tdo.category_id 
	LEFT JOIN table_item AS i ON i.item_id=tdo.item_id',
            "tdo.*,
		d.distributor_name,
		c.category_name,
		tdo.item_id AS itemID,
		i.item_name,
		tdo.item_quantity,
		tdo.date_of_dispatch", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_dispatch_order AS tdo 
  		LEFT JOIN table_distributors AS d ON d.distributor_id=tdo.distributor_id 
		LEFT JOIN table_category AS c ON c.category_id=tdo.category_id 
		LEFT JOIN table_item AS i ON i.item_id=tdo.item_id', 'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->item_name == "") {
                $item = "-";
            } else {
                $item = addslashes($auRec[$i]->item_name);
            }
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . $item . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_quantity) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->date_of_dispatch)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showQualitychecker()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'qchecker_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " 1=1 ";
        $where = " a.account_id =" . $_SESSION['accountId'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_quality_checker AS s LEFT JOIN table_account AS a ON a.account_id=s.account_id LEFT JOIN table_web_users AS w ON w.qchecker_id=s.qchecker_id', "s.*,w.username,w.email_id,w.web_user_id,w.status AS loginStatus", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_quality_checker AS s LEFT JOIN table_account AS a ON a.account_id=s.account_id LEFT JOIN table_web_users AS w ON w.qchecker_id=s.qchecker_id', 'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            //end date
            if ($auRec[$i]->status == 'I') {
                $end_date = $auRec[$i]->end_date;
            } else {
                $end_date = ' ';
            }
            //end date
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"qualitychecker.php?statusId=' . $auRec[$i]->qchecker_id . '&value=' . $sts . '\">' . $sts . '</a>';
            //login status
            if ($auRec[$i]->web_user_id != '') {
                if ($auRec[$i]->status == 'A') {
                    $LogStatus = ($auRec[$i]->loginStatus == 'A') ? "Active" : "Inactive";
                    $LogSts = '<a href=\"qualitychecker.php?statusLogId=' . $auRec[$i]->qchecker_id . '&value=' . $LogStatus . '\">' . $LogStatus . '</a>';
                } else {
                    $LogSts = 'Inactive';
                }
            } else {
                $LogSts = ' ';
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->qchecker_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->qchecker_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes($auRec[$i]->email_id) . '"';
            $json .= ',"' . addslashes($auRec[$i]->qchecker_phone_no) . '"';
            $remove = array("\n", "\r\n", "\r");
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->qchecker_address))) . '"';
            $json .= ',"' . addslashes($auRec[$i]->start_date) . '"';
            $json .= ',"' . addslashes($end_date) . '"';
            $json .= ',"' . $sts . '"';
            //$json .= ',"'.$sts. '"';
            $json .= ',"' . $LogSts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showLoginqualityAuditor()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'qchecker_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $where = " a.account_id =" . $_SESSION['accountId'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_quality_checker AS s LEFT JOIN table_account AS a ON a.account_id=s.account_id LEFT JOIN table_web_users AS w ON w.qchecker_id=s.qchecker_id', "s.*,w.username,w.email_id,w.web_user_id,w.status AS loginStatus", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_quality_checker AS s LEFT JOIN table_account AS a ON a.account_id=s.account_id LEFT JOIN table_web_users AS w ON w.qchecker_id=s.qchecker_id', 'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->session_id != '') {
                $sts = "Logged In";
                $LogSts = '<a href=\"qauditor_list.php?Id=' . base64_encode($auRec[$i]->qchecker_id) . '\' >Log out</a>';
            } else {
                $sts = "Logged Out";
                $LogSts = '<a href=\"\" >Offline</a>';
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->qchecker_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->qchecker_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes($auRec[$i]->email_id) . '"';
            $json .= ',"' . addslashes($auRec[$i]->qchecker_phone_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->session_id) . '"';
            $json .= ',"' . $sts . '"';
            $json .= ',"' . $LogSts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showSalesReturn($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        if ($_SESSION['FromSalesOrderList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromSalesOrderList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToSalesOrderList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToSalesOrderList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        $order_id = '';
        if ($_SESSION['orderId'] != '') {

            $order_id = " AND o.sales_order_id ='" . $_SESSION['orderId'] . "'";
        }

        $where = " ostype IN ('Q') $salesman $fromdate $todate  $order_id ";
        // echo $where;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_sales_return AS o 
			LEFT JOIN table_retailer AS r ON o.retailer_id=r.retailer_id 
			LEFT JOIN table_salesman AS s ON o.salesman_id=s.salesman_id 
			LEFT JOIN table_distributors AS d ON r.distributor_id=d.distributor_id
			LEFT JOIN state as st on st.state_id=d.state
			LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
            LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
			LEFT JOIN city as ct on ct.city_id=d.city
            LEFT JOIN state as str on str.state_id=r.state
			LEFT JOIN table_zone_state_mapping as szsmr on szsmr.state_id = r.state and szsmr.account_id = r.account_id
            LEFT JOIN table_zone as szr on szr.zone_id = szsmr.zone_id
			LEFT JOIN city as ctr on ctr.city_id=r.city',
            "o.*,
			r.retailer_name,
			r.retailer_code,
			r.retailer_address,
			r.retailer_location,
			r.lat AS retlat,
			r.lng AS retlng,
			ct.city_name,ctr.city_name as ret_city,
			st.state_name,str.state_name as ret_state,szr.zone_name as ret_zone,
			s.salesman_name,
			s.employee_code,
			d.distributor_name , d.distributor_code,sz.zone_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_sales_return AS o 
			LEFT JOIN table_retailer AS r ON o.retailer_id=r.retailer_id 
			LEFT JOIN table_salesman AS s ON o.salesman_id=s.salesman_id 
			LEFT JOIN table_distributors AS d ON o.distributor_id=d.distributor_id
			LEFT JOIN state as st on st.state_id=d.state
			LEFT JOIN city as ct on ct.city_id=d.city
			LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
            LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id',
            'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {
            if (ucwords(strtolower($auRec[$i]->order_type)) == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Sales Return";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
            }
            if (ucwords(strtolower($auRec[$i]->order_type)) == 'No') {
                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
            }
//            $photo='<a href=\"retailer_survey.php?retId='.$auRec[$i]->retailer_id.'\"  '.$targetBlank.'>View Survey Photo</a>';
            $auRec2 = $this->_getSelectList2('table_sales_return_detail INNER JOIN table_item ON table_item.item_id = table_sales_return_detail.item_id LEFT JOIN table_price on table_sales_return_detail.item_id=table_price.item_id', "count(table_sales_return_detail.item_id) AS total_item, SUM(quantity * item_mrp) AS Total ", '', " sales_order_id = " . $auRec[$i]->sales_order_id . "");
            //print_r($auRec2);
            if ($auRec[$i]->lat != '') {
                if ($auRec[$i]->retlat != '') {
                    $center_lat = $auRec[$i]->retlat;
                    $center_lng = $auRec[$i]->retlng;
                } else {
                    $auMarker = $_objAdmin->_getSelectList('table_survey ', "lat AS rlat,lng AS rlng", '', " retailer_id='" . $auRec[$i]->retailer_id . "' order by survey_date desc ");
                    $center_lat = $auMarker[0]->rlat;
                    $center_lng = $auMarker[0]->rlng;
                }
                /* $center_lat=$auRec[$i]->retlat;
			$center_lng=$auRec[$i]->retlng; */
                $radius = 0.05;
                //$query = sprintf("SELECT order_id, lat, lng, ( 6371 * acos( cos( radians('%s') ) * cos( radians( lat ) ) * cos( radians( lng ) - radians('%s') ) + sin( radians('%s') ) * sin( radians( lat ) ) ) ) AS distance FROM table_order where order_id='".$auRec[$i]->order_id."' HAVING distance < '%s' ",
                $query = sprintf("SELECT sales_order_id, lat, lng, ( 6371 * acos( cos( radians('%s') ) * cos( radians( lat ) ) * cos( radians( lng ) - radians('%s') ) + sin( radians('%s') ) * sin( radians( lat ) ) ) ) AS distance FROM table_sales_return where sales_order_id='" . $auRec[$i]->sales_order_id . "'",
                    mysql_real_escape_string($center_lat),
                    mysql_real_escape_string($center_lng),
                    mysql_real_escape_string($center_lat),
                    mysql_real_escape_string($radius));
                $result = mysql_query($query);
                $row = @mysql_fetch_assoc($result);
                //if($row!=""){
                if ($row['distance'] <= $radius) {
                    $map = '<a href=\"sales_return_map.php?utype=q&ord=' . base64_encode($auRec[$i]->sales_order_id) . '\" ' . $targetBlank . '>View on Map</a>';
                    $colortd = "in";
                } else {
                    $map = '<a href=\"sales_return_map.php?utype=q&ord=' . base64_encode($auRec[$i]->sales_order_id) . '\" ' . $targetBlank . '>View on Map</a>';
                    $colortd = "out";
                }
            } else {
                $map = "-";
            }
            //$status=($auRec[$i]->order_status=='A')?"New Order":"Processed";
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->sales_order_id . '",';
            $json .= '"ostype":"' . $auRec[$i]->ostype . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            if ($auRec[$i]->retailer_name != '') {
                $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            } else {
                $json .= ',"' . ucwords(addslashes('')) . '"';
            }
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_city)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec2[0]->total_item)) . '"';
            $json .= ',"' . $map . '"';
            $json .= ',"' . ucwords(addslashes($_objAdmin->_changeDate($auRec[$i]->date_of_order))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"]';
            //$json .= ',"'.$status. '"';
            //$json .= ',"'.ucwords(str_replace($remove, ' ',addslashes($auRec[$i]->comments))).'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

// Show Product Wise Report
    function showproductwiselist($salesman)
    {
        //$salesman = "";
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $condition = '';
        if ($_SESSION['categoryID'] != '' && $_SESSION['categoryID'] != 'all') {
            $condition .= " c.category_id = " . $_SESSION['categoryID'] . " AND ";
        }
        if ($_SESSION['itemID'] != '' && $_SESSION['itemID'] != 'all') {
            $condition .= " od.item_id = " . $_SESSION['itemID'] . " AND ";
        }
        if ($_SESSION['FromProductList'] != '') {
            $fromdate = "  o.date_of_order  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
        } else {
            $fromdate = " o.date_of_order  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToProductList'] != '') {
            $todate = " o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
        } else {
            $todate = "  o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " and b.brand_id IN(" . $RoleBrands . ")";
            $salesman = '';
        }
        if ($_SESSION['salesman_Id'] != '' && $_SESSION['salesman_Id'] != 'All') {
            $salesman = $_SESSION['salesman_Id'];
        }
        //$groupby  = " GROUP BY table_order_detail.item_id having SUM(table_order_detail.quantity)!=0";
        //$groupby  = " AND o.order_id in (select order_id from table_order where ostype in ('D','R') AND order_type = 'Yes' AND order_status='A' AND $fromdate $todate ) group by o.item_id having SUM(o.quantity)!=0 ";
        $groupby = " GROUP BY od.item_id having od.item_id!=''";
        $where = " $salesman and od.type=1 and c.account_id='" . $_SESSION['accountId'] . "' $brandCnd and $condition $fromdate $todate ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order AS o
					LEFT JOIN table_order_detail AS od ON od.order_id = o.order_id
					LEFT JOIN table_salesman as s ON s.salesman_id=o.salesman_id
					LEFT JOIN table_item AS i ON i.item_id = od.item_id
					LEFT JOIN table_brands AS b ON b.brand_id=i.brand_id
					LEFT JOIN table_category AS c ON c.category_id = i.category_id',
            "COUNT(od.item_id) AS total, sum(od.quantity) AS Quantity, SUM(od.total) AS ttlprice, category_name, od.item_id, i.item_name,i.item_code,b.brand_name,i.item_erp_code,s.salesman_id,s.salesman_name,date_of_order", $rp, $where . $groupby . $sort, '');
        $total = $this->_getSelectList('table_order AS o
					LEFT JOIN table_order_detail AS od ON od.order_id = o.order_id
					LEFT JOIN table_salesman as s ON s.salesman_id=o.salesman_id
					LEFT JOIN table_item AS i ON i.item_id = od.item_id
					LEFT JOIN table_category AS c ON c.category_id = i.category_id
					LEFT JOIN table_brands AS b ON b.brand_id=i.brand_id', "COUNT(*) AS total", '', $where . $groupby . $sort, '');
        $total = count($total);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->item_id . '",';
            //$json .= "ostype:'". $auRec[$i]->ostype . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->brand_name)) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->offer_name)). '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->total)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->Quantity)) . '"';
            /*$json .= ',"'.ucwords(addslashes($auRec[$i]->price)). '"';	*/
            $json .= ',"' . $auRec[$i]->ttlprice . '"]';
            //$json .= ',"'.date('Y-m-d', strtotime($_objAdmin->_changeDate($auRec[$i]->date_of_order))). '"';
            //$json .= ',"'.date('H:i:s', strtotime($auRec[$i]->created)). '"';
//            $json .= ',"'.$status.'"]';
            //$json .= ',"'.ucwords(str_replace($remove, ' ',addslashes($auRec[$i]->comments))).'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // End of Product Wise Report
    // Show Product Report
    function showproductlist($salesman)
    {
        //$salesman = "";
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//        $_objAdmin = new Admin();
        $condition = '';
        if ($_SESSION['categoryID'] != '' && $_SESSION['categoryID'] != 'all') {
            $condition .= " c.category_id = " . $_SESSION['categoryID'] . " AND ";
        }
        if ($_SESSION['itemID'] != '' && $_SESSION['itemID'] != 'all') {
            $condition .= " D.item_id = " . $_SESSION['itemID'] . " AND ";
        }
        if ($_SESSION['FromProductList'] != '') {
            $fromdate = "  O.date_of_order  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
        } else {
            $fromdate = " O.date_of_order  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToProductList'] != '') {
            $todate = " O.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
        } else {
            $todate = "  O.date_of_order <= '" . date('Y-m-d') . "'";
        }
        //Added condition for role based access at brand lavel.
//        $RoleBrands = $this->getUserRoleBrand();
//        $brandCnd = '';
//        if(!empty($RoleBrands)){
//            $brandCnd = " and b.brand_id IN(".$RoleBrands.")";
//            if(isset($_SESSION['SalOrderList']) && $_SESSION['SalOrderList'] !='' && $_SESSION['SalOrderList'] !='All'){
//                $salesman  = $salesman ;
//            }else{
//                $salesman ='';
//            }
//        }
        //$groupby  = " GROUP BY table_order_detail.item_id having SUM(table_order_detail.quantity)!=0";
        //$groupby  = " AND o.order_id in (select order_id from table_order where ostype in ('D','R') AND order_type = 'Yes' AND order_status='A' AND $fromdate $todate ) group by o.item_id having SUM(o.quantity)!=0 ";
        $groupby = " GROUP BY D.item_id having D.item_id!=''";
        if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
            $RoleBrands = $this->getUserRoleBrand();
            if (!empty($RoleBrands)) {
                $salesman = " AND b.brand_id IN(" . $RoleBrands . ")";
            }
        }
        $where = " D.type=1 and O.account_id='" . $_SESSION['accountId'] . "' and $condition $fromdate $todate $salesman ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_order_detail AS D 
		LEFT JOIN table_order AS O ON D.order_id = O.order_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
        left join table_grade as bg on bg.grade_id=I.grade_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
		LEFT JOIN table_retailer AS R ON O.retailer_id = R.retailer_id
		LEFT JOIN table_retailer_channel_master as cm ON cm.channel_id=R.channel_id
        LEFT JOIN table_retailer_group as rg ON rg.group_id = R.group_id
        left join table_retailer_type_master as rtm ON rtm.type_id=R.type_id
        left join table_relationship as rel ON rel.relationship_id=R.relationship_id 
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN state as st on st.state_id=R.state
		LEFT JOIN city as ct on ct.city_id=R.city
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = R.state and szsm.account_id = R.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		LEFT JOIN table_location as loc on loc.location_id=R.location_id
        LEFT JOIN table_item_gst as gst on gst.item_id=I.item_id
        left join table_distributor_type_master as dt on dt.dis_type_id = Dis.distributor_type_id',
            'D.price, D.quantity, D.total,R.new, I.item_name,I.item_code,b.brand_name,cm.channel_name,I.item_erp_code,P.item_mrp, s.salesman_name, s.employee_code, Dis.distributor_name,Dis.distributor_code,R.retailer_name,R.retailer_code,R.retailer_address,sz.zone_name,R.retailer_location,R.zipcode,c.category_name,O.order_id, O.date_of_order, O.time_of_order,st.state_name,ct.city_name,loc.location_name,D.remarks,rg.group_name,rtm.type_name,rel.relationship_code as relation,bg.grade_name,gst.tax,dt.dis_type_name,(D.quantity*P.dist_price) as order_amount_dist', $rp, $where . $sort, '');

        $total = $this->_getSelectList2('table_order_detail AS D 
		LEFT JOIN table_order AS O ON D.order_id = O.order_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
        left join table_grade as bg on bg.grade_id=I.grade_id
       
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
		LEFT JOIN table_retailer AS R ON O.retailer_id = R.retailer_id
		LEFT JOIN table_retailer_channel_master as cm ON cm.channel_id=R.channel_id
        LEFT JOIN table_retailer_group as rg ON rg.group_id = R.group_id
        left join table_retailer_type_master as rtm ON rtm.type_id=R.type_id
        left join table_relationship as rel ON rel.relationship_id=R.relationship_id
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN state as st on st.state_id=R.state
		LEFT JOIN city as ct on ct.city_id=R.city
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = R.state and szsm.account_id = R.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		LEFT JOIN table_location as loc on loc.location_id=R.location_id
        LEFT JOIN table_item_gst as gst on gst.item_id=I.item_id', "COUNT(*) AS total", '', $where . $sort, '');

        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
//            if($auRec[$i]->new=="1"){$retailer_type='New Retailer';} else{$retailer_type='Existing Retailer';}

            $taxamt = ($auRec[$i]->total * $auRec[$i]->tax / 100);

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            //$json .= "ostype:'". $auRec[$i]->ostype . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_type_name)) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->region_name)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->group_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->relation)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->type_name)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_address)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zipcode)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_location)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->brand_name)))) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->offer_name)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->grade_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->price)) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->color_code)). '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->stock)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->quantity)) . '"';
            $json .= ',"' . $auRec[$i]->total . '"';
            $json .= ',"' . $auRec[$i]->tax . '"';
            $json .= ',"' . round($taxamt) . '"';
            //Todo Start sudhanshu 27 june 2024 : add order amout as per dist price also change in query
            $json .= ',"' . number_format($auRec[$i]->order_amount_dist, 2) . '"';
            //Todo End sudhanshu 27 june 2024 : add order amout as per dist price
            // change date formate : sudhanshu : 11 march 2024
            $json .= ',"' . $this->_changeDate($auRec[$i]->date_of_order) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->remarks)))) . '"]';
//            $json .= ',"'.ucwords(addslashes($retailer_type)). '"]';
//            $json .= ',"'.$status.'"]';
            //$json .= ',"'.ucwords(str_replace($remove, ' ',addslashes($auRec[$i]->comments))).'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


    function showDynamicProductReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objArrayList = new ArrayList();

        $condi = '';
        if (isset($_SESSION['fil_salesman']) && !empty($_SESSION['fil_salesman']) && $_SESSION['fil_salesman'] > 0) {
            $salesman = " and s.salesman_id IN (" . $_SESSION['fil_salesman'] . ")  ";
        } else if (isset($_SESSION['fil_salesman_manager']) && ($_SESSION['fil_salesman_manager'] > 0)) {
            $salesmanManagerId = $_SESSION['fil_salesman_manager'];
            $account_id = $_SESSION['accountId'];
            $res = $this->_getSelectList2('table_salesman_hierarchy_relationship AS SHR 
    LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
    LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id', 's.salesman_id,SH.hierarchy_id,SH.sort_order', '', " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanManagerId ORDER BY SH.sort_order ASC ");
            if (is_array($res) && (count($res) > 0)) {
                $sortOrder = $res[0]->sort_order;
                $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanManagerId), $sortOrder, $account_id);

                if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                    $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                }

                $salesman = " AND s.salesman_id IN($bottomUsersIds) ";
            }
        } else if (isset($_SESSION['fil_salesman_designation']) && ($_SESSION['fil_salesman_designation'] > 0)) {
            $account_id = $_SESSION['accountId'];
            $getDesignationWiseBottomUsersIdArr = $_objArrayList->getDesignationWiseBottomUsers($_SESSION['fil_salesman_designation'], $account_id);

            if (is_array($getDesignationWiseBottomUsersIdArr) && (count($getDesignationWiseBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getDesignationWiseBottomUsersIdArr);
                $salesman = " AND s.salesman_id IN($bottomUsersIds) ";
            }
        }

        if (isset($_SESSION['fil_category']) && !empty($_SESSION['fil_category']) && $_SESSION['fil_category'] > 0) {
            $condi .= " AND c.category_id = '" . $_SESSION['fil_category'] . "' ";
        }
        if (isset($_SESSION['fil_item']) && !empty($_SESSION['fil_item'])) {
            $condi .= " AND D.item_id = '" . $_SESSION['fil_item'] . "' ";
        }
        if (isset($_SESSION['fil_distributor']) && !empty($_SESSION['fil_distributor'])) {
            $condi .= " AND O.distributor_id = '" . $_SESSION['fil_distributor'] . "' ";
        }
        if (isset($_SESSION['fil_retailer']) && !empty($_SESSION['fil_retailer'])) {
            $condi .= " AND O.retailer_id = '" . $_SESSION['fil_retailer'] . "'  ";
        }
        if (isset($_SESSION['fil_from']) && !empty($_SESSION['fil_from'])) {
            $fromdate = date('Y-m-d', strtotime($_SESSION['fil_from']));
        } else {
            $fromdate = date('Y-m-d');
        }

        if (isset($_SESSION['fil_to']) && !empty($_SESSION['fil_to'])) {
            $todate = date('Y-m-d', strtotime($_SESSION['fil_to']));
        } else {
            $todate = date('Y-m-d');
        }
        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $fromdate = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $todate = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
        }

//        $groupby = " GROUP BY D.item_id HAVING D.item_id!=''";
        if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
            $RoleBrands = $this->getUserRoleBrand();
            if (!empty($RoleBrands)) {
                $salesman = " AND b.brand_id IN(" . $RoleBrands . ")";
            }
        }
        $queryConditions = $condi . $salesman . " and O.date_of_order between $fromdate and $todate";
        $where = " D.type=1 and O.account_id='" . $_SESSION['accountId'] . "'   $queryConditions ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_order_detail AS D 
		LEFT JOIN table_order AS O ON D.order_id = O.order_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
		LEFT JOIN table_retailer AS R ON O.retailer_id = R.retailer_id
		LEFT JOIN table_retailer_channel_master as cm ON cm.channel_id=R.channel_id
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = Dis.state and szsm.account_id = Dis.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		LEFT JOIN state as st on st.state_id=Dis.state
		LEFT JOIN city as ct on ct.city_id=Dis.city',
            'D.price, D.quantity, D.total,R.new, I.item_name,I.item_code,b.brand_name,cm.channel_name,I.item_erp_code,P.item_mrp, s.salesman_name, s.employee_code,sz.zone_name, Dis.distributor_name,Dis.distributor_code,R.retailer_name,R.retailer_code,c.category_name,O.order_id, O.date_of_order, O.time_of_order,st.state_name,ct.city_name,D.remarks', $rp, $where . $sort, '');
        //  print_r($auRec); exit;
        $total = $this->_getSelectList2('table_order_detail AS D 
		LEFT JOIN table_order AS O ON D.order_id = O.order_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
		LEFT JOIN table_retailer AS R ON O.retailer_id = R.retailer_id
		LEFT JOIN table_retailer_channel_master as cm ON cm.channel_id=R.channel_id
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = Dis.state and szsm.account_id = Dis.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		LEFT JOIN state as st on st.state_id=Dis.state
		LEFT JOIN city as ct on ct.city_id=Dis.city', "COUNT(*) AS total", '', $where . $sort, '');
        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
//            if($auRec[$i]->new=="1"){$retailer_type='New Retailer';} else{$retailer_type='Existing Retailer';}
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            //$json .= "ostype:'". $auRec[$i]->ostype . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->brand_name)))) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->offer_name)). '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_erp_code)))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->price)) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->color_code)). '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->stock)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->quantity)) . '"';
            $json .= ',"' . $auRec[$i]->total . '"';
            $json .= ',"' . date('Y-m-d', strtotime($this->_changeDate($auRec[$i]->date_of_order))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->remarks)))) . '"]';
//            $json .= ',"'.ucwords(addslashes($retailer_type)). '"]';
//            $json .= ',"'.$status.'"]';
            //$json .= ',"'.ucwords(str_replace($remove, ' ',addslashes($auRec[$i]->comments))).'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // End of Product  Report


    function showRetailerStockByDate($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        if ($_SESSION['SalOrderList'] != '') {
            $retailer .= " AND s.salesman_id='" . $_SESSION['SalOrderList'] . "'";
        }
        if ($_SESSION['RetailerID'] != '') {
            $retailer .= " AND r.retailer_id='" . $_SESSION['RetailerID'] . "'";
        }
        if (isset($_SESSION['userLoginType']) && in_array($_SESSION['userLoginType'], array(6, 7, 8, 9))) {
            $condwhere = $this->getSalesMenID();
        }
        if ($_SESSION['FromOS'] != '') {
            $fromdate = " and ot.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromOS'])) . "'";
        } else {
            $fromdate = " and ot.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToOS'] != '') {
            $todate = " and ot.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToOS'])) . "'";
        } else {
            $todate = " and ot.date_of_order <= '" . date('Y-m-d') . "'";
        }
        $where = " ot.ostype='R' $retailer $fromdate $todate ";
//		if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($query) {
            if ($qtype == 'ot.date_of_order') {
                $query = date('Y-m-d', strtotime($query));
            }
            $where .= " AND $qtype LIKE '%$query%' ";
        }
        $auRec = $this->_getSelectList('table_order_os AS ot
		  	LEFT JOIN table_order_detail_os AS tod ON tod.os_id=ot.os_id
			LEFT JOIN table_retailer AS r ON r.retailer_id=ot.retailer_id
            LEFT JOIN table_retailer_group as rg ON rg.group_id = r.group_id
            left join table_retailer_type_master as rtm ON rtm.type_id=r.type_id
            left join table_relationship as rel ON rel.relationship_id=r.relationship_id 
			LEFT JOIN table_salesman AS s ON s.salesman_id=ot.salesman_id
			LEFT JOIN table_item AS i ON i.item_id=tod.item_id
            left join table_grade as bg on bg.grade_id=i.grade_id
            left join table_brands as b on b.brand_id=i.brand_id
			LEFT JOIN table_price AS p ON p.item_id=tod.item_id
			LEFT JOIN table_category AS c ON c.category_id=i.category_id
			LEFT JOIN table_retailer_channel_master AS cm on cm.channel_id=r.
			channel_id', "ot.*,tod.*,r.retailer_name,r.retailer_code,cm.channel_name,r.display_outlet,s.salesman_name,s.employee_code,i.item_name,i.item_code,c.category_name,(p.item_mrp * tod.quantity) as stockValuePTR, (p.item_dp * tod.quantity) as stockValueMRP,rg.group_name,rtm.type_name,rel.relationship_code as relation,b.brand_name,bg.grade_name", $rp, $where . $condwhere . $salesman . $sort, '');
        $auRecCount = $this->_getSelectList('table_order_os AS ot
		 	LEFT JOIN table_order_detail_os AS tod ON tod.os_id=ot.os_id
			LEFT JOIN table_retailer AS r ON r.retailer_id=ot.retailer_id
            LEFT JOIN table_retailer_group as rg ON rg.group_id = r.group_id
            left join table_retailer_type_master as rtm ON rtm.type_id=r.type_id
            left join table_relationship as rel ON rel.relationship_id=r.relationship_id 
			LEFT JOIN table_salesman AS s ON s.salesman_id=ot.salesman_id
			LEFT JOIN table_item AS i ON i.item_id=tod.item_id
            left join table_grade as bg on bg.grade_id=i.grade_id
            left join table_brands as b on b.brand_id=i.brand_id
			LEFT JOIN table_category AS c ON c.category_id=i.category_id
			LEFT JOIN table_retailer_channel_master AS cm on cm.channel_id=r.
			channel_id', 'count(*) AS total', '', $where . $condwhere . $salesman);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            /* ---Display outlet ---*/
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } elseif ($auRec[$i]->display_outlet == 'No') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }

//            $closingStock = $this->_getSelectList("table_order_os AS ot
//		  LEFT JOIN table_order_detail_os AS tod ON tod.os_id=ot.os_id
//		  ", "tod.quantity ", "", " ot.salesman_id =" . $auRec[$i]->salesman_id .
//                " AND ot.retailer_id =" . $auRec[$i]->retailer_id . " AND tod.item_id = '" . $auRec[$i]->item_id . "'   ORDER BY ot.os_id desc limit 1,1 ");


            $closingStock = $this->_getSelectList("table_order_os AS ot
		  LEFT JOIN table_order_detail_os AS tod ON tod.os_id=ot.os_id
		  ", "tod.quantity ", "", "
                 AND ot.retailer_id =" . $auRec[$i]->retailer_id . " AND tod.item_id = '" . $auRec[$i]->item_id . "' AND os_detail_id < '" . $auRec[$i]->os_detail_id . "'  ORDER BY ot.os_id desc  limit 1");

            if (is_array($closingStock) && count($closingStock) > 0) {
                $closingstk = $closingStock[0]->quantity;
            } else {
                $closingstk = "NA";
            }
            //echo "<pre>";print_R($closingStock);

//As discussed with dhavika ordered qty same day and not depend salesman 31 july 2024
//            $orderStock = $this->_getSelectList("table_order AS O
//		  LEFT JOIN table_order_detail AS tod ON tod.order_id = O.order_id
//		  ", "sum(tod.quantity) AS order_quantity  ", "", " O.salesman_id =" . $auRec[$i]->salesman_id . " AND O.retailer_id =" .
//                $auRec[$i]->retailer_id . " AND O.date_of_order <='" . $auRec[$i]->date_of_order . "' AND tod.item_id = '" . $auRec[$i]->item_id . "'  ORDER BY O.order_id DESC ");

            $orderStock = $this->_getSelectList("table_order AS O 
		  LEFT JOIN table_order_detail AS tod ON tod.order_id = O.order_id
		  ", "sum(tod.quantity) AS order_quantity  ", "", "  AND O.retailer_id =" .
                $auRec[$i]->retailer_id . " AND O.date_of_order ='" . $auRec[$i]->date_of_order . "' AND tod.item_id = '" . $auRec[$i]->item_id . "'  ORDER BY O.order_id DESC ");

            $odrstk = (isset($orderStock[0]->order_quantity) && !empty($orderStock[0]->order_quantity)) ?
                $orderStock[0]->order_quantity : 0;

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->salesman_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->group_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->channel_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->relation) . '"';
            $json .= ',"' . addslashes($auRec[$i]->type_name) . '"';
            $json .= ',"' . addslashes($outlet) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->grade_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->quantity) . '"';
            $json .= ',"' . addslashes(round($auRec[$i]->stockValuePTR, 2)) . '"';
            $json .= ',"' . addslashes(round($auRec[$i]->stockValueMRP, 2)) . '"';
            $json .= ',"' . addslashes($_objAdmin->_changeDate($auRec[$i]->date_of_order)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->time_of_order) . '"';
            $json .= ',"' . addslashes($closingstk) . '"';
            $json .= ',"' . addslashes($odrstk) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

// function showRetailerStockByDate(){
//   $page = $_REQUEST['page'];
//   $rp = $_REQUEST['rp'];
//   $sortname = $_REQUEST['sortname'];
//   $sortorder = $_REQUEST['sortorder'];
//   $ordertime=',time_of_order desc';
//   if (!$sortname) $sortname = 'date_of_order';
//   if (!$sortorder) $sortorder = 'desc';
//   $sort = " ORDER BY $sortname $sortorder $ordertime";
//   if (!$page) $page = 1;
//   if (!$rp) $rp = 50;
//   $start = (($page-1) * $rp);
//   $limit = "LIMIT $start, $rp";
//   $query = $_REQUEST['query'];
//   $qtype = $_REQUEST['qtype'];
//   $_objAdmin = new Admin();
//   if($_SESSION['RetailerID']!=''){
//    $retailer=" AND r.retailer_id='".$_SESSION['RetailerID']."'";
//   }
// 	if(isset($_SESSION['userLoginType']) && in_array($_SESSION['userLoginType'],array(6,7,8,9)))
// 	{
// 		$condwhere = $this->getSalesMenID();
// 	}
//   if($_SESSION['FromOS']!=''){
//    $fromdate=" and ot.date_of_order >= '".date('Y-m-d', strtotime($_SESSION['FromOS']))."'";
//   }
//   else
//   {
//    $fromdate=" and ot.date_of_order >= '".date('Y-m-d')."'";
//   }
//   if($_SESSION['ToOS']!=''){
//    $todate=" and ot.date_of_order <= '".date('Y-m-d', strtotime($_SESSION['ToOS']))."'";
//   }
//   else
//   {
//    $todate=" and ot.date_of_order <= '".date('Y-m-d')."'";
//   }
//   $where = " ot.ostype='R' $retailer $fromdate $todate ";
//   if ($query) $where .= " AND $qtype LIKE '%$query%' ";
//   $auRec=$this->_getSelectList('table_order_os AS ot
//   	LEFT JOIN table_order_detail_os AS tod ON tod.os_id=ot.os_id
// 	LEFT JOIN table_retailer AS r ON r.retailer_id=ot.retailer_id
// 	LEFT JOIN table_salesman AS s ON s.salesman_id=ot.salesman_id
// 	LEFT JOIN table_item AS i ON i.item_id=tod.item_id
// 	LEFT JOIN table_category AS c ON c.category_id=i.category_id
// 	LEFT JOIN table_retailer_channel_master AS cm on cm.channel_id=r.channel_id',
// 	"ot.*,tod.*,
// 	r.retailer_name,
// 	cm.channel_name,
// 	r.display_outlet,
// 	s.salesman_name,
// 	i.item_name,
// 	i.item_code,
// 	c.category_name",$rp,$where.$condwhere.$sort,'');
//   $auRecCount=$this->_getSelectList('table_order_os AS ot
//  	LEFT JOIN table_order_detail_os AS tod ON tod.os_id=ot.os_id
// 	LEFT JOIN table_retailer AS r ON r.retailer_id=ot.retailer_id
// 	LEFT JOIN table_salesman AS s ON s.salesman_id=ot.salesman_id
// 	LEFT JOIN table_item AS i ON i.item_id=tod.item_id
// 	LEFT JOIN table_category AS c ON c.category_id=i.category_id
// 	LEFT JOIN table_retailer_channel_master AS cm on cm.channel_id=r.channel_id',
// 	'count(*) AS total','',$where.$condwhere);
//   $total= $auRecCount[0]->total;
//   header("Expires: Mon, 26 Jul 1997 05:00:00 GMT" );
//   header("Last-Modified: " . gmdate( "D, d M Y H:i(worry)" ) . "GMT" );
//   header("Cache-Control: no-cache, must-revalidate" );
//   header("Pragma: no-cache" );
//   header("Content-type: text/x-json");
//   $json = "";
//   $json .= "{\n";
//   $json .= "page: $page,\n";
//   $json .= "total: $total,\n";
//   $json .= "rows: [";
//   $rc = false;
// 	for($i=0;$i<count($auRec);$i++){
// 	/* ---Display outlet ---*/
// 	if($auRec[$i]->display_outlet=='Y'){$outlet='Yes';}elseif ($auRec[$i]->display_outlet=='No'){ $outlet='No';} else{ $outlet='';}
// 	  $closingStock = $this->_getSelectList("table_order_os AS ot
//   LEFT JOIN table_order_detail_os AS tod ON tod.os_id=ot.os_id
//   LEFT JOIN table_order AS O ON O.salesman_id = ot.salesman_id AND O.retailer_id = ot.retailer_id
//   LEFT JOIN table_order_detail AS OD ON OD.order_id = O.order_id
//   ","tod.quantity AS closing_stock ,OD.quantity AS order_quantity ",""," ot.salesman_id =".$auRec[$i]->salesman_id." AND ot.retailer_id =".$auRec[$i]->retailer_id." AND ot.date_of_order <='".$auRec[$i]->date_of_order."' AND tod.item_id = ".$auRec[$i]->item_id." AND O.order_status!='D' ORDER BY ot.os_id, O.order_id DESC LIMIT 1,1");
// 			if ($rc) $json .= ",";
// 			$json .= "\n{";
// 			$json .= "id:'". $auRec[$i]->salesman_id."',";
// 			$json .= "cell:['".ucwords(addslashes($auRec[$i]->salesman_name))."'";
// 			$json .= ",'".addslashes($auRec[$i]->retailer_name)."'";
// 			$json .= ",'".addslashes($auRec[$i]->channel_name)."'";
// 			$json .= ",'".addslashes($outlet)."'";
// 			$json .= ",'".addslashes($auRec[$i]->category_name)."'";
// 			$json .= ",'".addslashes($auRec[$i]->item_name)."'";
// 			$json .= ",'".addslashes($auRec[$i]->item_code)."'";
// 			$json .= ",'".addslashes($auRec[$i]->quantity)."'";
// 			$json .= ",'".addslashes($_objAdmin->_changeDate($auRec[$i]->date_of_order))."'";
// 			$json .= ",'".addslashes($auRec[$i]->time_of_order)."'";
// 			$json .= ",'".addslashes($closingStock[0]->closing_stock)."'";
// 			$json .= ",'".addslashes($closingStock[0]->order_quantity)."']";
// 			$json .= "}";
// 			$rc = true;
// 		}
// 		$json .= "]\n";
// 		$json .= "}";
// 		echo $json;
// 		exit;
//  }
    function showDistibutorTotalSale()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'month';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        if ($_SESSION['distributorIDSale'] != '') {
            $distributor = " and D.distributor_id ='" . $_SESSION['distributorIDSale'] . "'";
        }
        if ($_SESSION['itemID'] != '') {
            $Item = " and V.item_id ='" . $_SESSION['itemID'] . "'";
        }
        if ($_SESSION['dismonth'] != '') {
            $fromdate = " and V.month = '" . $_SESSION['dismonth'] . "'";
        } else {
            $fromdate = "and V.month = " . date('m');
        }
        if ($_SESSION['disCyear'] != '') {
            $todate = " and V.year = '" . $_SESSION['disCyear'] . "'";
        } else {
            $todate = " and V.year = " . date('Y');
        }
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " and B.brand_id IN(" . $RoleBrands . ")";
        }
        $where = "  $distributor $Item $fromdate $todate $brandCnd AND R.new=''";
        //$where = "  $distributor $Item $fromdate $todate";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $groupby = ' GROUP BY R.retailer_id, i.item_id, month, Day, V.distributor_id';
        $auRec = $this->_getSelectList('disretdailywiseitemreport AS V 
					LEFT JOIN table_retailer AS R ON V.retailer_id = R.retailer_id
					LEFT JOIN table_retailer_channel_master AS CM ON CM.channel_id=R.channel_id 
					LEFT JOIN table_distributors AS D ON V.distributor_id = D.distributor_id
					LEFT JOIN table_region as re on re.region_id=D.region_id
					LEFT JOIN state as st on st.state_id=D.state
					LEFT JOIN city as c on c.city_id=D.city	
					LEFT JOIN table_item AS i ON V.item_id = i.item_id
					LEFT JOIN table_brands AS B ON B.brand_id=i.brand_id',
            "V.distributor_id, V.retailer_id AS RID,
			 DATE_FORMAT(V.date_of_order, '%b') AS DOODR,
			 V.Day AS Day,
			 V.totalSaleUnit,
			 V.item_name AS item_name,
			  i.item_code AS item_code,
			 V.item_id AS item_id,
			 CM.channel_name,
			 B.brand_name,
			 V.month AS month,
			 V.year AS year,
			 R.retailer_code, 
			 R.retailer_name AS retailer_name,
			 D.distributor_id,
                D.distributor_code,
			 D.distributor_name As distributor_name,
			 re.region_name,
			 c.city_name,
			 st.state_name,
			 R.retailer_address,
			 R.retailer_address2", $rp, $where . $groupby . $sort, '');
        $auRecCount = $this->_getSelectList('disretdailywiseitemreport AS V 
			LEFT JOIN table_retailer AS R ON V.retailer_id = R.retailer_id 
			LEFT JOIN table_retailer_channel_master AS CM ON CM.channel_id=R.channel_id
			LEFT JOIN table_item AS i ON V.item_id = i.item_id
			LEFT JOIN table_brands AS B ON B.brand_id=i.brand_id
			LEFT JOIN table_distributors AS D ON V.distributor_id = D.distributor_id
			LEFT JOIN table_region as re on re.region_id=D.region_id
			LEFT JOIN state as st on st.state_id=D.state
			LEFT JOIN city as c on c.city_id=D.city	', '*', '', $where . $groupby);
        $total = sizeof($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $auRec2 = $this->_getSelectList('disretdailywiseitemreport', "totalSaleUnit,distributor_id, Day, retailer_id, item_name", '', " retailer_id = " . $auRec[$i]->RID . " AND item_id = " . $auRec[$i]->item_id . " AND month = " . $auRec[$i]->month . " AND distributor_id=" . $auRec[$i]->distributor_id);
            $row1 = '-';
            $row2 = '-';
            $row3 = '-';
            $row4 = '-';
            $row5 = '-';
            $row6 = '-';
            $row7 = '-';
            $row8 = '-';
            $row9 = '-';
            $row10 = '-';
            $row11 = '-';
            $row12 = '-';
            $row13 = '-';
            $row14 = '-';
            $row15 = '-';
            $row16 = '-';
            $row17 = '-';
            $row18 = '-';
            $row19 = '-';
            $row20 = '-';
            $row21 = '-';
            $row22 = '-';
            $row23 = '-';
            $row24 = '-';
            $row25 = '-';
            $row26 = '-';
            $row27 = '-';
            $row28 = '-';
            $row29 = '-';
            $row30 = '-';
            $row31 = '-';
            for ($j = 0; $j < count($auRec2); $j++) {
                ${'row' . $auRec2[$j]->Day} = $auRec2[$j]->totalSaleUnit;
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->ID . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->channel_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->region_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
//            $json .= ',"'.addslashes($auRec[$i]->offer_name). '"';
            $json .= ',"' . addslashes($auRec[$i]->DOODR) . '"';
            $json .= ',"' . addslashes($auRec[$i]->year) . '"';
            $json .= ',"' . $row1 . '"';
            $json .= ',"' . $row2 . '"';
            $json .= ',"' . $row3 . '"';
            $json .= ',"' . $row4 . '"';
            $json .= ',"' . $row5 . '"';
            $json .= ',"' . $row6 . '"';
            $json .= ',"' . $row7 . '"';
            $json .= ',"' . $row8 . '"';
            $json .= ',"' . $row9 . '"';
            $json .= ',"' . $row10 . '"';
            $json .= ',"' . $row11 . '"';
            $json .= ',"' . $row12 . '"';
            $json .= ',"' . $row13 . '"';
            $json .= ',"' . $row14 . '"';
            $json .= ',"' . $row15 . '"';
            $json .= ',"' . $row16 . '"';
            $json .= ',"' . $row17 . '"';
            $json .= ',"' . $row18 . '"';
            $json .= ',"' . $row19 . '"';
            $json .= ',"' . $row20 . '"';
            $json .= ',"' . $row21 . '"';
            $json .= ',"' . $row22 . '"';
            $json .= ',"' . $row23 . '"';
            $json .= ',"' . $row24 . '"';
            $json .= ',"' . $row25 . '"';
            $json .= ',"' . $row26 . '"';
            $json .= ',"' . $row27 . '"';
            $json .= ',"' . $row28 . '"';
            $json .= ',"' . $row29 . '"';
            $json .= ',"' . $row30 . '"';
            $json .= ',"' . $row31 . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showSalesmanTotalSale($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'month';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['itemID'] != '') {
            $Item = " and V.item_id ='" . $_SESSION['itemID'] . "'";
        }
        if ($_SESSION['dismonth'] != '') {
            $fromdate = " and V.month = '" . $_SESSION['dismonth'] . "'";
        } else {
            $fromdate = "and V.month = " . date('m');
        }
        if ($_SESSION['disCyear'] != '') {
            $todate = " and V.year = '" . $_SESSION['disCyear'] . "'";
        } else {
            $todate = "and V.year = " . date('Y');
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = "V.distributor_id='" . $_SESSION['distributorId'] . "' ";
        }
        $where = " $disLogCond $salesman $Item $fromdate $todate AND R.new=''";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $groupby = ' GROUP BY R.retailer_id, i.item_id, month, V.salesman_id';
        $auRec = $this->_getSelectList('salereldailywiseitemreport AS V 
					LEFT JOIN table_retailer AS R ON V.retailer_id = R.retailer_id 
					LEFT JOIN table_retailer_channel_master AS cm ON cm.channel_id=R.channel_id
					LEFT JOIN table_distributors as d on d.distributor_id=R.distributor_id
					LEFT JOIN state as st on st.state_id=d.state
					LEFT JOIN city as c on c.city_id=d.city
					LEFT JOIN table_region as re on re.region_id=d.region_id
					LEFT JOIN table_salesman AS s ON V.salesman_id = s.salesman_id
					LEFT JOIN table_item AS i ON V.item_id = i.item_id
					LEFT JOIN table_brands  AS B ON B.brand_id=i.brand_id
					LEFT JOIN table_offer AS ofr ON  ofr.offer_id=i.offer_id',
            "V.salesman_id, V.retailer_id AS RID,
			 DATE_FORMAT(V.date_of_order, '%b') AS DOODR,
			 V.Day AS Day,
			 V.item_name AS item_name,
			 i.item_code AS item_code,
			 s.salesman_name AS s_name,
			 V.item_id AS item_id,
			 V.month AS month,
			 V.year AS year,
			 R.retailer_name AS retailer_name,
			 cm.channel_name,
			 B.brand_name,
			 ofr.offer_name,
			 d.distributor_name,
			 st.state_name,
			 c.city_name,
			 re.region_name,
			 R.retailer_address,
			 R.retailer_address2", $rp, $where . $groupby . $sort, '');
        $auRecCount = $this->_getSelectList('salereldailywiseitemreport AS V 
					LEFT JOIN table_retailer AS R ON V.retailer_id = R.retailer_id 
					LEFT JOIN table_salesman AS s ON V.salesman_id = s.salesman_id
					LEFT JOIN table_retailer_channel_master AS cm ON cm.channel_id=R.channel_id
					LEFT JOIN table_item AS i ON V.item_id = i.item_id
					LEFT JOIN table_brands  AS B ON B.brand_id=i.brand_id
					LEFT JOIN table_offer AS ofr ON ofr.offer_id=i.offer_id
					', '*', '', $where . $groupby);
        $total = sizeof($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if (isset($auRec[$i]->item_id)) {
                $auRec2 = $this->_getSelectList('salereldailywiseitemreport AS V', "SUM(totalSaleUnit) AS totalSaleUnit ,Day ,retailer_id, item_name ", '', " retailer_id = " . $auRec[$i]->RID . " AND item_id = " . $auRec[$i]->item_id . " AND month = " . $auRec[$i]->month . " AND salesman_id=" . $auRec[$i]->salesman_id . " GROUP BY retailer_id, item_id, Day, month, salesman_id ");
                $row1 = '-';
                $row2 = '-';
                $row3 = '-';
                $row4 = '-';
                $row5 = '-';
                $row6 = '-';
                $row7 = '-';
                $row8 = '-';
                $row9 = '-';
                $row10 = '-';
                $row11 = '-';
                $row12 = '-';
                $row13 = '-';
                $row14 = '-';
                $row15 = '-';
                $row16 = '-';
                $row17 = '-';
                $row18 = '-';
                $row19 = '-';
                $row20 = '-';
                $row21 = '-';
                $row22 = '-';
                $row23 = '-';
                $row24 = '-';
                $row25 = '-';
                $row26 = '-';
                $row27 = '-';
                $row28 = '-';
                $row29 = '-';
                $row30 = '-';
                $row31 = '-';
                for ($j = 0; $j < count($auRec2); $j++) {
                    ${'row' . $auRec2[$j]->Day} = $auRec2[$j]->totalSaleUnit;
                }
                if ($rc) $json .= ",";
                $json .= "\n{";
                $json .= '"id":"' . $auRec[$i]->ID . '",';
                $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->s_name)) . '"';
                $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
                $json .= ',"' . addslashes($auRec[$i]->region_name) . '"';
                $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
                $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
                $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
                $json .= ',"' . addslashes($auRec[$i]->channel_name) . '"';
                $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
                $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
                $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
                $json .= ',"' . addslashes($auRec[$i]->offer_name) . '"';
                $json .= ',"' . addslashes($auRec[$i]->DOODR) . '"';
                $json .= ',"' . addslashes($auRec[$i]->year) . '"';
                $json .= ',"' . $row1 . '"';
                $json .= ',"' . $row2 . '"';
                $json .= ',"' . $row3 . '"';
                $json .= ',"' . $row4 . '"';
                $json .= ',"' . $row5 . '"';
                $json .= ',"' . $row6 . '"';
                $json .= ',"' . $row7 . '"';
                $json .= ',"' . $row8 . '"';
                $json .= ',"' . $row9 . '"';
                $json .= ',"' . $row10 . '"';
                $json .= ',"' . $row11 . '"';
                $json .= ',"' . $row12 . '"';
                $json .= ',"' . $row13 . '"';
                $json .= ',"' . $row14 . '"';
                $json .= ',"' . $row15 . '"';
                $json .= ',"' . $row16 . '"';
                $json .= ',"' . $row17 . '"';
                $json .= ',"' . $row18 . '"';
                $json .= ',"' . $row19 . '"';
                $json .= ',"' . $row20 . '"';
                $json .= ',"' . $row21 . '"';
                $json .= ',"' . $row22 . '"';
                $json .= ',"' . $row23 . '"';
                $json .= ',"' . $row24 . '"';
                $json .= ',"' . $row25 . '"';
                $json .= ',"' . $row26 . '"';
                $json .= ',"' . $row27 . '"';
                $json .= ',"' . $row28 . '"';
                $json .= ',"' . $row29 . '"';
                $json .= ',"' . $row30 . '"';
                $json .= ',"' . $row31 . '"]';
                $json .= "}";
                $rc = true;
            }
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showTarget($salesmanID)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'i.target_incentive_id';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objArrayList = new ArrayList();
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasSalTarget']) && $_SESSION['MasSalTarget'] != 'all' && $_SESSION['MasSalTarget'] != '') {
            $statusCondi = " AND i.status ='" . $_SESSION['MasSalTarget'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $cond = $_objArrayList->getFilterCondForRouteSchemeIncentiveTargets($salesmanID);
        $where = " i.target_for = 'secondary' AND  i.last_update_status!='Delete' and i.qualifiers_type=1 and target_incentive_type=1 $statusCondi $cond";

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        // echo $where;die;

        $auRec = $this->_getSelectList('table_target_incentive as i 
		left join table_type as t on t.type_id=i.type_id 
		left join table_party_type as p on p.party_type_id=i.party_type_id 
		left join table_duration as d on d.dur_id=i.dur_id
		LEFT JOIN table_user_relationships AS ur ON ur.target_incentive_id = i.target_incentive_id 
		LEFT JOIN table_salesman AS s ON s.salesman_id = ur.salesman_id  ',
            "i.*,t.type_description,p.party_description,d.dur_description ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_target_incentive as i 
		left join table_type as t on t.type_id=i.type_id 
		left join table_party_type as p on p.party_type_id=i.party_type_id 
		left join table_duration as d on d.dur_id=i.dur_id
		LEFT JOIN table_user_relationships AS ur ON ur.target_incentive_id = i.target_incentive_id 
		LEFT JOIN table_salesman AS s ON s.salesman_id = ur.salesman_id ',
            'COUNT(i.target_incentive_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            if (($auRec[$i]->end_date >= date('Y-m-d')) && ($auRec[$i]->status == 'A')) {
                $status = '<a href=\"target.php?Inid=' . $auRec[$i]->target_incentive_id . '&value=' . $status . '\">' . $status . '</a>';
            }


            if($auRec[$i]->target_for_qty_amt == '1'){
                $targetFor = 'Order';
            }elseif($auRec[$i]->target_for_qty_amt == '2'){
                $targetFor = 'Delivery';
            }else{
                $targetFor = '';
            }


            if($auRec[$i]->target_critiria == '1'){
                $targetCriteria = 'Quantity';
            }elseif($auRec[$i]->target_critiria == '2'){
                $targetCriteria = 'Amount';
            }else{
                $targetCriteria = '';
            }

    

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->target_incentive_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->description) . '"';

            $json .= ',"' . addslashes(ucwords($targetFor)) . '"';
            $json .= ',"' . addslashes(ucwords($targetCriteria)) . '"';

            $json .= ',"' . addslashes(ucwords($auRec[$i]->type_description)) . '"';
            //  $json .= ',"'.addslashes(ucwords($auRec[$i]->party_description)). '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->dur_description)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->primary_values)) . '"';

            // $json .= ',"' . addslashes(ucwords($auRec[$i]->employee_code)) . '"';
            // $json .= ',"' . addslashes(ucwords($auRec[$i]->salesman_name)) . '"';
            // $json .= ',"' . addslashes(ucwords($auRec[$i]->brand_name)) . '"';
            // $json .= ',"' . addslashes(ucwords($auRec[$i]->item_code)) . '"';
            // $json .= ',"' . addslashes(ucwords($auRec[$i]->item_name)) . '"';

//			$json .= ',"'.addslashes(ucwords($auRec[$i]->incentive_reward_amount)). '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->start_date))) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->end_date))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showTertiaryTarget($salesmanID)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'i.target_incentive_id';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objArrayList = new ArrayList();
        $cond = $_objArrayList->getFilterCondForRouteSchemeIncentiveTargets($salesmanID);
        $where = " i.target_for = 'tertiary' AND i.last_update_status!='Delete' AND i.qualifiers_type=1 AND target_incentive_type=1 $cond";

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_target_incentive as i 
		left join table_type as t on t.type_id=i.type_id 
		left join table_party_type as p on p.party_type_id=i.party_type_id 
		left join table_duration as d on d.dur_id=i.dur_id
		LEFT JOIN table_user_relationships AS ur ON ur.target_incentive_id = i.target_incentive_id 
		LEFT JOIN table_salesman AS s ON s.salesman_id = ur.salesman_id ',
            "i.*,t.type_description,p.party_description,d.dur_description", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_target_incentive as i 
		left join table_type as t on t.type_id=i.type_id 
		left join table_party_type as p on p.party_type_id=i.party_type_id 
		left join table_duration as d on d.dur_id=i.dur_id
		LEFT JOIN table_user_relationships AS ur ON ur.target_incentive_id = i.target_incentive_id 
		LEFT JOIN table_salesman AS s ON s.salesman_id = ur.salesman_id ',
            'COUNT(i.target_incentive_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";

            if (($auRec[$i]->end_date >= date('Y-m-d')) && ($auRec[$i]->status == 'A')) {
                $status = '<a href=\"tertiary_target.php?Inid=' . $auRec[$i]->target_incentive_id . '&value=' . $status . '\">' . $status . '</a>';
            }

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->target_incentive_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->description) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->type_description)) . '"';
//            $json .= ',"' . addslashes(ucwords($auRec[$i]->target_for)) . '"';
            //  $json .= ',"'.addslashes(ucwords($auRec[$i]->party_description)). '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->dur_description)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->primary_values)) . '"';
//			$json .= ',"'.addslashes(ucwords($auRec[$i]->incentive_reward_amount)). '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->start_date))) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->end_date))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showSmsSchedule()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'S.discount_id';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $where = " D.last_update_status!='Delete' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('sms_schedule as S 
		LEFT JOIN table_discount AS D on D.discount_id = S.discount_id
		LEFT JOIN table_discount_detail AS DD on D.discount_id = DD.discount_id',
            "S.*,D.party_type,D.discount,D.mode,DD.discount_desc,DD.discount_type,DD.minimum_amount,DD.minimum_quantity", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('sms_schedule as S 
		LEFT JOIN table_discount AS D on D.discount_id = S.discount_id
		LEFT JOIN table_discount_detail AS DD on D.discount_id = DD.discount_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "false" : "true";
            $status2 = '<a href=\"sms_schedule_list.php?schedule_id=' . $auRec[$i]->schedule_id . '&value=' . $status . '\">' . $status . '</a>';
            $repeats = ($auRec[$i]->repeats == '1') ? "Yes" : "No";
            $sent_nature = ($auRec[$i]->sent_nature == '2') ? "Weekly" : "Daily";
            $weekday = ($this->weekArray[$auRec[$i]->weekday] == '') ? "Everyday" : $this->weekArray[$auRec[$i]->weekday];
            if ($auRec[$i]->party_type == '1')
                $party_type = "All";
            elseif ($auRec[$i]->party_type == '2')
                $party_type = "State";
            elseif ($auRec[$i]->party_type == '3')
                $party_type = "City";
            elseif ($auRec[$i]->party_type == '4')
                $party_type = "Retailer";
            if ($auRec[$i]->discount_type == '1')
                $discount_type = "Percentage";
            elseif ($auRec[$i]->discount_type == '2')
                $discount_type = "Amount";
            elseif ($auRec[$i]->discount_type == '3')
                $discount_type = "FOC";
            if ($auRec[$i]->item_type == '1')
                $item_type = "All";
            elseif ($auRec[$i]->item_type == '2')
                $item_type = "Category";
            elseif ($auRec[$i]->item_type == '3')
                $item_type = "Items";
            elseif ($auRec[$i]->item_type == '')
                $item_type = "";
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->discount_id . '",';
            $json .= "sid:'" . $auRec[$i]->schedule_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->discount_desc) . '"';
            $json .= ',"' . addslashes(ucwords($repeats)) . '"';
            $json .= ',"' . addslashes(ucwords($sent_nature)) . '"';
            $json .= ',"' . addslashes(ucwords($weekday)) . '"';
            $json .= ',"' . addslashes(ucwords($party_type)) . '"';
            $json .= ',"' . addslashes(ucwords($discount_type)) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->from_date))) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->to_date))) . '"';
            $json .= ',"' . $status2 . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showManageAccount()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'account_id';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//        $_objAdmin = new Admin();
        $where = " ac.account_id > 0 ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2("table_account as ac 
        LEFT JOIN table_web_users as w ON w.account_id = ac.account_id AND w.status = 'A' AND w.user_type > 0 ", "ac.*,count(w.account_id) as active_login_users", $rp, $where . ' GROUP BY ac.account_id ' . $sort, '');
        $auRecCount = $this->_getSelectList2("table_account as ac 
LEFT JOIN table_web_users as w ON w.account_id = ac.account_id AND w.status = 'A' AND w.user_type > 0 ", 'ac.account_id', '', $where . ' GROUP BY ac.account_id ' . $sort);
        $auRec2 = $this->_getSelectList2("table_account as ac 
        LEFT JOIN table_salesman as s ON s.account_id = ac.account_id AND s.status = 'A' ", "ac.account_id,count(DISTINCT s.salesman_id) as active_users", '', " $where AND s.account_id > 0  GROUP BY ac.account_id ORDER BY ac.account_id ASC ");
        $activeUsersArr = [];
        if (is_array($auRec2) && (count($auRec2) > 0)) {
            foreach ($auRec2 as $key => $auRec2Data) {
                $activeUsersArr[$auRec2Data->account_id] = $auRec2Data->active_users;
            }
        }
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $activeUsers = 0;
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"manage_account.php?statusId=' . $auRec[$i]->account_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $activeUsers = (isset($activeUsersArr[$auRec[$i]->account_id]) && !empty($activeUsersArr[$auRec[$i]->account_id]) && ($activeUsersArr[$auRec[$i]->account_id] > 0)) ? $activeUsersArr[$auRec[$i]->account_id] : 0;
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->account_id . '",';
            $json .= '"cell":["' . addslashes(ucwords($auRec[$i]->company_name)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->company_address)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->company_phone_no)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->no_of_employees)) . '"';
            $json .= ',"' . $activeUsers . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->active_login_users)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->billing_cycle)) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->start_date))) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->end_date))) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


//add contact us created on 20 june 2020 by ravi
    function addContactUs()
    {
        $data['company_name'] = mysql_escape_string($_POST['company_name']);
        $data['company_email'] = mysql_escape_string($_POST['company_email']);
        $data['company_phone'] = mysql_escape_string($_POST['company_phone']);
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_date'] = date('Y-m-d');
        $id = $this->_dbInsert($data, 'table_contact_us_detail');
        return $id;
    }

//update contact us created on 20 june 2020 by ravi
    function updateContactUs($id)
    {
        $data['company_name'] = mysql_escape_string($_POST['company_name']);
        $data['company_email'] = mysql_escape_string($_POST['company_email']);
        $data['company_phone'] = mysql_escape_string($_POST['company_phone']);
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_date'] = date('Y-m-d');
        $id = $this->_dbUpdate($data, 'table_contact_us_detail', " contact_us_id=" . $id);
        return $id;
    }

//contact us created on 19 june 2020 by rimjhim
    function showContactUs()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'contact_us_id';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $where = "1";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_contact_us_detail as c', "c.*", $rp, $where . $sort, '');
        //echo "<pre/>";print_r($auRec);echo "<br/>";
        $auRecCount = $this->_getSelectList('table_contact_us_detail as c', 'count(*) as total', '', '');
        //echo "<pre/>";print_r($auRecCount);echo "<br/>";die;
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->contact_us_id . '",';
            $json .= '"cell":["' . addslashes(ucwords($auRec[$i]->company_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->company_email) . '"';
            $json .= ',"' . addslashes($auRec[$i]->company_phone) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showNavigationList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'nav_privilege_id';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//        $_objAdmin = new Admin();
        $where = " tnp.user_type!='1' and tnp.page_privileges != '' and tnp.hierarchy_id=tup.hierarchy_id ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_navigation_privilege as tnp left join table_account as ta on tnp.account_id=ta.account_id left join table_user_type as tup on tup.parentType=tnp.user_type ', "tnp.*,ta.company_name,tup.type", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_navigation_privilege as tnp left join table_account as ta on tnp.account_id=ta.account_id left join table_user_type as tup on tup.parentType=tnp.user_type ', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $pageID = $checkPageID = $comma_string = '';
            $pageID = $auRec[$i]->page_privileges;
            if ($pageID != '') {
                $checkPageID = "id IN ($pageID) AND";
            }
            $auRecName = $this->_getSelectList2('table_cms', 'page_alias_name', '', " $checkPageID status = 'A'");
            //$my_array = array_map(function($obj){ return $obj->page_alias_name; }, $auRecName);
            $my_array = $this->returnObjectArrayToIndexArray($auRecName, 'page_alias_name');
            $comma_string = implode(",", $my_array);
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->nav_privilege_id . '",';
            $json .= '"cell":["' . addslashes(ucwords($this->AliaseUsers($auRec[$i]->company_name))) . '"';
            $json .= ',"' . addslashes(ucwords($this->AliaseUsers($auRec[$i]->type))) . '"';
//            $json .= ',"'.addslashes(ucwords($auRec[$i]->username)). '"';
            $json .= ',"' . addslashes(ucwords($this->AliaseUsers($comma_string))) . '"]';
            //$json .= ',"'.addslashes(ucwords($auRec[$i]->company_name)). '"';
            //$json .= ',"'.addslashes(ucwords($this->_changeDate($auRec[$i]->end_date))). '"';
            //$json .= ',"'.$sts.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addPageAccess()
    {
        $pagePrivilages = $_POST['privilege_pages'];
        $permissons = $_POST['actions'];
//        print_r($pagePrivilages);
//        print_r($permissons);
        foreach ($pagePrivilages as $key => $value) {
            $data['permisson_id'] = '';
            //echo $value."<br>";
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['user_type'] = mysql_escape_string($_POST['user_type']);
            $data['hierarchy_id'] = mysql_escape_string($_POST['hierarchy_id']);
            $data['page_privilege_id'] = $value;
            if ($permissons[$key] != '') {
                $data['permisson_id'] = implode(',', $permissons[$key]);
            }
            $id = $this->_dbInsert($data, 'table_page_access');
        }
        return $id;
    }

    function addManageUserNavigation()
    {
        /*echo "<pre>";
		print_r($_POST);*/
        //$data['user_type']=mysql_escape_string($_POST['user_type']);
        $getHirerchyID = $this->_getSelectList2('table_user_type', "*", '', " id='" . $_POST['user_type'] . "'");
        /*echo $getHirerchyID[0]->hierarchy_id;exit;*/
        if ($getHirerchyID[0]->hierarchy_id != '') {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['user_type'] = mysql_escape_string($getHirerchyID[0]->parentType);
            $data['hierarchy_id'] = mysql_escape_string($getHirerchyID[0]->hierarchy_id);
            $data['page_privileges'] = mysql_escape_string(implode(',', $_POST['privilege_pages']));
        } else {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['user_type'] = mysql_escape_string($_POST['user_type']);
            $data['page_privileges'] = mysql_escape_string(implode(',', $_POST['privilege_pages']));
        }
        $id = $this->_dbInsert($data, 'table_navigation_privilege');
        return $id;
    }

    function updateManageUserNavigation($navID)
    {
        /*echo "<pre>";
		print_r($_POST);
		exit;*/
        $getHirerchyID = $this->_getSelectList2('table_user_type', "*", '', " id='" . $_POST['user_type'] . "'");
        //echo $getHirerchyID[0]->hierarchy_id;
        if ($getHirerchyID[0]->hierarchy_id != '') {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['user_type'] = mysql_escape_string($getHirerchyID[0]->parentType);
            $data['hierarchy_id'] = mysql_escape_string($getHirerchyID[0]->hierarchy_id);
            $data['page_privileges'] = mysql_escape_string(implode(',', $_POST['privilege_pages']));
        } else {
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['user_type'] = mysql_escape_string($_POST['user_type']);
            $data['page_privileges'] = mysql_escape_string(implode(',', $_POST['privilege_pages']));
        }
        $id = $this->_dbUpdate2($data, 'table_navigation_privilege', " nav_privilege_id=" . $navID);
        return $id;
    }

    /*********************************** Hierarchy Management ****************************************/
    function addHierarchy()
    {
        $last_saved_order = $this->_getSelectList('table_salesman_hierarchy', 'MAX(sort_order) AS sort_order', '', '');
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['description'] = mysql_escape_string(trim($_POST['description']));
        $data['sort_order'] = $last_saved_order[0]->sort_order + 1;
        $data['status'] = 'A';
        $itemid = $this->_dbInsert($data, 'table_salesman_hierarchy');
        $data2['account_id'] = mysql_escape_string($_POST['account_id']);
        $data2['type'] = mysql_escape_string(trim($_POST['description']));
        $data2['parentType'] = 5;
        $data2['status'] = 'A';
        $data2['hierarchy_id'] = $itemid;
        $data2['created'] = date('Y-m-d');
        $usertypeID = $this->_dbInsert($data2, 'table_user_type');
    }

    function updateHierarchy($id)
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['description'] = mysql_escape_string(trim($_POST['description']));
        //$data['parent_id']=mysql_escape_string($_POST['parent_id']);
        $data['status'] = 'A';
        $typeid = $this->_dbUpdate($data, 'table_salesman_hierarchy', " hierarchy_id=" . $id);
        $data2['account_id'] = mysql_escape_string($_POST['account_id']);
        $data2['type'] = mysql_escape_string(trim($_POST['description']));
        //$data['parent_id']=mysql_escape_string($_POST['parent_id']);
        $data2['status'] = 'A';
        $typeid = $this->_dbUpdate($data2, 'table_user_type', " hierarchy_id=" . $id);
        return $typeid;
    }

    function showhierarchy()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'a.description';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();

        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasHier']) && $_SESSION['MasHier'] != 'all' && $_SESSION['MasHier'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasHier'] . "'";
        }
        $where = " $statusCondi ";
        //Todo End : sudhanshu 12 june 2024 : add status filter
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_salesman_hierarchy AS a ',
            ' a.hierarchy_id AS id, a.created AS created, a.description AS hierarchy, a.status AS status',
            $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_salesman_hierarchy AS a', 'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"hierarchy.php?id=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';
            $price = '<a href=\"hierarchy.php?id=' . $auRec[$i]->id . "&value=ve\">" . 'View / Edit' . '</a>';
            $ptr = '<a href=\"hierarchy.php?id=' . $auRec[$i]->id . "&value=ve\">" . 'View / Edit' . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->hierarchy) . '"';
            //$json .= ',"'.addslashes(ucwords($auRec[$i]->parent_id)). '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->created)) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /*  public function getListofusers($hierarchyID) {
		$hierarchyArrayList = array();
		$i = 0;
		if(isset($hierarchyID) && $hierarchyID!=0)
		{
		$list = $_objAdmin->_getSelectList('table_salesman_hierarchy','hierarchy_id,parent_id',''," hierarchy_id = ".$hierarchyID." status = 'A'");
		if(is_array($list))
		{
			$hierarchyArrayList[$i] = $list[0]->parent_id;
			$i++;
			return getListofusers($list[0]->parent_id);
		}
		else {
			return $hierarchyArrayList;
		}
		}
	}*/
    /*********************************** End of Hierarchy Management ****************************************/
    /*********************************** Add City ***********************************************************/
    function addDistrict()
    {
        $data['city_name'] = mysql_escape_string(trim($_POST['city_name']));
        $data['state_id'] = mysql_escape_string($_POST['state_id']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $cityid = $this->_dbInsert($data, 'city');
        // Salesman Allowances Slabs Category Update (04 July 2014)
        if (isset($_POST['allwns_cat_id']) && $_POST['allwns_cat_id'] != "") {
            $data = array();
            $data['account_id'] = mysql_escape_string($_POST['account_id']);
            $data['allwns_cat_id'] = mysql_escape_string($_POST['allwns_cat_id']);
            $data['city_id'] = $cityid;
            $data['status'] = 'A';
            $data['last_update_date'] = date('Y-m-d H:i:s');
            $this->_dbInsert($data, 'table_salesman_allwns_slab_category_city_relation');
        }
        // Salesman Allowances Slabs Category Update (04 July 2014)
        return $cityid;
    }

    function updateDistrict($id)
    {
        $data['city_name'] = mysql_escape_string(trim($_POST['city_name']));
        $data['state_id'] = mysql_escape_string($_POST['state_id']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $cityid = $this->_dbUpdate2($data, 'city', " city_id=" . $id);
        // Salesman Allowances Slabs Category Update (04 July 2014)
        if (isset($_POST['allwns_cat_id']) && $_POST['allwns_cat_id'] != "") {
            $ausals = $this->_getSelectList('table_salesman_allwns_slab_category_city_relation', "slab_city_rel_id", '', " city_id=" . $id);
            if (is_array($ausals)) {
                $data = array();
                $data['account_id'] = mysql_escape_string($_POST['account_id']);
                $data['allwns_cat_id'] = mysql_escape_string($_POST['allwns_cat_id']);
                $data['city_id'] = $id;
                $data['status'] = 'A';
                $data['last_update_date'] = date('Y-m-d H:i:s');
                $this->_dbUpdate($data, 'table_salesman_allwns_slab_category_city_relation', " city_id=" . $id);
            } else {
                $data = array();
                $data['account_id'] = mysql_escape_string($_POST['account_id']);
                $data['allwns_cat_id'] = mysql_escape_string($_POST['allwns_cat_id']);
                $data['city_id'] = $id;
                $data['status'] = 'A';
                $data['last_update_date'] = date('Y-m-d H:i:s');
                $this->_dbInsert($data, 'table_salesman_allwns_slab_category_city_relation');
            }
        } else {
            $ausals = $this->_getSelectList('table_salesman_allwns_slab_category_city_relation', "slab_city_rel_id", '', " city_id=" . $id);
            if (is_array($ausals)) {
                $data = array();
                $data['status'] = 'I';
                $data['last_update_date'] = date('Y-m-d H:i:s');
                $this->_dbUpdate($data, 'table_salesman_allwns_slab_category_city_relation', " city_id=" . $id);
            }
        }
        // Salesman Allowances Slabs Category Update (04 July 2014)
        return $cityid;
    }

    function showDistrict()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'city_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " C.city_name!=''";
        if ($query) $where .= "AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('city AS C Left JOIN state AS S ON S.state_id = C.state_id
        Left JOIN country AS cn ON cn.country_id = S.country_id ', "C.*, S.state_name,cn.country_name ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('city AS C Left JOIN state AS S ON S.state_id = C.state_id Left JOIN country AS cn ON cn.country_id = S.country_id  ', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"district.php?statusId=' . $auRec[$i]->city_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->city_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->country_name) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addCity()
    {
        $data['location_name'] = mysql_escape_string(trim($_POST['city_name']));
        $data['state_id'] = mysql_escape_string($_POST['state_id']);
        $data['city_id'] = mysql_escape_string($_POST['district_id']);
        $data['created_date'] = date('Y-m-d H:i:s');
        $data['last_updated_date'] = date('Y-m-d H:i:s');
        $data['last_updated_status'] = 'New';
        $data['status'] = 'A';
        $cityid = $this->_dbInsert($data, 'table_location');
        return $cityid;
    }

    function updateCity($id)
    {
        $data['location_name'] = mysql_escape_string(trim($_POST['city_name']));
        $data['state_id'] = mysql_escape_string($_POST['state_id']);
        $data['city_id'] = mysql_escape_string($_POST['district_id']);
        $data['last_updated_date'] = date('Y-m-d H:i:s');
        $data['last_updated_status'] = 'Update';
        $data['status'] = 'A';
        $this->_dbUpdate2($data, 'table_location', " location_id=" . $id);
        return $id;
    }

    function showCity()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'location_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " loc.location_name!=''";
        if ($query) $where .= "AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_location AS loc 
        Left JOIN state AS st ON st.state_id = loc.state_id 
        left join city as ct on ct.city_id = loc.city_id
        left join country as cn on cn.country_id = st.country_id', "loc.*, st.state_name, ct.city_name,cn.country_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_location AS loc 
        Left JOIN state AS st ON st.state_id = loc.state_id 
        left join city as ct on ct.city_id = loc.city_id', 'count(loc.location_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"city.php?statusId=' . $auRec[$i]->location_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->location_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->location_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->country_name) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /*********************************** END of city *****************************************************************/
    /*******************************************End Show Function NEW CODES************************************************/
    /********************************************* Distributor Login List CODE *************************************************/
    function showLoginDistributor($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'distributor_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " 1=1 ";
        $where = " s.status='A' $salesman";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributors as s left join table_account as a on a.account_id=s.account_id left join table_web_users as w on w.distributor_id = s.distributor_id ', "s.*,w.username,w.email_id,w.web_user_id,w.status as loginStatus", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributors as s left join table_account as a on a.account_id=s.account_id left join table_web_users as w on w.distributor_id = s.distributor_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->session_id != '') {
                $sts = "Logged In";
                $LogSts = '<a href=\"distributor_login_list.php?Id=' . base64_encode($auRec[$i]->distributor_id) . '\' >Log out</a>';
            } else {
                $sts = "Logged Out";
                $LogSts = "-";
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes($auRec[$i]->email_id) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_phone_no) . '"';
            $json .= ',"' . $sts . '"';
            $json .= ',"' . $LogSts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /****************************************** END OF Distributor Login Code **********************************************/
    /***************************************** Master Category Code *******************************************************/
    function showMasterCategory()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasCate']) && $_SESSION['MasCate'] != 'all' && $_SESSION['MasCate'] != '') {
            $statusCondi = " AND c.status ='" . $_SESSION['MasCate'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " cat_type = 'S' $statusCondi";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_category AS c LEFT JOIN table_category_margins AS m ON m.category_id = c.category_id', "m.margin_value, c.category_name, c.category_code, c.category_id, c.status", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_category AS c LEFT JOIN table_category_margins AS m ON m.category_id = c.category_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"master_category.php?stid=' . $auRec[$i]->category_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->category_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->margin_value) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addMasterCategory()
    {
        $data['category_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['category_name'])));
        $data['category_code'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['category_code'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $data['cat_type'] = 'S';
        $id = $this->_dbInsert($data, 'table_category');
        return $id;
    }

    function updateMasterCategory($id)
    {
        $data['category_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['category_name'])));
        $data['category_code'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['category_code'])));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $data['cat_type'] = 'S';
        $id = $this->_dbUpdate($data, 'table_category', " category_id=" . $id);
        return $id;
    }

    // Add Master Category Margin
    function addMasterCategoryMargin()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['category_id'] = mysql_escape_string($_POST['id']);
        $data['margin_value'] = mysql_escape_string($_POST['margin_value']);
        $data['created_date'] = date('Y-m-d H:i:s');
        //$data['start_date'] = date('Y-m-d');
        //$data['end_date'] = date('Y-m-d');
        $data['last_updated_date'] = date('Y-m-d H:i:s');
        //$data['status']= 'A';
        $id = $this->_dbInsert($data, 'table_category_margins');
        return $id;
    }

    // Update Master Category Margin
    function updateMasterCategoryMargin($id)
    {
        //$data['account_id']=mysql_escape_string($_POST['account_id']);
        //$data['category_id']=mysql_escape_string($_POST['category_id']);
        $data['margin_value'] = mysql_escape_string($_POST['margin_value']);
        //$data['created_date'] = date('Y-m-d h:i:s');
        //$data['status']= 'A';
        $marginID = $this->_dbUpdate($data, 'table_category_margins', " margin_id =" . $id);
        return $id;
    }

    // Master Category Margin Activity
    function addMasterCategoryActivity($id)
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['margin_id'] = $id;
        $data['category_id'] = mysql_escape_string($_POST['id']);
        $data['margin_value'] = mysql_escape_string($_POST['margin_value']);
        $data['created_date'] = date('Y-m-d H:i:s');
        $id = $this->_dbInsert($data, 'table_category_margins_activity');
        return $id;
    }

    //Code for New function of retailer app feature enable BY RIMJHIM on 27 may 2020
    function addRetfeatureAndPhoto()
    {
        $companyid = $_POST['nav_preID'];
        $feature = $_POST['feature'];
        $photo = $_POST['photo'];
        //print_r($photo);
        foreach ($feature as $key => $value) {
            //for returning condition
            $data['feature_id'] = $key;
            //$data['feature_name']=$value;
            $data['account_id'] = $companyid;
            $data['created_date'] = date('Y-m-d');
            $data['last_update_date'] = date('Y-m-d');
            $data['status'] = 'A';
            $id = $this->_dbInsert($data, 'table_retailer_feature_map');
        }
        return $id;
    }

    // end of code for retailer app feature
    function addfeatureAndPhoto()
    {
        $companyid = $_POST['nav_preID'];
        $feature = $_POST['feature'];
        $photo = $_POST['photo'];
        //print_r($photo);
        foreach ($feature as $key => $value) {
            //for returning condition
            $data['feature_id'] = $key;
            //$data['feature_name']=$value;
            $data['account_id'] = $companyid;
            $data['created_date'] = date('Y-m-d');
            $data['last_update_date'] = date('Y-m-d');
            $data['status'] = 'A';
            $id = $this->_dbInsert($data, 'table_feature_map');
        }
        return $id;
    }
    /**************************************** END OF MASTER CATEGORY CODE ********************************************/
    /***************************************** NDC Stock Details *******************************************************/
    function showStock()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 's.last_updated_date';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " b.brand_id IN(" . $RoleBrands . ")";
        }
        $where = $brandCnd;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_item_ndc_stock AS s 
		LEFT JOIN table_item_case_relationship AS icr ON icr.item_id = s.item_id
		LEFT JOIN table_cases AS clr ON clr.case_id = icr.case_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
        LEFT JOIN table_price AS P ON P.item_id = i.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		left join table_color as col on col.color_id = s.color_id', "c.category_name,b.brand_name, clr.case_description, clr.case_size, i.item_name, i.item_code, s.stock_value, s.last_updated_date,s.stock_id, col.color_code,P.item_dp as item_mrp",
            $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_item_ndc_stock AS s 
		LEFT JOIN table_cases AS clr ON clr.case_id = s.attribute_value_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
        LEFT JOIN table_price AS P ON P.item_id = i.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            //$status=($auRec[$i]->status=='A')?"Active":"Inactive";
            //$status='<a href=\"master_category.php?stid='.$auRec[$i]->category_id.'&value='.$status.'\">'.$status.'</a>';
            if ($auRec[$i]->case_size != '') {
                $qty_in_cases = round(($auRec[$i]->stock_value / $auRec[$i]->case_size), 2);;
            } else {
                $qty_in_cases = '';
            }
            $company_stock_value = 0;
            if ($auRec[$i]->stock_value > 0) {
                $company_stock_value = ($auRec[$i]->stock_value * $auRec[$i]->item_mrp);
            }

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stock_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->case_size) . '"';
            $json .= ',"' . addslashes($qty_in_cases) . '"';
            $json .= ',"' . addslashes($auRec[$i]->stock_value) . '"';
            $json .= ',"' . addslashes($company_stock_value) . '"';
            // $json .= ',"' . addslashes($auRec[$i]->color_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->last_updated_date) . '"]';
            //$json .= ',"'.$status.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addFileCategory()
    {
        $data['file_category_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['file_category_name'])));
        //$data['category_code']=mysql_escape_string($_POST['category_code']);
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_file_category');
        return $id;
    }

    function updateFileCategory($id)
    {
        $data['file_category_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['file_category_name'])));
        //$data['category_code']=mysql_escape_string($_POST['category_code']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_file_category', " file_category_id=" . $id);
        return $id;
    }

    function showFileCategory()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'file_category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $where = " account_id='" . $_SESSION['accountId'] . "' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_file_category', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_file_category', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"file_category.php?stid=' . $auRec[$i]->file_category_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->file_category_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->file_category_name) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->category_code). '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showUploadFiles()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'f.last_update_date';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder, f.file_id DESC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $where = " f.status='A' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_file_category as fc inner join table_files as f on fc.file_category_id=f.file_category_id', " fc.file_category_name,f.*  ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_file_category as fc inner join table_files as f on fc.file_category_id=f.file_category_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = "View";
            if ($auRec[$i]->type == 'S') {
                $type = 'Salesman';
            }
            if ($auRec[$i]->type == 'R') {
                $type = 'Retailer';
            }
            if ($auRec[$i]->type == 'D') {
                $type = 'Distributor';
            }
            if ($auRec[$i]->type == 'I') {
                $type = 'Influencer';
            }
            $status = '<a href=\"view_upload_files.php?id=' . $auRec[$i]->file_category_id . '&type=' . $auRec[$i]->type . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->file_category_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->file_descreption) . '"';
            $json .= ',"' . addslashes($auRec[$i]->file_category_name) . '"';
            $json .= ',"' . addslashes($type) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->last_update_date)) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /***************************************** NDC Stock Details *******************************************************/
    /***************************  Distributor In-process Stock Details *******************************************/
    function showDistribuotrInProcessStock()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'c.category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " b.brand_id IN(" . $RoleBrands . ")";
        }
        $where = $brandCnd;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($_SESSION['distributorId'] != "" && $_SESSION['distributorId'] != '0') {
            $dis = " and d.distributor_id='" . $_SESSION['distributorId'] . "'";
        }
        $auRec = $this->_getSelectList('table_item_dis_stk_inprocess AS s 
		LEFT JOIN table_cases AS clr ON clr.case_id = s.attribute_value_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id', "d.distributor_code, 
		d.distributor_name,d.gst_no,d.pan_no,b.brand_name,
		c.category_name, clr.case_size, i.item_name, i.item_code, s.acpt_stock_value,s.price, s.rec_stock_value, s.status, 
		s.bill_no,s.bill_date,
		s.last_update_datetime,s.dis_stk_inpro_id,s.before_tax_amount,s.total_tax_amount,s.sgst_amount,s.cgst_amount,
		s.igst_amount,s.cess_amount", $rp, $where . $dis . $sort, '');
        $auRecCount = $this->_getSelectList('table_item_dis_stk_inprocess AS s 
		LEFT JOIN table_cases AS clr ON clr.case_id = s.attribute_value_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id', 'count(*) as total', '', $where . $dis);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Accepted" : "In-Process";
            //$status='<a href=\"master_category.php?stid='.$auRec[$i]->category_id.'&value='.$status.'\">'.$status.'</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->dis_stk_inpro_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->gst_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->pan_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->bill_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->bill_date) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->case_size). '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rec_stock_value) . '"';
            $json .= ',"' . addslashes($auRec[$i]->price) . '"';
            $json .= ',"' . addslashes($auRec[$i]->before_tax_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->before_tax_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->sgst_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->cgst_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->igst_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->cess_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->last_update_datetime) . '"]';
            //$json .= ',"'.$status.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /***************************  Distributor In-process Stock Details *******************************************/
    /***************************  Salesman Allowance Details *******************************************/
    function showSalesmanAllownce($salesman, $checkhierarchyenable)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname) $sortname = 'sd.created';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //echo $_SESSION['FromallownceList '];
        if ($_SESSION['FromallownceList'] != '') {
            $fromdate = " and app_date >= '" . date('Y-m-d', strtotime($_SESSION['FromallownceList'])) . "'";
        } else {
            $fromdate = " and app_date >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToallownceList'] != '') {
            $todate = " and app_date <= '" . date('Y-m-d', strtotime($_SESSION['ToallownceList'])) . "'";
        } else {
            $todate = " and app_date <= '" . date('Y-m-d') . "'";
        }
        $where = " $salesman $fromdate $todate ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_salesman_allowance_details as sd 
		LEFT JOIN table_salesman_allowance_mapping AS AM ON AM.allws_id = sd.allws_id
		left join table_salesman as s on s.salesman_id = sd.salesman_id 
		LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
		LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
		LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
		LEFT JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id 
		LEFT JOIN city as c on c.city_id=s.city
		LEFT JOIN city as c2 on c2.city_id=sd.city_id
		LEFT JOIN state AS st on st.state_id=s.state', "sd.*,SUM(AM.allwns_amt) as totalAmt,st.state_name, c2.city_name AS allwn_city, s.salesman_name,s.employee_code,H.description AS des1, H2.description AS des2, S2.salesman_name AS rpt_to, c.city_name", $rp, $where . ' GROUP BY sd.salesman_id,sd.app_date ' . $sort, '');
        $auRecCount = $this->_getSelectList('table_salesman_allowance_details as sd 
        LEFT JOIN table_salesman_allowance_mapping AS AM ON AM.allws_id = sd.allws_id
		left join table_salesman as s on s.salesman_id = sd.salesman_id 
		LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
		LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
		LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
		LEFT JOIN city as c on c.city_id=s.city 
		LEFT JOIN state AS st on st.state_id=s.state', 'sd.salesman_id', '', $where . ' GROUP BY sd.salesman_id,sd.app_date ' . $sort);
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
//            $url='<a href=\"allowance_detail.php?id='.$auRec[$i]->allws_id.'\">View Photo</a>';
            if ($auRec[$i]->created == '0000-00-00') $last_update_date = $auRec[$i]->created; else $last_update_date = $auRec[$i]->created;
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->allws_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->cmt))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->totalAmt)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $_objAdmin->_changeDate(date($auRec[$i]->app_date))))) . '"';
            $json .= ',"' . ucwords(addslashes($_objAdmin->_changeDate(date($auRec[$i]->created)))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showSalesmanExpenseReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname) $sortname = 'sd.created';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromallownceList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromallownceList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToallownceList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToallownceList']));
        } else {
            $todate = date('Y-m-d');
        }
        $salCondi = $salesman;
        if (isset($_SESSION['allowncesalesmanID']) && !empty($_SESSION['allowncesalesmanID']) && (intval($_SESSION['allowncesalesmanID']) > 0)) {
            $salCondi = " AND sd.salesman_id = " . $_SESSION['allowncesalesmanID'];
        }
        $where = " sd.app_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' $salCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_salesman_allowance_details as sd
		left join table_salesman as s on s.salesman_id = sd.salesman_id 
		LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
		LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
		LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
		LEFT JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id 
		LEFT JOIN city as c on c.city_id=s.city
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = s.state and szsm.account_id = s.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		LEFT JOIN table_location as c2 on c2.location_id=sd.city_id
		LEFT JOIN state AS st on st.state_id=s.state', "sd.*,st.state_name, c2.location_name AS allwn_city, s.salesman_name,s.employee_code,H.description AS des1, H2.description AS des2, S2.salesman_name AS rpt_to, c.city_name,sz.zone_name", $rp, $where . ' ' . $sort);
        $allwsIdArr = [];
        if (is_array($auRec) && (count($auRec) > 0)) {
            foreach ($auRec as $key => $auRecData) {
                $allwsIdArr[] = $auRecData->allws_id;
            }
            $allwsIds = implode(',', $allwsIdArr);
            $auRecDet = $this->_getSelectList2('table_salesman_allowance_mapping as sam 
LEFT JOIN table_salesman_tags as st ON st.id = sam.tada_id', "sam.allws_id,sam.tada_id,st.desc as exp_type,sam.allwns_amt,sam.remark", '', "sam.allws_id IN($allwsIds) ORDER BY sam.allws_id ASC, sam.tada_id ASC");
            $expTypeWiseDataArr = [];
            if (is_array($auRecDet) && (count($auRecDet) > 0)) {
                foreach ($auRecDet as $key2 => $auRecDetData) {
                    $expTypeWiseDataArr[$auRecDetData->allws_id][$auRecDetData->tada_id] = $auRecDetData;
                }
            }
            $getExpenseTypes = $this->_getSelectList('table_salesman_tags as s', 's.id,s.desc', '', " ORDER BY s.id ASC ");
            $expTypeArr = [];
            if (is_array($getExpenseTypes) && (count($getExpenseTypes) > 0)) {
                foreach ($getExpenseTypes as $key => $expData) {
                    $expTypeArr[$expData->id] = $expData->desc;
                }
            }
        }
        $auRecCount = $this->_getSelectList('table_salesman_allowance_details as sd 
		left join table_salesman as s on s.salesman_id = sd.salesman_id 
		LEFT JOIN city as c on c.city_id=s.city 
		LEFT JOIN table_location as c2 on c2.location_id=sd.city_id
		LEFT JOIN state AS st on st.state_id=s.state
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = s.state and szsm.account_id = s.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id', 'COUNT(sd.allws_id) AS total', '', $where . ' ' . $sort);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r", "\t", "'");
        $emptyValue = '<p style="text-align: center;font-size: 30px;">-</p>';
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target="_blank"';
        }
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->allws_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->des1)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->rpt_to)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->des2)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->cmt))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', date('d M Y', strtotime($auRec[$i]->app_date))))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->allwn_city)) . '"';
            $ttlAmt = 0;
            if (is_array($expTypeArr) && (count($expTypeArr) > 0)) {
                foreach ($expTypeArr as $expTypeId => $expTypeName) {
                    if (is_array($expTypeWiseDataArr[$auRec[$i]->allws_id]) && (count($expTypeWiseDataArr[$auRec[$i]->allws_id]) > 0) && is_object($expTypeWiseDataArr[$auRec[$i]->allws_id][$expTypeId])) {


                        $url = '<a href="expense_image.php?expid=' . $auRec[$i]->allws_id . '&tid=' . $expTypeId . '" ' . $targetBlank . '>View Photo</a>';


                        $expTypeWiseData = $expTypeWiseDataArr[$auRec[$i]->allws_id][$expTypeId];
                        $json .= ',"' . ucwords(addslashes($expTypeWiseData->allwns_amt)) . '"';
                        $json .= ',"' . ucwords(addslashes($url)) . '"';
                        $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $expTypeWiseData->remark))) . '"';
                        $ttlAmt += $expTypeWiseData->allwns_amt;
                    } else {
                        $json .= ',"' . addslashes($emptyValue) . '"';
                        $json .= ',"' . addslashes($emptyValue) . '"';
                        $json .= ',"' . addslashes($emptyValue) . '"';
                    }
                }
            }
            $json .= ',"' . ucwords(addslashes(number_format($ttlAmt, 2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"';
            $json .= ',"' . ucwords(addslashes(date('d M Y H:i', strtotime($auRec[$i]->created)))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /***************************  Salesman Allowance Details *******************************************/
    /***************************  Retailer Dues Details *******************************************/
    function showRetailerDues()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname) $sortname = 'retailer_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //echo $_SESSION['FromallownceList '];
        $where = " td.status='A'";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer_due_details as td left join table_retailer as r on td.retailer_id=r.retailer_id', "td.*,r.retailer_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_retailer_due_details as td left join table_retailer as r on td.retailer_id=r.retailer_id', 'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            //$status=($auRec[$i]->order_status=='A')?"New Order":"Processed";
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->ret_due_id . '",';
            //$json .= "transtype:'". $auRec[$i]->transaction_type . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->due_amt)) . '"';
            $json .= ',"' . ucwords(addslashes($_objAdmin->_changeDate($auRec[$i]->last_update_date))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /***************************  Retailer Dues Details *******************************************/
    /***************************  Salesman Tags *******************************************/
    function addSalesmanTags()
    {
        $data['`desc`'] = mysql_escape_string(trim($_POST['desc']));
        //$data['category_code']=mysql_escape_string($_POST['category_code']);
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['type_id'] = 1;
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_datetime'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = 'NEW';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_salesman_tags');
        return $id;
    }

    function updateSalesmanTags($id)
    {
        $data['`desc`'] = mysql_escape_string(trim($_POST['desc']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['type_id'] = 1;
        //$data['category_code']=mysql_escape_string($_POST['category_code']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_datetime'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = 'UPDATE';
        $data['status'] = 'A';
        $id = $this->_dbUpdate2($data, 'table_salesman_tags', " id=" . $id);
        return $id;
    }

    function showSalesmanTags()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = '`desc`';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasSalTag']) && $_SESSION['MasSalTag'] != 'all' && $_SESSION['MasSalTag'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasSalTag'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_salesman_tags', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_salesman_tags', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"salesman_tag.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->desc) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->category_code). '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /***************************  Salesman Tags *******************************************/
    /***************************  Retailer Margin Details 23 May 2014 Ajay *******************************************/
    function showRetailerMargin()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname) $sortname = 'r.retailer_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer_margin AS rm LEFT JOIN table_retailer AS r ON r.retailer_id=rm.retailer_id LEFT JOIN table_category AS c ON c.category_id = rm.category_id LEFT JOIN table_category_margins AS m ON m.category_id = rm.category_id ', "r.retailer_name, c.category_name, rm.status, rm.ret_mar_val, m.margin_value, rm.last_update_time, rm.ret_margin_id ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_retailer_margin AS rm LEFT JOIN table_retailer AS r ON r.retailer_id=rm.retailer_id LEFT JOIN table_category AS c ON c.category_id = rm.category_id ', 'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"retailer_margin_list.php?stid=' . $auRec[$i]->ret_margin_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->ret_margin_id . '",';
            //$json .= "transtype:'". $auRec[$i]->transaction_type . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->margin_value)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_mar_val)) . '"';
            $json .= ',"' . ucwords(addslashes(date('Y-m-d h:i:s A', strtotime($auRec[$i]->last_update_time)))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /***************************  Retailer Margin Details 23 May 2014 Ajay *******************************************/
    /*************************** Requested Retailer Margin List 23 May 2014 Ajay *******************************************/
    function showRequestedRetailerMargin()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname) $sortname = 'r.retailer_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer_margin_activity AS rm 
		LEFT JOIN table_retailer AS r ON r.retailer_id=rm.retailer_id 
		LEFT JOIN table_category AS c ON c.category_id = rm.category_id 
		LEFT JOIN table_category_margins AS m ON m.category_id = rm.category_id 
		LEFT JOIN table_salesman AS s ON s.salesman_id = rm.salesman_id ', "s.salesman_name, r.retailer_name, c.category_name, rm.status, rm.req_mar_val, m.margin_value, rm.cur_mar_val, rm.created_on, rm.id, rm.order_id, rm.category_id ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_retailer_margin_activity AS rm 
		LEFT JOIN table_retailer AS r ON r.retailer_id=rm.retailer_id 
		LEFT JOIN table_category AS c ON c.category_id = rm.category_id 
		LEFT JOIN table_category_margins AS m ON m.category_id = rm.category_id 
		LEFT JOIN table_salesman AS s ON s.salesman_id = rm.salesman_id ', 'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            //$status=($auRec[$i]->status=='A')?'Yes':'<input type="button" name="confirm" value="Yes" onclick="approveMargin('.$auRec[$i]->id.', this.value)" /> <input type="button" name="confirm" value="No" onclick="approveMargin('.$auRec[$i]->id.', this.value)" />';
            //if($auRec[$i]->status=='A') {$status= 'Confirm'; } else if($auRec[$i]->status=='I') { $status=($auRec[$i]->status=='A')?"Yes":"<center><input type=\"button\" onclick=\"loadingdialog(this.value,".$auRec[$i]->id.")\" name=\"Confirm\" value=\"Confirm\" class=\"btn\"></center>";} else {  $status= 'canceled'; }
            if ($auRec[$i]->status == 'A') {
                $status = 'Confirm';
            } else if ($auRec[$i]->status == 'I') {
                $status = ($auRec[$i]->status == 'A') ? "Yes" : "<center><input type=\"button\" onclick=\"loadingdialog(this.value," . $auRec[$i]->id . ")\" name=\"Confirm\" value=\"Confirm\" class=\"btn\"></center>";
            } else {
                $status = 'canceled';
            }
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= "sid:'" . $auRec[$i]->category_id . '",';
            //$json .= "transtype:'". $auRec[$i]->transaction_type . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->cur_mar_val)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->req_mar_val)) . '"';
            $json .= ',"' . ucwords(addslashes(date('Y-m-d h:i:s A', strtotime($auRec[$i]->created_on)))) . '"';
            $json .= ',"' . ucwords($status) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*************************** Requested Retailer Margin List  23 May 2014 Ajay *******************************************/
    function getAccountRec()
    {
        $aRec = $this->_getSelectList2('table_account as a 
        left join table_web_users as u on a.account_id=u.account_id', "count(u.account_id) as ttl_users, a.no_of_employees", '', " a.account_id='" . $_SESSION['accountId'] . "' and u.status='A' AND u.user_type > 1 ");
        $total = ($aRec[0]->no_of_employees - $aRec[0]->ttl_users);
        return $total;
    }

    /*----- function getTotalUsersOfCompany gets total no of users of a company  by Gyanendra 31 july 2014  ------*/
    function getTotalUsersOfCompany($accountId)
    {
        $aRec = $this->_getSelectList2(' table_account as a', "a.no_of_employees", '', " a.account_id='" . $accountId . "'");
        $total_users = $aRec[0]->no_of_employees;
        return $total_users;
    }

    /******************** Salesman Communication  05 JULY 2014 **************************/
    function showMessageCom($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'comm_id';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromDateMSG'] != '') {
            $fromdate = " AND TC.comm_date >= '" . date('Y-m-d', strtotime($_SESSION['FromDateMSG'])) . "'";
        } else {
            $fromdate = " AND TC.comm_date >= '" . date("Y-m-d", strtotime("-1 day")) . "'";
        }
        if ($_SESSION['ToDateMSG'] != '') {
            $todate = " AND TC.comm_date <= '" . date('Y-m-d', strtotime($_SESSION['ToDateMSG'])) . "'";
        } else {
            $todate = " AND TC.comm_date <= '" . date("Y-m-d", strtotime("-1 day")) . "'";
        }
        $where = " TC.salesman_id >0 $fromdate $todate $salesman AND s.account_id= " . $_SESSION['accountId'];
        //echo $salesman; die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_communication as TC
		LEFT JOIN table_salesman as s on s.salesman_id= TC.salesman_id
		LEFT JOIN table_salesman_hierarchy_relationship AS H ON H.salesman_id= TC.salesman_id
		LEFT JOIN table_salesman AS S2 ON S2.salesman_id = H.rpt_user_id
		LEFT JOIN table_salesman_hierarchy AS H3 ON H3.hierarchy_id = H.hierarchy_id
		LEFT JOIN city AS C ON C.city_id = s.city 
		LEFT JOIN state AS st ON st.state_id = s.state', "TC.*,s.salesman_name,S2.salesman_name AS rpt_to, H3.description,C.city_name, st.state_name", $rp, $where . $sort, '');
        //print_r($auRec);
        //die;
        $auRecCount = $this->_getSelectList2('table_communication as TC
		LEFT JOIN table_salesman as s on s.salesman_id=TC.salesman_id
		LEFT JOIN city AS C ON C.city_id = s.city 
		LEFT JOIN state AS st ON st.state_id = s.state', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        //echo $total; die;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $comm_date = $this->_changeDate($auRec[$i]->comm_date);
            if ($rc) $json .= ",";
            if ($auRec[$i]->image_required == 'Yes') {
                $photo = '<a href=\"message_image.php?msgId=' . $auRec[$i]->comm_id . '\'  target=\"_blank\">View Photo</a>';
            } else {
                $photo = "";
            }
            $relDetails = $this->getRetailerFullDetails($auRec[$i]->retailer_id);
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->comm_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($relDetails[0]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->comm_message))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->reason))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->subreason))) . '"';
            $json .= ',"' . addslashes($comm_date) . '"';
            $json .= ',"' . addslashes(date('h:i A', strtotime($auRec[$i]->comm_time))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /******************** Salesman Communication  05 JULY 2014 **************************/
    /*-------------------------Advisory 7 july by gyanendra -----------------------------*/
    function advisory()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',date_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        if ($_SESSION['retailerID'] != '') {
            $retailer = "retailer_id = '" . $_SESSION['retailerID'] . "'";
        } else {
            $retailer = "retailer_id = ''";;
        }
        if ($_SESSION['FromAdvisoryList'] != '') {
            $fromdate = "'" . date('Y-m-d', strtotime($_SESSION['FromAdvisoryList'])) . "'";
        } else {
            $fromdate = "'" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToAdvisoryList'] != '') {
            $todate = "'" . date('Y-m-d', strtotime($_SESSION['ToAdvisoryList'])) . "'";
        } else {
            $todate = "'" . date('Y-m-d') . "'";
        }
        $val = mysql_query("SELECT a.retailer_id AS retailer_id, (Select retailer_name from table_retailer tr where tr.retailer_id=a.retailer_id ) as retailer_name, a.days_diff AS days_interval, COUNT( a.days_diff ) days_frequency
		FROM (
				SELECT T.order_id, T.retailer_id, T.date_of_order, IFNULL( DATEDIFF( T.date_of_order, (
				SELECT MAX( TT.date_of_order ) 
				FROM table_order TT
				WHERE TT.date_of_order < T.date_of_order AND TT.date_of_order BETWEEN " . $fromdate . " AND " . $todate . "
				AND TT." . $retailer . " ) ) , 0
				) AS days_diff
				FROM table_order T
				WHERE T." . $retailer . " AND T.date_of_order BETWEEN " . $fromdate . " AND " . $todate . "
				GROUP BY date_of_order
				ORDER BY date_of_order
				)a
				WHERE a.days_diff <>0
				GROUP BY a.days_diff
				ORDER BY a.days_diff DESC");
        $total = mysql_num_rows($val);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        while ($values = mysql_fetch_array($val)) {
            //if($auRec[$i]->transaction_type==1){$type="Cash";}else{$type="Cheque";}
            //$status=($auRec[$i]->order_status=='A')?"New Order":"Processed";
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $values['retailer_id'] . '",';
            $json .= '"cell":["' . ucwords(addslashes($values['retailer_name'])) . '"';
            //$json .= ',"'.ucwords(addslashes($values['retailer_name'])). '"';
            $json .= ',"' . ucwords(addslashes($values['days_interval'])) . '"';
            $json .= ',"' . ucwords(addslashes($values['days_frequency'])) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /***************************  Distributor Stock Details 24 June 2014 *******************************************/
    function showDistribuotrStock()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'c.category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = " LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " b.brand_id IN(" . $RoleBrands . ")";
        }


        ///////

        $status_where='';
        if(isset($_SESSION['status']) && !empty($_SESSION['status']))
        {
           $status_where =' AND d.status="'.$_SESSION['status'].'"';
        }



        ///////




        $where = $brandCnd;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $dis = " and d.distributor_id='" . $_SESSION['distributorId'] . "'";
        }
        if ($_SESSION['stockistId'] != "" && $_SESSION['stockistId'] > 0) {
            //$dis = " and d.stockist_id='" . $_SESSION['stockistId'] . "'";
            //Todo Start : sudhanshu 09 may 2024 : multi stockist
            $_objArrayList = new ArrayList();
            $mapedDis = $_objArrayList->getDistributorMultiStockistMapped();
            if ($mapedDis != '') {
                $dis = " and d.distributor_id IN (" . $mapedDis . ")";
            }
            //Todo End : sudhanshu 09 may 2024 : multi stockist

        }
        //Todo Start: Sudhanshu 10 may 2024 : add distributor filter
        if (isset($_SESSION['disId']) && $_SESSION['disId'] > 0) {
            $dis = " and d.distributor_id='" . $_SESSION['disId'] . "'";
        }
        //Todo Start: Sudhanshu 10 may 2024 : add distributor filter
        $auRec = $this->_getSelectList('table_item_distributor_stock AS s 
		LEFT JOIN table_item_case_relationship AS icr ON icr.item_id = s.item_id
		LEFT JOIN table_cases AS clr ON clr.case_id = icr.case_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
        LEFT JOIN table_price AS p ON p.item_id = i.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id
		LEFT JOIN table_color AS col ON col.color_id = s.color_id',
        "s.distributor_id, s.item_id,b.brand_name,s.color_id ,d.distributor_name, d.distributor_code, c.category_name, 
		clr.case_size, i.item_name, i.item_code, SUM(s.dis_stock_value) as dis_stock_value, s.status, 
		s.last_update_datetime,s.dis_stk_id, col.color_code,p.dist_price,p.item_dp as item_mrp", $rp, $where . $dis . $status_where .' GROUP BY s.distributor_id, 
		s.item_id,s.color_id ' . $sort, '');
        $auRecCount = $this->_getSelectList('table_item_distributor_stock AS s 
		LEFT JOIN table_item_case_relationship AS icr ON icr.item_id = s.item_id
		LEFT JOIN table_cases AS clr ON clr.case_id = icr.case_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id
		LEFT JOIN table_color AS col ON col.color_id = s.color_id', 's.*', '', $where . $dis . ' GROUP BY s.distributor_id, s.item_id,s.color_id ');
        $total = ((count($auRecCount) > 0) ? count($auRecCount) : 0);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $case_qty = round(($auRec[$i]->dis_stock_value / $auRec[$i]->case_size), 2);
            $status = ($auRec[$i]->status == 'A') ? "A" : "I";
            //$status='<a href=\"master_category.php?stid='".$auRec[$i]->category_id."'&value='".$status."\">'".$status."'</a>";
            $dis_stock_price_value = 0;
            if ($auRec[$i]->dis_stock_value > 0) {
                if ($auRec[$i]->dist_price > 0) {
                    $price = $auRec[$i]->dist_price;
                } else {
                    $price = $auRec[$i]->item_mrp;
                }

                $dis_stock_price_value = ($auRec[$i]->dis_stock_value * $price);
            }


            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->dis_stk_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->case_size) . '"';
            $json .= ',"' . addslashes($case_qty) . '"';
            $json .= ',"' . addslashes($auRec[$i]->dis_stock_value) . '"';
            $json .= ',"' . addslashes($dis_stock_price_value) . '"';
            // $json .= ',"' . addslashes($auRec[$i]->color_code) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->last_update_datetime)) . '"]';
            /*$json .= ',"'.$status.'"]';*/
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /*************************** Distributor Stock Details 24 June 2014  *******************************************/
    /******** Not Visited Dealer List 14 JULY 2014 ************************/
    /*function showNotVisitedDealerReport(){
  $page = $_REQUEST['page'];
  $rp = $_REQUEST['rp'];
  $sortname = $_REQUEST['sortname'];
  $sortorder = $_REQUEST['sortorder'];
  $ordertime=',retailer_name desc';
  if (!$sortname) $sortname = 'retailer_name';
  if (!$sortorder) $sortorder = 'desc';
  $sort = " ORDER BY $sortname $sortorder $ordertime ";
  if (!$page) $page = 1;
  if (!$rp) $rp = 50;
  $start = (($page-1) * $rp);
  $limit = "LIMIT $start, $rp";
  $query = $_REQUEST['query'];
  $qtype = $_REQUEST['qtype'];
  $_objAdmin = new Admin();
  if($_SESSION['FromOS']!='' && $_SESSION['ToOS']!=""){
   $fromdate=" where date_of_order between '".date('Y-m-d', strtotime($_SESSION['FromOS']))."' and '".date('Y-m-d', strtotime($_SESSION['ToOS']))."'";
  }
$where = " retailer_id NOT IN ( SELECT retailer_id FROM table_order $fromdate )";
  if ($query) $where .= " AND $qtype LIKE '%$query%' ";
 $auRec=$this->_getSelectList('table_retailer as tr
      LEFT JOIN city AS c ON c.city_id=tr.city
      LEFT JOIN state AS s ON s.state_id=tr.state',
	"tr.retailer_id,tr.retailer_name,tr.retailer_address,tr.retailer_phone_no,tr.retailer_location,c.city_name,s.state_name",$rp,$where,$sort,'');
    $auRecCount=$this->_getSelectList('table_retailer as tr
      LEFT JOIN city AS c ON c.city_id=tr.city
      LEFT JOIN state AS s ON s.state_id=tr.state',
	 'count(*) AS total','',$where);
  $total= $auRecCount[0]->total;
  header("Expires: Mon, 26 Jul 1997 05:00:00 GMT" );
  header("Last-Modified: " . gmdate( "D, d M Y H:i(worry)" ) . "GMT" );
  header("Cache-Control: no-cache, must-revalidate" );
  header("Pragma: no-cache" );
  header("Content-type: text/x-json");
  $json = "";
  $json .= "{\n";
  $json .= "page: $page,\n";
  $json .= "total: $total,\n";
  $json .= "rows: [";
  $rc = false;
	for($i=0;$i<count($auRec);$i++){
			if ($rc) $json .= ",";
			$json .= "\n{";
			$json .= "id:'". $auRec[$i]->reatiler_id."',";
			$json .= "cell:['".ucwords(addslashes($auRec[$i]->retailer_name))."'";
			$json .= ",'".addslashes($auRec[$i]->city_name)."'";
			$json .= ",'".addslashes($auRec[$i]->state_name)."'";
			$json .= ",'".addslashes($auRec[$i]->retailer_address)."'";
			$json .= ",'".addslashes($auRec[$i]->retailer_phone_no)."'";
			$json .= ",'".addslashes($auRec[$i]->retailer_location)."']";
			$json .= "}";
			$rc = true;
		}
		$json .= "]\n";
		$json .= "}";
		echo $json;
		exit;
 }*/
    /******** Not Visited Dealer List 14 JULY 2014 ************************/
    /*---------------------Add Location Tracking (25june 2014)------------------------------------------------*/
    function addfeatureTracking()
    { //echo '<pre>';
        //print_r($_POST); exit;
        $companyid = $_POST['nav_preID'];
        if ($_POST['tracking_type_location'] == 'L') {
            $data['tracking_type'] = mysql_escape_string($_POST['tracking_type_location']);
            $data['tracking_based_on'] = mysql_escape_string($_POST['trackingbasedon']);
            $start_time = mysql_escape_string($_POST['start_hour_loc']) . ':' . mysql_escape_string($_POST['start_minutes_loc']);
            $data['start_time'] = $start_time;
            $end_time = mysql_escape_string($_POST['end_hour_loc']) . ':' . mysql_escape_string($_POST['end_minuets_loc']);
            $data['end_time'] = $end_time;
            $data['interval_val'] = mysql_escape_string($_POST['interval_vall']);
            $data['account_id'] = $companyid;
            $data['created_date'] = date('Y-m-d H:i:s');
            $data['last_update_date'] = date('Y-m-d H:i:s');
            $data['status'] = 'A';
            $id = $this->_dbInsert($data, 'table_location_feature');
        }
        if ($_POST['tracking_type'] == 'D') {
            $data['tracking_type'] = mysql_escape_string($_POST['tracking_type']);
            $data['tracking_based_on'] = mysql_escape_string($_POST['tracking_based_on']);
            $start_time = mysql_escape_string($_POST['start_hour_distance']) . ':' . mysql_escape_string($_POST['start_minutes_distance']);
            $data['start_time'] = $start_time;
            $end_time = mysql_escape_string($_POST['end_hour_distance']) . ':' . mysql_escape_string($_POST['end_minuets_distance']);
            $data['end_time'] = $end_time;
            $data['interval_val'] = mysql_escape_string($_POST['interval_val']);
            $data['account_id'] = $companyid;
            $data['created_date'] = date('Y-m-d H:i:s');
            $data['last_update_date'] = date('Y-m-d H:i:s');
            $data['status'] = 'A';
            $id = $this->_dbInsert($data, 'table_location_feature');
        }
        if ($id != '') {
            return $companyid;
        }
    }

    function updateFeatureTracking($id)
    {
        //print_r($_POST); exit;
        $companyid = $_POST['nav_preID'];
        if ($_POST['tracking_type_location'] == 'L') {
            $data['tracking_type'] = mysql_escape_string($_POST['tracking_type_location']);
            $data['tracking_based_on'] = mysql_escape_string($_POST['trackingbasedon']);
            if ($_POST['trackingbasedon'] == 'Time') {
                $start_time = mysql_escape_string($_POST['start_hour_loc']) . ':' . mysql_escape_string($_POST['start_minutes_loc']);
                $data['start_time'] = $start_time;
                $end_time = mysql_escape_string($_POST['end_hour_loc']) . ':' . mysql_escape_string($_POST['end_minuets_loc']);
                $data['end_time'] = $end_time;
            } else {
                $data['start_time'] = '00:00:00';
                $data['end_time'] = '00:00:00';
            }
            $data['interval_val'] = mysql_escape_string($_POST['interval_vall']);
            $data['account_id'] = $companyid;
            $data['created_date'] = date('Y-m-d H:i:s');
            $data['last_update_date'] = date('Y-m-d H:i:s');
            $data['status'] = 'A';
            $where = "account_id=" . $companyid . " and tracking_type='L' and status='A'";
            $count_location = $this->_getSelectList2('table_location_feature', 'count(*) as total', '', $where);
            if ($count_location[0]->total > 0) {
                $idd = $this->_dbUpdate2($data, 'table_location_feature', "account_id=" . $companyid . " and tracking_type='L'");
            } else {
                $idd = $this->_dbInsert($data, 'table_location_feature');
            }
        }
        if ($_POST['tracking_type'] == 'D') {
            //echo 'dddd'; exit;
            $data['tracking_type'] = mysql_escape_string($_POST['tracking_type']);
            // for time based tracking.
            $data['tracking_based_on'] = mysql_escape_string($_POST['tracking_based_on']);
            if ($_POST['tracking_based_on'] == 'Time') {
                $start_time = mysql_escape_string($_POST['start_hour_distance']) . ':' . mysql_escape_string($_POST['start_minutes_distance']);
                $data['start_time'] = $start_time;
                $end_time = mysql_escape_string($_POST['end_hour_distance']) . ':' . mysql_escape_string($_POST['end_minuets_distance']);
                $data['end_time'] = $end_time;
            } else {
                $data['start_time'] = '00:00:00';
                $data['end_time'] = '00:00:00';
            }
            $data['interval_val'] = mysql_escape_string($_POST['interval_val']);
            $data['account_id'] = $companyid;
            $data['created_date'] = date('Y-m-d H:i:s');
            $data['last_update_date'] = date('Y-m-d H:i:s');
            $data['status'] = 'A';
            $where = "account_id=" . $companyid . " and tracking_type='D' and status='A'";
            $count_location = $this->_getSelectList2('table_location_feature', 'count(*) as total', '', $where);
            if ($count_location[0]->total > 0) {
                $idd = $this->_dbUpdate2($data, 'table_location_feature', "account_id=" . $companyid . " and tracking_type='D'");
            } else {
                $idd = $this->_dbInsert($data, 'table_location_feature');
            }
        }
        if ($idd != "") {
            return $companyid;
        }
    }

    //Sagar : 5 July 2021 : save distance data
    function addDistances()
    {
        for ($i = 1; $i <= 6; $i++) {
            $orderType = '';
            $distance = '';
            if ($i == 1) {
                $orderType = 'order';
                $distance = $_POST['order_distance'];
            }
            if ($i == 2) {
                $orderType = 'no_order';
                $distance = $_POST['no_order_distance'];
            }
            if ($i == 3) {
                $orderType = 'check_in';
                $distance = $_POST['checkin_distance'];
            }
            if ($i == 4) {
                $orderType = 'dist_order';
                $distance = $_POST['dist_order_distance'];
            }
            if ($i == 5) {
                $orderType = 'dist_checkin';
                $distance = $_POST['dist_checkin_distance'];
            }
            if ($i == 6) {
                $orderType = 'location_accuracy';
                $distance = $_POST['location_accuracy'];
            }
            if (isset($orderType) && !empty($orderType)) {
                $data = [];
                $data['account_id'] = $_POST['nav_preID'];
                $data['order_type'] = $orderType;
                $data['distance'] = $distance;
                $data['created_date_time'] = date('Y-m-d H:i:s');
                $data['last_update'] = date('Y-m-d H:i:s');
                $this->_dbInsert($data, 'table_distance');
            }
        }
    }

    function addOrderUpdateTimeLimits()
    {
        $account_id = $_POST['nav_preID'];
        if (isset($_POST['salesman_ret_order_punch']) && !empty($_POST['salesman_ret_order_punch'])) {
            $dataSal = [];
            $dataSal['account_id'] = trim($account_id);
            $dataSal['app_type'] = 'Salesman_Ret_Order_Punch';
            $dataSal['time'] = trim($_POST['salesman_ret_order_punch']);
            $dataSal['created_at'] = date('Y-m-d H:i:s');
            $dataSal['updated_at'] = date('Y-m-d H:i:s');
            $this->_dbInsert($dataSal, 'table_order_updation_time_limit');
        }
        if (isset($_POST['salesman_dist_order_punch']) && !empty($_POST['salesman_dist_order_punch'])) {
            $dataSal = [];
            $dataSal['account_id'] = trim($account_id);
            $dataSal['app_type'] = 'Salesman_Dist_Order_Punch';
            $dataSal['time'] = trim($_POST['salesman_dist_order_punch']);
            $dataSal['created_at'] = date('Y-m-d H:i:s');
            $dataSal['updated_at'] = date('Y-m-d H:i:s');
            $this->_dbInsert($dataSal, 'table_order_updation_time_limit');
        }
        if (isset($_POST['retailer_order_punch']) && !empty($_POST['retailer_order_punch'])) {
            $dataSal = [];
            $dataSal['account_id'] = trim($account_id);
            $dataSal['app_type'] = 'Retailer_Order_Punch';
            $dataSal['time'] = trim($_POST['retailer_order_punch']);
            $dataSal['created_at'] = date('Y-m-d H:i:s');
            $dataSal['updated_at'] = date('Y-m-d H:i:s');
            $this->_dbInsert($dataSal, 'table_order_updation_time_limit');
        }
        if (isset($_POST['distributor_order_punch']) && !empty($_POST['distributor_order_punch'])) {
            $dataSal = [];
            $dataSal['account_id'] = trim($account_id);
            $dataSal['app_type'] = 'Distributor_Order_Punch';
            $dataSal['time'] = trim($_POST['distributor_order_punch']);
            $dataSal['created_at'] = date('Y-m-d H:i:s');
            $dataSal['updated_at'] = date('Y-m-d H:i:s');
            $this->_dbInsert($dataSal, 'table_order_updation_time_limit');
        }
        if (isset($_POST['time_limit_salesman_ret_order']) && !empty($_POST['time_limit_salesman_ret_order'])) {
            $dataSal = [];
            $dataSal['account_id'] = trim($account_id);
            $dataSal['app_type'] = 'Salesman_RO';
            $dataSal['time'] = trim($_POST['time_limit_salesman_ret_order']);
            $dataSal['no_of_days'] = trim($_POST['day_limit_salesman_ret_order']);
            $dataSal['created_at'] = date('Y-m-d H:i:s');
            $dataSal['updated_at'] = date('Y-m-d H:i:s');
            $this->_dbInsert($dataSal, 'table_order_updation_time_limit');
        }
        if (isset($_POST['time_limit_salesman_dist_order']) && !empty($_POST['time_limit_salesman_dist_order'])) {
            $dataSal = [];
            $dataSal['account_id'] = trim($account_id);
            $dataSal['app_type'] = 'Salesman_DO';
            $dataSal['time'] = trim($_POST['time_limit_salesman_dist_order']);
            $dataSal['no_of_days'] = trim($_POST['day_limit_salesman_dist_order']);
            $dataSal['created_at'] = date('Y-m-d H:i:s');
            $dataSal['updated_at'] = date('Y-m-d H:i:s');
            $this->_dbInsert($dataSal, 'table_order_updation_time_limit');
        }
        if (isset($_POST['time_limit_retailer']) && !empty($_POST['time_limit_retailer'])) {
            $dataSal = [];
            $dataSal['account_id'] = trim($account_id);
            $dataSal['app_type'] = 'Retailer';
            $dataSal['time'] = trim($_POST['time_limit_retailer']);
            $dataSal['no_of_days'] = trim($_POST['day_limit_retailer']);
            $dataSal['created_at'] = date('Y-m-d H:i:s');
            $dataSal['updated_at'] = date('Y-m-d H:i:s');
            $this->_dbInsert($dataSal, 'table_order_updation_time_limit');
        }
        if (isset($_POST['time_limit_distributor']) && !empty($_POST['time_limit_distributor'])) {
            $dataSal = [];
            $dataSal['account_id'] = trim($account_id);
            $dataSal['app_type'] = 'Distributor';
            $dataSal['time'] = trim($_POST['time_limit_distributor']);
            $dataSal['no_of_days'] = trim($_POST['day_limit_distributor']);
            $dataSal['created_at'] = date('Y-m-d H:i:s');
            $dataSal['updated_at'] = date('Y-m-d H:i:s');
            $this->_dbInsert($dataSal, 'table_order_updation_time_limit');
        }
        if (isset($_POST['delivery_edit_time_limit']) && !empty($_POST['delivery_edit_time_limit'])) {
            $dataSal = [];
            $dataSal['account_id'] = trim($account_id);
            $dataSal['app_type'] = 'delivery_edit_time_limit';
            $dataSal['time'] = trim($_POST['delivery_edit_time_limit']);
            $dataSal['created_at'] = date('Y-m-d H:i:s');
            $dataSal['updated_at'] = date('Y-m-d H:i:s');
            $this->_dbInsert($dataSal, 'table_order_updation_time_limit');
        }
        return true;
    }
    /*---------------------Ends Tracking Location--------------------------------------------------------------*/
    /************* Add Email Scheduler 07 August 2014  ***********************************/
    function addEmailSchedule()
    {
        $data['account_id'] = trim($_SESSION['accountId']);
        $data['user_type'] = trim($_POST['user_type']);
        $data['user_id'] = trim($_POST['user_id']);
        $data['report_id'] = implode(',', $_POST['report_id']);
        $data['from_date'] = trim(date('Y-m-d', strtotime($_POST['from'])));
        $data['to_date'] = trim(date('Y-m-d', strtotime($_POST['to'])));
        $data['sent_nature'] = trim($_POST['sent_nature']);
        $data['weekday'] = trim($_POST['weekday']);
        $data['additional_emails'] = trim($_POST['additional_emails']);
        $data['web_user_id'] = trim($_SESSION['web_user_id']);
        $data['status'] = trim('A');
        $data['created'] = date('Y-m-d H:i:s');
        //echo "<pre>"; print_r($data);exit;
        $rpt_schdle_id = $this->_dbInsert($data, 'table_report_schedule');
        return $rpt_schdle_id;
    }

    function updateEmailSchedule($id)
    {
        $data['account_id'] = trim($_SESSION['accountId']);
        $data['user_type'] = trim($_POST['user_type']);
        $data['user_id'] = trim($_POST['user_id']);
        $data['report_id'] = implode(',', $_POST['report_id']);
        $data['from_date'] = trim(date('Y-m-d', strtotime($_POST['from'])));
        $data['to_date'] = trim(date('Y-m-d', strtotime($_POST['to'])));
        $data['sent_nature'] = trim($_POST['sent_nature']);
        $data['weekday'] = trim($_POST['weekday']);
        $data['additional_emails'] = trim(mysql_escape_string($_POST['additional_emails']));
        $data['web_user_id'] = trim($_SESSION['web_user_id']);
        $data['status'] = trim('A');
        //$data['created']= date('Y-m-d H:i:s');
        $rpt_sch_id = $this->_dbUpdate($data, 'table_report_schedule', " rpt_schedule_id=" . $id);
        return $rpt_sch_id;
    }

    function showReportSchedule($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'RS.created';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objArrayList = new ArrayList();
        $userType = $_objArrayList->checkUserType();
        if (count($salesman) >= 1) {
            $salid = implode(",", $salesman);
        }
        if (isset($userType) && $userType == 5) {
            $where = "  AND RS.user_type = " . $userType . " AND RS.user_id IN ($salid) ";
        } elseif (isset($userType) && in_array($userType, array(3, 4, 6, 2))) {
            $where = "  AND RS.user_type = " . $userType;
        }
        if ($query) $where .= "  AND $cond $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_report_schedule AS RS LEFT JOIN table_user_type AS T ON T.id = RS.user_type ', 'RS.*, T.type', $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_report_schedule AS RS LEFT JOIN table_user_type AS T ON T.id = RS.user_type ', 'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $type = $auRec[$i]->user_type;
            $data = '';
            switch ($type) {
                case 1 :
                    $data = $this->_getSelectList('table_web_users AS U LEFT JOIN table_account
 AS A ON A.account_id = U.account_id ', 'A.company_name,A.account_id', '', " A.status='A' AND U.user_type = " . $type . " AND A.end_date>=" . date('Y-m-d') . " ORDER BY A.company_name");
                    $user_name = $data[0]->company_name;
                    break;
                case 2 :
                    $data = $this->_getSelectList('table_web_users AS U LEFT JOIN table_account_admin
 AS A ON A.operator_id = U.operator_id ', 'A.operator_name,A.account_id', '', " A.status='A' AND U.user_type = " . $type . " AND A.end_date>=" . date('Y-m-d') . " ORDER BY A.operator_name");
                    $user_name = $data[0]->operator_name;
                    break;
                case 3 :
                    $data = $this->_getSelectList('table_distributors AS D', 'D.distributor_id,D.distributor_name', '', " D.status='A' AND D.distributor_id = " . $auRec[$i]->user_id . " ORDER BY D.distributor_name");
                    $user_name = $data[0]->distributor_name;
                    break;
                case 4 :
                    $data = $this->_getSelectList('table_retailer AS R', 'R.retailer_id,R.retailer_name', '', " R.status='A' AND R.retailer_id = " . $auRec[$i]->user_id . " ORDER BY R.retailer_name");
                    $user_name = $data[0]->retailer_name;
                    break;
                case 5 :
                    $data = $this->_getSelectList('table_salesman AS S', 'S.salesman_id,S.salesman_name', '', " S.status='A' AND S.salesman_id = " . $auRec[$i]->user_id . " ORDER BY S.salesman_name");
                    $user_name = $data[0]->salesman_name;
                    break;
                case 6 :
                    $data = $this->_getSelectList('table_quality_checker AS Q', 'Q.qchecker_name, Q.qchecker_id', '', " Q.status='A' ORDER BY Q.qchecker_name");
                    $user_name = $data[0]->qchecker_name;
                    break;
                default :
                    $user_name = "-";
                    break;
            }
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"report_schedule_list.php?id=' . $auRec[$i]->rpt_schedule_id . '&value=' . $status . '\">' . $status . '</a>';
            $interval = ($auRec[$i]->sent_nature == 2) ? "Weekly" : "Daily";
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->rpt_schedule_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->type) . '"';
            $json .= ',"' . addslashes(ucwords($user_name)) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->from_date)) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->to_date)) . '"';
            $json .= ',"' . addslashes($interval) . '"';
            $json .= ',"' . addslashes($this->weekArray[$auRec[$i]->weekday]) . '"';
            $json .= ',"' . addslashes($auRec[$i]->additional_emails) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->created)) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /************* Add Email Scheduler 07 August 2014 ***********************************/
    /******** Not Visited Dealer List 14 JULY 2014 ************************/
    function showNotVisitedDealerReport()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',retailer_name desc';
        if (!$sortname) $sortname = 'retailer_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        if ($_SESSION['FromVisited'] != '' && $_SESSION['ToVisited'] != "") {
            $fromdate = " where date_of_order between '" . date('Y-m-d', strtotime($_SESSION['FromVisited'])) . "' and '" . date('Y-m-d', strtotime($_SESSION['ToVisited'])) . "'";
        }
        $where = " retailer_id NOT IN ( SELECT retailer_id FROM table_order $fromdate )";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer as tr
          LEFT JOIN table_distributors as d on d.distributor_id = tr.distributor_id
		  LEFT JOIN city AS c ON c.city_id=tr.city
		  LEFT JOIN state AS s ON s.state_id=tr.state
		  LEFT JOIN table_relationship as rr on rr.relationship_id=tr.relationship_id', "tr.retailer_id,d.distributor_name,d.distributor_code,tr.retailer_code, tr.retailer_name, tr.retailer_address, rr.relationship_code, tr.retailer_phone_no, tr.retailer_location,c.city_name,s.state_name", $rp, $where, $sort, '');
        $auRecCount = $this->_getSelectList('table_retailer as tr
          LEFT JOIN table_distributors as d on d.distributor_id = tr.distributor_id
		  LEFT JOIN city AS c ON c.city_id=tr.city
		  LEFT JOIN state AS s ON s.state_id=tr.state
		  LEFT JOIN table_relationship as rr on rr.relationship_id=tr.relationship_id', 'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->reatiler_id . '",';
            $json .= '"cell":["' . ucwords(addslashes(mysql_escape_string($auRec[$i]->retailer_name))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->relationship_code)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes(mysql_escape_string($auRec[$i]->retailer_address)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_phone_no) . '"';
            $json .= ',"' . addslashes(mysql_escape_string($auRec[$i]->retailer_location)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /******** Not Visited Dealer List 14 JULY 2014 ************************/
    /*******************************************************************
     * desc : SKU based promotions data grid
     * Created on : 05 January 2015
     * Author : AV
     */
    function showPromotion()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'I.item_code';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //$where = " account_id='".$_SESSION['accountId']."' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_promotion AS P 
			LEFT JOIN table_item AS I ON I.item_id = P.item_id 
			LEFT JOIN table_chain AS C ON C.chain_id = P.chain_id',
            "P.promotion_id, P.last_updated_on, P.promo_desc, P.start_date, P.end_date, P.status, I.item_id, I.item_name, I.item_code, I.status AS item_status, C.chain_name, C.status AS chain_status", $rp, $where . $sort, '');
        //echo "<pre>";
        //print_r($auRec);
        //exit;
        $auRecCount = $this->_getSelectList('table_promotion AS P LEFT JOIN table_item AS I ON I.item_id = P.item_id LEFT JOIN table_chain AS C ON C.chain_id = P.chain_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"promotion.php?stid=' . $auRec[$i]->promotion_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->promotion_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->chain_name) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->item_name). '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->promo_desc) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->start_date)) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->end_date)) . '"';
            $json .= ',"' . date('d M y h:i A', strtotime($auRec[$i]->last_updated_on)) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*******************************************************************
     * desc : SKU based promotions Add/update
     * Created on : 06 January 2015
     * Author : AV
     */
    function addPromotion()
    {
        $promo_desc = preg_replace("/\r|\n/", "", $_POST['promo_desc']);
        $promo_desc = mysql_escape_string(trim($promo_desc));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['chain_id'] = mysql_escape_string($_POST['chain_id']);
        $data['item_id'] = mysql_escape_string($_POST['item_id']);
        $data['promo_desc'] = $promo_desc;
        $data['start_date'] = mysql_escape_string($_POST['start_date']);
        $data['end_date'] = mysql_escape_string($_POST['end_date']);
        $data['last_updated_on'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_promotion');
        return $id;
    }

    function updatePromotion($id)
    {
        $promo_desc = preg_replace("/\r|\n/", "", $_POST['promo_desc']);
        $promo_desc = mysql_escape_string(trim($promo_desc));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['chain_id'] = mysql_escape_string($_POST['chain_id']);
        $data['item_id'] = mysql_escape_string($_POST['item_id']);
        $data['promo_desc'] = $promo_desc;
        $data['start_date'] = mysql_escape_string($_POST['start_date']);
        $data['end_date'] = mysql_escape_string($_POST['end_date']);
        $data['last_updated_on'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_promotion', " promotion_id=" . $id);
    }

    /*----------------------------
	 Show Retailer channel List
	 date : 19 may
	 By   : Nizam
    */
    function showRetailerChannel()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'channel_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasChannel']) && $_SESSION['MasChannel'] != 'all' && $_SESSION['MasChannel'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasChannel'] . "'";
        }
        $where = " $statusCondi ";
        //Todo End : sudhanshu 13 june 2024 : add status filter
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer_channel_master AS C', "C.*, C.channel_name ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_retailer_channel_master AS C', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"channel.php?statusId=' . $auRec[$i]->channel_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->channel_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->channel_name) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /*********************************** END of city *****************************************************************/
    /*
 Discription :Add retailer channel
 date : 20 may
 by : Nizam
 */
    public function addRetailerChannel()
    {
        $data['channel_name'] = $this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['channel_name']));
        $data['account_id'] = $_SESSION['accountId'];
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_retailer_channel_master');
        return $id;
    }

    /*
 Discription :Check retailer chennel already exits or not.
 date : 20 may
 by : Nizam
 */
    public function retailerChannelExits()
    {
        if ($_POST['channel_id'] != "") {
            $cond = " channel_name='" . trim($_POST['channel_name']) . "' and channel_id<>'" . $_POST['channel_id'] . "' ";
        } else {
            $cond = " channel_name='" . trim($_POST['channel_name']) . "' ";
        }
        $channel = $this->_getSelectList('table_retailer_channel_master', "*", '', $cond);
        if (is_array($channel)) {
            return true;
        }
    }

    /*
 Discription :Edit retailer chennel.
 date : 20 may
 by : Nizam
 */
    public function retailerChannelEdit($id)
    {
        $channel = $this->_getSelectList('table_retailer_channel_master', "*", '', " channel_id='" . $id . "'");
        if (is_array($channel)) {
            return $channel;
        }
    }

    /*
 Discription :Update retailer chennel.
 date : 20 may
 by : Nizam
 */
    function updateRetailerChannel($id)
    {
        $data['channel_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['channel_name'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $update = $this->_dbUpdate($data, 'table_retailer_channel_master', " channel_id=" . $id);
        return $id;
    }

    /*-------------------------------------------
	 Discription: Show Brands List
	 date 		: 19 may
	 By   		: Nizam
 --------------------------------------------*/
    function showBrands()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'brand_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasBrand']) && $_SESSION['MasBrand'] != 'all' && $_SESSION['MasBrand'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasBrand'] . "'";
            $where = " $statusCondi ";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_brands AS B', "B.*, B.brand_name ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_brands AS B', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"brands.php?statusId=' . $auRec[$i]->brand_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->brand_id . '",';
            $json .= '"cell":["' . $this->toCamelCase(addslashes($auRec[$i]->brand_name)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*
 Discription :  Check Brands name already exits or not.
 date 		 :  21 may
 by          :  Nizam
 */
    public function brandExits()
    {
        if ($_POST['brand_id'] != "") {
            $cond = " brand_name='" . trim($_POST['brand_name']) . "' and brand_id<>'" . $_POST['brand_id'] . "' ";
        } else {
            $cond = " brand_name='" . trim($_POST['brand_name']) . "' ";
        }
        $brand = $this->_getSelectList('table_brands', "*", '', $cond);
        if (is_array($brand)) {
            return true;
        }
    }

    /*
 Discription :Update retailer chennel.
 date : 20 may
 by : Nizam
 */
    function updateBrand($id)
    {
        $data['brand_name'] = mysql_escape_string(trim($_POST['brand_name']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $update = $this->_dbUpdate($data, 'table_brands', " brand_id=" . $id);
        return $id;
    }

    /*
 Discription : Add Brands
 date 		 : 20 may
 by 		 : Nizam
 */
    public function addBrands()
    {
        $data['brand_name'] = trim($_POST['brand_name']);
        $data['account_id'] = $_POST['account_id'];
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_brands');
        return $id;
    }

    /*
 Discription :Edit Brands .
 date : 21 may
 by : Nizam
 */
    public function brandEdit($id)
    {
        $brands = $this->_getSelectList('table_brands', "*", '', " brand_id='" . $id . "'");
        if (is_array($brands)) {
            return $brands;
        }
    }

    /*-------------------------------------------
	 Discription: Show Offer List
	 date 		: 19 may
	 By   		: Nizam
 --------------------------------------------*/
    function showOffer()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'offer_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasOffer']) && $_SESSION['MasOffer'] != 'all' && $_SESSION['MasOffer'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasOffer'] . "'";
            $where = " $statusCondi ";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_offer AS O', "O.*, O.offer_name ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_offer AS O', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"offer.php?statusId=' . $auRec[$i]->offer_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->offer_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->offer_name) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*
 Discription :Edit offer .
 date : 21 may
 by : Nizam
 */
    public function offerEdit($id)
    {
        $offers = $this->_getSelectList('table_offer', "*", '', " offer_id='" . $id . "'");
        if (is_array($offers)) {
            return $offers;
        }
    }

    /*
 Discription :  Check Brands name already exits or not.
 date 		 :  21 may
 by          :  Nizam
 */
    public function offerExits()
    {
        if ($_POST['offer_id'] != "") {
            $cond = " offer_name='" . trim($_POST['offer_name']) . "' and offer_id<>'" . $_POST['offer_id'] . "' ";
        } else {
            $cond = " offer_name='" . trim($_POST['offer_name']) . "' ";
        }
        $offer = $this->_getSelectList('table_offer', "*", '', $cond);
        if (is_array($offer)) {
            return true;
        }
    }

    /*
 Discription :Update offer chennel.
 date : 20 may
 by : Nizam
 */
    function updateOffer($id)
    {
        $data['offer_name'] = mysql_escape_string(trim($_POST['offer_name']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $update = $this->_dbUpdate($data, 'table_offer', " offer_id=" . $id);
        return $id;
    }

    /*
 Discription : Add Brands
 date 		 : 20 may
 by 		 : Nizam
 */
    public function addOffer()
    {
        $data['offer_name'] = trim($_POST['offer_name']);
        $data['account_id'] = $_POST['account_id'];
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_offer');
        return $id;
    }

    /*-------------------------------------------
	 Discription: Show Offer List
	 date 		: 19 may
	 By   		: Nizam
 --------------------------------------------*/
    function showCases()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'case_size';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasCase']) && $_SESSION['MasCase'] != 'all' && $_SESSION['MasCase'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasCase'] . "'";
            $where = " $statusCondi";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_cases AS C', "C.*, C.case_size ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_cases AS C', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"cases.php?statusId=' . $auRec[$i]->case_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->case_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->case_description) . '"';
            $json .= ',"' . addslashes($auRec[$i]->case_size) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*
 Discription :Edit cases .
 date : 21 may
 by : Nizam
 */
    public function CasesEdit($id)
    {
        $cases = $this->_getSelectList('table_cases', "*", '', " case_id='" . $id . "'");
        if (is_array($cases)) {
            return $cases;
        }
    }

    /*
 Discription :  Check Case name already exits or not.
 date 		 :  21 may
 by          :  Nizam
 */
    public function caseExits()
    {
        if ($_POST['case_id'] != "") {
            $cond = " case_size='" . trim($_POST['case_size']) . "' and case_description='" . trim($_POST['case_description']) . "' and case_id<>'" . $_POST['case_id'] . "' ";
        } else {
            $cond = " case_size='" . trim($_POST['case_size']) . "' and case_description='" . trim($_POST['case_description']) . "' ";
        }
        $case = $this->_getSelectList('table_cases', "*", '', $cond);
        if (is_array($case)) {
            return true;
        }
    }

    /*
 Discription :Update Cases .
 date : 20 may
 by : Nizam
 */
    function updateCase($id)
    {
        $data['case_description'] = trim($_POST['case_description']);
        $data['case_size'] = trim($_POST['case_size']);
        $data['account_id'] = $_POST['account_id'];
        $data['status'] = 'A';
        $update = $this->_dbUpdate($data, 'table_cases', " case_id=" . $id);
        return $id;
    }

    /*
 Discription : Add Cases
 date 		 : 20 may
 by 		 : Nizam
 */
    public function addCase()
    {
        $data['case_description'] = trim($_POST['case_description']);
        $data['case_size'] = trim($_POST['case_size']);
        $data['account_id'] = $_POST['account_id'];
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_cases');
        return $id;
    }

    /* Stock Transfer */
    public function stockTransfer()
    {
        if ($_POST['stock_val'] != "") {
            $_SESSION['value'] = '';
            unset($_SESSION['value']);
            $stkbfrAct = 0;
            if (isset($_POST['stockId']) && sizeof($_POST['stockId']) > 0 && isset($_POST['sal_stock_value']) && sizeof($_POST['sal_stock_value']) > 0) {
                foreach ($_POST['stockId'] as $key => $value) {
                    if (!empty($_POST['sal_stock_value'][$key]) && $_POST['sal_stock_value'][$key] > 0) {
                        $data = array();
                        # code...
                        //echo $value;
                        $cond = " dis_stk_inpro_id='" . $value . "' ";
                        $stockVal = $this->_getSelectList('table_item_dis_stk_inprocess', "*", '', $cond);
                        if (($stockVal[0]->acpt_stock_value + $_POST['sal_stock_value'][$key]) > $stockVal[0]->rec_stock_value) {
                            $_SESSION['value'] = " Entered QTY " . $_POST['sal_stock_value'][$key] . " is grater than the pending QTY " . ($stockVal[$key]->rec_stock_value - $stockVal[0]->acpt_stock_value);
                        } else {
                            $data['acpt_stock_value'] = $stockVal[0]->acpt_stock_value + $_POST['sal_stock_value'][$key];
                            $data['status'] = 'A';
                            $data['bill_status'] = 'A';
                            $data['GRN_date'] = date('Y-m-d H:i:s');
                            $id = $this->_dbUpdate($data, 'table_item_dis_stk_inprocess', " dis_stk_inpro_id=" . $value);
                            /*Update Distributor stock */
                            $discon = " distributor_id='" . $stockVal[0]->distributor_id . "' and category_id='" . $stockVal[0]->category_id . "' and item_id='" . $stockVal[0]->item_id . "' and color_id='" . $stockVal[0]->attribute_value_id . "'";
                            $disStockValue = $this->_getSelectList('table_item_distributor_stock', "*", '', $discon);
                            $StkinvType = '';
                            if (is_array($disStockValue) && sizeof($disStockValue) > 0) {
                                $stkbfrAct = $disStockValue[0]->dis_stock_value;
                                if (strtolower($stockVal[0]->bill_type) == 'return') {
                                    $StkinvType = 'ret_rct_qty';
                                    $dataaccept['dis_stock_value'] = ($disStockValue[0]->dis_stock_value - $_POST['sal_stock_value'][$key]);
                                } else {
                                    $StkinvType = 'rct_qty';
                                    $dataaccept['dis_stock_value'] = ($disStockValue[0]->dis_stock_value + $_POST['sal_stock_value'][$key]);
                                }
                                $dataaccept['last_updated_date'] = date('Y-m-d');
                                $id = $this->_dbUpdate($dataaccept, 'table_item_distributor_stock', " dis_stk_id=" . $disStockValue[0]->dis_stk_id);
                                $flag = true;
                            } else {
                                if (strtolower($stockVal[0]->bill_type) == 'return') {
                                    $StkinvType = 'ret_rct_qty';
                                } else {
                                    $StkinvType = 'rct_qty';
                                }
                                $stkbfrAct = 0;
                                $datastk = array();
                                $datastk['account_id'] = $stockVal[0]->account_id;
                                $datastk['distributor_id'] = $stockVal[0]->distributor_id;
                                $datastk['item_id'] = $stockVal[0]->item_id;
                                $datastk['category_id'] = $stockVal[0]->category_id;
                                $datastk['attribute_value_id'] = $stockVal[0]->attribute_value_id;
                                $datastk['color_id'] = $stockVal[0]->color_id;
                                $datastk['dis_stock_value'] = ((strtolower($stockVal[0]->bill_type) == 'return') ? "-" . $_POST['sal_stock_value'][$key] : $_POST['sal_stock_value'][$key]);
                                $datastk['last_updated_date'] = date('Y-m-d');
                                $datastk['last_update_datetime'] = date('Y-m-d H:i:s');
                                $this->_dbInsert($datastk, 'table_item_distributor_stock');
                                $flag = true;
                            }
                            $this->updateDistQtySummary($StkinvType, $stockVal[0]->distributor_id, $stockVal[0]->item_id, intval(date('m', strtotime($stockVal[0]->bill_date))), date('Y', strtotime($stockVal[0]->bill_date)), $_POST['sal_stock_value'][$key]);
                            $Trans_data = array();
                            $Trans_data['distributor_id'] = $stockVal[0]->distributor_id;
                            $Trans_data['item_id'] = $stockVal[0]->item_id;
                            $Trans_data['stock_before_activity'] = $stkbfrAct;
                            $Trans_data['quantity'] = $_POST['sal_stock_value'][$key];
                            $Trans_data['stock_after_activity'] = ((strtolower($stockVal[0]->bill_type) == 'return') ? ($stkbfrAct - $_POST['sal_stock_value'][$key]) : ($stkbfrAct + $_POST['sal_stock_value'][$key]));
                            $Trans_data['activity_type'] = "GRN_REC";
                            $Trans_data['activity_date'] = date('Y-m-d');
                            $Trans_data['activity_time'] = date('H:i:s');
                            $this->_dbInsert($Trans_data, 'table_item_distributor_stock_transaction_activity');


                        }
                    }
                }
                if ($flag) {
                    return 1;
                }
            }
        }
    }

    /*
 Discription : Add Sales return
 date 		 : 20 may
 by 		 : Nizam
 */
    public function salesReturnAdd()
    {
        if (isset($_POST['itemcode']) && $_POST['item_id'] && $_POST['item_name']) {
            /*echo '<pre>';
           print_r($_POST);
           print_r($_SESSION);*/
            /*-- if sales return date is diffrent then we add as a new return --*/
            $auRetRec = $this->_getSelectList('table_sales_return', "*", '', " date_of_order='" . date('Y-m-d') . "' and time_of_order='" . date('H:i:s') . "' ");
            if (is_array($auRetRec)) {
                $data['distributor_id'] = $_SESSION['distributorId'];
                $data['retailer_id'] = $_SESSION['retailerId'];
                $data['salesman_id'] = $_SESSION['salesmanId'];
                $data['account_id'] = $_SESSION['accountId'];
                $data['date_of_order'] = date('Y-m-d');
                $data['time_of_order'] = date('H:i:s');
                $data['order_status'] = 'A';
                $aid = $this->_dbUpdate($data, 'table_sales_return', " sales_order_id=" . $auRetRec[0]->sales_order_id);
                $salesId = $auRetRec[0]->sales_order_id;
                $condition = " WHERE sales_order_id = " . $salesId;
                //mysql_query ('Delete FROM table_sales_return_detail'.$condition);
            } else {
                $data['distributor_id'] = $_SESSION['distributorId'];
                $data['retailer_id'] = $_SESSION['retailerId'];
                $data['salesman_id'] = $_SESSION['salesmanId'];
                $data['account_id'] = $_SESSION['accountId'];
                $data['date_of_order'] = date('Y-m-d');
                $data['time_of_order'] = date('H:i:s');
                $data['order_status'] = 'A';
                $salesId = $this->_dbInsert($data, 'table_sales_return');
            }
            /*  if sales return id is not blank then fill the entry into details table */
            if ($salesId != "") {
                foreach ($_POST['case'] as $key => $data) {
                    // Used array filter for removing empty and null values. //
                    $data = array_filter($data);
                    foreach ($data as $key1 => $value) {
                        $data2['sales_order_id'] = $salesId;
                        $data2['item_id'] = $key;
                        $data2['case_id'] = $key1;
                        $data2['quantity'] = $value;
                        $saleReturn = $this->_dbInsert($data2, 'table_sales_return_detail');
                    }
                }
                /*for($i=0;$i<count($_POST['case']); $i++)
           		{
           		    $data2['sales_order_id']  = $salesId;
           		    $data2['item_id']		  = $_POST['item_id'][$i];
           		    $data2['quantity']        = $_POST['qty'][$i];
           		    $saleReturn=$this->_dbInsert($data2,'table_sales_return_detail');
            	}*/
                if ($salesId != "" && $saleReturn != "") {
                    return $saleReturn;
                }
            }
        }
    }

    /*
 Discription : Distributor GRN stock
 date 		 : 20 may
 by 		 : Nizam
 */
    function showDistributorGrnStock()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'] . " , dis_stk_inpro_id desc";
        if (!$sortname) $sortname = 'c.category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " GROUP BY d.distributor_id,s.bill_date,s.bill_no ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $dis = " and d.distributor_id='" . $_SESSION['distributorId'] . "'";
        }
        $auRec = $this->_getSelectList('table_item_dis_stk_inprocess AS s 
		LEFT JOIN table_cases AS clr ON clr.case_id = s.attribute_value_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id', "d.distributor_code,d.distributor_name, c.category_name, clr.case_size, s.bill_date, s.bill_no, s.status, s.last_update_datetime,s.dis_stk_inpro_id", $rp, $where . $dis . $sort, '');
        /*echo '<pre>';
		print_r($auRec);*/
        $auRecCount = $this->_getSelectList('table_item_dis_stk_inprocess AS s 
		LEFT JOIN table_cases AS clr ON clr.case_id = s.attribute_value_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id', 's.*', '', $where . $dis . $sort);
        $total = sizeof($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Accepted" : "In-Process";
            //$status='<a href=\"master_category.php?stid='.$auRec[$i]->category_id.'&value='.$status.'\">'.$status.'</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->dis_stk_inpro_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->bill_date) . '"';
            $json .= ',"' . addslashes($auRec[$i]->bill_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->last_update_datetime) . '"]';
            //$json .= ',"'.$status.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*
 Discription : Sales Return Show In Flexigrid
 date 		 : 1 Jun
 by 		 : Nizam
 */
    function showReturns()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'd.distributor_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " AND s.distributor_id > 0 ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $dis = " and s.distributor_id='" . $_SESSION['distributorId'] . "' and s.retailer_id=0 ";
        }
        $auRec = $this->_getSelectList('table_sales_return AS s 
		LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id', "d.distributor_code,d.distributor_name,  s.last_update_date,s.sales_order_id,s.date_of_order,s.time_of_order", $rp, $where . $dis . $sort, '');
        $auRecCount = $this->_getSelectList('table_sales_return AS s 
		LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id', 's.*', '', $where . $dis . $sort);
        $total = sizeof($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Accepted" : "In-Process";
            //$status='<a href=\"master_category.php?stid='.$auRec[$i]->category_id.'&value='.$status.'\">'.$status.'</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->sales_order_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->date_of_order) . '"';
            $json .= ',"' . addslashes($auRec[$i]->time_of_order) . '"';
            $json .= ',"' . addslashes($auRec[$i]->last_update_date) . '"]';
            //$json .= ',"'.$status.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDistributorTarget()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'd.distributor_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
//		$start = (($page-1) * $rp);
//		$limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($_SESSION['distributorId'] != 0) {
            $dis = " and dt.distributor_id=" . $_SESSION['distributorId'];
        }
        $auRec = $this->_getSelectList('table_distributors_target AS dt 
		LEFT JOIN table_distributors AS d ON d.distributor_id = dt.distributor_id', "d.distributor_code,d.distributor_name,dt.distributor_target_id,dt.target_month,dt.target_year,dt.target_type,dt.status", $rp, $where . $dis . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributors_target AS dt 
		LEFT JOIN table_distributors AS d ON d.distributor_id = dt.distributor_id', 'count(*) as total', '', $where . $dis);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $disTragetType = ($auRec[$i]->target_type == 1) ? "Primary" : "Secondary";
            $monthName = $this->getMonthName($auRec[$i]->target_month);
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"distributortarget.php?stid=' . $auRec[$i]->distributor_target_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_target_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($disTragetType) . '"';
            $json .= ',"' . addslashes($monthName) . '"';
            $json .= ',"' . addslashes($auRec[$i]->target_year) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->status).'"]';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*
 Discription : Add Sales return
 date 		 : 20 may
 by 		 : Nizam
 */
    public function distributorTargetAdd()
    {
        if (isset($_POST['item_id'])) {
            //echo '<pre>';
            //print_r($_POST);
            // print_r($_SESSION);
            //exit;
            $targetMonth = ltrim($_SESSION['dismonth'], '0');
            $targetYear = $_SESSION['disCyear'];
            $disId = $_SESSION['TargetdisId'];
            $targetType = $_REQUEST['target_type'];
            if (isset($_SESSION['dismonth']) && $_SESSION['dismonth'] != '' && isset($_SESSION['disCyear']) && $_SESSION['disCyear'] != '' && isset($_SESSION['TargetdisId']) && $_SESSION['TargetdisId'] != '') {
                $data['account_id'] = $_SESSION['accountId'];
                $data['distributor_id'] = $disId;
                $data['target_type'] = $targetType;
                $data['target_month'] = $targetMonth;
                $data['target_year'] = $targetYear;
                $data['created_date'] = date('Y-m-d');
                $data['last_update_date'] = date('Y-m-d');
                $data['last_update_status'] = 'New';
                $data['status'] = 'A';
                $disTargetId = $this->_dbInsert($data, 'table_distributors_target');
            }
            /*  if sales return id is not blank then fill the entry into details table */
            if ($disTargetId != "") {
                foreach ($_POST['case'] as $key => $data) {
                    //$i=0;
                    // Used array filter for removing empty and null values. //
                    $data = array_filter($data);
                    //print_r($key);
                    foreach ($data as $key1 => $value) {
                        $getCaseList = $this->_getSelectList2('table_item_case_relationship as c left join table_cases as ca on c.case_id=ca.case_id', "ca.case_size", '', " c.item_id='" . $key . "' and ca.case_id='" . $key1 . "' ORDER BY ca.case_size", '');
                        $data2['distributor_target_id'] = $disTargetId;
                        $data2['item_id'] = $key;
                        $data2['case_id'] = $key1;
                        $data2['no_of_cases'] = $value;
                        $data2['target_type'] = $targetType;
                        $data2['total_quantity'] = ($getCaseList[0]->case_size) * $value;
                        $data2['last_update_date'] = date('Y-m-d');
                        $data2['last_update_status'] = "New";
                        $data2['status'] = "A";
                        $disTargetItem = $this->_dbInsert($data2, 'table_distributors_target_item');
                        //print_r($data2);
                    }
                    //$i=$i+1;
                }
                if ($disTargetId != "" && $disTargetItem != "") {
                    return $disTargetId;
                }
            }
        }
    }

    public function distributorTargetDetailes($id)
    {
        $auRec = $this->_getSelectList('table_distributors_target AS dt 
		LEFT JOIN table_distributors AS d ON d.distributor_id = dt.distributor_id', "d.distributor_code,d.distributor_name,dt.distributor_target_id,dt.target_month,dt.target_year,dt.target_type,dt.status", '', " dt.distributor_target_id='" . $id . "'", '');
        return $auRec;
    }

    public function distributorTargetItemDetailes($id)
    {
        $auRec = $this->_getSelectList2('table_distributors_target_item  AS dt 
		LEFT JOIN table_distributors_target AS d ON d.distributor_target_id = dt.distributor_target_id left join table_item as i on i.item_id=dt.item_id', "dt.*,i.item_code,i.item_name", '', " dt.distributor_target_id='" . $id . "' GROUP BY dt.item_id", '');
        return $auRec;
    }

    public function distributorTargetItemCaseDetailes($targetId, $itemId, $caseId)
    {
        //echo $targetId."-".$itemId."-".$caseId;
        $auRec = $this->_getSelectList2('table_distributors_target_item  AS dt 
		LEFT JOIN table_distributors_target AS d ON d.distributor_target_id = dt.distributor_target_id left join table_item as i on i.item_id=dt.item_id', "dt.*", '', " dt.distributor_target_id='" . $targetId . "' and dt.item_id='" . $itemId . "' and dt.case_id='" . $caseId . "'", '');
        return $auRec;
    }

    public function distributorTargetUpdate()
    {
        $targetType = $_REQUEST['target_type'];
        if (isset($_POST['itemcode']) && $_POST['item_id'] && $_POST['item_name']) {
            $distributorTargetID = $_POST['disTargetID'];
            if (isset($distributorTargetID) && $distributorTargetID != '') {
                foreach ($_POST['case'] as $key => $caseData) {
                    // Used array filter for removing empty and null values. //
                    $caseData = array_filter($caseData);
                    foreach ($caseData as $key1 => $value) {
                        $auRec = $this->_getSelectList2('table_distributors_target_item  AS dt 
		LEFT JOIN table_distributors_target AS d ON d.distributor_target_id = dt.distributor_target_id left join table_item as i on i.item_id=dt.item_id', "dt.*", '', " dt.distributor_target_id='" . $distributorTargetID . "' and dt.item_id='" . $key . "' and dt.case_id='" . $key1 . "'", '');
                        if (sizeof($auRec) > 0) {
                            $getCaseList = $this->_getSelectList2('table_item_case_relationship as c left join table_cases as ca on c.case_id=ca.case_id', "ca.case_size", '', " c.item_id='" . $key . "' and ca.case_id='" . $key1 . "' ORDER BY ca.case_size", '');
                            $data['no_of_cases'] = $value;
                            $data['total_quantity'] = ($getCaseList[0]->case_size) * $value;
                            //$data['no_of_cases']     = $value;
                            $disTargetItem = $this->_dbUpdate2($data, 'table_distributors_target_item', " target_item_id='" . $auRec[0]->target_item_id . "'");
                        } else {
                            $getCaseList = $this->_getSelectList2('table_item_case_relationship as c left join table_cases as ca on c.case_id=ca.case_id', "ca.case_size", '', " c.item_id='" . $key . "' and ca.case_id='" . $key1 . "' ORDER BY ca.case_size", '');
                            $data2['distributor_target_id'] = $distributorTargetID;
                            $data2['item_id'] = $key;
                            $data2['case_id'] = $key1;
                            $data2['no_of_cases'] = $value;
                            $data2['total_quantity'] = ($getCaseList[0]->case_size) * $value;
                            $data2['target_type'] = $targetType;
                            $data2['last_update_date'] = date('Y-m-d');
                            $data2['last_update_status'] = "New";
                            $data2['status'] = "A";
                            $disTargetItem = $this->_dbInsert($data2, 'table_distributors_target_item');
                        }
                    }
                }
                if ($distributorTargetID != "" || $disTargetItem != "") {
                    return $distributorTargetID;
                }
            }
        }
    }

    /********* get Achivements****************/
    public function getDistributorsAchivements($distributor_id, $achMonth, $achYear, $targetType, $itemId, $caseId)
    {
        if (isset($distributor_id) && $achMonth && $achYear && $targetType) {
            if (isset($targetType) && $targetType == 1) {
                if ($itemId !== 'null') {
                    $itemCond = "and item_id='" . $itemId . "'";
                }
                if ($caseId !== 'null') {
                    $caseCond = "and attribute_value_id='" . $caseId . "'";
                }
                $getDistributorAchivementDetails = $this->_getSelectList('table_item_dis_stk_inprocess', "SUM(acpt_stock_value) as totalAchivement", '', " MONTH(last_update_datetime)='" . $achMonth . "' and YEAR(last_update_datetime)='" . $achYear . "' and distributor_id='" . $distributor_id . "' $itemCond $caseCond", '');
            } else if (isset($targetType) && $targetType == 2) {
                if ($itemId !== 'null') {
                    $itemCond = "and od.item_id='" . $itemId . "'";
                }
                $getDistributorAchivementDetails = $this->_getSelectList('table_order as o left join table_order_detail as od on o.order_id=od.order_id', "SUM(acc_quantity) as totalAchivement", '', " MONTH(date_of_order)='" . $achMonth . "' and YEAR(date_of_order)='" . $achYear . "' and distributor_id='" . $distributor_id . "' $itemCond", '');
            }
            $achiveTarget = $getDistributorAchivementDetails[0]->totalAchivement;
        }
        return $achiveTarget;
    }
    /********* get Achivements****************/
    /********* get Achivements By Date****************/
    public function getDistributorsAchivementsByDate($distributor_id, $achFrmDate, $achToDate, $targetType, $itemId, $caseId)
    {
        if (isset($distributor_id) && $achFrmDate && $achToDate && $targetType) {
            if (isset($targetType) && $targetType == 1) {
                if ($itemId !== 'null') {
                    $itemCond = "and item_id='" . $itemId . "'";
                }
                if ($caseId !== 'null') {
                    $caseCond = "and attribute_value_id='" . $caseId . "'";
                }
                $getDistributorAchivementDetails = $this->_getSelectList('table_item_dis_stk_inprocess', "SUM(acpt_stock_value) as totalAchivement", '', " DATE(last_update_datetime) >= '" . date('Y-m-d', strtotime(mysql_escape_string($achFrmDate))) . "' and DATE(last_update_datetime) <= '" . date('Y-m-d', strtotime(mysql_escape_string($achToDate))) . "' and distributor_id='" . $distributor_id . "' $itemCond $caseCond", '');
            } else if (isset($targetType) && $targetType == 2) {
                if ($itemId !== 'null') {
                    $itemCond = "and od.item_id='" . $itemId . "'";
                }
                $getDistributorAchivementDetails = $this->_getSelectList('table_order as o left join table_order_detail as od on o.order_id=od.order_id', "SUM(acc_quantity) as totalAchivement", '', " DATE(date_of_order) >= '" . date('Y-m-d', strtotime(mysql_escape_string($achFrmDate))) . "' and DATE(date_of_order) <= '" . date('Y-m-d', strtotime(mysql_escape_string($achToDate))) . "' and distributor_id='" . $distributor_id . "' $itemCond", '');
            }
            $achiveTarget = $getDistributorAchivementDetails[0]->totalAchivement;
        }
        return $achiveTarget;
    }
    /********* get Achivements****************/
    /************ Add Open Discount *******************/
    function addOpenDiscount($id)
    {
        $data['is_open'] = mysql_escape_string($_POST['open_discount']);
        $dis_id = $this->_dbUpdate($data, 'table_discount', " discount_id=" . $id);
        return $dis_id;
    }
    /************ Add Open Discount *******************/
    /************ Add Distributor Discount(Gaurav) *******************/
    function addDisDiscount($id)
    {
        $data['is_dis_discount'] = mysql_escape_string($_POST['dis_discount']);
        if ($_POST['dis_discount'] == 1) {
            $data['party_type'] = 4;
            $dis_id = $this->_dbUpdate($data, 'table_discount', " discount_id=" . $id);
            $data2['discount_id'] = $id;
            $data2['relationship_id'] = implode(',', $_POST['relationship']);
            $data2['state_id'] = implode(',', $_POST['state']);
            $data2['city_id'] = implode(',', $_POST['city']);
            $data2['distributor_id'] = implode(',', $_POST['distributor']);
            $rou_id = $this->_dbInsert($data2, 'table_discount_distributor_mapping');
        }
        //print_r($_POST['dis_discount']);exit;
        return $dis_id;
    }
    /************ End Distributor Discount *******************/
    /*----------------------------
	 Show Retailer Type List
	 date : 19 may
	 By   : Nizam
    */
    function showRetailerType()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'type_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasRetType']) && $_SESSION['MasRetType'] != 'all' && $_SESSION['MasRetType'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasRetType'] . "'";
        }
        $where = " $statusCondi";
        //Todo End : sudhanshu 13 june 2024 : add status filter

        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList(' table_retailer_type_master AS C', "C.*, C.type_name ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList(' table_retailer_type_master AS C', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"retailer_type.php?statusId=' . $auRec[$i]->type_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->type_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->type_name) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*
 Discription :Add retailer Type
 date : 10 Jun
 by : Nizam
 */
    public function addRetailerType()
    {
        $data['type_name'] = $this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['type_name']));
        $data['account_id'] = $_SESSION['accountId'];
        $data['status'] = 'A';
        $data['create_date'] = date('Y-m-d');
        $id = $this->_dbInsert($data, 'table_retailer_type_master');
        return $id;
    }

    /*
 Discription :Check retailer Type already exits or not.
 date : 10 Jun
 by : Nizam
 */
    public function retailerTypeExits()
    {
        if ($_POST['type_id'] != "") {
            $cond = " type_name='" . trim($_POST['type_name']) . "' and type_id<>'" . $_POST['type_id'] . "' ";
        } else {
            $cond = " type_name='" . trim($_POST['type_name']) . "' ";
        }
        $channel = $this->_getSelectList('table_retailer_type_master', "*", '', $cond);
        if (is_array($channel)) {
            return true;
        }
    }

    /*
 Discription :Edit retailer Type.
 date : 10 Jun
 by : Nizam
 */
    public function retailerTypeEdit($id)
    {
        $channel = $this->_getSelectList('table_retailer_type_master', "*", '', " type_id='" . $id . "'");
        if (is_array($channel)) {
            return $channel;
        }
    }

    /*
 Discription :Update retailer Type.
 date : 10 Jun
 by : Nizam
 */
    function updateRetailerType($id)
    {
        $data['type_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['type_name'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $update = $this->_dbUpdate($data, 'table_retailer_type_master', " type_id=" . $id);
        return $id;
    }

    /***************************************************************************************
     * DESC : Order list of retailer taken by distributor Panel
     * Author : AJAY
     * Created : 9th June 2015
     *
     **/
    function showRetailerOrderByDistributor($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if (isset($_SESSION['distributorId']) && $_SESSION['distributorId'] != 0) {
            $distributor_id = " AND O.distributor_id =" . $_SESSION['distributorId'];
        }
        if ($_SESSION['FromOrderList'] != '') {
            //$fromdate = " AND O.date_of_order >= '".date('Y-m-d', strtotime($_SESSION['FromOrderList']))."'";
        } else {
            //$fromdate = " and O.date_of_order >= '".date('Y-m-d')."'";
        }
        if ($_SESSION['ToOrderList'] != '') {
            //$todate=" AND O.date_of_order <= '".date('Y-m-d', strtotime($_SESSION['ToOrderList']))."'";
        } else {
            //$todate=" AND O.date_of_order <= '".date('Y-m-d')."'";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and O.order_type='Adhoc' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and O.order_type!='Adhoc' ";
            }
        } else {
            $orderby = "";
        }
        $where = " $fromdate $todate and R.new=''  $distributor_id  $orderby AND O.order_for='R' AND O.ref_order_id=0 AND O.account_id =" . $_SESSION['accountId'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order_tmp AS O LEFT JOIN table_retailer AS R ON O.retailer_id = R.retailer_id 
  LEFT JOIN table_salesman AS S ON O.salesman_id = S.salesman_id 
  LEFT JOIN table_distributors AS D ON O.distributor_id = D.distributor_id',
            " O.*,R.retailer_name,R.retailer_address,R.retailer_location, R.lat as retlat, R.lng as retlng, S.salesman_name, D.distributor_name ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_order_tmp AS O LEFT JOIN table_retailer AS R ON O.retailer_id = R.retailer_id LEFT JOIN table_salesman AS S ON O.salesman_id = S.salesman_id LEFT JOIN table_distributors AS D ON O.distributor_id = D.distributor_id ', 'COUNT(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->order_type == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "P";
            } else {
                $color = '';
            }
            $status = "Not Confirmed";
            $auRec2 = $this->_getSelectList2('table_order_tmp_detail', "count( distinct(item_id)) as total_item", '', " order_tmp_id = " . $auRec[$i]->order_tmp_id . " and type = 1");
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            //$salDetails = $this->getSalesmanFullDetails($auRec[$i]->salesman_id);
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_tmp_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->order_tmp_id)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->acc_total_invoice_amount)) . '"';
            $json .= ',"' . $date_of_order . '&nbsp;' . date("h:i A.", strtotime($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDistributorOrder($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if (isset($_SESSION['distributorId']) && $_SESSION['distributorId'] != 0) {
            $distributor_id = " AND O.distributor_id =" . $_SESSION['distributorId'];
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and O.order_type='Adhoc' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and O.order_type!='Adhoc' ";
            }
        } else {
            $orderby = "";
        }
        $where = " $distributor_id  $orderby AND O.account_id =" . $_SESSION['accountId'] . " and O.ref_order_id=0 and O.order_for='D' and O.order_status='A'";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order_tmp AS O 
			  LEFT JOIN table_salesman AS S ON O.salesman_id = S.salesman_id 
			  LEFT JOIN table_distributors AS D ON O.distributor_id = D.distributor_id',
            " O.*,S.salesman_name, D.distributor_name ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_order_tmp AS O LEFT JOIN table_salesman AS S ON O.salesman_id = S.salesman_id 
			LEFT JOIN table_distributors AS D ON O.distributor_id = D.distributor_id ', 'COUNT(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->order_type == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "P";
            } else {
                $color = '';
            }
            $status = "Not Confirmed";
            //$auRec2=$this->_getSelectList2('table_order_tmp_detail',"count( distinct(item_id)) as total_item",''," order_tmp_id = ".$auRec[$i]->order_tmp_id." and type = 1");
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_tmp_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->order_tmp_id)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->acc_total_invoice_amount)) . '"';
            $json .= ',"' . $date_of_order . '&nbsp;' . date("h:i A.", strtotime($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*-------------------------------------------------
	 Show Item Varient List
	 date : 11 jun
	 By   : Nizam
----------------------------------------------------*/
    function showItemVariant()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'variant_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasVariant']) && $_SESSION['MasVariant'] != 'all' && $_SESSION['MasVariant'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasVariant'] . "'";

        }
        $where = " $statusCondi ";
        //Todo End : sudhanshu 12 june 2024 : add status filter
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_variant AS V', "V.*, V.variant_name ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_variant AS V', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"variant.php?statusId=' . $auRec[$i]->variant_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->variant_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->variant_name) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*
 Discription :Add retailer channel
 date : 20 may
 by : Nizam
 */
    public function addItemVariant()
    {
        $data['variant_name'] = trim($_POST['variant_name']);
        $data['account_id'] = $_SESSION['accountId'];
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_variant');
        return $id;
    }

    /*
 Discription :Check retailer chennel already exits or not.
 date : 20 may
 by : Nizam
 */
    public function ItemVariantExits()
    {
        if ($_POST['variant_id'] != "") {
            $cond = " variant_name='" . trim($_POST['variant_name']) . "' and variant_id<>'" . $_POST['variant_id'] . "' ";
        } else {
            $cond = " variant_name='" . trim($_POST['variant_name']) . "' ";
        }
        $channel = $this->_getSelectList('table_variant', "*", '', $cond);
        if (is_array($channel)) {
            return true;
        }
    }

    /*
 Discription :Edit Variant.
 date : 20 may
 by : Nizam
 */
    public function ItemVariantEdit($id)
    {
        $channel = $this->_getSelectList('table_variant', "*", '', " variant_id='" . $id . "'");
        if (is_array($channel)) {
            return $channel;
        }
    }

    /*
 Discription :Update Variant.
 date : 20 may
 by : Nizam
 */
    function updateItemVariant($id)
    {
        $data['variant_name'] = mysql_escape_string(trim($_POST['variant_name']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $update = $this->_dbUpdate($data, 'table_variant', " variant_id=" . $id);
        return $id;
    }

    /*-------------------------------------------------
	 Show Item Varient List
	 date : 11 jun
	 By   : Nizam
----------------------------------------------------*/
    function showSku()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'sku_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasSku']) && $_SESSION['MasSku'] != 'all' && $_SESSION['MasSku'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasSku'] . "'";
            $where = " $statusCondi ";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_sku AS S', "S.*, S.sku_name ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_sku AS S', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"sku.php?statusId=' . $auRec[$i]->sku_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->sku_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->sku_name) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /************************ADD Comptition*****************/
    function addCompt()
    {
        $data['comptition_name'] = trim($_POST['comptition_name']);
        $data['account_id'] = $_SESSION['accountId'];
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_comptition');
        return $id;
    }
    /*******************End ADD Comptition************************/
    /****************Update Comptition************************/
    function updateCompt($id)
    {
        $data['comptition_name'] = mysql_escape_string(trim($_POST['comptition_name']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Updated';
        $data['status'] = 'A';
        $update = $this->_dbUpdate($data, 'table_comptition', " comptition_id=" . $id);
        return $id;
    }
    /*********************End Updation *********************/
    /*
 Discription :Add retailer channel
 date : 20 may
 by : Nizam
 */
    public function addSku()
    {
        $data['sku_name'] = trim($_POST['sku_name']);
        $data['account_id'] = $_SESSION['accountId'];
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_sku');
        return $id;
    }

    /*
 Discription :Check retailer chennel already exits or not.
 date : 20 may
 by : Nizam
 */
    public function SkuExits()
    {
        if ($_POST['sku_id'] != "") {
            $cond = " sku_name='" . trim($_POST['sku_name']) . "' and sku_id<>'" . $_POST['sku_id'] . "' ";
        } else {
            $cond = " sku_name='" . trim($_POST['sku_name']) . "' ";
        }
        $channel = $this->_getSelectList('table_sku', "*", '', $cond);
        if (is_array($channel)) {
            return true;
        }
    }

    /*
 Discription :Edit Variant.
 date : 20 may
 by : Nizam
 */
    public function SkuEdit($id)
    {
        $channel = $this->_getSelectList('table_sku', "*", '', " sku_id='" . $id . "'");
        if (is_array($channel)) {
            return $channel;
        }
    }

    /*
 Discription :Update Sku
 date : 20 may
 by : Nizam
 */
    function updateSku($id)
    {
        $data['sku_name'] = mysql_escape_string(trim($_POST['sku_name']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $update = $this->_dbUpdate($data, 'table_sku', " sku_id=" . $id);
        return $id;
    }

    /*-------------------------------------------
	 Discription: Show Offer List
	 date 		: 19 may
	 By   		: Nizam
 --------------------------------------------*/
    function showRegion()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'region_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//		$start = (($page-1) * $rp);
//		$limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//		$_objAdmin = new Admin();
        $where = '';
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_region AS R
		left join country as co on co.country_id = R.country_id', "R.region_id,R.region_name,R.status,co.country_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_region AS R
		left join country as co on co.country_id = R.country_id', 'count(R.region_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"region.php?statusId=' . $auRec[$i]->region_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->region_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->region_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->country_name) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*
 Discription :Edit Region.
 date : 21 may
 by : Nizam
 */
    public function RegionEdit($id)
    {
        $regions = $this->_getSelectList2('table_region', "*", '', " region_id='" . $id . "'");
        if (is_array($regions)) {
            return $regions;
        }
    }

    /*
 Discription :  Check Regions name already exits or not.
 date 		 :  21 may
 by          :  Nizam
 */
    public function RegionExits()
    {
        if ($_POST['region_id'] != "") {
            $cond = " region_name='" . $_POST['region_name'] . "' and country_id = " . $_POST['country_id'] . " and region_id<>'" . $_POST['region_id'] . "' ";
        } else {
            $cond = " region_name='" . $_POST['region_name'] . "' and country_id = " . $_POST['country_id'];
        }
        $region = $this->_getSelectList2('table_region', "*", '', $cond);
        if (is_array($region) && (count($region) > 0)) {
            return 'already_exists';
        } else {
            return 'not_exists';
        }
    }

    /*
 Discription :Update Regions Master.
 date : 20 may
 by : Nizam
 */
    function updateRegion($id)
    {
        $data['country_id'] = mysql_escape_string($_POST['country_id']);
        $data['region_name'] = mysql_escape_string($_POST['region_name']);
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $this->_dbUpdate2($data, 'table_region', " region_id=" . $id);
        return $id;
    }

    /*
 Discription : Add Regions
 date 		 : 20 may
 by 		 : Nizam
 */
    public function addRegion()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['country_id'] = mysql_escape_string($_POST['country_id']);
        $data['region_name'] = mysql_escape_string($_POST['region_name']);
        $data['create_date'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_region');
        return $id;
    }

    /*----------------------------- function added by Gaurav on 30 July 15 ----------------------*/
    function showMarketIntelligence($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'market_intelligence_id';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromDateMSG'] != '') {
            $fromdate = " AND MI.app_date >= '" . date('Y-m-d', strtotime($_SESSION['FromDateMSG'])) . "'";
        } else {
            $fromdate = " AND MI.app_date >= '" . date("Y-m-d", strtotime("-1 day")) . "'";
        }
        if ($_SESSION['ToDateMSG'] != '') {
            $todate = " AND MI.app_date <= '" . date('Y-m-d', strtotime($_SESSION['ToDateMSG'])) . "'";
        } else {
            $todate = " AND MI.app_date <= '" . date("Y-m-d", strtotime("-1 day")) . "'";
        }
        $where = " MI.salesman_id >0 $salesman AND s.account_id= " . $_SESSION['accountId'];
        //echo $salesman; die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        /*$auRec=$this->_getSelectList2('table_market_intelligence as MI
		LEFT JOIN table_salesman as s on s.salesman_id= MI.salesman_id
		LEFT JOIN table_salesman_hierarchy_relationship AS H ON H.salesman_id= MI.salesman_id
		LEFT JOIN table_salesman AS S2 ON S2.salesman_id = H.rpt_user_id
		LEFT JOIN table_salesman_hierarchy AS H3 ON H3.hierarchy_id = H.hierarchy_id
		LEFT JOIN city AS C ON C.city_id = s.city
		LEFT JOIN state AS st ON st.state_id = s.state',"MI.*,s.salesman_name,S2.salesman_name AS rpt_to, H3.description,C.city_name, st.state_name",$rp,$where.$sort,'');
		*/
        $auRec = $this->_getSelectList2('table_market_intelligence as MI
		LEFT JOIN table_salesman as s on s.salesman_id= MI.salesman_id
		LEFT JOIN city AS C ON C.city_id = s.city 
		LEFT JOIN state AS st ON st.state_id = s.state', "MI.*,s.salesman_name,C.city_name, st.state_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_market_intelligence as MI
		LEFT JOIN table_salesman as s on s.salesman_id=MI.salesman_id
		LEFT JOIN city AS C ON C.city_id = s.city 
		LEFT JOIN state AS st ON st.state_id = s.state', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        //echo $total; die;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $app_date = $this->_changeDate($auRec[$i]->app_date);
            if ($rc) $json .= ",";
            if ($auRec[$i]->image_required == 'Yes') {
                $photo = '<a href=\"message_image.php?msgId=' . $auRec[$i]->market_intelligence_id . '\'  target=\"_blank\">View Photo</a>';
            } else {
                $photo = "";
            }
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->market_intelligence_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->description). '"';
            $json .= ',"' . addslashes($auRec[$i]->company_name) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->subcategory) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->description))) . '"';
            $json .= ',"' . addslashes($app_date) . '"';
            $json .= ',"' . addslashes(date('h:i A', strtotime($auRec[$i]->app_time))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*-----------------------------------------------------
     Description: Create a function for add routeSchedular
     Date: 8th September
	 By : Nizam
	*------------------------------------------------------*/
    function addRouteSchedular()
    {
        $data['account_id'] = $_SESSION['accountId'];
        $data['salesman_id'] = $_POST['salesman_id'];
        $data['month'] = $_POST['month'];
        $data['year'] = $_POST['year'];
        $data['created_date'] = date('Y-m-d');
        $data['status'] = 'A';
        $route = $this->_dbInsert($data, 'table_route_scheduled');
        return $route;
    }

    // Store salesman activity
    public function getSalesmanLoadInLoadOutStock($activity)
    {
        //echo "<pre>";print_R($_POST);die;
        $account_id = $_SESSION['accountId'];
        $salesman_id = trim($_POST['salesman_id']);
        $distributor_id = trim($_POST['dist']);
        $date_of_app = date('Y-m-d');
        $time_of_app = date('H:i:s');
        if (isset($_POST['sal_stock_value']) && !empty($_POST['sal_stock_value'])) {
            for ($i = 0; $i <= count($_POST['sal_stock_value']); $i++) {

                if ($_POST['sal_stock_value'][$i] != '') {

                    $item_id = $_POST['itemId'][$i];
                    $category_id = $_POST['categoryId'][$i];
                    $attribute_value_id = $_POST['attribute_value_id'][$i];
                    $sal_stock_value = $_POST['sal_stock_value'][$i];

                    // Check data in stock table
                    $conditionsalesman = " salesman_id='" . $salesman_id . "' AND item_id='" . $item_id . "' AND category_id='" . $category_id . "' AND attribute_value_id = '" . $attribute_value_id . "' order by  sal_stk_id desc";

                    $conditionfordistributor = " account_id ='" . $account_id . "' AND item_id='" . $item_id . "' AND category_id='" . $category_id . "' AND color_id = '" . $attribute_value_id . "' ";

                    $stockRec = $this->_getSelectList('table_item_salesman_stock', '*', '', $conditionsalesman);
                    $stock_id = $stockRec[0]->sal_stk_id;
                    $active_stock = $stockRec[0]->sal_stock_value;

                    // Check data in dump table
                    $cond = " salesman_id ='" . $salesman_id . "' And item_id='" . $item_id . "' And stock_id='" . $stock_id . "'  order by stock_activity_id desc";
                    $stockRecinSal = $this->_getSelectList('table_salesman_stock_activity', '*', '', $cond);
                    $previous_value = $stockRecinSal[0]->stock_after_activity;


                    if ($activity == 'LI') {
                        $data = array();
                        $type = 'load_in';
                        $before_activity = $active_stock - $sal_stock_value;
                        $after_value = $before_activity + $sal_stock_value;
                        // Saved salesman activity
                        $data['account_id'] = $account_id;
                        $data['stock_id'] = $stockRec[0]->sal_stk_id;
                        $data['salesman_id'] = $salesman_id;
                        $data['activity_type'] = $type;
                        $data['item_id'] = $item_id;
                        $data['stock_before_activity'] = $before_activity;
                        $data['stock_qty'] = $sal_stock_value;
                        $data['stock_after_activity'] = $after_value;
                        $data['app_date'] = $date_of_app;
                        $data['app_time'] = $time_of_app;
                        $data['created_at'] = $date_of_app;
                        $userType = '';
                        $done_by = '0';
                        if ($_SESSION['userLoginType'] == 1) {
                            $userType = 'Admin';
                            $done_by = '0';
                        } elseif ($_SESSION['userLoginType'] == 5) {
                            $userType = 'Salesman';
                            $done_by = $_SESSION['salesmanId'];
                        }
                        $data['activity_done_by'] = $done_by;
                        $data['activity_done_by_user_type'] = $userType;
                        $this->_dbInsert($data, 'table_salesman_stock_activity');
                    }
                    if ($activity == 'LO') {
                        $data1 = array();
                        $type = 'load_out';
                        $after_value = $previous_value - $sal_stock_value;
                        $data1['account_id'] = $account_id;
                        $data1['stock_id'] = $stockRec[0]->sal_stk_id;
                        $data1['salesman_id'] = $salesman_id;
                        $data1['activity_type'] = $type;
                        $data1['item_id'] = $item_id;
                        $data1['stock_before_activity'] = $previous_value;
                        $data1['stock_qty'] = $sal_stock_value;
                        $data1['stock_after_activity'] = $after_value;
                        $data1['app_date'] = $date_of_app;
                        $data1['app_time'] = $time_of_app;
                        $data1['created_at'] = $date_of_app;
                        $userType = '';
                        $done_by = '0';
                        if ($_SESSION['userLoginType'] == 1) {
                            $userType = 'Admin';
                            $done_by = '0';
                        } elseif ($_SESSION['userLoginType'] == 5) {
                            $userType = 'Salesman';
                            $done_by = $_SESSION['salesmanId'];
                        }
                        $data1['activity_done_by'] = $done_by;
                        $data1['activity_done_by_user_type'] = $userType;
                        $this->_dbInsert($data1, 'table_salesman_stock_activity');

                    }
                }
            }
        }
    }

    /**************************** STOCK transfer TO salesman Yogesh on 24 Aug 2016  *****************************************************/
    function stockTransferToFse()
    {

        $account_id = $_SESSION['accountId'];
        $salesman_id = trim($_POST['salesman_id']);
        $distributor_id = trim($_POST['dist']);
        //$truck_id = trim($_POST['truck_id']);
        $date_of_app = date('Y-m-d');
        $time_of_app = date('H:i:s');
        if (isset($_POST['sal_stock_value']) && !empty($_POST['sal_stock_value'])) {
            for ($i = 0; $i <= count($_POST['sal_stock_value']); $i++) {
                $item_id = '';
                $category_id = '';
                $batch_no = '';
                // $attribute_value_id = 1;
                $sal_stock_value = '';
                $dist_stock_value = '';
                $attribute_value_id = '';
                if ($_POST['sal_stock_value'][$i] != '') {
                    $item_id = $_POST['itemId'][$i];
                    $category_id = $_POST['categoryId'][$i];
                    $attribute_value_id = $_POST['attribute_value_id'][$i];
                    // $attribute_value_id = 1;
                    $sal_stock_value = $_POST['sal_stock_value'][$i];
                    $dist_stock_value = $_POST['dist_stock_value'][$i];
                    $last_update_datetime = date('Y-m-d H:i:s');
                    $last_updated_date = date('Y-m-d');
                    $status = 'A';
                    $conditionsalesman = " salesman_id='" . $salesman_id . "' AND item_id='" . $item_id . "' AND category_id='" . $category_id . "' AND attribute_value_id = '" . $attribute_value_id . "' ";
                    //$conditionndc = " item_id='".$item_id."' AND category_id='".$category_id."' AND attribute_value_id = '".$attribute_value_id."' ";
                    $conditionfordistributor = " account_id ='" . $account_id . "' AND item_id='" . $item_id . "' AND category_id='" . $category_id . "' AND color_id = '" . $attribute_value_id . "' ";
                    $stockRec = $this->_getSelectList('table_item_salesman_stock', '*', '', $conditionsalesman);
                    $data = array();
                    if (sizeof($stockRec) > 0) {  // updated last saved record
                        $last_stock = $stockRec[0]->sal_stock_value;
                        $new_stock = $last_stock + $sal_stock_value;
                        $data['sal_stock_value'] = $new_stock;
                        $data['last_updated_date'] = $last_updated_date;
                        $data['last_update_datetime'] = $last_update_datetime;
                        $this->_dbUpdate($data, 'table_item_salesman_stock', $conditionsalesman);
                        $salesman_stk_id = true;
                    } else { // Insert new record
                        $data['account_id'] = $account_id;
                        $data['salesman_id'] = $salesman_id;
                        $data['item_id'] = $item_id;
                        $data['category_id'] = $category_id;
                        // $data['batch_no'] = $batch_no;
                        $data['attribute_value_id'] = $attribute_value_id;
                        $data['sal_stock_value'] = $sal_stock_value;
                        $data['last_updated_date'] = $last_updated_date;
                        $data['last_update_datetime'] = $last_update_datetime;
                        $data['status'] = 'A';

                        $this->_dbInsert($data, 'table_item_salesman_stock');

                        $salesman_stk_id = true;
                    }
                  
                    if ($salesman_stk_id) {
                        $counter++;
                        $data = array();
                        // Saved salesman activity
                        $data['account_id'] = $account_id;
                        $data['salesman_id'] = $salesman_id;
                        $data['distributor_id'] = $distributor_id;
                        $data['truck_id'] = $truck_id;
                        $data['item_id'] = $item_id;
                        $data['category_id'] = $category_id;
                        $data['attribute_value_id'] = $attribute_value_id;
                        // $data['batch_no'] = $batch_no;
                        $data['rec_stock_value'] = $sal_stock_value;
                        $data['date_of_app'] = $date_of_app;
                        $data['time_of_app'] = $time_of_app;
                        $data['last_update_datetime'] = $last_update_datetime;
                        $data['created_datetime'] = $last_update_datetime;
                        $data['status'] = 'LI';
                        $userType = '';
                        $done_by = '0';
                        if ($_SESSION['userLoginType'] == 1) {
                            $userType = 'Admin';
                            $done_by = '0';
                        } elseif ($_SESSION['userLoginType'] == 5) {
                            $userType = 'Salesman';
                            $done_by = $_SESSION['salesmanId'];
                        }
                        $data['activity_done_by'] = $done_by;
                        $data['activity_done_by_user_type'] = $userType;

                       

                        $this->_dbInsert($data, 'table_item_salesman_stock_activity');
                        // $this->getSalesmanLoadInLoadOutStock($data);
                        // Saved salesman attribute_value_id
                        // Update distributor stock
                        $data = array();
                        $stockDis = $this->_getSelectList('table_item_ndc_stock', '*', '', $conditionfordistributor); // Check dist stk value
                        $_SESSION['active_stock'] = $stockDis[0]->stock_value;
                        if (sizeof($stockDis) > 0) {
                            // updated last saved record
                            $dis_stock_value = $stockDis[0]->stock_value - $sal_stock_value;  // decrease distributor stock
                            $data['stock_value'] = $dis_stock_value;
                            $data['last_updated_date'] = $last_updated_date;
                            $data['last_update_datetime'] = $last_update_datetime;
                            $this->_dbUpdate($data, 'table_item_ndc_stock', $conditionfordistributor);
                            // updated last saved record
                            // Saved distributor activity
                            $data = array();
                            $data['account_id'] = $account_id;
                            $data['stock_id'] = $stockDis[0]->stock_id;
                            $data['salesman_id'] = $salesman_id;
                            $data['item_id'] = $item_id;
                            $data['category_id'] = $category_id;
                            // $data['batch_no'] = $batch_no;
                            //$data['truck_id']	=	$truck_id;
                            $data['attribute_value_id'] = $attribute_value_id;
                            $data['color_id'] = $attribute_value_id;
                            $data['stock_value'] = $sal_stock_value;
                            $data['created_datetime'] = $last_update_datetime;
                            $data['status'] = 'GRN';
                            $this->_dbInsert($data, 'table_item_ndc_stock_activity');
                            // Saved distributor activity
                        }
                        // Update distributor stock
                    }

                }
            }
            $this->getSalesmanLoadInLoadOutStock('LI');
        }
        if ($counter > 0) {
            return "Stock transferred successfully";
        } else {
            return "oops error with your request.";
        }
    }
    /**************************** STOCK transfer TO salesman Yogesh on 24 Aug 2016  *****************************************************/
    /**************************** STOCK return TO salesman Yogesh on 24 Aug 2016 *****************************************************/
    function stockReturnByFse()
    {
        $account_id = $_SESSION['accountId'];
        $salesman_id = trim($_POST['salesman_id']);
        $distributor_id = trim($_POST['dist']);
        //$truck_id = trim($_POST['truck_id']);
        $date_of_app = date('Y-m-d');
        $time_of_app = date('H:i:s');
        if (isset($_POST['sal_stock_value']) && !empty($_POST['sal_stock_value'])) {
            for ($i = 0; $i <= count($_POST['sal_stock_value']); $i++) {
                $item_id = '';
                $category_id = '';
                $batch_no = '';
                // $attribute_value_id = 1;
                $sal_stock_value = '';
                $dist_stock_value = '';
                $attribute_value_id = '';
                if ($_POST['sal_stock_value'][$i] != '') {
                    $item_id = $_POST['itemId'][$i];
                    $category_id = $_POST['categoryId'][$i];
                    $attribute_value_id = $_POST['attribute_value_id'][$i];
                    // $attribute_value_id = 1;
                    $sal_stock_value = $_POST['sal_stock_value'][$i];
                    $dist_stock_value = $_POST['dist_stock_value'][$i];
                    $last_update_datetime = date('Y-m-d H:i:s');
                    $last_updated_date = date('Y-m-d');
                    $status = 'A';
                    $conditionsalesman = " salesman_id='" . $salesman_id . "' AND item_id='" . $item_id . "' AND category_id='" . $category_id . "' AND attribute_value_id = '" . $attribute_value_id . "' ";
                    //$conditionndc = " item_id='".$item_id."' AND category_id='".$category_id."' AND attribute_value_id = '".$attribute_value_id."' ";
                    $conditionfordistributor = " account_id ='" . $account_id . "' AND item_id='" . $item_id . "' AND category_id='" . $category_id . "' AND color_id = '" . $attribute_value_id . "' ";
                    // Update distributor stock
                    $data = array();
                    $stockDis = $this->_getSelectList('table_item_ndc_stock', '*', '', $conditionfordistributor); // Check dist stk value
                    $cond = '';
                    if (sizeof($stockDis) > 0) {
                        $stock_id = $stockDis[0]->stock_id;
                        $cond = " stock_id ='" . $stockDis[0]->stock_id . "'";
                        // updated last saved record
                        $dis_stock_value = $stockDis[0]->stock_value + $sal_stock_value;  // increase distributor stock
                        $data['stock_value'] = $dis_stock_value;
                        $data['last_updated_date'] = $last_updated_date;
                        $data['last_update_datetime'] = $last_update_datetime;
                        $this->_dbUpdate($data, 'table_item_ndc_stock', $cond);
                        // updated last saved record
                        $distributor_stk_id = true;
                    } else {
                        $data = array();
                        // insert distributor stock
                        $data = array();
                        $data['account_id'] = $account_id;
                        $data['item_id'] = $item_id;
                        $data['category_id'] = $category_id;
                        // $data['batch_no'] = $batch_no;
                        $data['attribute_value_id'] = $attribute_value_id;
                        $data['color_id'] = $attribute_value_id;
                        $data['stock_value'] = $dist_stock_value;
//					$data['created_datetime']= $last_update_datetime;
                        $data['last_updated_date'] = $last_updated_date;
                        $data['last_update_datetime'] = $last_update_datetime;
                        $data['status'] = 'A';
                        $stock_id = $this->_dbInsert($data, 'table_item_ndc_stock');
                        $distributor_stk_id = true;
                    }
                    // Update distributor stock
                    if ($distributor_stk_id) {
                        $counter++;
                        $data = array();
                        $data['account_id'] = $account_id;
                        $data['stock_id'] = $stock_id;
                        $data['salesman_id'] = $salesman_id;
                        $data['item_id'] = $item_id;
                        $data['category_id'] = $category_id;
                        // $data['batch_no'] = $batch_no;
                        $data['attribute_value_id'] = $attribute_value_id;
                        $data['color_id'] = $attribute_value_id;
                        $data['stock_value'] = $sal_stock_value;
                        $data['created_datetime'] = $last_update_datetime;
                        $data['status'] = 'SR';
                        $this->_dbInsert($data, 'table_item_ndc_stock_activity');
                        // Saved distributor activity
                        $stockRec = $this->_getSelectList('table_item_salesman_stock', '*', '', $conditionsalesman);
                        $data = array();
                        $cond = '';
                        if (sizeof($stockRec) > 0) {  //updated last saved record
                            $cond = " sal_stk_id = '" . $stockRec[0]->sal_stk_id . "'";
                            $last_stock = $stockRec[0]->sal_stock_value;
                            $new_stock = $last_stock - $sal_stock_value;
                            $data['sal_stock_value'] = $new_stock;
                            $data['last_updated_date'] = $last_updated_date;
                            $data['last_update_datetime'] = $last_update_datetime;
                            $this->_dbUpdate($data, 'table_item_salesman_stock', $cond);
                            // Saved salesman activity
                            $data = array();
                            $data['account_id'] = $account_id;
                            $data['salesman_id'] = $salesman_id;
                            $data['distributor_id'] = $distributor_id;
                            //$data['truck_id']=$truck_id;
                            $data['item_id'] = $item_id;
                            $data['category_id'] = $category_id;
                            $data['attribute_value_id'] = $attribute_value_id;
                            // $data['batch_no'] = $batch_no;
                            $data['rec_stock_value'] = $sal_stock_value;
                            $data['date_of_app'] = $date_of_app;
                            $data['time_of_app'] = $time_of_app;
                            $data['last_update_datetime'] = $last_update_datetime;
                            $data['created_datetime'] = $last_update_datetime;
                            $data['status'] = 'LO';
                            $userType = '';
                            $done_by = '0';
                            if ($_SESSION['userLoginType'] == 1) {
                                $userType = 'Admin';
                                $done_by = '0';
                            } elseif ($_SESSION['userLoginType'] == 5) {
                                $userType = 'Salesman';
                                $done_by = $_SESSION['salesmanId'];
                            }
                            $data['activity_done_by'] = $done_by;
                            $data['activity_done_by_user_type'] = $userType;

                            $this->_dbInsert($data, 'table_item_salesman_stock_activity');
                            // Saved salesman attribute_value_id
                        }
                    }
                }
            }
            $this->getSalesmanLoadInLoadOutStock('LO');
        }
        if ($counter > 0) {
            return "Stock transferred successfully";
        } else {
            return "oops error with your request.";
        }
    }
    /**************************** STOCK return TO salesman Yogesh on 24 Aug 2016 *****************************************************/
    /*------------------- function added by Yogesh on 24 Aug 2016 ----------------------*/
    function showTruckList($salesmanID)
    {
        //include("includes/incentive.inc.php");
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'truck_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        // $where = "t.status ='A'";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_truck as t', "t.*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_truck as t', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"truck.php?Tid=' . $auRec[$i]->truck_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->truck_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->truck_name) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->truck_code)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->case_size_capacity)) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addTruck()
    {
        $data['truck_code'] = mysql_escape_string(trim($_POST['truck_code']));
        $data['truck_name'] = mysql_escape_string(trim($_POST['truck_name']));
        $data['case_size_capacity'] = mysql_escape_string(trim($_POST['case_size_capacity']));
        // $data['account_id']=mysql_escape_string($_POST['account_id']);
        $data['last_update_date'] = date('Y-m-d');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_truck');
        return $id;
    }

    function updateTruck($id)
    {
        $data['truck_code'] = mysql_escape_string(trim($_POST['truck_code']));
        $data['truck_name'] = mysql_escape_string(trim($_POST['truck_name']));
        $data['case_size_capacity'] = mysql_escape_string(trim($_POST['case_size_capacity']));
        $data['last_update_date'] = date('Y-m-d');
        $data['status'] = 'A';
        $id = $this->_dbUpdate2($data, 'table_truck', " truck_id = " . $id);
        return $id;
    }

    /**************************** STOCKIST STOCK DETAIL 17 FEB 2017 ******************************************/
    function showStockistStock()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'd.stockist_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " b.brand_id IN(" . $RoleBrands . ")";
        }
        $where = $brandCnd;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($_SESSION['stockistId'] != "" && $_SESSION['stockistId'] != "0") {
            $dis = " and s.stockist_id='" . $_SESSION['stockistId'] . "'";
        }
        //Todo Start : Sudhanshu 10 May 2024 : add stockist filter
        if ($_SESSION['stockist_id'] != "" && $_SESSION['stockist_id'] > 0) {
            $dis = " and s.stockist_id='" . $_SESSION['stockist_id'] . "'";
        }
        //Todo End : Sudhanshu 10 May 2024 : add stockist filter
        $auRec = $this->_getSelectList('table_item_stockist_stock AS s
		LEFT JOIN table_item_case_relationship AS icr ON icr.item_id = s.item_id
		LEFT JOIN table_cases AS clr ON clr.case_id = icr.case_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
        LEFT JOIN table_price as p ON p.item_id = i.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		LEFT JOIN table_stockist AS d ON d.stockist_id = s.stockist_id
		LEFT JOIN table_color AS col ON col.color_id = s.color_id',
            "d.stockist_name, d.stockist_code, c.category_name, clr.case_size,b.brand_name, i.item_name, i.item_code, s.stockist_stock_value,
		s.status, s.last_update_datetime,s.stockist_stk_id, col.color_code,p.stockist_price,p.item_dp as item_mrp", $rp, $where . $dis . ' GROUP BY s.stockist_id,
		s.item_id,s.attribute_value_id,s.color_id' . $sort, '');
        $auRecCount = $this->_getSelectList('table_item_stockist_stock AS s
		LEFT JOIN table_item_case_relationship AS icr ON icr.item_id = s.item_id
		LEFT JOIN table_cases AS clr ON clr.case_id = icr.case_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		LEFT JOIN table_stockist AS d ON d.stockist_id = s.stockist_id
		LEFT JOIN table_color AS col ON col.color_id = s.color_id', "count(*) as total", '', $where . $dis);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $case_qty = round(($auRec[$i]->stockist_stock_value / $auRec[$i]->case_size), 2);
            // $status=($auRec[$i]->status=='A')?"A":"I";
            //$status='<a href=\"master_category.php?stid='".$auRec[$i]->category_id."'&value='".$status."\">'".$status."'</a>";
            $stockist_stock_price_value = 0;
            if ($auRec[$i]->stockist_stock_value > 0) {
                if ($auRec[$i]->stockist_price > 0) {
                    $price = $auRec[$i]->stockist_price;
                } else {
                    $price = $auRec[$i]->item_mrp;
                }

                $stockist_stock_price_value = ($auRec[$i]->stockist_stock_value * $price);
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stockist_stk_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->stockist_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->case_size) . '"';
            $json .= ',"' . addslashes($case_qty) . '"';
            $json .= ',"' . addslashes($auRec[$i]->stockist_stock_value) . '"';
            $json .= ',"' . addslashes($stockist_stock_price_value) . '"';
            // $json .= ',"' . addslashes($auRec[$i]->color_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->last_update_datetime) . '"]';
            /*$json .= ',"'.$status.'"]';*/
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /**************************** STOCKIST STOCK DETAIL 17 FEB 2017 ******************************************/
    function showStockist()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'stockist_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " 1=1 ";
        //Todo Start : sudhanshu 28 may 2024 : add status filet
        $statusCond = '';
        if (isset($_SESSION['stkStatus']) && $_SESSION['stkStatus'] != '') {
            $statusCond = " AND d.status='" . $_SESSION['stkStatus'] . "'";
        }
        //Todo End : sudhanshu 28 may 2024 : add status filet
        $where = " a.account_id =" . $_SESSION['accountId'] . $statusCond;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_stockist as d 
        left join table_account as a on a.account_id=d.account_id 
        left join table_web_users as w on w.stockist_id=d.stockist_id 
        left join state as s on s.state_id=d.state 
        left join city as c on c.city_id=d.city 
        LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
        left join country as con on con.country_id = d.country
        left join table_location as loc on loc.location_id = d.location
        left join table_relationship as tr on tr.relationship_id=d.relationship_id', "d.*,w.username,w.email_id,w.web_user_id,w.status as loginStatus,con.country_name,s.state_name,c.city_name,loc.location_name, tr.relationship_code,sz.zone_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_stockist as d 
        left join table_account as a on a.account_id=d.account_id 
        left join table_web_users as w on w.stockist_id=d.stockist_id 
        left join state as s on s.state_id=d.state 
        left join city as c on c.city_id=d.city 
        LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
        left join country as con on con.country_id = d.country
        left join table_location as loc on loc.location_id = d.location
        left join table_relationship as tr on tr.relationship_id=d.relationship_id 
        ', 'count(d.stockist_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $start_date = $this->_changeDate($auRec[$i]->start_date);
            if ($auRec[$i]->stockist_dob == "0000-00-00") {
                $stockist_dob = "-";
            } else {
                $stockist_dob = $this->_changeDate($auRec[$i]->stockist_dob);
            }
            //end date
//            if ($auRec[$i]->status == 'I') {
            $end_date = $this->_changeDate($auRec[$i]->end_date);
//            } else {
//                $end_date = ' ';
//            }
            //end date
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"stockist.php?statusId=' . $auRec[$i]->stockist_id . '&value=' . $sts . '\">' . $sts . '</a>';
            //login status
            // if($auRec[$i]->web_user_id!=''){
            // 	if($auRec[$i]->status=='A'){
            // 	$LogStatus=($auRec[$i]->loginStatus=='A')?"Active":"Inactive";
            // 	$LogSts="<a href=\"stockist.php?statusLogId=".$auRec[$i]->stockist_id."&value=".$LogStatus."\">".$LogStatus."</a>";
            // 	} else {
            // 	$LogSts='Inactive';
            // 	}
            // } else {
            // $LogSts=' ';
            // }
            $addressLink = '<a href="stockist_address.php?disId=' . $auRec[$i]->stockist_id . '" target="_blank">View Address</a>';
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stockist_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_code)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->relationship_code)) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->country_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->location_name))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->stockist_address))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->zipcode))) . '"';
            // $json .= ',"'.ucwords(str_replace($remove, ' ',addslashes($auRec[$i]->stockist_address2))). '"';
            // $json .= ',"'.addslashes($auRec[$i]->sms_number). '"';
            $json .= ',"' . addslashes($auRec[$i]->stockist_phone_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->gst_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->pan_no) . '"';
            // $json .= ',"'.addslashes($auRec[$i]->stockist_phone_no2). '"';
            // $json .= ',"'.addslashes($auRec[$i]->stockist_phone_no3). '"';
            // $json .= ',"'.addslashes($auRec[$i]->stockist_leadline_no). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_person)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->contact_number)) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->contact_number). '"';
            // $json .= ',"'.ucwords(addslashes($auRec[$i]->contact_person2)). '"';
            // $json .= ',"'.addslashes($auRec[$i]->contact_number2). '"';
            // $json .= ',"'.ucwords(addslashes($auRec[$i]->contact_person3)). '"';
            // $json .= ',"'.addslashes($auRec[$i]->contact_number3). '"';
            $json .= ',"' . addslashes($auRec[$i]->stockist_email) . '"';
            // $json .= ',"'.addslashes($auRec[$i]->stockist_email2). '"';
            // $json .= ',"'.addslashes($auRec[$i]->stockist_email3). '"';
            // $json .= ',"'.addslashes($stockist_dob). '"';
            $json .= ',"' . addslashes($start_date) . '"';
            $json .= ',"' . addslashes($end_date) . '"';
            $json .= ',"' . addslashes($addressLink) . '"';
            $json .= ',"' . $sts . '"]';
            //$json .= ',"'.$sts. '"';
            // $json .= ',"'.$LogSts.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addStockist()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['stockist_name'] = mysql_escape_string(trim($_POST['stockist_name']));
        $data['stockist_code'] = mysql_escape_string(trim($_POST['stockist_code']));
        /* Add relationship ids */
//        $data['relationship_id'] = mysql_escape_string($_POST['relationship_id']);
//        $data['region_id'] = mysql_escape_string($_POST['region_id']);
        $data['stockist_address'] = $_POST['stockist_address'][0];
//        $data['stockist_address2'] = mysql_escape_string($_POST['stockist_address2']);
        $data['stockist_location'] = mysql_escape_string(trim($_POST['address1']));
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['location'] = mysql_escape_string(trim($_POST['address1']));
        $data['zipcode'] = trim($_POST['zipcode'][0]);
        $data['stockist_phone_no'] = mysql_escape_string(trim($_POST['stockist_phone_no']));
        $data['gst_no'] = mysql_escape_string(trim($_POST['gst_no']));
        $data['pan_no'] = mysql_escape_string(trim($_POST['pan_no']));
        $data['sms_number'] = mysql_escape_string(trim($_POST['sms_number']));
//        $data['stockist_phone_no2'] = mysql_escape_string($_POST['stockist_phone_no2']);
//        $data['stockist_phone_no3'] = mysql_escape_string($_POST['stockist_phone_no3']);
//        $data['stockist_leadline_no'] = mysql_escape_string($_POST['stockist_leadline_no']);
        $data['stockist_email'] = mysql_escape_string(trim($_POST['stockist_email']));
//        $data['stockist_email2'] = mysql_escape_string($_POST['stockist_email2']);
//        $data['stockist_email3'] = mysql_escape_string($_POST['stockist_email3']);
        $data['contact_person'] = mysql_escape_string(trim($_POST['contact_person']));
//        $data['contact_person2'] = mysql_escape_string($_POST['contact_person2']);
//        $data['contact_person3'] = mysql_escape_string($_POST['contact_person3']);
        $data['contact_number'] = mysql_escape_string(trim($_POST['contact_number']));

//        $data['contact_number2'] = mysql_escape_string($_POST['contact_number2']);
//        $data['contact_number3'] = mysql_escape_string($_POST['contact_number3']);
        if ($_POST['stockist_dob'] != '') {
            $data['stockist_dob'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['stockist_dob'])));
        }
        $data['start_date'] = mysql_escape_string($_POST['start_date']);
        //$data['end_date']=mysql_escape_string($_POST['end_date']); //commented by sachin as per dhavika's request
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
//        echo "<pre>";print_r($data);die;
        $dis_id = $this->_dbInsert($data, 'table_stockist');
        // if($dis_id > 0){
        // 		if(is_array($_POST['truck_id']) && !empty($_POST['truck_id'])){
        // 				$count = count($_POST['truck_id']);
        // 				for ($i=0; $i <= $count ; $i++) {
        // 					if($_POST['truck_id'][$i] != ''){
        // 						$data1['distributor_id'] = $dis_id;
        // 						$data1['truck_id'] = $_POST['truck_id'][$i];
        // 						$this->_dbInsert($data1,'table_truck_distributor_relationship');
        // 						$data1 = array();
        // 					}
        // 				}
        // 		}
        // }
        //Todo Start : Sudhanshu 15 may 2024 : update stocksit code if getiing emopty code
        if (trim($_POST['stockist_code']) == '') {
            $data2['stockist_code'] = $dis_id;
            $this->_dbUpdate($data2, 'table_stockist', " stockist_id=" . $dis_id);
        }
        //Todo End : Sudhanshu 15 may 2024 : update stocksit code if getiing emopty code

        //Todo Start Sudhanshu 15 may 2024 : add multiple address
        $address = $_POST['stockist_address'];
        $zipcodeArr = $_POST['zipcode'];
//        if (trim($address) != '') {
//            $addr['stockist_id'] = $dis_id;
//            $addr['account_id'] = $_SESSION['accountId'];
//            $addr['address'] = trim($address);
//            $addr['zipcode'] = mysql_escape_string(trim($_POST['zipcode']));
//            $addr['status'] = 'A';
//            $addr['created_at'] = date('Y-m-d H:i:s');
//            $addr['updated_at'] = date('Y-m-d H:i:s');
//            $adrId = $this->_dbInsert($addr, 'table_stockist_address');
//
//                $datat2['address_id'] = $adrId;
//                $this->_dbUpdate($datat2, 'table_stockist', " stockist_id=" . $dis_id);
//
//
//        }

        if (!empty($address) && count($address) > 0) {
            $row = 0;
            foreach ($address as $key11 => $adr) {
                if (trim($adr) != '') {
                    $addr['stockist_id'] = $dis_id;
                    $addr['account_id'] = $_SESSION['accountId'];
                    $addr['address'] = trim($adr);
                    $addr['zipcode'] = $zipcodeArr[$key11];
                    $addr['status'] = 'A';
                    $addr['created_at'] = date('Y-m-d H:i:s');
                    $addr['updated_at'] = date('Y-m-d H:i:s');
                    $adrId = $this->_dbInsert($addr, 'table_stockist_address');
                    if ($row == 0) {
                        $datat2['address_id'] = $adrId;
                        $this->_dbUpdate($datat2, 'table_stockist', " stockist_id=" . $dis_id);
                    }

                }

                $row++;

            }

        }

        //Todo Start Sudhanshu 15 may 2024 : add multiple address
        return $dis_id;
    }

    function UpdateStockist($id)
    {
        $data['stockist_name'] = mysql_escape_string(trim($_POST['stockist_name']));
        $data['stockist_code'] = mysql_escape_string(trim($_POST['stockist_code']));
        /* Update relationship ids */
//        $data['relationship_id'] = mysql_escape_string($_POST['relationship_id']);
//        $data['region_id'] = mysql_escape_string($_POST['region_id']);
        $data['stockist_address'] = trim($_POST['stockist_address'][0]);
//        $data['stockist_address2'] = mysql_escape_string($_POST['stockist_address2']);
        $data['stockist_location'] = mysql_escape_string(trim($_POST['address1']));
        $data['country'] = mysql_escape_string($_POST['country']);
        $data['state'] = mysql_escape_string($_POST['state']);
        $data['city'] = mysql_escape_string($_POST['address2']);
        $data['location'] = mysql_escape_string(trim($_POST['address1']));
        $data['zipcode'] = trim($_POST['zipcode'][0]);
        $data['gst_no'] = mysql_escape_string(trim($_POST['gst_no']));
        $data['pan_no'] = mysql_escape_string(trim($_POST['pan_no']));
        $data['stockist_phone_no'] = mysql_escape_string(trim($_POST['stockist_phone_no']));
//        $data['stockist_phone_no2'] = mysql_escape_string($_POST['stockist_phone_no2']);
//        $data['stockist_phone_no3'] = mysql_escape_string($_POST['stockist_phone_no3']);
//        $data['stockist_leadline_no'] = mysql_escape_string($_POST['stockist_leadline_no']);
        $data['sms_number'] = mysql_escape_string(trim($_POST['sms_number']));
        $data['stockist_email'] = mysql_escape_string(trim($_POST['stockist_email']));
//        $data['stockist_email2'] = mysql_escape_string($_POST['stockist_email2']);
//        $data['stockist_email3'] = mysql_escape_string($_POST['stockist_email3']);
        $data['contact_person'] = mysql_escape_string(trim($_POST['contact_person']));
//        $data['contact_person2'] = mysql_escape_string($_POST['contact_person2']);
//        $data['contact_person3'] = mysql_escape_string($_POST['contact_person3']);
        $data['contact_number'] = mysql_escape_string(trim($_POST['contact_number']));
//        $data['contact_number2'] = mysql_escape_string($_POST['contact_number2']);
//        $data['contact_number3'] = mysql_escape_string($_POST['contact_number3']);
        if ($_POST['stockist_dob'] != '') {
            $data['stockist_dob'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['stockist_dob'])));
        }
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        if ($_POST['status'] == 'I') {
            $data['end_date'] = date('Y-m-d');
        }
        $data['status'] = 'A';
//        echo "<pre>";print_r($data);die;
        $this->_dbUpdate($data, 'table_stockist', " stockist_id=" . $id);

        //Todo Start : sudhanshu  15 may 2024 : update address
        $address_id = $_POST['address_id'];
        $address = $_POST['stockist_address'];
        $zipcode = $_POST['zipcode'];
//        if (trim($_POST['stockist_address']) != '') {
//            $auAddr = $this->_getSelectList('table_stockist_address', "address_id", '', "   address_id = $address_id ");
//            if (is_array($auAddr) && (count($auAddr) > 0)) {
//                $addData['address'] = mysql_escape_string(trim($_POST['stockist_address']));
//                $addData['zipcode']  = mysql_escape_string(trim($_POST['zipcode']));
//                $addData['updated_at'] = date('Y-m-d H:i:s');
//
//                $this->_dbUpdate($addData, 'table_stockist_address', " address_id=" . $address_id);
//            } else {
//                $addr['stockist_id'] = $id;
//                $addr['account_id'] = $_SESSION['accountId'];
//                $addr['address'] = mysql_escape_string(trim($_POST['stockist_address']));
//                $addr['zipcode']  = mysql_escape_string(trim($_POST['zipcode']));
//                $addr['status'] = 'A';
//                $addr['created_at'] = date('Y-m-d H:i:s');
//                $addr['updated_at'] = date('Y-m-d H:i:s');
//                $adrId = $this->_dbInsert($addr, 'table_stockist_address');
//
//                $addr2['address_id'] = $adrId;
//                $this->_dbUpdate($addr2, 'table_stockist', " stockist_id=" . $id);
//            }
//
//        } else {
//
//            $this->mysql_query("DELETE FROM table_stockist_address WHERE address_id = $address_id  ");
//
//        }

        if (count($address) > 0) {
            foreach ($address as $key => $value) {

                if ($key == 0) {
                    if (trim($value) != '') {
                        $auAddr = $this->_getSelectList('table_stockist_address', "address_id", '', "   address_id = $address_id ");
                        if (is_array($auAddr) && (count($auAddr) > 0)) {
                            $addData['address'] = trim($value);
                            $addData['zipcode'] = trim($zipcode[$key]);
                            $addData['updated_at'] = date('Y-m-d H:i:s');
                            $this->_dbUpdate($addData, 'table_stockist_address', " address_id=" . $address_id);
                        } else {
                            $addr['stockist_id'] = $id;
                            $addr['account_id'] = $_SESSION['accountId'];
                            $addr['address'] = trim($value);
                            $addr['zipcode'] = trim($zipcode[$key]);
                            $addr['status'] = 'A';
                            $addr['created_at'] = date('Y-m-d H:i:s');
                            $addr['updated_at'] = date('Y-m-d H:i:s');
                            $adrId = $this->_dbInsert($addr, 'table_stockist_address');

                            $addr2['address_id'] = $adrId;
                            $this->_dbUpdate($addr2, 'table_stockist', " stockist_id = " . $id);
                        }
                    } else {
                        $addr2['address_id'] = '0';
                        $this->_dbUpdate($addr2, 'table_stockist', " stockist_id = " . $id);
                        $this->mysql_query("DELETE FROM table_stockist_address WHERE address_id = $address_id  ");
                    }

                } else {
                    if (trim($value) != '') {
                        $addr['stockist_id'] = $id;
                        $addr['account_id'] = $_SESSION['accountId'];
                        $addr['address'] = trim($value);
                        $addr['zipcode'] = trim($zipcode[$key]);
                        $addr['status'] = 'A';
                        $addr['created_at'] = date('Y-m-d H:i:s');
                        $addr['updated_at'] = date('Y-m-d H:i:s');
                        $adrId = $this->_dbInsert($addr, 'table_stockist_address');
                    }

                }
            }


        } else {

            $this->mysql_query("DELETE FROM table_stockist_address WHERE address_id = $address_id  ");

        }


        //Todo End : sudhanshu  15 may 2024 : update address

        return $id;
    }

    /******** STOCK transfer TO Stockist Yogesh on 22 Feb 2017  *******************/
    function stockTransferToStockist()
    {
        $account_id = $_SESSION['accountId'];
        $stockist_id = trim($_POST['stockist_id']);
        $date_of_app = date('Y-m-d');
        $time_of_app = date('H:i:s');
        if (isset($_POST['stockist_stock_value']) && !empty($_POST['stockist_stock_value'])) {
            for ($i = 0; $i <= count($_POST['stockist_stock_value']); $i++) {
                $item_id = '';
                $category_id = '';
                $attribute_value_id = '';
                $color_id = '';
                $stockist_stock_value = "";
                $stockist_stk_id = false;
                if ($_POST['stockist_stock_value'][$i] != '') {
                    $item_id = $_POST['itemId'][$i];
                    $category_id = $_POST['categoryId'][$i];
                    //$attribute_value_id = $_POST['attribute_value_id'][$i];
                    $color_id = $_POST['color_id'][$i];
                    $stockist_stock_value = $_POST['stockist_stock_value'][$i];
                    $last_update_datetime = date('Y-m-d H:i:s');
                    $last_updated_date = date('Y-m-d');
                    $status = 'A';
                    // $condition = "item_id='".$item_id."' AND category_id='".$category_id."' AND attribute_value_id = '".$attribute_value_id."' AND color_id = '".$color_id."'";
                    $condition = "item_id='" . $item_id . "' AND category_id='" . $category_id . "' AND color_id = '" . $color_id . "'";
                    $stockRec = $this->_getSelectList('table_item_stockist_stock', '*', '', $condition . " AND stockist_id= " . $stockist_id);
                    $data = array();
                    if (sizeof($stockRec) > 0) {
                        // updated last saved record
                        $whereCond = "stockist_stk_id = '" . $stockRec[0]->stockist_stk_id . "'";
                        $last_stock = $stockRec[0]->stockist_stock_value;
                        $new_stock = $last_stock + $stockist_stock_value;
                        $data['stockist_stock_value'] = $new_stock;
                        $data['last_updated_date'] = $last_updated_date;
                        $data['last_update_datetime'] = $last_update_datetime;
                        $this->_dbUpdate($data, 'table_item_stockist_stock', $whereCond);
                        $stockist_stk_id = true;
                    } else {
                        $data['account_id'] = $account_id;
                        $data['stockist_id'] = $stockist_id;
                        $data['item_id'] = $item_id;
                        $data['category_id'] = $category_id;
                        //$data['attribute_value_id'] = $attribute_value_id;
                        $data['color_id'] = $color_id;
                        $data['stockist_stock_value'] = $stockist_stock_value;
                        $data['last_updated_date'] = $last_updated_date;
                        $data['last_update_datetime'] = $last_update_datetime;
                        $data['status'] = 'A';
                        $this->_dbInsert($data, 'table_item_stockist_stock');
                        $stockist_stk_id = true;
                    }
                    if ($stockist_stk_id) {
                        $counter++;
                        $data = array();
                        // Check Company Stock
                        $comStock = $this->_getSelectList('table_item_ndc_stock', '*', '', $condition);
                        if (is_array($comStock) && sizeof($comStock)) {
                            $com_stock_value = $comStock[0]->stock_value - $stockist_stock_value;
                            $data['stock_value'] = $com_stock_value;
                            $data['last_updated_date'] = $last_updated_date;
                            $data['last_update_datetime'] = $last_update_datetime;
                            $whereCond = "stock_id = '" . $comStock[0]->stock_id . "'";
                            $this->_dbUpdate($data, 'table_item_ndc_stock', $whereCond);
                            // Save activity
                            $data = array();
                            $data['account_id'] = $account_id;
                            $data['stockist_id'] = $stockist_id;
                            $data['stock_id'] = $comStock[0]->stock_id;
                            $data['item_id'] = $item_id;
                            $data['category_id'] = $category_id;
                            //$data['attribute_value_id'] = $attribute_value_id;
                            $data['color_id'] = $color_id;
                            $data['stock_value'] = $stockist_stock_value;
                            $data['created_datetime'] = $last_update_datetime;
                            $data['status'] = 'GRN';
                            $this->_dbInsert($data, 'table_item_ndc_stock_activity');
                            // Saved activity
                        }
                    }
                }
            }
        }
        if ($counter > 0) {
            return "Stock transferred successfully";
        } else {
            return "oops error with your request.";
        }
    }
    /****************** STOCK transfer TO Stockist Yogesh on 22 Feb 2017  **************************/
    /************** STOCK Transfer from Stockist to Distributor Yogesh on 22 Feb 2017 ****************/
    function stockTransferToDistributor()
    {
        // echo '<pre>';print_r($_POST);
        // exit();
        $account_id = $_SESSION['accountId'];
        $stockist_id = trim($_POST['stockist_id']);
        $distributor_id = trim($_POST['distributor_id']);
        $date_of_app = date('Y-m-d');
        $time_of_app = date('H:i:s');
        if ($stockist_id != "" && $stockist_id > 0) {
            if (isset($_POST['dis_stock_value']) && !empty($_POST['dis_stock_value'])) {
                for ($i = 0; $i <= count($_POST['dis_stock_value']); $i++) {
                    $item_id = '';
                    $category_id = '';
                    $attribute_value_id = '';
                    $color_id = '';
                    $stock_value = "";
                    $distributor_stk_id = false;
                    if ($_POST['dis_stock_value'][$i] != '') {
                        $item_id = $_POST['itemId'][$i];
                        $category_id = $_POST['categoryId'][$i];
                        //$attribute_value_id = $_POST['attribute_value_id'][$i];
                        $color_id = $_POST['color_id'][$i];
                        $stock_value = $_POST['dis_stock_value'][$i];
                        $last_update_datetime = date('Y-m-d H:i:s');
                        $last_updated_date = date('Y-m-d');
                        $status = 'A';
                        // $condition = "item_id='".$item_id."' AND category_id='".$category_id."' AND attribute_value_id = '".$attribute_value_id."' AND color_id = '".$color_id."'";
                        $condition = "item_id='" . $item_id . "' AND category_id='" . $category_id . "' AND color_id = '" . $color_id . "'";
                        $stockDis = $this->_getSelectList('table_item_distributor_stock', '*', '', $condition . " AND distributor_id=" . $distributor_id);
                        $cond = '';
                        $data = array();
                        if (sizeof($stockDis) > 0) {
                            $cond = " dis_stk_id ='" . $stockDis[0]->dis_stk_id . "'";
                            $dis_stock_value = $stockDis[0]->dis_stock_value + $stock_value;
                            $data['dis_stock_value'] = $dis_stock_value;
                            $data['last_updated_date'] = $last_updated_date;
                            $data['last_update_datetime'] = $last_update_datetime;
                            $this->_dbUpdate($data, 'table_item_distributor_stock', $cond);
                            $distributor_stk_id = true;
                        } else {
                            $data['account_id'] = $account_id;
                            $data['distributor_id'] = $distributor_id;
                            $data['item_id'] = $item_id;
                            $data['category_id'] = $category_id;
                            //$data['attribute_value_id'] = $attribute_value_id;
                            $data['color_id'] = $color_id;
                            $data['dis_stock_value'] = $stock_value;
                            $data['last_updated_date'] = $last_updated_date;
                            $data['last_update_datetime'] = $last_update_datetime;
                            $this->_dbInsert($data, 'table_item_distributor_stock');
                            $distributor_stk_id = true;
                        }
                        if ($distributor_stk_id) {
                            $counter++;
                            $data = array();
                            $stockRec = $this->_getSelectList('table_item_stockist_stock', '*', '', $condition . " AND stockist_id=" . $stockist_id);
                            if (sizeof($stockRec) > 0) {
                                $cond = " stockist_stk_id = '" . $stockRec[0]->stockist_stk_id . "'";
                                $last_stock = $stockRec[0]->stockist_stock_value;
                                $new_stock = $last_stock - $stock_value;
                                $data['stockist_stock_value'] = $new_stock;
                                $data['last_updated_date'] = $last_updated_date;
                                $data['last_update_datetime'] = $last_update_datetime;
                                $this->_dbUpdate($data, 'table_item_stockist_stock', $cond);
                                $data = array();
                                $data['account_id'] = $account_id;
                                $data['stockist_id'] = $stockist_id;
                                $data['distributor_id'] = $distributor_id;
                                $data['item_id'] = $item_id;
                                $data['category_id'] = $category_id;
                                //$data['attribute_value_id'] = $attribute_value_id;
                                $data['color_id'] = $color_id;
                                $data['dispatch_stock_value'] = $stock_value;
                                $data['created_datetime'] = $last_update_datetime;
                                $data['status'] = 'LI';
                                $this->_dbInsert($data, 'table_item_stockist_stk_dispatch_activity');
                            }
                        }
                    }
                }
            }
        }
        if ($counter > 0) {
            return "Stock transferred successfully";
        } else {
            return "oops error with your request.";
        }
    }
    /************** STOCK Transfer from Stockist to Distributor Yogesh on 22 Feb 2017 ****************/
//DISTRIBUTOR PRIMARY STOCK REPORT
//Distributor Primary stock created on 20.05.2019
    function showDistributorPrimaryStock()
    {
        //echo $salesman;die;
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $distributorId = "";
        $stateId = "";
        $location_id = '';
        if ($_SESSION['FromDate'] != '') {
            $fromdate = "  ods.date_of_order BETWEEN ('" . date('Y-m-d', strtotime($_SESSION['FromDate'])) . "')";
        } else {
            $fromdate = "  ods.date_of_order BETWEEN ('" . date('Y-m-d') . "') ";
        }
        if ($_SESSION['ToDate'] != '') {
            $todate = " and ('" . date('Y-m-d', strtotime($_SESSION['ToDate'])) . "')";
        } else {
            $todate = " and ('" . date('Y-m-d') . "')";
        }
        if ($_SESSION['disID'] != '' && $_SESSION['disID'] != 'All') {
            $distributorId = " and d.distributor_id='" . $_SESSION['disID'] . "'";
        } else if ($_SESSION['stockistId'] != "" && $_SESSION['stockistId'] != "0") {
            $distributorId = " and d.stockist_id='" . $_SESSION['stockistId'] . "'";
        }
        if ($_SESSION['Disstate'] != '') {
            $stateId = " and st.state_id='" . $_SESSION['Disstate'] . "'";
        }
        if ($_SESSION['Dislocation_id'] != '') {
            $location_id = " and ct.city_id='" . $_SESSION['Dislocation_id'] . "'";
        }
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " and b.brand_id IN(" . $RoleBrands . ")";
            $salesman = '';
        }
        $where = " $fromdate  $todate $distributorId $stateId $location_id $brandCnd  and d.distributor_name!='' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_primary_order_distributor_stock as ods 
  		inner join table_primary_order_detail_distributor_stock as ods_detail on ods.stock_id=ods_detail.stock_id 
		LEFT join table_distributors as d on d.distributor_id=ods.distributor_id 
		LEFT join state as st on st.state_id=d.state
		LEFT join table_zone_state_mapping as zsm on zsm.state_id = d.state and d.account_id = zsm.account_id
		LEFT join table_zone as z on z.zone_id = zsm.zone_id 
		LEFT join city as ct on ct.city_id=d.city
		left join table_location as c on c.location_id= d.location  
		LEFT join table_salesman as s on s.salesman_id=ods.salesman_id
		LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
		LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
		LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
		LEFT JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id',
            "ods.*,ods_detail.*,d.distributor_id,d.distributor_name,c.location_name,d.distributor_code,st.state_name,ct.city_name,s.salesman_name,s.employee_code,z.zone_name,S2.salesman_name AS rptPerson,sum(ods_detail.openning_stock_volume) as total_qty, ifNULL(sum(ods_detail.openning_stock_volume * ods_detail.price) ,0) as total_amount,count(ods_detail.item_id) as total_item ", $rp, $where . " group by ods_detail.stock_id  " . $sort, ' ');

        $auRecCount = $this->_getSelectList('table_primary_order_distributor_stock as ods  
		LEFT join table_distributors as d on d.distributor_id=ods.distributor_id 
		LEFT join state as st on st.state_id=d.state
		LEFT join table_zone_state_mapping as zsm on zsm.state_id = d.state and d.account_id = zsm.account_id
		LEFT join table_zone as z on z.zone_id = zsm.zone_id 
		LEFT join city as ct on ct.city_id=d.city  
		LEFT join table_salesman as s on s.salesman_id=ods.salesman_id
		LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
		LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
		LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
		LEFT JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id', 'count(*) AS total', '', $where);
//        echo "<pre/>";print_r($auRecCount);die;
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {

//            $image = '<a href=\"rotate_img.php?stock_id=' . base64_encode($auRec[$i]->stock_id) . '\" ' .
//                $targetBlank .
//                '>View Image</a>';
            $image = '<a href=\"dis_order_image.php?ordId=' . base64_encode($auRec[$i]->stock_id) . '\" ' .
                $targetBlank .
                '>View Image</a>';

            $link = '<a href=\"distributor_primary_order_list_stock.php?stock_id=' . base64_encode($auRec[$i]->stock_id) .
                '\" ' . $targetBlank . '>View Details</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stock_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($_objAdmin->_changeDate($auRec[$i]->date_of_order)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->time_of_order) . '"';
            $json .= ',"' . addslashes($auRec[$i]->total_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->total_item) . '"';
            $json .= ',"' . addslashes($auRec[$i]->total_qty) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zone_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rptPerson) . '"';
            $json .= ',"' . $image . '"';
            $json .= ',"' . addslashes($auRec[$i]->photo_count) . '"';
            $json .= ',"' . $link . '"]';

            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showCallPunch($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'ca.app_date';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " GROUP BY ca.cust_activity_id ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if (isset($_SESSION['state']) && $_SESSION['state'] != "") {
            $where .= " AND r.state='" . $_SESSION['state'] . "' ";
        }
        $where .= ' AND ca.cust_action_id=2';
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = "'" . date('Y-m-d', strtotime($_SESSION['FromOrderList'])) . "'";
        } else {
            $fromdate = "'" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = "'" . date('Y-m-d', strtotime($_SESSION['ToOrderList'])) . "'";
        } else {
            $todate = "'" . date('Y-m-d') . "'";
        }
        $where .= " $salesman AND ca.app_date >=" . $fromdate . " AND ca.app_date <=" . $todate;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_customer_activity AS ca 
			LEFT JOIN table_customer_activity_detail AS cad ON cad.cust_activity_id = ca.cust_activity_id 
			LEFT JOIN table_retailer AS r ON ca.retailer_id = r.retailer_id
			LEFT JOIN table_distributors as dd on dd.distributor_id = r.distributor_id
			LEFT JOIN table_relationship as rel on r.relationship_id=rel.relationship_id 
			LEFT JOIN state as st on st.state_id=r.state 
			LEFT JOIN table_customer AS c ON ca.customer_id = c.customer_id 
			LEFT JOIN table_designation AS d ON c.designation_id = d.designation_id 
			LEFT JOIN table_salesman AS s ON ca.salesman_id = s.salesman_id 
			LEFT JOIN table_next_step_master AS t ON ca.tag_id = t.next_step_id
			LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = r.state and szsm.account_id = r.account_id
            LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
			LEFT JOIN table_master_call as mc on mc.master_call_id=ca.master_call_id', "ca.cust_activity_id,ca.category_id,ca.color_id,ca.status,r.retailer_name,r.retailer_code,rel.relationship_desc,st.state_name,c.customer_name, c.customer_phone_no,c.customer_phone_no2,dd.distributor_name,dd.distributor_code, c.customer_email,d.designation_name, t.next_step as tag_description,ca.reminder_date,ca.reminder_time,ca.reminder_remark, ca.comments, ca.last_updated_on, ca.app_date,ca.app_time, ca.status, s.salesman_name,s.employee_code, COUNT(cad.cust_activity_id) as total_item, mc.call_type,sz.zone_name,ca.photo_count", $rp, $where . $sort);
        $auRecCount = $this->_getSelectList('table_customer_activity AS ca 
			LEFT JOIN table_customer_activity_detail AS cad ON cad.cust_activity_id = ca.cust_activity_id 
			LEFT JOIN table_retailer AS r ON ca.retailer_id = r.retailer_id
			LEFT JOIN table_relationship as rel on r.relationship_id=rel.relationship_id 
			LEFT JOIN table_distributors as dd on dd.distributor_id = r.distributor_id
			LEFT JOIN state as st on st.state_id=r.state 
			LEFT JOIN table_customer AS c ON ca.customer_id = c.customer_id 
			LEFT JOIN table_designation AS d ON c.designation_id = d.designation_id 
			LEFT JOIN table_salesman AS s ON ca.salesman_id = s.salesman_id
			LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = r.state and szsm.account_id = r.account_id
            LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
			LEFT JOIN table_next_step_master AS t ON ca.tag_id = t.next_step_id 
			LEFT JOIN table_master_call as mc on mc.master_call_id=ca.master_call_id', 'COUNT(ca.cust_activity_id) as total', '', $where . ' GROUP BY ca.cust_activity_id');
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $category_name = '';
            $category_id = $auRec[$i]->category_id;
            if (!empty($category_id)) {
                $where = "c.category_id IN ($category_id) ";
                $categoryData = $this->_getSelectList2("table_category AS c", 'c.category_id, c.category_name', '', "$where");
                if (is_array($categoryData) && !empty($categoryData)) {
                    $CatNameArray = [];
                    foreach ($categoryData as $CKey => $Cvalue) {
                        $CatNameArray[$CKey] = $Cvalue->category_name;
                    }
                    $category_name = implode(',', $CatNameArray);
                }
            }
            // $color_code ='';
            // $color_id = $auRec[$i]->color_id;
            // if(!empty($color_id)){
            // 	$where="co.color_id IN ($color_id) ";
            // 	$colorData = $this->_getSelectList2("table_color AS co",'co.color_id, co.color_code','',"$where");
            // 	if(is_array($colorData) && !empty($colorData)) {
            // 		$ColNameArray = [];
            //            foreach ($colorData as $CoKey => $Covalue) {
            //                $ColNameArray[$CoKey] =  $Covalue->color_code;
            //            }
            //             $color_code = implode(',', $ColNameArray);
            // 	}
            // }
            // $image="<a href=\"call_captured_image.php?cust_activity_id=". base64_encode($auRec[$i]->cust_activity_id)."\" target='_blank'>View Image</a>";
//            $status=($auRec[$i]->status=='A')?"Active":"Inactive";
            $remDate = '';
            if ($auRec[$i]->reminder_date != '0000-00-00') {
                $remDate = $auRec[$i]->reminder_date;
            }
            $remTime = '';
            if ($auRec[$i]->reminder_time != '00:00:00') {
                $remTime = $auRec[$i]->reminder_time;
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->cust_activity_id . '",';
            $json .= '"cell":["' . addslashes(date("d M y", strtotime($auRec[$i]->app_date))) . '"';
            $json .= ',"' . addslashes($auRec[$i]->app_time) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->call_type) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->designation_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->customer_name). '"';
            //$json .= ',"'.addslashes($auRec[$i]->channel_name). '"';
            $json .= ',"' . addslashes($auRec[$i]->relationship_desc) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zone_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->customer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->customer_phone_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->customer_phone_no2) . '"';
            $json .= ',"' . addslashes($auRec[$i]->customer_email) . '"';
            // $json .= ',"'.addslashes($auRec[$i]->total_item). '"';
            $json .= ',"' . addslashes(str_replace(',', ' , ', $category_name)) . '"';
            //$json .= ',"'.addslashes(str_replace(',', ' , ', $color_code)). '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->comments))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->tag_description))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $remDate))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $remTime))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $reminder_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showMarketCategory()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 17 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasMarketCate']) && $_SESSION['MasMarketCate'] != 'all' && $_SESSION['MasMarketCate'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasMarketCate'] . "'";
        }
        //Todo End : sudhanshu 17 june 2024 : add status filter
        $where = " cat_type = 'C' and type='M' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_category', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_category', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r", "\n", "\r", ",", "'", "[", "]", "{", "}");
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"marketing_category.php?stid=' . $auRec[$i]->category_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->category_id . '",';
            $json .= '"cell":["' . addslashes(str_replace($remove, ' ', $auRec[$i]->category_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_code) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addMarketCategory()
    {
        $data['category_name'] = mysql_escape_string(trim($_POST['category_name']));
        $data['category_code'] = mysql_escape_string(trim($_POST['category_code']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['parent_id'] = mysql_escape_string($_POST['parent_id']);
        $data['type'] = "M";
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_category');
        return $id;
    }

    function updateMarketCategory($id)
    {
        $data['category_name'] = mysql_escape_string(trim($_POST['category_name']));
        $data['category_code'] = mysql_escape_string(trim($_POST['category_code']));
        $data['parent_id'] = mysql_escape_string($_POST['parent_id']);
        $data['type'] = "M";
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_category', " category_id=" . $id);
        return $id;
    }

    function showMarketItem()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'item_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " and b.brand_id IN(" . $RoleBrands . ")";
        }
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasMrkt']) && $_SESSION['MasMrkt'] != 'all' && $_SESSION['MasMrkt'] != '') {
            $statusCondi = " AND i.status ='" . $_SESSION['MasMrkt'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " c.status='A' and i.account_id='" . $_SESSION['accountId'] . "' and i.item_type='M' $statusCondi $brandCnd ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_item as i 
		left join table_category as c on i.category_id = c.category_id 
		left join table_brands as b on b.brand_id = i.brand_id', 'i.*,c.category_name,b.brand_name', $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_item as i 
		left join table_category as c on i.category_id = c.category_id 
		left join table_brands as b on b.brand_id=i.brand_id',
            'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"market_items.php?stid=' . $auRec[$i]->item_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->item_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            //$json .= ',"'.addslashes(ucwords($auRec[$i]->brand_name)). '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->category_name)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->brand_name)) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addMarketItem()
    {
        $data['item_name'] = mysql_escape_string(trim($_POST['item_name']));
        $data['item_code'] = mysql_escape_string(trim($_POST['item_code']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['category_id'] = mysql_escape_string($_POST['category_id']);
        $data['item_type'] = "M";
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $itemid = $this->_dbInsert($data, 'table_item');
        //Add item price
        $data2['account_id'] = mysql_escape_string($_POST['account_id']);
        $data2['item_id'] = $itemid;
        $data2['item_mrp'] = "1.00";
        $data2['last_update_date'] = date('Y-m-d');
        $data2['last_update_status'] = 'New';
        $data2['start_date'] = date('Y-m-d');
        $data2['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($_SESSION['EndDate'])));
        $data2['status'] = 'A';
        $itemid = $this->_dbInsert($data2, 'table_price');
        return $itemid;
    }

    function updateMarketItem($id)
    {
        //echo"<pre/>";print_r($_SESSION);die;
        $data['item_name'] = mysql_escape_string(trim($_POST['item_name']));
        $data['item_code'] = mysql_escape_string(trim($_POST['item_code']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['category_id'] = mysql_escape_string($_POST['category_id']);
        $data['item_type'] = "M";
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $itemid = $this->_dbUpdate($data, 'table_item', " item_id=" . $id);
        //Add item price
        $data2['account_id'] = mysql_escape_string($_POST['account_id']);
        $data2['item_id'] = $id;
        $data2['item_mrp'] = "1.00";
        $data2['last_update_date'] = date('Y-m-d');
        $data2['last_update_status'] = 'Update';
        //$data2['end_date']=date('Y-m-d', strtotime(mysql_escape_string($_SESSION['EndDate'])));
        $data2['status'] = 'A';
        $itPrid = $this->_dbUpdate2($data2, 'table_price', " item_id=" . $id);
        return $itemid;
    }

    function addRetailerMessage($id)
    {
        $data['retailer_id'] = mysql_escape_string($id);
        $data['subject'] = mysql_escape_string(preg_replace("/[[:blank:]]+/", " ", $_POST['subject']));
        $data['message'] = mysql_escape_string(preg_replace("/[[:blank:]]+/", " ", $_POST['message']));
        // $data['image_required']=mysql_escape_string($_POST['image_required']);
        $data['send_date'] = date('Y-m-d');
        $data['send_time'] = date("H:i:s");
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_ret_message');
        return $id;
    }

    function showRetailerMessage()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'message_id';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if (isset($qtype) && $qtype == 'send_date') {
            $query = date('Y-m-d', strtotime($query));
        }
        $where = " rm.status='A' And rm.retailer_id >0 ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_ret_message as rm left join table_retailer as r on r.retailer_id=rm.retailer_id', "rm.*,r.retailer_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_ret_message as rm left join table_retailer as r on r.retailer_id=rm.retailer_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $send_date = $this->_changeDate($auRec[$i]->send_date);
            if ($rc) $json .= ",";
            if ($auRec[$i]->image_required == 'Yes') {
                $photo = '<a href=\"retailer_message_image.php?msgId=' . $auRec[$i]->message_id . '\'  target=\"_blank\">View Photo</a>';
            } else {
                $photo = "";
            }
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->message_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->subject)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->message))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->reply))) . '"';
            $json .= ',"' . addslashes($photo) . '"';
            $json .= ',"' . addslashes($send_date) . '"';
            $json .= ',"' . addslashes($auRec[$i]->send_time) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDistributorStock($salesman)
    {
        //echo $salesman;die;
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $distributorId = "";
        $stateId = "";
        $location_id = '';
        if ($_SESSION['FromDate'] != '') {
            $fromdate = "  ods.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromDate'])) . "'";
        } else {
            $fromdate = "  ods.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDate'] != '') {
            $todate = " and ods.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToDate'])) . "'";
        } else {
            $todate = " and ods.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['distributor_ID'] != '' && $_SESSION['distributor_ID'] != 'All') {
            $distributorId = " and d.distributor_id='" . $_SESSION['distributor_ID'] . "'";
        } else if ($_SESSION['stockistId'] != "" && $_SESSION['stockistId'] != "0") {
            $distributorId = " and d.stockist_id='" . $_SESSION['stockistId'] . "'";
        }
        if ($_SESSION['Disstate'] != '') {
            $stateId = " and d.state='" . $_SESSION['Disstate'] . "'";
        }
        if ($_SESSION['Dislocation_id'] != '') {
            $location_id = " and d.city = '" . $_SESSION['Dislocation_id'] . "'";
        }
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " and b.brand_id IN(" . $RoleBrands . ")";
            $salesman = '';
        }

        // $state=$this->_getSelectList2('table_distributors as d ','d.state',"","")
        $where = " $fromdate  $todate $distributorId $stateId $location_id $salesman $brandCnd and d.distributor_name!='' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order_distributor_stock as ods
  		inner join table_order_detail_distributor_stock as ods_detail on ods.stock_id=ods_detail.stock_id 
  		left join table_distributors as d on d.distributor_id=ods.distributor_id 
  		left join state as st on st.state_id=d.state 
  		left join city as ci on ci.city_id=d.city
        left join table_location as loc on loc.location_id=d.location
  		left join table_item as i on i.item_id=ods_detail.item_id
		LEFT JOIN table_brands AS b ON b.brand_id=i.brand_id
  		left join table_category as c on c.category_id=i.category_id
  		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
  		left join table_salesman as s on s.salesman_id=ods.salesman_id',
            "ods.*,ods_detail.*,d.distributor_id,d.distributor_name,d.distributor_code,i.item_name,i.item_id,b.brand_name,i.item_code,c.category_name,c.category_id,sz.zone_name,st.state_id,st.state_name,ci.city_name,ci.city_id ,s.salesman_id,s.salesman_name,s.employee_code,loc.location_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_order_distributor_stock as ods
  		inner join table_order_detail_distributor_stock as ods_detail on ods.stock_id=ods_detail.stock_id 
  		left join table_distributors as d on d.distributor_id=ods.distributor_id 
  		left join state as st on st.state_id=d.state left join city as ci on ci.city_id=d.city
  		left join table_item as i on i.item_id=ods_detail.item_id
  		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		LEFT JOIN table_brands AS b ON b.brand_id=i.brand_id
  		left join table_category as c on c.category_id=i.category_id
  		left join table_salesman as s on s.salesman_id=ods.salesman_id',
            'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {
            $image = '<a href=\"dis_stock_image.php?stkId=' . base64_encode($auRec[$i]->stock_id) . '\"  ' .
                $targetBlank .
                '>View Image</a>';
//            $status='A';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stock_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zone_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->comments) . '"';
            $json .= ',"' . $image . '"';
            $json .= ',"' . addslashes($auRec[$i]->photo_count) . '"';
            //geeta changes
            $json .= ',"' . addslashes($auRec[$i]->stock_id) . '"';
            // end geeta changes
            $json .= ',"' . addslashes(($auRec[$i]->openning_stock_volume)) . '"';
            $json .= ',"' . addslashes($_objAdmin->_changeDate($auRec[$i]->date_of_order)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->time_of_order) . '"]';
//            $json .= ',"'.$status.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showAssetManagement($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'ma.id';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = "'" . date('Y-m-d', strtotime($_SESSION['FromOrderList'])) . "'";
        } else {
            $fromdate = "'" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = "'" . date('Y-m-d', strtotime($_SESSION['ToOrderList'])) . "'";
        } else {
            $todate = "'" . date('Y-m-d') . "'";
        }

        if ($_SESSION['salemanId'] != '') {
            $salesman = " AND s.salesman_id = '" . $_SESSION['salemanId'] . "'";
        }
        if ($_SESSION['transId'] != '') {
            $trans = " AND am.id= '" . $_SESSION['transId'] . "'";
        }
        $where = " am.created_date >=" . $fromdate . " AND am.created_date <=" . $todate . " $salesman $trans";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_asset_management AS am 
			LEFT JOIN table_salesman AS s ON am.salesman_id = s.salesman_id 
			LEFT JOIN table_retailer AS r ON am.retailer_id = r.retailer_id 
            LEFT JOIN table_retailer_group as rg ON rg.group_id = r.group_id
            left join table_retailer_type_master as rtm ON rtm.type_id=r.type_id
            left join table_retailer_channel_master as rc ON rc.channel_id=r.channel_id 
            left join table_relationship as rel ON rel.relationship_id=r.relationship_id 
			LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id
			LEFT JOIN table_asset_master as m on am.asset_id=m.asset_id', "am.*,s.salesman_name,s.employee_code,r.retailer_name,d.distributor_name,d.distributor_code,r.retailer_code, m.asset_name,rg.group_name,rtm.type_name,rc.channel_name,rel.relationship_code as relation", $rp, $where . $sort, '');
        /********** Add Accounts attributes ****************/
        //echo "<pre>";print_r($auRec);die;
        $auRecCount = $this->_getSelectList('table_asset_management AS am 
			LEFT JOIN table_salesman AS s ON am.salesman_id = s.salesman_id 
			LEFT JOIN table_retailer AS r ON am.retailer_id = r.retailer_id
            LEFT JOIN table_retailer_group as rg ON rg.group_id = r.group_id
            left join table_retailer_type_master as rtm ON rtm.type_id=r.type_id
            left join table_retailer_channel_master as rc ON rc.channel_id=r.channel_id 
            left join table_relationship as rel ON rel.relationship_id=r.relationship_id 
			LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id 
			LEFT JOIN table_asset_master as m on am.asset_id=m.asset_id', 'count(*) as total', '', $where);
        //echo "<pre/>";print_r($auRecCount);die;
        $total = $auRecCount[0]->total;
        //echo $total;die;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {
//            $image='<a href=\"asset_management_image.php?id='. base64_encode($auRec[$i]->id).'\" '.$targetBlank.'>View Image</a>';

            $image = '<a href=\"asset_management_image.php?asm_id=' . base64_encode($auRec[$i]->id) . '\" ' . $targetBlank . '>View Image</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes(date("d M y", strtotime($auRec[$i]->created_date))) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->group_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->channel_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->relation) . '"';
            $json .= ',"' . addslashes($auRec[$i]->type_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->asset_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->competitor_type) . '"';
            $json .= ',"' . addslashes($auRec[$i]->quantity) . '"';
            $json .= ',"' . addslashes($auRec[$i]->remark) . '"';
            $json .= ',"' . addslashes($auRec[$i]->photo_count) . '"';
            $json .= ',"' . $image . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /***********************Solo integration from here***********************************************************************/
    function showStateWiseMustSellProducts()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'msi.state_id';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder , msi.item_id ASC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//		$start = (($page-1) * $rp);
//		$limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " AND b.brand_id IN(" . $RoleBrands . ")";
        }
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasstMustSell']) && $_SESSION['MasstMustSell'] != 'all' && $_SESSION['MasstMustSell'] != '') {
            $statusCondi = " msi.status ='" . $_SESSION['MasstMustSell'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " $statusCondi $brandCnd ";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_must_sell_items as msi
INNER JOIN state as st ON st.state_id = msi.state_id
INNER JOIN table_item as it ON it.item_id = msi.item_id
left join table_brands as b on b.brand_id = it.brand_id
', "msi.id as must_sell_id,msi.state_id,st.state_name,msi.item_id,b.brand_name,it.item_code,it.item_name,msi.created_at,
msi.updated_at,msi.status", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_must_sell_items as msi
INNER JOIN state as st ON st.state_id = msi.state_id
INNER JOIN table_item as it ON it.item_id = msi.item_id
left join table_brands as b on b.brand_id = it.brand_id
', 'count(msi.id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"state_wise_must_sell_items.php?stid=' . $auRec[$i]->must_sell_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->must_sell_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes(date('d M Y H:i A', strtotime($auRec[$i]->created_at))) . '"';
            $json .= ',"' . ((isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at)) ? addslashes(date('d M Y H:i A', strtotime($auRec[$i]->updated_at))) : "") . '"';
            $json .= ',"' . $status . '"';
            $json .= "]";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addMustSellProducts()
    {
        if (is_array($_POST['state']) && (count($_POST['state']) > 0) && is_array($_POST['item']) && (count($_POST['item']) > 0)) {
            foreach ($_POST['state'] as $key => $stateId) {
                foreach ($_POST['item'] as $key2 => $itemId) {
                    //check if already exists
                    $condi = " state_id = $stateId AND item_id = $itemId AND status = 'A'";
                    $auRec = $this->_getSelectList('table_must_sell_items', "*", '', $condi);
                    if (!is_array($auRec) && (count($auRec) <= 0)) {
                        $data = [];
                        $data['state_id'] = $stateId;
                        $data['item_id'] = $itemId;
                        $data['account_id'] = mysql_escape_string($_POST['account_id']);
                        $data['created_at'] = date('Y-m-d H:i:s');
                        $data['status'] = mysql_escape_string('A');
                        $this->_dbInsert($data, 'table_must_sell_items');
                    }
                }
            }
        }
        return true;
    }

    function showStateWiseMinimumProductPrice()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'st.state_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder , it.item_name ASC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//		$start = (($page-1) * $rp);
//		$limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " AND b.brand_id IN(" . $RoleBrands . ")";
        }
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasstItmPrice']) && $_SESSION['MasstItmPrice'] != 'all' && $_SESSION['MasstItmPrice'] != '') {
            $statusCondi = " msi.status ='" . $_SESSION['MasstItmPrice'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " $statusCondi $brandCnd ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_minimum_item_price as msi
INNER JOIN state as st ON st.state_id = msi.state_id
INNER JOIN table_item as it ON it.item_id = msi.item_id
left join table_brands as b on b.brand_id = it.brand_id
', "msi.id as min_price_id,msi.state_id,st.state_name,msi.item_id,it.item_code,b.brand_name,it.item_name,msi.min_price,msi.created_at,msi.updated_at,msi.status", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_minimum_item_price as msi
INNER JOIN state as st ON st.state_id = msi.state_id
INNER JOIN table_item as it ON it.item_id = msi.item_id
left join table_brands as b on b.brand_id = it.brand_id', 'count(msi.id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"statewise_minimum_item_price.php?stid=' . $auRec[$i]->min_price_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->min_price_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->min_price) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . addslashes(date('d M Y H:i A', strtotime($auRec[$i]->created_at))) . '"';
            $json .= ',"' . ((isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at)) ? addslashes(date('d M Y H:i A', strtotime($auRec[$i]->updated_at))) : "") . '"';
            $json .= "]";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addStateWiseMinimumProductPrice()
    {
        if (is_array($_POST['minFormData']) && (count($_POST['minFormData']) > 0)) {
            foreach ($_POST['minFormData'] as $key => $minFormData) {
                $stateId = $minFormData['state_id'];
                $itmId = $minFormData['item_id'];
                //find if already exists

                // for all state : 27 dec 2023
                if ($stateId == 'all') {
                    $objArrayList = new ArrayList();
                    $accWiseStateIds = $objArrayList->getAccountWiseStateIds();
                    if (is_array($accWiseStateIds) && (count($accWiseStateIds) > 0)) {
                        $stateIds = implode(',', $accWiseStateIds);
                        $stateCondi = " AND state_id IN($stateIds) ";
                    }
                    $getStatesData = $this->_getSelectList2('state', "state_id", '', " status = 'A' AND state_name != '' $stateCondi ");

                    if (is_array($getStatesData)) {
                        foreach ($getStatesData as $st) {
                            $state_id = $st->state_id;

                            $checkExists = $this->_getSelectList('table_minimum_item_price', "state_id,item_id,min_price", '', " state_id = $state_id AND item_id = $itmId");
                            if (is_array($checkExists) && (count($checkExists) > 0)) {
                                $data = [];
                                $data['account_id'] = $_POST['account_id'];
                                //					$data['state_id'] = $minFormData['state_id'];
                                //					$data['item_id'] = $minFormData['item_id'];
                                $data['min_price'] = $minFormData['min_price'];
                                $data['status'] = 'A';
                                $data['updated_at'] = date('Y-m-d H:i:s');
                                $this->_dbUpdate($data, 'table_minimum_item_price', "state_id = $state_id AND item_id = $itmId ");
                            } else {
                                $data = [];
                                $data['account_id'] = $_POST['account_id'];
                                $data['state_id'] = $state_id;
                                $data['item_id'] = $minFormData['item_id'];
                                $data['min_price'] = $minFormData['min_price'];
                                $data['status'] = 'A';
                                $data['created_at'] = date('Y-m-d H:i:s');
                                $this->_dbInsert($data, 'table_minimum_item_price');
                            }
                        }
                    }


                } else {

                    $checkExists = $this->_getSelectList('table_minimum_item_price', "state_id,item_id,min_price", '', " state_id = $stateId AND item_id = $itmId");
                    if (is_array($checkExists) && (count($checkExists) > 0)) {

                        $data = [];
                        $data['account_id'] = $_POST['account_id'];
                        //					$data['state_id'] = $minFormData['state_id'];
                        //					$data['item_id'] = $minFormData['item_id'];
                        $data['min_price'] = $minFormData['min_price'];
                        $data['status'] = 'A';
                        $data['updated_at'] = date('Y-m-d H:i:s');
                        $this->_dbUpdate($data, 'table_minimum_item_price', "state_id = $stateId AND item_id = $itmId ");
                    } else {
                        $data = [];
                        $data['account_id'] = $_POST['account_id'];
                        $data['state_id'] = $minFormData['state_id'];
                        $data['item_id'] = $minFormData['item_id'];
                        $data['min_price'] = $minFormData['min_price'];
                        $data['status'] = 'A';
                        $data['created_at'] = date('Y-m-d H:i:s');
                        $this->_dbInsert($data, 'table_minimum_item_price');
                    }
                }

            }
        }
        return true;
    }

    /*************************Sheenlac features integration*********************************************************/
    function showCreditDebitNote($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_note desc';
        if (!$sortname)
            $sortname = 'date_of_note';
        if (!$sortorder)
            $sortorder = 'desc';
        //$sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $qtype = $_REQUEST['qtype'];
        if ($_REQUEST['query'] == 'Credit') {
            $query = 'C';
        } elseif ($_REQUEST['query'] == 'Debit') {
            $query = 'D';
        } else {
            $query = $_REQUEST['query'];
        }
        if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] > 0) {
            $distributor_id = " AND o.distributor_id =" . $_SESSION['distributorId'];
        }
        if ($_SESSION['FromAttList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromAttList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToAttList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToAttList']));
        } else {
            $todate = date('Y-m-d');
        }
//        $where = "  O.date_of_note BETWEEN '" . $fromdate . "' AND '" . $todate . "' $distributor_id  $orderby";
        if ($query)
            $where .= "  $qtype LIKE '%$query%' ";

//        $auRec = $this->_getSelectList('table_credit_debit_note AS O
//	LEFT JOIN table_account AS ac ON ac.account_id = O.account_id
// 	LEFT JOIN table_distributors AS D ON O.distributor_id = D.distributor_id
//  	left join table_retailer as R on R.retailer_id = O.retailer_id
//  	left join table_tags AS T on T.tag_id = O.tag_id
//  	', " O.*, ac.company_name,D.distributor_name, R.retailer_name, T.tag_description, D.distributor_code, R.retailer_code  ", $rp, $where . $sort, '');

        $auRec = $this->_getSelectList2("((SELECT o.order_id as note_id, 'Sales Return' as note_type,substr(o.bill_no, -10) as document_no
	,o.bill_date,o.due_date, 
	o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.acc_total_invoice_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.bill_date as document_date,
	ac.company_name,D.distributor_name, R.retailer_name, 'Sales Return CN' as tag_description, D.distributor_code, R.retailer_code ,o.date_of_order as date,o.time_of_order as time,o.remark as remarks ,case when o.clearing_status ='' Then 'Unadjusted' 
	     when o.clearing_status ='Full' Then 'Fully Adjusted'
	     when o.clearing_status ='Partial' Then 'Partially Adjusted'
	     ELSE o.clearing_status 
	End as clearing_status, '' as note_status
	FROM single_invoice_record as o 
	left join table_payment_received as p on p.return_order_id = o.invoice_id 
	LEFT JOIN table_account AS ac ON ac.account_id = o.account_id
 	LEFT JOIN table_distributors AS D ON o.distributor_id = D.distributor_id
 	LEFT JOIN table_retailer as R on R.retailer_id = o.retailer_id
	LEFT JOIN table_tags AS T on T.tag_id = o.tag_id
	WHERE o.order_type='Return' AND o.order_for='R' AND o.invoice_status='A' 
	AND o.order_status='D'  and o.date_of_order BETWEEN '" . $fromdate . "' AND '" . $todate . "' $distributor_id  Group by o.invoice_id order by note_id desc)
	
	Union
	
	(SELECT o.note_id , o.note_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,
	o.due_date, o.total_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.date_of_note as document_date ,
	ac.company_name,D.distributor_name, R.retailer_name, T.tag_description, D.distributor_code, R.retailer_code,o.date_of_note as date,o.time_of_note as time,o.remarks,
	case when o.clearing_status ='' Then 'Unadjusted' 
	     when o.clearing_status ='Full' Then 'Fully Adjusted'
	     when o.clearing_status ='Partial' Then 'Partially Adjusted'
	     ELSE o.clearing_status 
	End as clearing_status
	,o.note_status
	FROM table_credit_debit_note as o 
	left join table_payment_received as p on p.credit_note_id = o.note_id 
	LEFT JOIN table_account AS ac ON ac.account_id = o.account_id
 	LEFT JOIN table_distributors AS D ON o.distributor_id = D.distributor_id
 	LEFT JOIN table_retailer as R on R.retailer_id = o.retailer_id
	LEFT JOIN table_tags AS T on T.tag_id = o.tag_id
	WHERE o.date_of_note BETWEEN '" .
            $fromdate . "' AND '" . $todate . "' $distributor_id  Group by o.note_id)
	) as tm", "tm.*", $rp, $where . '', ' order by note_id desc');

        //echo "<pre>";print_R($auRec);die;
        $auRecCount = $this->_getSelectList2("((SELECT o.invoice_id as note_id, 'Sales Return' as note_type,substr(o.bill_no, -10) as document_no
	,o.bill_date,o.due_date, 
	o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.acc_total_invoice_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.bill_date as document_date,
	ac.company_name,D.distributor_name, R.retailer_name, 'Sales Return CN' as tag_description, D.distributor_code, R.retailer_code ,o.date_of_order as date,o.time_of_order as time,o.remark as remarks ,o.clearing_status
	FROM single_invoice_record as o 
	left join table_payment_received as p on p.return_order_id = o.invoice_id 
	LEFT JOIN table_account AS ac ON ac.account_id = o.account_id
 	LEFT JOIN table_distributors AS D ON o.distributor_id = D.distributor_id
 	LEFT JOIN table_retailer as R on R.retailer_id = o.retailer_id
	LEFT JOIN table_tags AS T on T.tag_id = o.tag_id
	WHERE o.order_type='Return' AND o.order_for='R' AND o.invoice_status='A' 
	AND o.order_status='D'  and o.date_of_order BETWEEN '" . $fromdate . "' AND '" . $todate . "' $distributor_id  Group by o.invoice_id)
	
	Union
	
	(SELECT o.note_id , o.note_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,
	o.due_date, o.total_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.date_of_note as document_date ,
	ac.company_name,D.distributor_name, R.retailer_name, T.tag_description, D.distributor_code, R.retailer_code,o.date_of_note as date,o.time_of_note as time,o.remarks,o.clearing_status
	FROM table_credit_debit_note as o 
	left join table_payment_received as p on p.credit_note_id = o.note_id 
	LEFT JOIN table_account AS ac ON ac.account_id = o.account_id
 	LEFT JOIN table_distributors AS D ON o.distributor_id = D.distributor_id
 	LEFT JOIN table_retailer as R on R.retailer_id = o.retailer_id
	LEFT JOIN table_tags AS T on T.tag_id = o.tag_id
	WHERE o.date_of_note BETWEEN '" .
            $fromdate . "' AND '" . $todate . "' $distributor_id  Group by o.note_id)
	) as tm", "count(*) as total", '', $where . '  ORDER BY tm.document_date ASC');

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $viewInvoice = $viewPrintInvoice = '';
            if ($auRec[$i]->note_type == 'C') {
                $note_type = "Credit";
                $types = '';
                $note_id = $auRec[$i]->note_id;
            } else if ($auRec[$i]->note_type == 'D') {
                $note_type = "Debit";
                $types = '';
                $note_id = $auRec[$i]->note_id;
            } else {
                $note_type = "Sales Return";
                $types = "&type=1";
                $note_id = '';
            }

            $note_status = $color = '';
            if ($auRec[$i]->note_status == 'C') {
                $note_status = "Canceled Note";
                $color = 'C';
            } else {
                $note_status = "Active";
                $viewInvoice = '<a target=\"blank\" href=\"cn_pdf.php?id=' . base64_encode($auRec[$i]->note_id)
                    . $types . '\">View</a>';
                $viewPrintInvoice = '<a target=\"blank\" href=\"cn_print.php?id=' . base64_encode($auRec[$i]->note_id) . $types . '\">Print</a>';
            }
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $note_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . $viewInvoice . '"';
            $json .= ',"' . $viewPrintInvoice . '"';
            $json .= ',"' . $this->_changeDate($auRec[$i]->date) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->time)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->company_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->document_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($note_type)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(floor($auRec[$i]->total_amount), 2))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->description))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->remarks)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->clearing_status)) . '"';
            $json .= ',"' . ucwords(addslashes($note_status)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


    function showPaymentTransactions()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'o.payment_date';
        if (!$sortorder)
            $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromDisList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToDisList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['distributor_id'] != '' && $_SESSION['userLoginType'] != 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributor_id'] . "' ";
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        }
        if ($query != '' && ($qtype == "payment_date" || $qtype == "due_date")) {
            $query = date("Y-m-d", strtotime($query));
        }
        $where = " o.payment_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' $disLogCond";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer_payment_transactions AS o
				LEFT JOIN table_distributors as d on d.distributor_id = o.distributor_id
				LEFT JOIN table_retailer as r ON r.retailer_id=o.retailer_id
				LEFT JOIN table_payment_method as pp on pp.payment_method_id = o.payment_method_id',
            " o.*, d.distributor_name, d.distributor_code, r.retailer_name, r.retailer_code, pp.payment_method_desc",
            $rp, $where . $sort, '');
        $auRec1 = $this->_getSelectList('table_retailer_payment_transactions AS o
					LEFT JOIN table_distributors as d on d.distributor_id = o.distributor_id
					LEFT JOIN table_retailer as r ON r.retailer_id=o.retailer_id', "COUNT(*) AS total", '', $where . $sort, '');
        $total = $auRec1[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            //$status = ($auRec[$i]->status == 'C') ? 'Cancelled' : '';
            if ($auRec[$i]->status == 'C') {
                $status = "Cancelled";
            } elseif ($auRec[$i]->status == 'A') {
                $status = "Active";
            } else {
                $status = "";
            }
            $pending_amount = ROUND((ROUND($auRec[$i]->total_amount, 0) - ($auRec[$i]->adjusted_amount)), 0);
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->payment_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->payment_id)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->payment_date))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->payment_time)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->payment_ref_no)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(ROUND($auRec[$i]->total_amount), 0))) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(ROUND($auRec[$i]->adjusted_amount), 0))) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($pending_amount, 2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->payment_method_desc)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->cheque_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->bank_details)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace(array("\n", "\r"), '', $auRec[$i]->payment_remarks))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->clearing_status)) . '"';
            $json .= ',"' . ucwords($status) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->remarks)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRetailerDebitEntries($retailer_id, $distributor_id)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'category_name';
        if (!$sortorder)
            $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " cat_type = 'C' ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auResult = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Invoice' as doc_type,substr(o.bill_no, -10) as 
	document_no,o.bill_date, o.due_date,
        o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
		o.acc_total_invoice_amount-COALESCE(sum(p.received_amount),
         0) AS pending_amount
            FROM single_invoice_record as o 
		left join table_payment_received as p on p.order_id = o.invoice_id 
		WHERE o.order_type='Yes' AND o.order_for='R' AND
        o.invoice_status='A' AND o.order_status='D' AND o.retailer_id='" . $retailer_id . "' 
		AND o.distributor_id='" . $distributor_id . "' AND
       o.clearing_status!='Full'  Group by o.invoice_id )
		Union
	(SELECT o.note_id as id, 'DN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,o.due_date, o.total_amount as total_amount,
	COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount
		FROM table_credit_debit_note as o left join table_payment_received as p on p.note_id = o.note_id
		WHERE o.note_type='D' AND o.note_status='A' AND o.retailer_id='" . $retailer_id . "' 
		AND o.distributor_id='" . $distributor_id . "' AND o.clearing_status!='Full' Group by o.note_id )) as tm",
            "tm.*", $rp, '', ' ORDER BY tm.due_date ASC');

            // echo $retailer_id.",";
            // echo $distributor_id;
            // echo "<pre>";
            // print_r($auResult);die;
        $auResultTotal = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Invoice' as doc_type,substr(o.bill_no, -10) as document_no,o.bill_date, o.due_date,
        o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.acc_total_invoice_amount-COALESCE(sum(p.received_amount),
         0) AS pending_amount
        FROM single_invoice_record as o 
		left join table_payment_received as p on p.order_id = o.invoice_id 
		WHERE o.order_type='Yes' AND o.order_for='R' AND
        o.invoice_status='A' AND o.order_status='D' AND o.retailer_id='" . $retailer_id . "' 
		AND o.distributor_id='" . $distributor_id . "' AND
       o.clearing_status!='Full'  Group by o.invoice_id )
		Union
	(SELECT o.note_id as id, 'DN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,o.due_date, o.total_amount as total_amount,
	COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount
		FROM table_credit_debit_note as o left join table_payment_received as p on p.note_id = o.note_id
		WHERE o.note_type='D' AND o.note_status='A' AND o.retailer_id='" . $retailer_id . "' 
		AND o.distributor_id='" . $distributor_id . "' AND o.clearing_status!='Full' Group by o.note_id )) as tm",
            "count(*) as total", '', '', '');
        $total = $auResultTotal[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auResult); $i++) {
            if ($auResult[$i]->pending_amount >= 1) {
                //echo "ddd";
                $input = ' <input type=\"checkbox\" class=\"checkbox\" data-adj=\"' . $auResult[$i]->id . '\" data-adt=\"' . $auResult[$i]->doc_type . '\" data-dat=\"' . $auResult[$i]->due_date . '\" name=\"debit[]\" />';
                if ($rc)
                    $json .= ",";
                $json .= "\n{";
                $json .= '"id":"' . $auResult[$i]->id . '",';
                $json .= '"cell":["' . $input . '"';
                $json .= ',"' . addslashes($auResult[$i]->doc_type) . '"';
                $json .= ',"' . addslashes($auResult[$i]->document_no) . '"';
                $json .= ',"' . addslashes($auResult[$i]->bill_date) . '"';
                $json .= ',"' . addslashes($auResult[$i]->due_date) . '"';
                $json .= ',"' . addslashes(str_replace(',', '', number_format(ROUND($auResult[$i]->total_amount), 0))) . '"';
                $json .= ',"' . addslashes(str_replace(',', '', number_format(ROUND($auResult[$i]->adjusted_amount), 0))) . '"';
                $json .= ',"' . addslashes(str_replace(',', '', number_format(ROUND($auResult[$i]->pending_amount), 0))) . '"]';
                $json .= "}";
                $rc = true;
            }
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRetailerCreditEntries($retailer_id, $distributor_id)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'category_name';
        if (!$sortorder)
            $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " cat_type = 'C' ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auResult = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Return/Auto CN' as doc_type,substr(o.bill_no, -10) as document_no
	,o.bill_date,o.due_date, 
	o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.acc_total_invoice_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.bill_date as document_date 
	FROM single_invoice_record as o 
	left join table_payment_received as p on p.return_order_id = o.invoice_id 
	WHERE o.order_type='Return' AND o.order_for='R' AND o.invoice_status='A' 
	AND o.order_status='D' AND o.retailer_id='" . $retailer_id . "' AND o.distributor_id='" . $distributor_id . "' 
	AND o.clearing_status!='Full' Group by o.invoice_id)
	Union
	(SELECT o.note_id as id, 'CN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,
	o.due_date, o.total_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.date_of_note as document_date 
	FROM table_credit_debit_note as o left join table_payment_received as p on p.credit_note_id = o.note_id 
	WHERE o.note_type='C' AND o.note_status='A' AND o.retailer_id='" . $retailer_id . "' 
	AND o.distributor_id='" . $distributor_id . "' AND o.clearing_status!='Full' Group by o.note_id)
	union
	(SELECT o.payment_id as id, 'PMT' as doc_type ,o.payment_id as document_no, o.payment_date as bill_date,o.payment_date as due_date, o.total_amount as total_amount,
	COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.total_amount-COALESCE(sum(p.received_amount), 0) AS 
	pending_amount,
	o.payment_date as document_date FROM table_retailer_payment_transactions as o left join table_payment_received as p 
	on p.transaction_id = o.payment_id WHERE o.status='A' and o.retailer_id='" . $retailer_id . "' 
	AND o.distributor_id='" . $distributor_id . "' AND o.status='A' AND o.clearing_status!='Full' 
	Group by o.payment_id)) as tm", "tm.*", $rp, '', ' ORDER BY tm.document_date ASC');
        $auResultTotal = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Return' as doc_type,substr(o.bill_no, -10) as document_no
	,o.bill_date,o.due_date, 
	o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.acc_total_invoice_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.bill_date as document_date 
	FROM single_invoice_record as o 
	left join table_payment_received as p on p.return_order_id = o.invoice_id 
	WHERE o.order_type='Return' AND o.order_for='R' AND o.invoice_status='A' 
	AND o.order_status='D' AND o.retailer_id='" . $retailer_id . "' AND o.distributor_id='" . $distributor_id . "' 
	AND o.clearing_status!='Full' Group by o.invoice_id)
	Union
	(SELECT o.note_id as id, 'CN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,
	o.due_date, o.total_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.date_of_note as document_date 
	FROM table_credit_debit_note as o left join table_payment_received as p on p.credit_note_id = o.note_id 
	WHERE o.note_type='C' AND o.note_status='A' AND o.retailer_id='" . $retailer_id . "' 
	AND o.distributor_id='" . $distributor_id . "' AND o.clearing_status!='Full' Group by o.note_id)
	union
	(SELECT o.payment_id as id, 'PMT' as doc_type ,o.payment_id as document_no, o.payment_date as bill_date,o.payment_date as due_date, o.total_amount as total_amount,
	COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.total_amount-COALESCE(sum(p.received_amount), 0) AS 
	pending_amount,
	o.payment_date as document_date FROM table_retailer_payment_transactions as o left join table_payment_received as p 
	on p.transaction_id = o.payment_id WHERE o.status='A' and o.retailer_id='" . $retailer_id . "' 
	AND o.distributor_id='" . $distributor_id . "' AND o.status='A' AND o.clearing_status!='Full' 
	Group by o.payment_id)) as tm", "count(*) as total", '', '', '');
        $total = $auResultTotal[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auResult); $i++) {
            if ($auResult[$i]->pending_amount >= 1) {
                $input = ' <input type=\"checkbox\" class=\"checkbox\" data-adj=\"' . $auResult[$i]->id . '\" data-adt=\"' . $auResult[$i]->doc_type . '\" data-dat=\"' . $auResult[$i]->document_date . '\" name=\"credit[]\" />';
                if ($rc)
                    $json .= ",";
                $json .= "\n{";
                $json .= '"id":"' . $auResult[$i]->id . '",';
                $json .= '"cell":["' . $input . '"';
                $json .= ',"' . addslashes($auResult[$i]->doc_type) . '"';
                $json .= ',"' . addslashes($auResult[$i]->document_no) . '"';
                $json .= ',"' . addslashes($auResult[$i]->bill_date) . '"';
                $json .= ',"' . addslashes($auResult[$i]->document_date) . '"';
                $json .= ',"' . addslashes(ROUND($auResult[$i]->total_amount, 0)) . '"';
                $json .= ',"' . addslashes(ROUND($auResult[$i]->adjusted_amount, 0)) . '"';
                $json .= ',"' . addslashes(ROUND($auResult[$i]->pending_amount, 0)) . '"]';
                $json .= "}";
                $rc = true;
            }
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showTransaction($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',transaction_id desc';
        if (!$sortname)
            $sortname = 'transaction_date';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        if ($_SESSION['retailerID'] != '') {
            $retailer = " AND r.retailer_id = '" . $_SESSION['retailerID'] . "'";
        }
        if (isset($_SESSION['transsalesmanID']) && $_SESSION['transsalesmanID'] != '') {
            $salesman = " AND s.salesman_id = '" . $_SESSION['transsalesmanID'] . "'";
        }
        if ($_SESSION['distributorId'] != 0) {
            $disList = " d.distributor_id=" . $_SESSION['distributorId'];
        } else {
            $disList = "";
        }
        if ($_SESSION['FromTransList'] != '') {
            $fromdate = " and td.transaction_date >= '" . date('Y-m-d', strtotime($_SESSION['FromTransList'])) . "'";
        } else {
            $fromdate = " and td.transaction_date >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToTransList'] != '') {
            $todate = " and td.transaction_date <= '" . date('Y-m-d', strtotime($_SESSION['ToTransList'])) . "'";
        } else {
            $todate = " and td.transaction_date <= '" . date('Y-m-d') . "'";
        }

        if ($_SESSION['transId'] != '') {
            $transId = " AND transaction_id = '" . $_SESSION['transId'] . "'";
        }
        $where = " $retailer $disList $salesman $fromdate $todate $salesOrgCond $transId ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_transaction_details as td
		left join table_retailer as r on td.retailer_id=r.retailer_id
		left join table_distributors as d on d.distributor_id=r.distributor_id
		left join state as st on st.state_id=r.state
		left join city as c on c.city_id=r.city
		left join table_salesman as s on td.salesman_id=s.salesman_id
		left join table_account as di on di.account_id = s.account_id
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = r.state and szsm.account_id = r.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		', "td.*,s.salesman_name,s.employee_code,r.retailer_name, sz.zone_name,r.retailer_code,r.retailer_location,r.retailer_address,d.distributor_name,d.distributor_code,c.city_name,st.state_name,
		 di.company_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_transaction_details as td 
	    left join table_retailer as r on td.retailer_id=r.retailer_id 
	    left join table_distributors as d on d.distributor_id=r.distributor_id
	    left join state as st on st.state_id=r.state
		left join city as c on c.city_id=r.city
		left join table_salesman as s on td.salesman_id=s.salesman_id
		left join table_account as di on di.account_id = s.account_id
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = r.state and szsm.account_id = r.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id', 'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->transaction_type == 1) {
                $type = "Cash";
            } else if ($auRec[$i]->transaction_type == 2) {
                $type = 'Cheque';
            } else if ($auRec[$i]->transaction_type == 3) {
                $type = 'Draft';
            } else if ($auRec[$i]->transaction_type == 4) {
                $type = 'Neft/Rtgs';
            } else if ($auRec[$i]->transaction_type == 5) {
                $type = 'Bank Transfer';
            } else if ($auRec[$i]->transaction_type == 6) {
                $type = 'UPI';
            }
            //$status=($auRec[$i]->order_status=='A')?"New Order":"Processed";
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->transaction_id . '",';
            //$json .= "transtype:'". $auRec[$i]->transaction_type . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->company_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            // $json .= ',"'.ucwords(addslashes($auRec[$i]->distributor_name)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($type)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->issuing_bank)) . '"';
            $json .= ',"' . ucwords(addslashes(round($auRec[$i]->total_sale_amount))) . '"';
            $json .= ',"' . ucwords(addslashes($_objAdmin->_changeDate($auRec[$i]->transaction_date))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->transaction_time)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->remark)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"]';
            //$json .= ',"'.$status. '"';
            //$json .= ',"'.ucwords(str_replace($remove, ' ',addslashes($auRec[$i]->comments))).'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo Start : Jatin : 28 Dec 2023 : Generate Invoice Number for stockist while creating a order

    function getStockistInvoiceNoForStk($stockist_id, $order_type, $financialYear, $stockistCode = '')
    {
        if (strtolower($order_type) == 'return') {
            $checkInv = $this->_getSelectList('table_stockist_invoice', "order_id", "", " stockist_id='" . $stockist_id . "' AND order_type='" . $order_type . "' AND financial_year='" . $financialYear . "' AND order_for='D' AND order_status='D' ");
            $getLastInvNumber = array();
            if (is_array($checkInv) && count($checkInv) > 0) {
                $getLastInvNumber = $this->_getSelectList('table_stockist_invoice', "MAX((SUBSTRING( bill_no,-10))) as invoice_no", "", " stockist_id='" . $stockist_id . "' AND order_type='" . $order_type . "' AND financial_year='" . $financialYear . "' AND order_for='D' AND order_status='D' ");
            }
            if ($getLastInvNumber[0]->invoice_no > 0) {
                $invoice_no = ($getLastInvNumber[0]->invoice_no - 3000000000) + 1;
            } else {
                $invoice_no = 1;
            }
            $Type = 'RET';
            $InvoiceSeries = 3000000000;
        } else {
            $getLastInvNumber = array();
            $checkInv = $this->_getSelectList('table_stockist_invoice', "order_id", "", " stockist_id='" . $stockist_id . "' AND order_type='" . $order_type . "' AND financial_year='" . $financialYear . "' AND order_for='D' AND order_status='D' ");
            if (is_array($checkInv) && count($checkInv) > 0) {
                $getLastInvNumber = $this->_getSelectList('table_stockist_invoice', "MAX((SUBSTRING( bill_no,-10))) as invoice_no", "", " stockist_id='" . $stockist_id . "' AND order_type='" . $order_type . "' AND financial_year='" . $financialYear . "' AND order_for='D' AND order_status='D' ");
            }
            if ($getLastInvNumber[0]->invoice_no > 0) {
                $invoice_no = ($getLastInvNumber[0]->invoice_no - 2000000000) + 1;
            } else {
                $invoice_no = 1;
            }
            $Type = 'INV';
            $InvoiceSeries = 2000000000;
        }
        return $Type . '-' . $financialYear . '-' . ($InvoiceSeries + $invoice_no);
    }

    // Todo End : Jatin : 28 Dec 2023 : Generate Invoice Number for stockist while creating a order

    function getStockistInvoiceNo($distributor_id, $order_type, $financialYear, $stockistCode = '')
    {
        if (strtolower($order_type) == 'return') {
            $checkInv = $this->_getSelectList('table_distributor_invoice', "order_id", "", " stockist_id='" . $distributor_id . "' AND order_type='" . $order_type . "' AND financial_year='" . $financialYear . "' AND order_for='D' AND order_status='D' ");
            $getLastInvNumber = array();
            if (is_array($checkInv) && count($checkInv) > 0) {
                $getLastInvNumber = $this->_getSelectList('table_distributor_invoice', "MAX((SUBSTRING( bill_no,-10))) as invoice_no", "", " stockist_id='" . $distributor_id . "' AND order_type='" . $order_type . "' AND financial_year='" . $financialYear . "' AND order_for='D' AND order_status='D' ");
            }
            if ($getLastInvNumber[0]->invoice_no > 0) {
                $invoice_no = ($getLastInvNumber[0]->invoice_no - 3000000000) + 1;
            } else {
                $invoice_no = 1;
            }
            $Type = 'RET';
            $InvoiceSeries = 3000000000;
        } else {
            $getLastInvNumber = array();
            $checkInv = $this->_getSelectList('table_distributor_invoice', "order_id", "", " stockist_id='" . $distributor_id . "' AND order_type='" . $order_type . "' AND financial_year='" . $financialYear . "' AND order_for='D' AND order_status='D' ");
            if (is_array($checkInv) && count($checkInv) > 0) {
                $getLastInvNumber = $this->_getSelectList('table_distributor_invoice', "MAX((SUBSTRING( bill_no,-10))) as invoice_no", "", " stockist_id='" . $distributor_id . "' AND order_type='" . $order_type . "' AND financial_year='" . $financialYear . "' AND order_for='D' AND order_status='D' ");
            }
            if ($getLastInvNumber[0]->invoice_no > 0) {
                $invoice_no = ($getLastInvNumber[0]->invoice_no - 2000000000) + 1;
            } else {
                $invoice_no = 1;
            }
            $Type = 'INV';
            $InvoiceSeries = 2000000000;
        }
        return $Type . '-' . $stockistCode . '-' . $financialYear . '-' . ($InvoiceSeries + $invoice_no);
    }

    function getDistributorInvoiceNo($distributor_id, $order_type, $financialYear, $distributorCode = '')
    {
        if (strtolower($order_type) == 'return') {
            $checkInv = $this->_getSelectList('table_invoice', "order_id", "", " distributor_id='" . $distributor_id . "' AND order_type='" . $order_type . "' AND financial_year='" . $financialYear . "' AND order_for='R' AND order_status='D' ");
            $getLastInvNumber = array();
            if (is_array($checkInv) && count($checkInv) > 0) {
                $getLastInvNumber = $this->_getSelectList('table_invoice', "MAX((SUBSTRING( bill_no,-10))) as invoice_no", "", " distributor_id='" . $distributor_id . "' AND order_type='" . $order_type . "' AND financial_year='" . $financialYear . "' AND order_for='R' AND order_status='D' ");
            }
            if ($getLastInvNumber[0]->invoice_no > 0) {
                $invoice_no = ($getLastInvNumber[0]->invoice_no - 3000000000) + 1;
            } else {
                $invoice_no = 1;
            }
            $Type = 'RET';
            $InvoiceSeries = 3000000000;
        } else {
            $getLastInvNumber = array();
            $checkInv = $this->_getSelectList('table_invoice', "order_id", "", " distributor_id='" . $distributor_id . "' AND order_type='" . $order_type . "' AND financial_year='" . $financialYear . "' AND order_for='R' AND order_status='D' ");
            if (is_array($checkInv) && count($checkInv) > 0) {
                $getLastInvNumber = $this->_getSelectList('table_invoice', "MAX((SUBSTRING( bill_no,-10))) as invoice_no", "", " distributor_id='" . $distributor_id . "' AND order_type='" . $order_type . "' AND financial_year='" . $financialYear . "' AND order_for='R' AND order_status='D' ");
            }
            if ($getLastInvNumber[0]->invoice_no > 0) {
                $invoice_no = ($getLastInvNumber[0]->invoice_no - 2000000000) + 1;
            } else {
                $invoice_no = 1;
            }
            $Type = 'INV';
            $InvoiceSeries = 2000000000;
        }
        return $Type . '-' . $distributorCode . '-' . $financialYear . '-' . ($InvoiceSeries + $invoice_no);
    }

    function showRetailerInvoiceList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname)
            $sortname = 'bill_date';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['SalDisList'] != '') {
            $salesman = " and s.salesman_id='" . $_SESSION['SalDisList'] . "'";
        }
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.bill_date >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.bill_date >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.bill_date <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.bill_date <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['distributorId'] != "A") {
            $disList = " o.distributor_id=" . $_SESSION['distributorId'] . " and";
        } else {
            $disList = "";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_status='A' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_status='I' ";
            }
            if ($_SESSION['OrderBy'] == 4) {
                $orderby = " and o.order_status='D' ";
            }
        } else {
            $orderby = "";
        }
        if ($_SESSION['distributorId'] > 0) { //$_SESSION['userLoginType']==3 &&
            $distributorCond = " AND o.distributor_id ='" . $_SESSION['distributorId'] . "' ";
        }
        if (isset($_SESSION['invoice_type']) && $_SESSION['invoice_type'] != '' && $_SESSION['invoice_type'] != 'All') {
            if (strtolower($_SESSION['invoice_type']) == 'invoice') {
                $distributorCond .= " AND o.order_type='Yes' AND o.invoice_status='A' ";
            } elseif (strtolower($_SESSION['invoice_type']) == 'return') {
                $distributorCond .= " AND o.order_type='return' AND o.invoice_status='A' ";
            } elseif (strtolower($_SESSION['invoice_type']) == 'cancel') {
                $distributorCond .= " AND o.invoice_status='C' ";
            }
        }
        $where = " AND o.order_for='R' AND o.order_status ='D' and o.distributor_id!='' $disLogCond $salesman $fromdate $todate $regionCondition $stateCondition $distributorCond $orderby ";
        if ($query == 'Cancelled Invoice') {
            $query = 'C';
        } elseif ($query == 'Invoiced') {
            $query = 'A';
        } elseif ($query == 'Return Invoiced') {
            $qtype = 'o.order_type';
            $query = 'Return';
        }
        if ($query == 'Payment Pending') {
            $query = '0';
        } elseif ($query == 'Payment Received') {
            $query = '1';
        }
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $groupBy = "GROUP BY o.invoice_id";
        $auRec = $this->_getSelectList('table_invoice as o
	LEFT JOIN table_invoice_detail as OD ON OD.order_id = o.order_id
    left join table_retailer as r on o.retailer_id=r.retailer_id
    left join table_salesman as s on o.salesman_id=s.salesman_id   
    left join table_distributors as dd on dd.distributor_id=r.distributor_id
    left join state as st on st.state_id=r.state
    left join city as c on c.city_id=r.city
    left join table_retailer_address as sp ON sp.address_id=o.shipping_address
    left join table_retailer_address as bp ON bp.address_id=o.billing_address
   ', "o.*,r.retailer_name, r.retailer_code, r.retailer_location,
    r.lat as retlat,r.display_outlet,r.lng as retlng,s.salesman_name, dd.distributor_name,
    dd.distributor_code,dd.distributor_name,st.state_name,
    c.city_name,r.country as retailer_country,r.retailer_address, r.retailer_location,sp.address as shipping_address,bp.address as billing_address,bp.zipcode as billing_zip,sp.zipcode as shipping_zip", $rp, $where . $groupBy . $sort, '');
        $auRecCount = $this->_getSelectList('table_invoice as o
    left join table_retailer as r on o.retailer_id=r.retailer_id
    left join table_salesman as s on o.salesman_id=s.salesman_id    
    left join table_distributors as dd on dd.distributor_id=r.distributor_id
    left join state as st on st.state_id=r.state
    left join city as c on c.city_id=r.city'
            , 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {
            $viewInvoice = $viewSchemeInvoice = '';
            $viewPrintInvoice = $viewPrintSchemeInvoice = '';
            if ($auRec[$i]->order_status == 'A') {
                $status = "New Order";
                $color = "N";
            }
            if ($auRec[$i]->order_status == 'I') {
                $status = "Processed";
                $color = "I";
            }
            if ($auRec[$i]->order_status == 'D' && $auRec[$i]->invoice_status == 'A') {
                // $status="Dispatched";
                $status = "Invoiced";
                $color = "A";
                $payment_sts = ($auRec[$i]->payment_received == 0) ? "Payment Pending" : "Payment Received";
                if ($auRec[$i]->order_type == 'Return') {
                    $status = "Return Invoiced";
                    $color = "I";
                    $payment_sts = "";
                }
                $viewInvoice = "<a " . $targetBlank . " href=\"invoice.php?id=" . base64_encode($auRec[$i]->invoice_id) . "\">View Invoice</a>";
                $viewPrintInvoice = "<a " . $targetBlank . " href=\"print_invoice.php?id=" . base64_encode($auRec[$i]->invoice_id) . "\">Print Invoice</a>";
                $due_date = $this->_changeDate($auRec[$i]->due_date);
            } elseif ($auRec[$i]->order_status == 'D' && $auRec[$i]->invoice_status == 'C') {
                $color = 'R';
                $status = 'Cancelled Invoice';
                $payment_sts = "";
            }
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            /* Bill Type */
            $billTYPE = '';
            $bill_desc = '';
            switch (strtolower($auRec[$i]->bill_type)) {
                case 'apc':
                    $billTYPE = "Advance Payment Collection";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'ac':
                    $billTYPE = "Advance Cheque";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'fp':
                    $billTYPE = "Flexible Plan";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
            }
            switch (strtolower($auRec[$i]->order_for)) {
                case 'r':
                    $order_for = 'Retailer';
                    break;
                case 'd':
                    $order_for = 'Distributor';
                    break;
            }
            $date_of_invoice = $this->_changeDate($auRec[$i]->bill_date);
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            $date_of_delivery = $this->_changeDate($auRec[$i]->delivery_date);
            //Todo Start :sudhanshu 21 may 2024 : shipping address and billing address with zipcode also change in query
            $shipping_address = $auRec[$i]->shipping_address . ' ' . $auRec[$i]->shipping_zip;
            $billing_address = $auRec[$i]->billing_address . ' ' . $auRec[$i]->billing_zip;
            //Todo End :sudhanshu 21 may 2024 : shipping address and billing address with zipcode
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r", "'", "`");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->invoice_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . ucwords(addslashes($viewInvoice)) . '"';
            $json .= ',"' . ucwords(addslashes($viewPrintInvoice)) . '"';
            $json .= ',"' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . $date_of_invoice . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(ROUND($auRec[$i]->acc_total_invoice_amount), 0))) . '"';
            //$json .= ',"' . ucwords(addslashes($due_date)) . '"';
            $json .= ',"' . $payment_sts . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ref_order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($order_for)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($billTYPE)) . '"';
            $json .= ',"' . ucwords(addslashes($bill_desc)) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . ucwords(addslashes($date_of_delivery)) . '"';
            //Todo Start : Sudhanshu 13 may 2024 : add shipping and billing address column
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $shipping_address))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $billing_address))) . '"';
            //Todo End : Sudhanshu 13 may 2024 : add shipping and billing address column
            $json .= ',"' . $auRec[$i]->ref_inv_no . '"';
            $json .= ',"' . str_replace($remove, ' ', $auRec[$i]->remark) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*************************Sheenlac features integration*********************************************************/
    function showDistributorInvoiceList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname)
            $sortname = 'bill_date';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['SalDisList'] != '') {
            $salesman = " and s.salesman_id='" . $_SESSION['SalDisList'] . "'";
        }
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.bill_date >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.bill_date >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.bill_date <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.bill_date <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_status='A' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_status='I' ";
            }
            if ($_SESSION['OrderBy'] == 4) {
                $orderby = " and o.order_status='D' ";
            }
        } else {
            $orderby = "";
        }
        if ($_SESSION['distributorId'] > 0 && $_SESSION['userLoginType'] == 3) { //$_SESSION['userLoginType']==3 &&
            $distributorCond = " AND o.distributor_id ='" . $_SESSION['distributorId'] . "' ";
        }
        if ($_SESSION['dis'] != "A" && $_SESSION['dis'] > 0) {
            $distributorCond = " AND o.distributor_id=" . $_SESSION['dis'];
        }
        if ($_SESSION['stockistId'] > 0) {
            $stockistCond = " AND o.stockist_id ='" . $_SESSION['stockistId'] . "' ";
        }
        if (isset($_SESSION['invoice_type']) && $_SESSION['invoice_type'] != '' && $_SESSION['invoice_type'] != 'All') {
            if (strtolower($_SESSION['invoice_type']) == 'invoice') {
                $distributorCond .= " AND o.order_type='Yes' AND o.invoice_status='A' ";
            } elseif (strtolower($_SESSION['invoice_type']) == 'return') {
                $distributorCond .= " AND o.order_type='return' AND o.invoice_status='A' ";
            } elseif (strtolower($_SESSION['invoice_type']) == 'cancel') {
                $distributorCond .= " AND o.invoice_status='C' ";
            }
        }
        $where = " AND o.order_for='D' AND o.order_status ='D' and o.distributor_id!='' $disLogCond $stockistCond $salesman $fromdate $todate $regionCondition $stateCondition $distributorCond $orderby ";
        if ($query == 'Cancelled Invoice') {
            $query = 'C';
        } elseif ($query == 'Invoiced') {
            $query = 'A';
        } elseif ($query == 'Return Invoiced') {
            $qtype = 'o.order_type';
            $query = 'Return';
        }
        if ($query == 'Payment Pending' && $qtype == 'o.payment_received') {
            $query = '0';
            $where .= " AND o.return_type != '1' ";
        } elseif ($query == 'Payment Received' && $qtype == 'o.payment_received') {
            $query = '1';
            $where .= " AND o.return_type != '1' ";
        }
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $groupBy = "GROUP BY o.invoice_id";
        $auRec = $this->_getSelectList('table_distributor_invoice as o
	LEFT JOIN table_distributor_invoice_detail as OD ON OD.order_id = o.order_id
    left join table_stockist as r on o.stockist_id=r.stockist_id
    left join table_salesman as s on o.salesman_id=s.salesman_id   
    left join table_distributors as dd on dd.distributor_id=o.distributor_id
    left join state as st on st.state_id=dd.state
    left join city as c on c.city_id=dd.city
    left join table_distributor_address as ad on ad.address_id=o.shipping_address
    left join table_distributor_address as ad2 on ad2.address_id=o.billing_address
    ', "o.*,r.stockist_name, r.stockist_code, r.stockist_location,
    r.lat as retlat,r.lng as retlng,s.salesman_name, dd.distributor_name,
    dd.distributor_code,dd.distributor_location,st.state_name,
    c.city_name,r.country as retailer_country,dd.distributor_address, dd.distributor_location,ad.address as shipping_address,ad2.address as billing_address,ad.zipcode as shipping_zip,ad2.zipcode as billing_zip", $rp, $where . $groupBy . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributor_invoice as o
    left join table_stockist as r on o.stockist_id=r.stockist_id
    left join table_salesman as s on o.salesman_id=s.salesman_id    
    left join table_distributors as dd on dd.distributor_id=o.distributor_id
    left join state as st on st.state_id=dd.state
    left join city as c on c.city_id=dd.city
    ', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $viewInvoice = $viewSchemeInvoice = '';
            $viewPrintInvoice = $viewPrintSchemeInvoice = '';
            if ($auRec[$i]->order_status == 'A') {
                $status = "New Order";
                $invoceStatus = 'Full Pending';
                $color = "N";
            }
            if ($auRec[$i]->order_status == 'I') {
                $status = "Processed";
                $color = "I";
            }
            if ($auRec[$i]->order_status == 'D' && $auRec[$i]->invoice_status == 'A') {
                // $status="Dispatched";
                $status = "Invoiced";
                $color = "A";
                $payment_sts = ($auRec[$i]->payment_received == 0) ? "Payment Pending" : "Payment Received";
                if ($auRec[$i]->order_type == 'Return') {
                    $status = "Return Invoiced";
                    $color = "I";
                    $payment_sts = "";
                }
                $viewInvoice = '<a target=\"blank\" href=\"distributor_invoice.php?id=' . base64_encode($auRec[$i]->invoice_id) . '\">View Invoice</a>';
                $viewPrintInvoice = '<a target=\"blank\" href=\"print_distributor_invoice.php?id=' . base64_encode($auRec[$i]->invoice_id) . '\">Print Invoice</a>';
                $due_date = $this->_changeDate($auRec[$i]->due_date);
            } elseif ($auRec[$i]->order_status == 'D' && $auRec[$i]->invoice_status == 'C') {
                $color = 'R';
                $status = 'Cancelled Invoice';
                $payment_sts = "";
            }
            $outlet = '';
            /* Bill Type */
            $billTYPE = '';
            $bill_desc = '';
            switch (strtolower($auRec[$i]->bill_type)) {
                case 'apc':
                    $billTYPE = "Advance Payment Collection";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'ac':
                    $billTYPE = "Advance Cheque";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'fp':
                    $billTYPE = "Flexible Plan";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
            }
            switch (strtolower($auRec[$i]->order_for)) {
                case 'r':
                    $order_for = 'Retailer';
                    break;
                case 'd':
                    $order_for = 'Distributor';
                    break;
            }
            $date_of_invoice = $this->_changeDate($auRec[$i]->bill_date);
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            $date_of_delivery = $this->_changeDate($auRec[$i]->delivery_date);
            //Todo Start :sudhanshu 21 may 2024 : shipping address and billing address also change in query
            $shipping_address = $auRec[$i]->shipping_address . ' ' . $auRec[$i]->shipping_zip;
            $billing_address = $auRec[$i]->billing_address . ' ' . $auRec[$i]->billing_zip;
            //Todo End :sudhanshu 21 may 2024 : shipping address and billing address also change in query
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r", "'", "`");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->invoice_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . (($viewInvoice)) . '"';
            $json .= ',"' . (($viewPrintInvoice)) . '"';
            $json .= ',"' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . $date_of_invoice . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(ROUND($auRec[$i]->acc_total_invoice_amount), 0))) . '"';
            // $json .= ',"' . ucwords(addslashes($due_date)) . '"';
            $json .= ',"' . $payment_sts . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ref_order_id)) . '"';
            //Todo Start : sudhanshu 30 may 2024 : add ref invoice number
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ref_inv_no)) . '"';
            //Todo End  : sudhanshu 30 may 2024 : add ref invoice number
            $json .= ',"' . ucwords(addslashes($order_for)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($billTYPE)) . '"';
            $json .= ',"' . ucwords(addslashes($bill_desc)) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_location))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_address))) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . ucwords(addslashes($date_of_delivery)) . '"';
            //Todo start : sudhanshu 13 may 2024 : add shipping and billing address
            $json .= ',"' . ucwords(addslashes($shipping_address)) . '"';
            $json .= ',"' . ucwords(addslashes($billing_address)) . '"';
            //Todo End : sudhanshu 13 may 2024 : add shipping and billing address
            $json .= ',"' . str_replace($remove, ' ', $auRec[$i]->remark) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

//Todo Start: Sagar : 20 July - state and country master
    function showCountry()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'country_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('country', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('country', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"country.php?stid=' . $auRec[$i]->country_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y H:i:s', strtotime($auRec[$i]->last_update_date));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->country_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->country_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->country_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->contact_min_length) . '"';
            $json .= ',"' . addslashes($auRec[$i]->contact_max_length) . '"';
            $json .= ',"' . addslashes($lastUpdate) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addCountry()
    {
        $data['country_name'] = mysql_escape_string(trim($_POST['country_name']));
        $data['country_code'] = mysql_escape_string(trim($_POST['country_code']));
        $data['contact_max_length'] = mysql_escape_string($_POST['contact_max_length']);
        $data['contact_min_length'] = mysql_escape_string($_POST['contact_min_length']);
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'country');
        return $id;
    }

    function updateCountry($id)
    {
        $data['country_name'] = mysql_escape_string(trim($_POST['country_name']));
        $data['country_code'] = mysql_escape_string(trim($_POST['country_code']));
        $data['contact_max_length'] = mysql_escape_string($_POST['contact_max_length']);
        $data['contact_min_length'] = mysql_escape_string($_POST['contact_min_length']);
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $this->_dbUpdate2($data, 'country', " country_id=" . $id);
        return $id;
    }

    function showState()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'st.state_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('state as st
		LEFT JOIN table_region as reg on reg.region_id = st.region_id
		LEFT JOIN country as co ON co.country_id = st.country_id', "st.*,co.country_name,reg.region_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('state as st
		LEFT JOIN table_region as reg on reg.region_id = st.region_id
		LEFT JOIN country as co ON co.country_id = st.country_id', 'count(st.state_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"state.php?stid=' . $auRec[$i]->state_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->last_update_date));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->state_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->country_name) . '"';
//            $json .= ',"' . addslashes($auRec[$i]->region_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_code) . '"';
            $json .= ',"' . addslashes($lastUpdate) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addState()
    {
        $data['country_id'] = mysql_escape_string($_POST['country_id']);
//        $data['region_id'] = mysql_escape_string($_POST['region_id']);
        $data['state_name'] = mysql_escape_string(trim($_POST['state_name']));
        $data['state_code'] = mysql_escape_string(trim($_POST['state_code']));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'state');
        return $id;
    }

    function updateState($id)
    {
        $data['country_id'] = mysql_escape_string($_POST['country_id']);
//        $data['region_id'] = mysql_escape_string($_POST['region_id']);
        $data['state_name'] = mysql_escape_string(trim($_POST['state_name']));
        $data['state_code'] = mysql_escape_string(trim($_POST['state_code']));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $this->_dbUpdate2($data, 'state', " state_id=" . $id);
        return $id;
    }
    //Todo End: Sagar : 20 July - state and country master

    /****************DMS Integration***********************/
    function showRetailerWiseReturnItemsSummaryReport($salesman)
    {
        $unitArr = array();
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'o.date_of_order';
        if (!$sortorder)
            $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromOrderList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToOrderList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        }
        $groupby = " GROUP BY o.invoice_id, od.ref_order_id,od.item_id";
        $where = " o.bill_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' AND o.order_for='R' AND o.order_type='Return' AND o.invoice_status='A' AND o.ref_order_id != 0 $disLogCond";
        // AND o.order_status='D'
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_invoice AS o
			inner JOIN table_invoice_detail as od on od.invoice_id = o.invoice_id
			inner JOIN table_item as i on i.item_id = od.item_id			
			left join table_payment_terms as pt on pt.terms_id = i.terms_id
			LEFT JOIN table_distributors as d ON d.distributor_id=o.distributor_id
			left join state as stt on stt.state_id = d.state
			left join table_branch as b on b.branch_id = d.branch_id
			LEFT JOIN table_retailer as r ON r.retailer_id=o.retailer_id
			LEFT JOIN table_unit_conversion as uc on uc.item_id = od.item_id AND uc.unit_id = od.unit_id',
            " o.order_type,o.date_of_order, o.retailer_id, o.distributor_id, stt.state_name, o.bill_no, o.bill_date,
			o.against_invoice_no as ref_bill_no,i.item_name, i.item_code, i.unit_id as item_unit_id, od.*, 
			d.distributor_name, d.distributor_code,  pt.terms_desc, b.branch_code,r.retailer_code, r.retailer_name,
			((od.acc_quantity/uc.denominator)*uc.numerator) as ttl_quantity ", $rp, $where . $groupby . $sort, '');
        $total = $this->_getSelectList2('table_invoice AS o
			inner JOIN table_invoice_detail as od on od.order_id = o.order_id
			inner JOIN table_item as i on i.item_id = od.item_id
			
			left join table_payment_terms as pt on pt.terms_id = i.terms_id
			LEFT JOIN table_distributors as d ON d.distributor_id=o.distributor_id
			left join state as stt on stt.state_id = d.state
			left join table_branch as b on b.branch_id = d.branch_id
			LEFT JOIN table_retailer as r ON r.retailer_id=o.retailer_id
			LEFT JOIN table_unit_conversion as uc on uc.item_id = od.item_id AND uc.unit_id = od.unit_id', "COUNT(*) AS total", '', $where . $groupby . $sort, '');
        $total = count($total);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $totaltaxable_amount = $total_tax_amount = $Total_tt_amt = 0;
        $unArr = array();
        $totalqty = array();
        for ($i = 0; $i < count($auRec); $i++) {
            $bill_details = explode('-', $auRec[$i]->bill_no);
            $bill_no = $bill_details[3];
            $bill_date = $this->_changeDate($auRec[$i]->bill_date);
            $ref_bill_no = $ref_bill_date = '';
            if (isset($auRec[$i]->ref_bill_no) && !empty($auRec[$i]->ref_bill_no)) {
                $ref_bill_details = explode('-', $auRec[$i]->ref_bill_no);
                $ref_bill_no = $ref_bill_details[3];
                $ref_bill_date = $this->_changeDate($auRec[$i]->ref_bill_date);
            }
            $ordertype = '';
            if ($auRec[$i]->order_type == 'Yes') {
                $ordertype = 'Sales Invoice';
            } else if ($auRec[$i]->order_type == 'Return') {
                $ordertype = 'Return Invoice';
            }
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords($ordertype) . '"';
            $json .= ',"' . ucwords(addslashes($bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes($bill_date)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->quantity)) . '"';
            $taxable_amount = (($auRec[$i]->acc_quantity * $auRec[$i]->price) - $auRec[$i]->acc_discount_amount);
            $totaltaxable_amount = ($totaltaxable_amount + $taxable_amount);
            $json .= ',"' . number_format($taxable_amount, 2) . '"';
            $taxamt = ($auRec[$i]->gst_amount + $auRec[$i]->cgst_amount + $auRec[$i]->igst_amount);
            $total_tax_amount = ($total_tax_amount + $taxamt);
            $json .= ',"' . number_format($taxamt, 2) . '"';
            $tt_amt = ROUND((($auRec[$i]->acc_quantity * $auRec[$i]->price) + ($auRec[$i]->gst_amount + $auRec[$i]->cgst_amount + $auRec[$i]->igst_amount)), 0);
            $Total_tt_amt = ($Total_tt_amt + $tt_amt);
            $json .= ',"' . number_format(ROUND($tt_amt, 2), 2) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ref_bill_no)) . '"]';
            $json .= "}";
            $rc = true;
        }
        /* Bottom calculations */
        if ($rc)
            $json .= ",";
        $json .= "\n{";
        $json .= '"id":"1234"';
        $json .= ',"color":"A"';
        $json .= ',"cell":[" "';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',"Grand Total"';
        $json .= ',""';
        $json .= ',"' . number_format($totaltaxable_amount, 2) . '"';
        $json .= ',"' . number_format($total_tax_amount, 2) . '"';
        $json .= ',"' . number_format($Total_tt_amt, 2) . '"';
        $json .= ',""]';
        $json .= "}";
        /* Bottom calculation */
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function newJanshowproductlist()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY o.date_of_order desc";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $condition = '';
        $retCondition = '';
        if (isset($_SESSION['OrderRetId']) && $_SESSION['OrderRetId'] != '') {
            $retCondition = " AND o.retailer_id = " . $_SESSION['OrderRetId'];
        } else {
            if ($_SESSION['userLoginType'] == 3) {
                $distID = $_SESSION['distributorId'];
                $retRec = $_objAdmin->_getSelectList('table_retailer', 'retailer_id', '', "status = 'A' AND distributor_id = $distID ORDER BY retailer_id ASC");
                $retIdArr = [];
                if (is_array($retRec) && (count($retRec) > 0)) {
                    foreach ($retRec as $key => $retRecData) {
                        $retIdArr[] = $retRecData->retailer_id;
                    }
                    $retIds = implode(',', $retIdArr);
                    $retCondition = " AND o.retailer_id IN($retIds)";
                }
            }
        }

        if (isset($_SESSION['STATEID']) && $_SESSION['STATEID'] != '') {
            $condition .= " Dis.state = " . $_SESSION['STATEID'] . " AND R.state =" . $_SESSION['STATEID'] . " AND ";
        }
        if ($_SESSION['categoryID'] != '' && $_SESSION['categoryID'] != 'all') {
            $condition .= " c.category_id = " . $_SESSION['categoryID'] . " AND ";
        }
        if ($_SESSION['itemID'] != '' && $_SESSION['itemID'] != 'all') {
            $condition .= " o.item_id = " . $_SESSION['itemID'] . " AND ";
        }
        if ($_SESSION['FromProductList'] != '') {
            $fromdate = "  o.date_of_order  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
            $Invfromdate = " inv.bill_date  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
        } else {
            $fromdate = " o.date_of_order  >= '" . date('Y-m-d') . "' AND ";
            $Invfromdate = " inv.bill_date  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToProductList'] != '') {
            $todate = " o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
            $Invtodate = " inv.bill_date <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
        } else {
            $todate = "  o.date_of_order <= '" . date('Y-m-d') . "'";
            $Invtodate = "  inv.bill_date <= '" . date('Y-m-d') . "'";
        }
        $groupby = " GROUP BY o.order_id,o.item_id ";
        //get the partial pending orders till 31st March 2020
        mysqli_query($this->db_connect_id, "SET SESSION group_concat_max_len = 100000000");
        $flag = true;

        $where = " o.account_id='" . $_SESSION['accountId'] . "' AND $condition $fromdate $todate $retCondition ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('VIEW_ORDER_QTY as o
			left join table_measurement_units as mu on mu.unit_id=o.unit_id
			left join table_order_remarks as tor on tor.remark_id=o.reason
			LEFT JOIN table_item AS I ON I.item_id=o.item_id
			LEFT JOIN table_category AS c ON c.category_id = I.category_id
			LEFT JOIN table_salesman AS s ON o.salesman_id = s.salesman_id
			LEFT JOIN table_retailer AS R ON o.retailer_id = R.retailer_id
			LEFT JOIN table_distributors AS Dis ON Dis.distributor_id = o.distributor_id
			LEFT JOIN state as st on st.state_id=Dis.state
			LEFT JOIN city as ct on ct.city_id=Dis.city	
			LEFT JOIN state as rst on rst.state_id=R.state
			LEFT JOIN city as rct on rct.city_id=R.city
			',
            'o.order_id,o.date_of_order,o.order_status,tor.remark,o.reason_remark,
			Dis.distributor_name, Dis.distributor_code,
			R.retailer_name, R.retailer_code,
			
			CASE WHEN o.order_for="R" THEN rst.state_name
				   WHEN o.order_for="D" THEN st.state_name END AS state_name,
				CASE WHEN o.order_for="R" THEN rct.city_name
				  WHEN o.order_for="D" THEN ct.city_name END AS city_name,
			CASE WHEN o.salesman_id="0" THEN "PEPUP"
				   WHEN o.salesman_id !="0" THEN "APP" END AS order_from,
			o.order_for,s.salesman_name,s.employee_code,c.category_name,o.item_id,I.item_name,I.item_code,o.unit_id,mu.unit_code,
			o.order_quantity,ROUND(o.order_amount) as order_amount,
			"" as invoiced_quantity,
			"" as pendng_order_quantity,
			"" as invoiced_amount,
			"" as pendng_order_amount', $rp, $where . $groupby . $sort, '');
        $invoiceData = array();
        $invWhre = $Invfromdate . $Invtodate . " group by inv.ref_order_id,inv.item_id";
        $invoiceList = $this->_getSelectList2('ORDER_WISE_INVOICE_LIST_NEW as inv ',
            "inv.ref_order_id,inv.item_id,sum(inv.invoiced_quantity) as invoiced_quantity,sum(ROUND(inv.invoiced_amount)) as invoiced_amount",
            '',
            $invWhre, '');
        if (count($invoiceList) > 0) {
            foreach ($invoiceList as $key => $value) {
                $invoiceData[$value->ref_order_id][$value->item_id] = $value;
            }
        }

        $total = $this->_getSelectList2('VIEW_ORDER_QTY as o
    LEFT JOIN table_item AS I ON I.item_id=o.item_id   
    LEFT JOIN table_category AS c ON c.category_id = I.category_id
    LEFT JOIN table_salesman AS s ON o.salesman_id = s.salesman_id
    LEFT JOIN table_retailer AS R ON o.retailer_id = R.retailer_id
    LEFT JOIN table_distributors AS Dis ON Dis.distributor_id = o.distributor_id
    LEFT JOIN state as st on st.state_id=Dis.state
    ', "COUNT(*) AS total", '', $where . $sort, '');
        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        for ($i = 0; $i < count($auRec); $i++) {

            if ($auRec[$i]->date_of_order != "" && $auRec[$i]->date_of_order != "0000:00:00") {
                $date_of_order = $_objAdmin->_changeDate($auRec[$i]->date_of_order);
            } else {
                $date_of_order = "";
            }
            $resonRemark = $remarktxt = '';
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            switch (strtolower($auRec[$i]->order_for)) {
                case 'r':
                    $order_for = 'Retailer';
                    break;
                case 'd':
                    $order_for = 'Distributor';
                    break;
            }
            if (isset($invoiceData[$auRec[$i]->order_id][$auRec[$i]->item_id])) {
                $auRec[$i]->pendng_order_quantity = (floatval($auRec[$i]->order_quantity) - floatval($invoiceData[$auRec[$i]->order_id][$auRec[$i]->item_id]->invoiced_quantity));
                $auRec[$i]->pendng_order_amount = ((($auRec[$i]->pendng_order_quantity != '') ? ROUND($auRec[$i]->order_amount - $invoiceData[$auRec[$i]->order_id][$auRec[$i]->item_id]->invoiced_amount) : '0'));
                $auRec[$i]->invoiced_quantity = ($invoiceData[$auRec[$i]->order_id][$auRec[$i]->item_id]->invoiced_quantity);
                $auRec[$i]->invoiced_amount = ($invoiceData[$auRec[$i]->order_id][$auRec[$i]->item_id]->invoiced_amount);
            }
//            echo "<pre>";print_r($auRec[$i]);
            $color = '';
            if ($auRec[$i]->order_status == 'C') {
                $color = 'O';
            } else {

                if (empty($auRec[$i]->invoiced_quantity) && empty($auRec[$i]->pendng_order_quantity)) {
                    $color = 'I';
                } else if ($auRec[$i]->order_quantity == $auRec[$i]->invoiced_quantity) {
                    $color = 'A';
                } else {
                    $color = 'I';
                }
            }

            $resonRemark = preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace(array('\t', '\n', '	', ','), ' ', $auRec[$i]->reason_remark));
            $remarktxt = preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace(array('\t', '\n', '	', ','), ' ', $auRec[$i]->remark));

            $pedingqty = 0;
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . (addslashes($order_for)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . $date_of_order . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->unit_code)) . '"';
            $json .= ',"' . number_format(addslashes($auRec[$i]->order_quantity), 3) . '"';
            $json .= ',"' . number_format(addslashes($auRec[$i]->order_amount), 2) . '"';
            $json .= ',"' . number_format(addslashes($auRec[$i]->invoiced_quantity), 3) . '"';
            $json .= ',"' . number_format(addslashes($auRec[$i]->invoiced_amount), 2) . '"';
            $json .= ',"' . ((empty($auRec[$i]->pendng_order_quantity) && empty($auRec[$i]->invoiced_quantity)) ? ($auRec[$i]->order_quantity) : $auRec[$i]->pendng_order_quantity) . '"';
            $json .= ',"' . number_format((($auRec[$i]->pendng_order_amount == '') ? $auRec[$i]->order_amount : (($auRec[$i]->pendng_order_quantity == 0) ? '0' : $auRec[$i]->pendng_order_amount)), 2) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_from)) . '"';
            $json .= ',"' . ucwords(addslashes($remarktxt)) . '"';
            $json .= ',"' . ucwords(addslashes($resonRemark)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showPrimaryGSTReportNew($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'o.bill_no';
        if (!$sortorder)
            $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromOrderList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToOrderList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        }
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " and b.brand_id IN(" . $RoleBrands . ")";
        }
        $groupby = " GROUP BY o.bill_no";
        $where = " o.bill_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' AND o.bill_type='Invoice' AND 
	o.bill_status='A' $brandCnd $disLogCond";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_item_dis_stk_inprocess AS o
					LEFT JOIN table_item AS I ON o.item_id = I.item_id
					LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
					LEFT JOIN table_distributors as d ON d.distributor_id=o.distributor_id
					LEFT JOIN state as st on st.state_id = d.state', " o.bill_date, o.bill_no,o.sap_order_no,
					SUM(o.before_tax_amount) as total_amount,
					SUM(o.total_tax_amount) as tax_amount,
					d.distributor_name,
					d.distributor_code,
					d.gst_no,
					st.state_name,
					st.state_code,
					SUM(o.sgst_amount) as sgst_amount,SUM(o.cgst_amount) as cgst_amount,SUM(o.igst_amount) as igst_amount ", $rp, $where . $groupby . $sort, '');
        $total1 = $this->_getSelectList2('table_item_dis_stk_inprocess AS o
					LEFT JOIN table_item AS I ON o.item_id = I.item_id
					LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
					LEFT JOIN table_distributors as d ON d.distributor_id=o.distributor_id
					LEFT JOIN state as st on st.state_id = d.state', "COUNT(DISTINCT bill_no) AS total", '', $where, '');
        $total = $total1[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sgst_amount = $cgst_amount = $igst_amount = 0;
            if ($auRec[$i]->sgst_amount > 0) {
                $sgst_amount = $auRec[$i]->sgst_amount;
            }
            if ($auRec[$i]->cgst_amount > 0) {
                $cgst_amount = $auRec[$i]->cgst_amount;
            }
            if ($auRec[$i]->igst_amount > 0) {
                $igst_amount = $auRec[$i]->igst_amount;
            }
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->bill_no . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->gst_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sap_order_no)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->bill_date))) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(floor($auRec[$i]->total_amount), 2))) . '"';
            $json .= ',"' . ucwords(addslashes($sgst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($cgst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($igst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes(floor($auRec[$i]->total_amount) + $auRec[$i]->tax_amount)) . '"';
            $json .= ',"' . ucwords(addslashes('')) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showPrimaryGSTDetailReportNew($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'o.bill_no';
        if (!$sortorder)
            $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromOrderList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToOrderList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        }
        if ($_REQUEST['qtype'] == "bill_date") {
            $query = date('Y-m-d', strtotime(mysql_escape_string($_REQUEST['query'])));
        }
//Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " and b.brand_id IN(" . $RoleBrands . ")";
        }
        $groupby = " GROUP BY o.bill_no, o.item_id";
        $where = " o.bill_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' AND o.bill_type='Invoice' AND o.bill_status='A' $brandCnd $disLogCond";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_item_dis_stk_inprocess AS o
					inner JOIN table_item as i on i.item_id = o.item_id
					left join table_brands as b on b.brand_id = i.brand_id
					LEFT JOIN table_group as g on g.group_id = i.group_id
					LEFT JOIN table_distributors as d ON d.distributor_id=o.distributor_id
					LEFT JOIN state as st on st.state_id = d.state', "o.dis_stk_inpro_id,
					o.bill_date, o.bill_no,
					o.before_tax_amount as total_amount,
					o.total_tax_amount as tax_amount,
					d.distributor_name,
					d.distributor_code,
					d.gst_no,
					i.item_name,
					i.item_code,b.brand_name,
					o.sgst_amount as sgst_amount,o.cgst_amount as cgst_amount,o.igst_amount as igst_amount,
					o.sgst_rate as sgst_rate,o.cgst_rate as cgst_rate,o.igst_rate as igst_rate,
					g.hsn_code,
					st.state_name,
					st.state_code", $rp, $where . $groupby . $sort, '');
        $total = $this->_getSelectList2('table_item_dis_stk_inprocess AS o
					inner JOIN table_item as i on i.item_id = o.item_id
					left join table_brands as b on b.brand_id = i.brand_id
					LEFT JOIN table_group as g on g.group_id = i.group_id
					LEFT JOIN table_distributors as d ON d.distributor_id=o.distributor_id
					LEFT JOIN state as st on st.state_id = d.state', "COUNT(*) AS total", '', $where . $groupby . $sort, '');
        $total = count($total);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $sgst_amount = $cgst_amount = $igst_amount = 0;
            if ($auRec[$i]->sgst_amount > 0) {
                $sgst_amount = $auRec[$i]->sgst_amount;
            }
            if ($auRec[$i]->cgst_amount > 0) {
                $cgst_amount = $auRec[$i]->cgst_amount;
            }
            if ($auRec[$i]->igst_amount > 0) {
                $igst_amount = $auRec[$i]->igst_amount;
            }
            if ($rc)
                $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->dis_stk_inpro_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->gst_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->bill_date))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->brand_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->hsn_code)) . '"';
            $json .= ',"' . ucwords(addslashes(($auRec[$i]->sgst_rate + $auRec[$i]->cgst_rate + $auRec[$i]->igst_rate))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($sgst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($cgst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($igst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes(ROUND(($auRec[$i]->total_amount + $auRec[$i]->tax_amount), 0))) . '"';
            $json .= ',"' . ucwords(addslashes('')) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showBranchStockList()
    {
        //$salesman = "";
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        // $ordertime=',time_of_order desc';
        if (!$sortname)
            $sortname = 'branch_name';
        if (!$sortorder)
            $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['branchID'] != '') {
            $condition .= " AND B.branch_id ='" . $_SESSION['branchID'] . "' ";
        }
        if ($_SESSION['categoryID'] != '' && $_SESSION['categoryID'] != 'all') {
            $condition .= " AND c.category_id = " . $_SESSION['categoryID'];
        }
        if ($_SESSION['itemID'] != '' && $_SESSION['itemID'] != 'all') {
            $condition .= " AND I.item_id = " . $_SESSION['itemID'];
        }
        $groupby = " GROUP BY BS.branch_id,BS.item_id  having BS.item_id!=''";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " and b.brand_id IN(" . $RoleBrands . ")";
        }
        $where = " BS.account_id='" . $_SESSION['accountId'] . "' $brandCnd $condition $fromdate $todate $salesOrgCond ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_item_branch_stock as BS
			LEFT JOIN table_branch as B on B.branch_id = BS.branch_id
			LEFT JOIN table_item AS I ON I.item_id = BS.item_id
			left join table_brands as b on b.brand_id = I.brand_id
			LEFT JOIN table_category AS c ON c.category_id = I.category_id
			LEFT JOIN table_variant AS V ON V.variant_id = I.variant_id
			left join table_account as di on di.account_id = BS.account_id', 'BS.branch_stk_id,b.brand_name, BS.branch_stock_value, BS.last_updated_date, I.item_code, I.item_name, c.category_name, V.variant_name, B.branch_name, B.branch_code, di.company_name', $rp, $where . $sort, '');
        $total = $this->_getSelectList('table_item_branch_stock as BS
			LEFT JOIN table_branch as B on B.branch_id = BS.branch_id
			LEFT JOIN table_item AS I ON I.item_id = BS.item_id
			left join table_brands as b on b.brand_id = I.brand_id
			LEFT JOIN table_category AS c ON c.category_id = I.category_id
			LEFT JOIN table_variant AS V ON V.variant_id = I.variant_id', 'COUNT(*) AS total', "", $where . $sort, '');
        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->branch_stk_id . '",';
            $json .= '"cell":["' . (addslashes($auRec[$i]->company_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->branch_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->branch_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->brand_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->variant_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->branch_stock_value)) . '"';
            $json .= ',"' . date('Y-m-d', strtotime($this->_changeDate($auRec[$i]->last_updated_date))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showSAPproductlist()
    {
        //$salesman = "";
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        // $ordertime=',time_of_order desc';
        if (!$sortname)
            $sortname = 'invoice_date';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        if ($_SESSION['distributor_Id'] != '') {
            $condition .= " O.distributor_id='" . $_SESSION['distributor_Id'] . "' AND ";
        }
        if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] > 0) {
            $condition .= " O.distributor_id ='" . $_SESSION['distributorId'] . "' AND ";
        }
        if ($_SESSION['RetailerID'] != '') {
            $condition .= " R.retailer_id='" . $_SESSION['RetailerID'] . "' AND ";
        }
        if ($_SESSION['categoryID'] != '' && $_SESSION['categoryID'] != 'all') {
            $condition .= " c.category_id = " . $_SESSION['categoryID'] . " AND ";
        }
        if ($_SESSION['itemID'] != '' && $_SESSION['itemID'] != 'all') {
            $condition .= " D.item_id = " . $_SESSION['itemID'] . " AND ";
        }
        if ($_SESSION['FromProductList'] != '') {
            $fromdate = "  O.invoice_date  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
        } else {
            $fromdate = " O.invoice_date  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToProductList'] != '') {
            $todate = " O.invoice_date <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
        } else {
            $todate = "  O.invoice_date <= '" . date('Y-m-d') . "'";
        }
        $groupby = " GROUP BY D.item_id having D.item_id!=''";
        $where = " O.account_id='" . $_SESSION['accountId'] . "' and $condition $fromdate $todate $salesman $salesOrgCond";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_sap_invoice_history_details as D
			LEFT JOIN table_sap_invoice_history as O on O.invoice_id = D.invoice_id
			LEFT JOIN table_item AS I ON D.item_id = I.item_id
			LEFT JOIN table_category AS c ON c.category_id = I.category_id
			LEFT JOIN table_variant AS V ON V.variant_id = I.variant_id
			LEFT JOIN table_price AS P ON P.item_id = D.item_id
			LEFT JOIN table_retailer AS R ON R.retailer_id = O.retailer_id 
			LEFT JOIN table_distributors AS DIS ON DIS.distributor_id = O.distributor_id 
			', 'D.acc_quantity as sales_quantity, D.acc_total_amount, D.acc_tax_amount, O.sap_invoice_no, 
			O.invoice_date, I.item_code, I.item_name, c.category_name, V.variant_name, P.item_mrp AS item_price, 
			R.retailer_name, R.retailer_code, 
			O.invoice_for,DIS.distributor_name, DIS.distributor_code ', $rp, $where . $sort, '');
        $total = $this->_getSelectList2('table_sap_invoice_history_details as D
			LEFT JOIN table_sap_invoice_history as O on O.invoice_id = D.invoice_id
			LEFT JOIN table_item AS I ON D.item_id = I.item_id
			LEFT JOIN table_category AS c ON c.category_id = I.category_id
			LEFT JOIN table_variant AS V ON V.variant_id = I.variant_id
			LEFT JOIN table_price AS P ON P.item_id = D.item_id
			LEFT JOIN table_retailer AS R ON R.retailer_id = O.retailer_id 			
			LEFT JOIN table_distributors AS DIS ON DIS.distributor_id = O.distributor_id
			', 'COUNT(*) AS total ', "", $where . $sort, '');
        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $item_price = round(($auRec[$i]->acc_total_amount / $auRec[$i]->sales_quantity), 2);
            $total_amount = $auRec[$i]->acc_total_amount + $auRec[$i]->acc_tax_amount;
            $invoice_for = '';
            $retailer_name = '';
            $retailer_code = '';
            $distributor_name = '';
            $distributor_code = '';
            $retailer_class = '';
            $distributor_class = '';
            $invoice_for = ((isset($auRec[$i]->invoice_for) && !empty($auRec[$i]->invoice_for) && strtolower($auRec[$i]->invoice_for) == 'r') ? 'Retailer' : 'Distributors');
            $retailer_name = $auRec[$i]->retailer_name;
            $retailer_code = $auRec[$i]->retailer_code;
            $distributor_name = $auRec[$i]->distributor_name;
            $distributor_code = $auRec[$i]->distributor_code;
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->invoice_id . '",';
            $json .= '"cell":["' . (addslashes($invoice_for)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sap_invoice_no)) . '"';
            $json .= ',"' . ucwords(addslashes($distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->variant_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($item_price)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sales_quantity)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->acc_total_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->acc_tax_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($total_amount)) . '"';
            $json .= ',"' . date('Y-m-d', strtotime($_objAdmin->_changeDate($auRec[$i]->invoice_date))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRetailerFullPartialPendingOrders()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($qtype == "date_of_order" && $query != '') {
            $query = date("Y-m-d", strtotime($query));
        }
        $_objAdmin = new Admin();
        if ($_SESSION['SalDisList'] != '') {
            $salesman = " and s.salesman_id='" . $_SESSION['SalDisList'] . "'";
        }
        //$validated_default_date = date("Y-m-d",strtotime("-2 Months"));
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['distributorId'] != "A") {
            $disList = " AND o.distributor_id=" . $_SESSION['distributorId'] . " ";
        } else {
            $disList = "";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_status='A' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_status='I' ";
            }
            if ($_SESSION['OrderBy'] == 4) {
                $orderby = " and o.order_status='D' ";
            }
        } else {
            $orderby = "";
        }
        if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] > 0) {
            $distributorCond = " AND o.distributor_id ='" . $_SESSION['distributorId'] . "' ";
        }
        //Todo Start : Sudahnshu 29 April 2024 add distributor condition
        $where = " AND r.new='' AND o.order_for='R' AND o.order_status !='D' AND o.order_status IN('A', 'I') AND o.order_type IN('Yes', 'Return', 'Adhoc') AND o.distributor_id!='' $disList $disLogCond $salesman $fromdate $todate $regionCondition $stateCondition $salesOrgCond $distributorCond $orderby AND o.account_id =" . $_SESSION['accountId'];
        //Todo End : Sudahnshu 29 April 2024 add distributor condition
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order as o
      left join table_retailer as r on o.retailer_id=r.retailer_id
      left join table_salesman as s on o.salesman_id=s.salesman_id
      left join table_distributors as d on d.distributor_id=o.distributor_id      
      left join state as st on st.state_id=r.state
      left join city as c on c.city_id=r.city
      left join table_location as tl on tl.location_id = r.location_id
      left join table_branch as br on br.branch_id = r.branch_id',
            "o.*,r.retailer_name, r.retailer_code,r.retailer_address,r.retailer_location,r.display_outlet,s.salesman_name,s.employee_code,d.distributor_name,tl.location_name,d.distributor_code, st.state_name,c.city_name, br.branch_name, br.branch_code", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_order as o
      left join table_retailer as r on o.retailer_id=r.retailer_id
      left join table_salesman as s on o.salesman_id=s.salesman_id
      left join table_distributors as d on d.distributor_id=o.distributor_id      
      left join state as st on st.state_id=r.state
      left join city as c on c.city_id=r.city
      left join table_branch as br on br.branch_id = r.branch_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $viewInvoice = '';
            if ($auRec[$i]->order_status == 'A') {
                $status = "New Order";
                $color = "A";
            }
            if ($auRec[$i]->order_status == 'I') {
                $status = "Processed";
                $color = "I";
            }
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            /* Bill Type */
            $billTYPE = '';
            $bill_desc = '';
            switch (strtolower($auRec[$i]->bill_type)) {
                case 'apc':
                    $billTYPE = "Advance Payment Collection";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'ac':
                    $billTYPE = "Advance Cheque";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'fp':
                    $billTYPE = "Flexible Plan";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
            }
            switch (strtolower($auRec[$i]->order_for)) {
                case 'r':
                    $order_for = 'Retailer';
                    break;
                case 'd':
                    $order_for = 'Distributor';
                    break;
            }
            if ($auRec[$i]->order_type == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $orderType = "Sales Order";
                    $color = 'A';
                } elseif ($auRec[$i]->order_status == 'I') {
                    $orderType = "Sales Order";
                    $color = 'I';
                }
            }
            if ($auRec[$i]->order_type == 'Return') {
                if ($auRec[$i]->order_status == 'A') {
                    $orderType = "Return Order";
                }
                $color = 'O';
            }

            //----- Order by condtion -----

            switch ($auRec[$i]->order_by) {
                case 'S':
                    $orderby = $this->AliaseUsers['salesman'];
                    break;
                case "D":
                    $orderby = $this->AliaseUsers['distributor'];
                    break;
                case "R":
                    $orderby = $this->AliaseUsers['retailer'];
                    break;
                default :
                    $orderby = '';
            }

            //--------

            if ($auRec[$i]->order_status != 'A') {
                $CheckOrderSts = $this->_getSelectList2('table_order as o inner join table_order_detail as od on o.order_id = od.order_id', "od.quantity, od.acc_quantity, od.is_processed ", '', " o.order_id='" . $auRec[$i]->order_id . "' AND ((od.quantity = od.acc_quantity AND od.is_processed=0) OR (od.quantity >od.acc_quantity AND od.is_processed=1)) ");
                if (is_array($CheckOrderSts) && count($CheckOrderSts) > 0) {
                    $orderStatus = 'Partially Pending';
                } else {
                    $orderStatus = 'Fully Invoiced';
                }
            } else {
                $orderStatus = 'Fully Pending';
            }
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            if ($orderStatus != "Fully Invoiced") {
                if ($rc)
                    $json .= ",";
                $remove = array("\n", "\r\n", "\r");
                $json .= "\n{";
                $json .= '"id":"' . $auRec[$i]->order_id . '",';
                $json .= '"color":"' . $color . '",';
                $json .= '"cell":["' . ucwords(addslashes($order_for)) . '"';
                $json .= ',"' . ucwords(addslashes($date_of_order)) . '"';
                $json .= ',"' . date("h:i A", strtotime($auRec[$i]->time_of_order)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
                $json .= ',"' . ucwords(addslashes(number_format($auRec[$i]->acc_total_invoice_amount, 2))) . '"';
                $json .= ',"' . ucwords(addslashes($billTYPE)) . '"';
                $json .= ',"' . ucwords(addslashes($bill_desc)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->branch_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->branch_code)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
                $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location))) . '"';
                $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_address))) . '"';
                $json .= ',"' . $orderType . '"';
                $json .= ',"' . $orderby . '"';
                $json .= ',"' . $orderStatus . '"]';
                $json .= "}";
                $rc = true;
            }
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showCreditInvoices($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromOrderList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToOrderList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
            $salesman = '';
        }
        if ($_SESSION['userLoginType'] == 1) {
            $salesman = '';
        }
        if (isset($_SESSION['REGIONID']) && $_SESSION['REGIONID'] > 0) {
            $regionCondition = " AND REG.region_id='" . $_SESSION['REGIONID'] . "'  AND REG.region_id IS NOT NULL ";
        }
        if (isset($_SESSION['STATEID']) && $_SESSION['STATEID'] > 0) {
            $stateCondition = " AND st.state_id='" . $_SESSION['STATEID'] . "' ";
        }
        if ($_SESSION['SalOrderList'] != '') {
            $salesman = " and o.salesman_id='" . $_SESSION['SalOrderList'] . "'";
        }
        $where = " AND r.new='' AND o.order_type='Return' $disLogCond $salesman $fromdate $todate $regionCondition $stateCondition $orderby and o.account_id =" . $_SESSION['accountId'];
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_invoice as o
  	left join table_retailer as r on o.retailer_id=r.retailer_id AND o.order_for="R"
  	left join table_salesman as s on o.salesman_id=s.salesman_id
  	LEFT JOIN state AS ST1 ON ST1.state_id = s.state
	LEFT JOIN city AS C1 ON C1.city_id = s.city
  	left join table_distributors as d on o.distributor_id=d.distributor_id
  	left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id
  	left join table_distributors as dd on dd.distributor_id=r.distributor_id
  	left join table_distributors as d2 on d2.distributor_id=o.distributor_id AND o.order_for="D"
  	left join state as st11 on st11.state_id=dd.state
  	left join city as c11 on c11.city_id=dd.city
  	left join table_region as re11 on re11.region_id=dd.region_id
  	LEFT join table_branch as br1 on br1.branch_id = dd.branch_id
  	left join state as st on st.state_id=dd.state
  	left join city as c on c.city_id=dd.city
  	left join table_region as re on re.region_id=dd.region_id
  	LEFT join table_branch as br on br.branch_id = r.branch_id',
            "o.*,r.retailer_name, r.retailer_code, r.retailer_location,r.lat as retlat,cm.channel_name,r.display_outlet,
	r.lng as retlng,s.salesman_name, s.employee_code, dd.distributor_name,st.state_name as ret_state_name,
	c.city_name as ret_city_name,st11.state_name, re11.region_name, c11.city_name, 
	br.branch_name, br.branch_code, CASE WHEN o.order_for='R' AND o.order_type !='No' THEN dd.distributor_name 
	WHEN o.order_for='D' THEN d2.distributor_name END as DistName, CASE WHEN o.order_for='R' THEN r.retailer_address 
	WHEN o.order_for='D' THEN d2.distributor_address END as Address, CASE WHEN o.order_for='R' THEN r.retailer_location 
	WHEN o.order_for='D' THEN d2.distributor_location END as Location", $rp, $where . " group by o.invoice_id " . $sort, '');
        $auRecCount = $this->_getSelectList('table_invoice as o
  	left join table_retailer as r on o.retailer_id=r.retailer_id AND o.order_for="R"
  	left join table_salesman as s on o.salesman_id=s.salesman_id
  	LEFT JOIN state AS ST1 ON ST1.state_id = s.state
	LEFT JOIN city AS C1 ON C1.city_id = s.city
  	left join table_distributors as d on o.distributor_id=d.distributor_id
  	left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id
  	left join table_distributors as dd on dd.distributor_id=r.distributor_id
  	left join table_distributors as d2 on d2.distributor_id=o.distributor_id AND o.order_for="D"
  	left join state as st11 on st11.state_id=dd.state
  	left join city as c11 on c11.city_id=dd.city
  	left join table_region as re11 on re11.region_id=dd.region_id
  	LEFT join table_branch as br1 on br1.branch_id = dd.branch_id
  	left join state as st on st.state_id=dd.state
  	left join city as c on c.city_id=dd.city
  	left join table_region as re on re.region_id=dd.region_id
  	LEFT join table_branch as br on br.branch_id = r.branch_id', 'count(o.invoice_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->order_type == 'Return') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "P";
            }
            if ($flag == 1) {
                $photo = '<a href=\"retailer_survey.php?retId=' . $auRec[$i]->retailer_id . '\"  target=\"_blank\">View Survey Photo</a>';
            }
            $auRec2 = $this->_getSelectList2('table_invoice_detail', "count( distinct(item_id)) as total_item ", '', " invoice_id = " . $auRec[$i]->invoice_id . " and type = 1");
            //Retailer location maping only survey table
            if ($auRec[$i]->lat != '') {
                $auMarker = $_objAdmin->_getSelectList2('table_survey ', "lat as rlat,lng as rlng", '', " retailer_id='" . $auRec[$i]->retailer_id . "' order by survey_date desc,survey_time desc limit 0,1");
                $center_lat = $auMarker[0]->rlat;
                $center_lng = $auMarker[0]->rlng;
                $radius = 0.05;
                $query = sprintf("SELECT invoice_id, lat, lng, ( 6371 * acos( cos( radians('%s') ) * cos( radians( lat ) ) * cos( radians( lng ) - radians('%s') ) + sin( radians('%s') ) * sin( radians( lat ) ) ) ) AS distance FROM table_invoice where invoice_id='" . $auRec[$i]->invoice_id . "' group by invoice_id", mysql_real_escape_string($center_lat), mysql_real_escape_string($center_lng), mysql_real_escape_string($center_lat), mysql_real_escape_string($radius));
                $result = mysql_query($query);
                $row = @mysql_fetch_assoc($result);
                if ($row['distance'] <= $radius) {
                    $map = '<a href=\"show_map.php?ord=' . base64_encode($auRec[$i]->invoice_id) . '\' target=\"_blank\">View on Map</a>';
                    $colortd = "in";
                } else {
                    $map = '<a href=\"show_map.php?ord=' . base64_encode($auRec[$i]->invoice_id) . '\' target=\"_blank\">View on Map</a>';
                    $colortd = "out";
                }
            } else {
                $map = "-";
                $colortd = "out";
            }
            //$status=($auRec[$i]->order_status=='A')?"New Order":"Processed";
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            $salDetails = $this->getSalesmanFullDetails($auRec[$i]->salesman_id);
            /* ----Display Outlet ---- */
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            /* Bill Type */
            $billTYPE = '';
            $bill_desc = '';
            switch (strtolower($auRec[$i]->bill_type)) {
                case 'apc':
                    $billTYPE = "Advance Payment Collection";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'ac':
                    $billTYPE = "Advance Cheque";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'fp':
                    $billTYPE = "Flexible Plan";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
            }
            switch (strtolower($auRec[$i]->order_for)) {
                case 'r':
                    $order_for = 'Retailer';
                    break;
                case 'd':
                    $order_for = 'Distributor';
                    break;
            }
            $DistRec = $_objAdmin->_getSelectList2('table_distributors', "distributor_id, distributor_code", '', " distributor_id='" . $auRec[$i]->distributor_id . "'");
            if ($auRec[$i]->sap_order_sync_status > 0) {
                $sync_status = "Sync Successfully";
            } else {
                $sync_status = $auRec[$i]->error_desc;
            }
            $return_type = ($auRec[$i]->return_type == '0') ? "Damage Invoice" : "Return Invoice";
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->invoice_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($order_for)) . '"';
            $json .= ',"' . ucwords(addslashes($return_type)) . '"';
            $json .= ',"' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            //$json .= ',"'.date("h:i A", strtotime($auRec[$i]->time_of_order)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(floor($auRec[$i]->acc_total_invoice_amount), 2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec2[0]->total_item)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->DistName)) . '"';
            $json .= ',"' . ucwords(addslashes($DistRec[0]->distributor_code)) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($salDetails[0]->rpt_to)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($salesOrg[0]->branch_name)) . '"';
            $json .= ',"' . ucwords(addslashes($salesOrg[0]->branch_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->Location))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->Address))) . '"';
            $json .= ',"' . addslashes($map) . '"';
            $json .= ',"' . addslashes($photo) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->comments))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDealerFullPartialPendingOrders()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($qtype == "date_of_order" && $query != '') {
            $query = date("Y-m-d", strtotime($query));
        }
        $_objAdmin = new Admin();
        if ($_SESSION['SalDisList'] != '') {
            $salesman = " and s.salesman_id='" . $_SESSION['SalDisList'] . "'";
        }
        $validated_default_date = date("Y-m-d");
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . $validated_default_date . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . $validated_default_date . "'";
        }
        if ($_SESSION['distributorId'] != "A") {
            $disList = " AND o.distributor_id=" . $_SESSION['distributorId'];
        } else {
            $disList = "";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_status='A' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_status='I' ";
            }
            if ($_SESSION['OrderBy'] == 4) {
                $orderby = " and o.order_status='D' ";
            }
        } else {
            $orderby = "";
        }
        if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] > 0) {
            $disList = " AND o.distributor_id ='" . $_SESSION['distributorId'] . "' ";
        }
        $where = " AND r.new='' AND o.order_for='R' AND o.order_status !='D' AND o.order_status IN('A','C') AND o.order_type IN('Yes', 'Return', 'Adhoc') AND o.distributor_id!='' and o.date_of_order <='" . $validated_default_date . "' $disLogCond $salesman $fromdate $todate $regionCondition $stateCondition $disList $orderby AND o.account_id =" . $_SESSION['accountId'];
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order as o
      left join table_retailer as r on o.retailer_id=r.retailer_id
      left join table_salesman as s on o.salesman_id=s.salesman_id
      left join table_distributors as d on d.distributor_id=o.distributor_id
      left join table_retailer_channel_master as cm on cm.channel_id=r.channel_id
      left join state as st on st.state_id=r.state
      left join city as c on c.city_id=r.city
      left join table_branch as br on br.branch_id = r.branch_id',
            "o.*,r.retailer_name, r.retailer_code,r.retailer_address,r.retailer_location,cm.channel_name,r.display_outlet,
	  s.salesman_name,d.distributor_name,d.distributor_code,st.state_name,c.city_name, 
	  br.branch_name, br.branch_code", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_order as o
      left join table_retailer as r on o.retailer_id=r.retailer_id
      left join table_salesman as s on o.salesman_id=s.salesman_id
      left join table_distributors as d on d.distributor_id=o.distributor_id
      left join table_retailer_channel_master as cm on cm.channel_id=r.channel_id
      left join state as st on st.state_id=r.state
      left join city as c on c.city_id=r.city
      left join table_branch as br on br.branch_id = r.branch_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $viewInvoice = '';
            if ($auRec[$i]->order_status == 'A') {
                $status = "New Order";
                $color = "A";
            }
            if ($auRec[$i]->order_status == 'I') {
                $status = "Processed";
                $color = "I";
            }
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            /* Bill Type */
            $billTYPE = '';
            $bill_desc = '';
            switch (strtolower($auRec[$i]->bill_type)) {
                case 'apc':
                    $billTYPE = "Advance Payment Collection";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'ac':
                    $billTYPE = "Advance Cheque";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'fp':
                    $billTYPE = "Flexible Plan";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
            }
            switch (strtolower($auRec[$i]->order_for)) {
                case 'r':
                    $order_for = 'Retailer';
                    break;
                case 'd':
                    $order_for = 'Distributor';
                    break;
            }
            if ($auRec[$i]->order_type == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $orderType = "Sales Order";
                    $color = 'A';
                } elseif ($auRec[$i]->order_status == 'I') {
                    $orderType = "Sales Order";
                    $color = 'I';
                } elseif ($auRec[$i]->order_status == 'C') {
                    $orderType = "Sales Order";
                    $color = 'C';
                }
            }
            if ($auRec[$i]->order_type == 'Return') {
                if ($auRec[$i]->order_status == 'A') {
                    $orderType = "Return Order";
                }
                $color = 'O';
            }
            if ($auRec[$i]->order_status == 'C') {
                $orderStatus = 'Cancelled';
            } else if ($auRec[$i]->order_status != 'A') {
                $CheckOrderSts = $this->_getSelectList2('table_order as o inner join table_order_detail as od on o.order_id = od.order_id', "od.quantity, od.acc_quantity, od.is_processed ", '', " o.order_id='" . $auRec[$i]->order_id . "' AND ((od.quantity = od.acc_quantity AND od.is_processed=0) OR (od.quantity >od.acc_quantity AND od.is_processed=1)) ");
                if (is_array($CheckOrderSts) && count($CheckOrderSts) > 0) {
                    $orderStatus = 'Partially Pending';
                } else {
                    $orderStatus = 'Fully Invoiced';
                }
            } else {
                $orderStatus = 'Fully Pending';
            }
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            if ($auRec[$i]->cancellation_date != '0000-00-00 00:00:00') {
                $cancel_date = $this->_changeDate($auRec[$i]->cancellation_date);
            } else {
                $cancel_date = '';
            }
            //Todo Start : Sudhanshu 01 may 2024 : add cancel by column
            $cancelByUserType = '';
            $cancel_by = '';
            if (strtolower($auRec[$i]->cancel_by_user_type) == 'admin') {
                $cancelByUserType = 'Admin';
                $cancel_by = 'Admin';
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'stockist') {
                $cancelByUserType = $this->AliaseUsers('stockist');
                $cancel_by = $auRec[$i]->stockist_name;
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'distributor') {
                $cancelByUserType = $this->AliaseUsers('distributor');
                $cancel_by = $auRec[$i]->distributor_name;
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'salesman') {
                $cancelByUserType = $this->AliaseUsers('salesman');
                $cancel_by = $auRec[$i]->salesman_name;
            }
            //Todo End : Sudhanshu 01 may 2024 : add cancel by column
            if ($orderStatus != "Fully Invoiced") {
                $orderid = $auRec[$i]->order_id;
                if ($orderStatus == 'Partially Pending') {
                    $orderid = 0;
                } else if ($orderStatus == 'Cancelled') {
                    $orderid = '00';
                }
                if ($auRec[$i]->sync_on_3p == '1' && $auRec[$i]->erp_order_id != '') {
                    $orderid = '001';
                }

                if ($rc)
                    $json .= ",";
                $remove = array("\n", "\r\n", "\r");
                $json .= "\n{";
                $json .= '"id":"' . $orderid . '",';
                $json .= '"color":"' . $color . '",';
                $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
                $json .= ',"' . ucwords(addslashes($order_for)) . '"';
                $json .= ',"' . $orderStatus . '"';
                $json .= ',"' . ucwords(addslashes($date_of_order)) . '"';
                $json .= ',"' . date("h:i A", strtotime($auRec[$i]->time_of_order)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
                $json .= ',"' . ucwords(addslashes(number_format($auRec[$i]->acc_total_invoice_amount, 2))) . '"';
                $json .= ',"' . ucwords(addslashes($billTYPE)) . '"';
                $json .= ',"' . ucwords(addslashes($bill_desc)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->branch_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->branch_code)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
                $json .= ',"' . ucwords(addslashes($outlet)) . '"';
//                $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
                $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location))) . '"';
                $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_address))) . '"';
                $json .= ',"' . $cancel_date . '"';
                $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->remark))) . '"';
                //Todo Start : Sudhanshu 01 may 2024 : add cancel by column
                $json .= ',"' . ucwords(addslashes($cancelByUserType)) . '"';
                $json .= ',"' . ucwords(addslashes($cancel_by)) . '"';
                //Todo End : Sudhanshu 01 may 2024 : add cancel by column
                $json .= ',"' . $orderType . '"]';
                $json .= "}";
                $rc = true;
            }
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showSalesGSTReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'o.bill_no';
        if (!$sortorder)
            $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromOrderList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToOrderList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        }
        if ($_REQUEST['qtype'] == "bill_date") {
            $query = date('Y-m-d', strtotime(mysql_escape_string($_REQUEST['query'])));
        }
        $groupby = " GROUP BY o.invoice_id";
        $where = " od.type=1 and o.bill_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' AND o.order_type='Yes' AND o.order_status='D' AND o.order_for='R' AND o.invoice_status='A' $disLogCond";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_invoice AS o
					inner JOIN table_invoice_detail as od on od.invoice_id = o.invoice_id and od.ref_order_id = o.ref_order_id
					LEFT JOIN table_retailer as r ON r.retailer_id=o.retailer_id
					LEFT JOIN state as st on st.state_id = r.state',
            " SUM(od.total) as total_invoice_amt,o.acc_total_invoice_amount,o.date_of_order, o.bill_no,
					r.retailer_code, r.retailer_name, r.gst_no, st.state_name, st.state_code,
					SUM(od.acc_quantity*od.price) as before_dis_amount,SUM(od.discount_amount) as discount_amount,
					SUM(od.discount_amount) as acc_discount_amount,0 as new_scheme_discount,
					SUM((od.acc_quantity*od.price)-(od.discount_amount)) as amt_before_tax, SUM(od.gst_amount) as sgst_amount,
					SUM(od.cgst_amount) as cgst_amount, SUM(od.igst_amount) as igst_amount", $rp, $where . $groupby . $sort);
        $total = $this->_getSelectList('table_invoice AS o
					inner JOIN table_invoice_detail as od on od.order_id = o.order_id
					LEFT JOIN table_retailer as r ON r.retailer_id=o.retailer_id
					LEFT JOIN state as st on st.state_id = r.state', "o.order_id", '', $where . $groupby . $sort);
        $total = count($total);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $sgst_amount = $cgst_amount = $igst_amount = 0;
            $amt_before_tax = $amt_after_tax = 0;
            if ($auRec[$i]->sgst_amount > 0) {
                $sgst_amount = $auRec[$i]->sgst_amount;
            }
            if ($auRec[$i]->cgst_amount > 0) {
                $cgst_amount = $auRec[$i]->cgst_amount;
            }
            if ($auRec[$i]->igst_amount > 0) {
                $igst_amount = $auRec[$i]->igst_amount;
            }
            if ($auRec[$i]->amt_before_tax > 0) {
                $amt_before_tax = ROUND($auRec[$i]->amt_before_tax, 2);
            }
            $bill_no = '';
            $bill_details = explode('-', $auRec[$i]->bill_no);
            $bill_no = end($bill_details);
            //$amt_before_tax = ($auRec[$i]->acc_total_invoice_amount-($sgst_amount+$cgst_amount+$igst_amount));
            $amt_after_tax = number_format(floor($auRec[$i]->total_invoice_amt), 2);
            if ($rc)
                $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->gst_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->date_of_order))) . '"';
            $json .= ',"' . ROUND($auRec[$i]->before_dis_amount, 2) . '"';
            $json .= ',"' . ROUND($auRec[$i]->acc_discount_amount, 2) . '"';
            $json .= ',"' . ucwords(addslashes($amt_before_tax)) . '"';
            $json .= ',"' . ucwords(addslashes($sgst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($cgst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($igst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($amt_after_tax)) . '"';
            $json .= ',"' . ucwords(addslashes('')) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showBTOBOrderList($salesman)
    {
        $unitArr = array();
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'o.bill_no';
        if (!$sortorder)
            $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromOrderList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToOrderList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        }
        if ($qtype == "bill_date" && $query != '') {
            $query = date("Y-m-d", strtotime($query));
        }
        $groupby = " GROUP BY o.invoice_id, od.ref_order_id,od.item_id";
        $where = " od.type=1 and o.bill_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' AND o.order_type='Yes' AND o.order_status='D' AND o.order_for='R' AND o.invoice_status='A' $disLogCond";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_invoice AS o
					inner JOIN table_invoice_detail as od on od.invoice_id = o.invoice_id and od.ref_order_id = o.ref_order_id
					inner JOIN table_item as i on i.item_id = od.item_id
					LEFT JOIN table_group as g on g.group_id = i.group_id
					LEFT JOIN table_retailer as r ON r.retailer_id=o.retailer_id
					LEFT JOIN state as st on st.state_id = r.state', " o.bill_date, o.bill_no, r.retailer_code, 
					r.retailer_name, r.gst_no,
					i.item_name, i.item_code, od.*, g.hsn_code, st.state_name, st.state_code", $rp, $where . $groupby . $sort, '');
        $total = $this->_getSelectList('table_invoice AS o
					inner JOIN table_invoice_detail as od on od.invoice_id = o.invoice_id and od.ref_order_id = o.ref_order_id
					inner JOIN table_item as i on i.item_id = od.item_id
					LEFT JOIN table_group as g on g.group_id = i.group_id
					LEFT JOIN table_retailer as r ON r.retailer_id=o.retailer_id
					LEFT JOIN state as st on st.state_id = r.state
					', "COUNT(*) AS total", '', $where . $groupby . $sort, '');
        $total = count($total);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sgst_amount = $cgst_amount = $igst_amount = 0;
            if ($auRec[$i]->gst_amount > 0) {
                $sgst_amount = $auRec[$i]->gst_amount;
            }
            if ($auRec[$i]->cgst_amount > 0) {
                $cgst_amount = $auRec[$i]->cgst_amount;
            }
            if ($auRec[$i]->igst_amount > 0) {
                $igst_amount = $auRec[$i]->igst_amount;
            }
            $bill_details = explode('-', $auRec[$i]->bill_no);
            $bill_no = $bill_details[3];
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_detail_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->gst_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->bill_date))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->hsn_code)) . '"';
            $qty = $auRec[$i]->quantity;
            $json .= ',"' . $qty . '"';
            /* Added on request by veera sir. Added on 5 Dec by sachin */
            $amount_before_discount = ($auRec[$i]->quantity * $auRec[$i]->price);
            $discount_amount = ($auRec[$i]->acc_discount_amount);
            $json .= ',"' . $amount_before_discount . '"';
            $json .= ',"' . ROUND($auRec[$i]->acc_discount_amount, 2) . '"';
            /* Added on request by veera sir. Added on 5 Dec by sachin */
            $json .= ',"' . ucwords(addslashes(($auRec[$i]->price * $auRec[$i]->acc_quantity) - ($auRec[$i]->acc_discount_amount))) . '"';
            $json .= ',"' . ucwords(addslashes(($auRec[$i]->gst_rate + $auRec[$i]->cgst_rate + $auRec[$i]->igst_rate))) . '"';
            $json .= ',"' . ucwords(addslashes($sgst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($cgst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($igst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes(ROUND($auRec[$i]->acc_total, 0))) . '"';
            $json .= ',"' . ucwords(addslashes('')) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRetailerWiseIssueSummaryReport($salesman)
    {
        ini_set('memory_limit', '2048M');
        $unitArr = array();
        $auCol = $this->_getSelectList('table_item as i inner join table_measurement_units as m on m.unit_id = i.unit_id', "i.unit_id, m.unit_code ", "", " i.status='A' AND i.unit_id > 0 GROUP BY i.unit_id ORDER BY m.unit_code ASC", '');
        foreach ($auCol as $unitVal) {
            $unitArr[$unitVal->unit_id] = $unitVal->unit_code;
        }
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'o.date_of_order';
        if (!$sortorder)
            $sortorder = 'DESC';
        $sort = " ORDER BY o.date_of_order DESC, order_type DESC, $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromOrderList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToOrderList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        }
        $groupby = " GROUP BY o.invoice_id, od.ref_order_id,od.item_id";
        $where = " od.type=1 and o.bill_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' AND o.order_status='D' AND o.order_for='R' AND (order_type='Yes' OR order_type='Return') AND o.invoice_status='A' $disLogCond";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_invoice AS o
      inner JOIN table_invoice_detail as od on od.invoice_id = o.invoice_id and od.ref_order_id = o.ref_order_id
      inner JOIN table_item as i on i.item_id = od.item_id
      
      left join table_payment_terms as pt on pt.terms_id = i.terms_id
      LEFT JOIN table_distributors as d ON d.distributor_id=o.distributor_id
      left join state as stt on stt.state_id = d.state
      left join table_branch as b on b.branch_id = d.branch_id
      LEFT JOIN table_retailer as r ON r.retailer_id=o.retailer_id
      LEFT JOIN table_salesman as sm ON sm.salesman_id=o.salesman_id
      LEFT JOIN table_salesman_hierarchy_relationship as shr ON shr.salesman_id=o.salesman_id
      LEFT JOIN table_salesman as so ON so.salesman_id=shr.rpt_user_id
      LEFT JOIN table_unit_conversion as uc on uc.item_id = od.item_id AND uc.unit_id = od.unit_id',
            "o.bill_type, order_type,o.date_of_order, o.retailer_id, o.distributor_id, stt.state_name, o.bill_no, o.bill_date, 
	  i.item_name, i.item_code,
      i.unit_id as item_unit_id, od.*, d.distributor_name, d.distributor_code, pt.terms_desc, b.branch_code,r.retailer_code, r.retailer_name,
      ((od.acc_quantity/uc.denominator)*uc.numerator) as ttl_quantity1,od.quantity as ttl_quantity1 , sm.salesman_name, so.salesman_name as sales_manager", $rp, $where . $groupby . $sort, '');
        $total = $this->_getSelectList2('table_invoice AS o
      inner JOIN table_invoice_detail as od on od.invoice_id = o.invoice_id and od.ref_order_id = o.ref_order_id
      inner JOIN table_item as i on i.item_id = od.item_id     
     
      LEFT JOIN table_distributors as d ON d.distributor_id=o.distributor_id
      left join state as stt on stt.state_id = d.state
      left join table_branch as b on b.branch_id = d.branch_id
      LEFT JOIN table_retailer as r ON r.retailer_id=o.retailer_id
      LEFT JOIN table_salesman as sm ON sm.salesman_id=o.salesman_id
      LEFT JOIN table_salesman_hierarchy_relationship as shr ON shr.salesman_id=o.salesman_id
      LEFT JOIN table_salesman as so ON so.salesman_id=shr.rpt_user_id
      ', "COUNT(*) AS total", '', $where . $groupby . $sort, '');
        $total = count($total);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $totaltaxable_amount = $total_tax_amount = $Total_tt_amt = $totaltaxableAmountSales = $totaltaxableAmountReturn = $totalTaxAmountSales = $totalTaxAmountReturn = $totalTtAmtSales = $totalTtAmtReturn = $totalRebatDis = $totalschmDis = 0;
        $unArr = array();
        for ($i = 0; $i < count($auRec); $i++) {
            $tintin_items_details = array();
            $bill_details = explode('-', $auRec[$i]->bill_no);
            $bill_no = $bill_details[3];
            $bill_date = $this->_changeDate($auRec[$i]->bill_date);
            $salesmanName = (!empty($auRec[$i]->salesman_name)) ? $auRec[$i]->salesman_name : '-';
            $salesManager = (!empty($auRec[$i]->sales_manager)) ? $auRec[$i]->sales_manager : '-';
            //bill_type
            /* Bill Type */
            $billTYPE = '';
            $bill_desc = '';
            switch (strtolower($auRec[$i]->bill_type)) {
                case 'apc':
                    $billTYPE = "Advance Payment Collection";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'ac':
                    $billTYPE = "Advance Cheque";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'fp':
                    $billTYPE = "Flexible Plan";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'project':
                    $billTYPE = "Project";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
            }
            $ordertype = '';
            if ($auRec[$i]->order_type == 'Yes') {
                $ordertype = 'Sales Invoice';
            } else if ($auRec[$i]->order_type == 'Return') {
                $ordertype = 'Return Invoice';
            }
            $amountSign = ($auRec[$i]->order_type === 'Return') ? '- ' : '';
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->branch_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords($ordertype) . '"';
            // $json .= ',"' . ucwords($billTYPE) . '"';
            $json .= ',"' . ucwords(addslashes($bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes($bill_date)) . '"';
            // $json .= ',"' . ucwords(addslashes($auRec[$i]->store_name)) . '"';
            //$json .= ',"' . ucwords(addslashes($auRec[$i]->terms_desc)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($salesmanName)) . '"';
            $json .= ',"' . ucwords(addslashes($salesManager)) . '"';
            $json .= ',"' . $amountSign . ucwords(addslashes(ROUND($auRec[$i]->quantity, 2))) . '"';
            /*foreach ($unitArr as $unit_id => $relVal) {
          $qty = 0;
          $getUnitConversion = $this->_getSelectList2('table_unit_conversion', "item_id,unit_id, numerator, denominator", '', " item_id='" . $auRec[$i]->item_id . "' AND unit_id='" . $unit_id . "' ");
          $qty = (($auRec[$i]->ttl_quantity * $getUnitConversion[0]->denominator) / $getUnitConversion[0]->numerator);
		  $json .= ',"' . $amountSign . ucwords(addslashes(ROUND($qty, 2))) . '"';
          if ($auRec[$i]->order_type === 'Yes') {
            $unArr[$unit_id]['sales'] = $unArr[$unit_id]['sales'] + (ROUND($qty, 2));
          } else {
            $unArr[$unit_id]['return'] = $unArr[$unit_id]['return'] + (ROUND($qty, 2));
          }
        }*/
            /* Added on request by veera sir. Added on 5 Dec by sachin */
            $amount_before_discount = ($auRec[$i]->quantity * $auRec[$i]->price);
            $discount_amount = ($auRec[$i]->acc_discount_amount + $auRec[$i]->new_scheme_discount + $auRec[$i]->custom_discount_amount);
            $json .= ',"' . $amountSign . $amount_before_discount . '"';
            $json .= ',"' . $amountSign . $auRec[$i]->acc_discount_amount . '"';
            $json .= ',"' . $amountSign . ($auRec[$i]->new_scheme_discount + $auRec[$i]->custom_discount_amount) . '"';
            $json .= ',"' . $amountSign . $discount_amount . '"';
            /* Added on request by veera sir. Added on 5 Dec by sachin */
            $taxable_amount = (($auRec[$i]->quantity * $auRec[$i]->price) - $discount_amount);
            $json .= ',"' . $amountSign . ucwords(addslashes(($taxable_amount))) . '"';
            $taxamt = ($auRec[$i]->gst_amount + $auRec[$i]->cgst_amount + $auRec[$i]->igst_amount);
            $json .= ',"' . $amountSign . ucwords(addslashes($taxamt)) . '"';
            $tt_amt = ROUND(((($auRec[$i]->quantity * $auRec[$i]->price) - $discount_amount) + ($auRec[$i]->gst_amount + $auRec[$i]->cgst_amount + $auRec[$i]->igst_amount)), 0);
            $json .= ',"' . $amountSign . ucwords(addslashes($tt_amt)) . '"';
            $json .= "]}";
            if ($auRec[$i]->order_type === 'Yes') {
                /* Added on request by veera sir. Added on 5 Dec by sachin */
                $totalAmountBeforeDiscount = $totalAmountBeforeDiscount + $amount_before_discount;
                $totalDiscountAmount = $totalDiscountAmount + $discount_amount;
                $totalRebatDis = $totalRebatDis + $auRec[$i]->acc_discount_amount;
                $totalschmDis = $totalschmDis + ($auRec[$i]->new_scheme_discount + $auRec[$i]->custom_discount_amount);
                /* Added on request by veera sir. Added on 5 Dec by sachin */
                $totaltaxableAmountSales = $totaltaxableAmountSales + $taxable_amount;
                $totalTaxAmountSales = $totalTaxAmountSales + $taxamt;
                $totalTtAmtSales = $totalTtAmtSales + $tt_amt;
            } else {
                /* Added on request by veera sir. Added on 5 Dec by sachin */
                $totalAmountBeforeDiscountReturn = $totalAmountBeforeDiscountReturn + $amount_before_discount;
                $totalDiscountAmountReturn = 0;
                /* Added on request by veera sir. Added on 5 Dec by sachin */
                $totaltaxableAmountReturn = $totaltaxableAmountReturn + $taxable_amount;
                $totalTaxAmountReturn = $totalTaxAmountReturn + $taxamt;
                $totalTtAmtReturn = $totalTtAmtReturn + $tt_amt;
            }
            $rc = true;
        }
        $totalAmountBeforeDiscount = ($totalAmountBeforeDiscount - $totalAmountBeforeDiscountReturn);
        $totalDiscountAmount = $totalDiscountAmount;
        $totaltaxable_amount = ($totaltaxableAmountSales - $totaltaxableAmountReturn);
        $total_tax_amount = ($totalTaxAmountSales - $totalTaxAmountReturn);
        $Total_tt_amt = ($totalTtAmtSales - $totalTtAmtReturn);
        // echo "<pre>"; print_r($totalTtAmtSales); echo " string "; die('last');
        /* Bottom calculations */
        if ($rc)
            $json .= ",";
        $json .= "\n{";
        $json .= '"id":"1234"';
        $json .= ',"color":"A"';
        $json .= ',"cell":[""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';

        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',""';
        $json .= ',"Grand Total"';
        /*
    foreach ($unArr as $key => $value) {
      $value['result'] = $value['sales'] - $value['return'];
      $json .= ',"' . ucwords(addslashes($value['result'])) . '"';
    }*/
        //$json .= ',""';
        /* Added on request by veera sir. Added on 5 Dec by sachin */
        $json .= ',"' . $totalAmountBeforeDiscount . '"';
        $json .= ',"' . $totalRebatDis . '"';
        $json .= ',"' . $totalschmDis . '"';
        $json .= ',"' . $totalDiscountAmount . '"';
        /* Added on request by veera sir. Added on 5 Dec by sachin */
        $json .= ',"' . $totaltaxable_amount . '"';
        $json .= ',"' . $total_tax_amount . '"';
        $json .= ',"' . $Total_tt_amt . '"';
        $json .= "]}";
        /* Bottom calculation */
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo Start: Sagar : 1 Aug 2021
    function showCheckinFeaturesList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'ut.type';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " ch.account_id = " . $_SESSION['accountId'] . " AND ch.user_type_id > 0 ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_checkin_activity_list as ch
		LEFT JOIN table_feature as mas ON mas.feature_id = ch.checkin_activity_id
LEFT JOIN table_user_type as ut ON ut.id = ch.user_type_id', "ch.user_type_id,ut.type,GROUP_CONCAT(mas.feature_name SEPARATOR ', ') as activities", $rp, $where . " GROUP BY ch.user_type_id " . $sort, '');
        $auRecCount = $this->_getSelectList2('table_checkin_activity_list as ch
		LEFT JOIN table_feature as mas ON mas.feature_id = ch.checkin_activity_id
LEFT JOIN table_user_type as ut ON ut.id = ch.user_type_id', 'ch.user_type_id', '', $where . " GROUP BY ch.user_type_id " . $sort);
        $total = (is_array($auRecCount) ? count($auRecCount) : 0);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->user_type_id . '",';
            $json .= '"cell":["' . addslashes(ucwords($this->AliaseUsers($auRec[$i]->type))) . '"';
            $json .= ',"' . addslashes(ucwords($this->AliaseUsers($auRec[$i]->activities))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showOtherFeaturesList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'ut.type';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " ch.account_id = " . $_SESSION['accountId'] . " AND ch.user_type_id > 0 ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_features_list as ch
		LEFT JOIN table_feature as mas ON mas.feature_id = ch.feature_id
LEFT JOIN table_user_type as ut ON ut.id = ch.user_type_id', "ch.user_type_id,ut.type,GROUP_CONCAT(mas.feature_name SEPARATOR ', ') as activities", $rp, $where . " GROUP BY ch.user_type_id " . $sort, '');
        $auRecCount = $this->_getSelectList2('table_features_list as ch
		LEFT JOIN table_feature as mas ON mas.feature_id = ch.feature_id
LEFT JOIN table_user_type as ut ON ut.id = ch.user_type_id', 'ch.user_type_id', '', $where . " GROUP BY ch.user_type_id " . $sort);
        $total = (is_array($auRecCount) ? count($auRecCount) : 0);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->user_type_id . '",';
            $json .= '"cell":["' . addslashes(ucwords($this->AliaseUsers($auRec[$i]->type))) . '"';
            $json .= ',"' . addslashes(ucwords($this->AliaseUsers($auRec[$i]->activities))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : Sagar : 1 Aug 2021
    //Todo Start : Sagar : 13 Aug 2021
    function showUserRole()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'ro.role_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " GROUP BY ro.role_id,rb.role_id ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = '';
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_role_master as ro
LEFT JOIN table_role_brand_mapping as rb ON rb.role_id = ro.role_id
LEFT JOIN table_brands as br ON br.brand_id = rb.brand_id', 'ro.*,GROUP_CONCAT(br.brand_name SEPARATOR ", ") as brands', $rp, $where . $sort);
        $auRecCount = $this->_getSelectList('table_role_master as ro
LEFT JOIN table_role_brand_mapping as rb ON rb.role_id = ro.role_id
LEFT JOIN table_brands as br ON br.brand_id = rb.brand_id', 'ro.role_id', '', $where . $sort);
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"role.php?id=' . $auRec[$i]->role_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->role_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->role_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brands) . '"';
            $json .= ',"' . addslashes(date('d M Y H:i A', strtotime($auRec[$i]->created_date))) . '"';
            $json .= ',"' . addslashes(date('d M Y H:i A', strtotime($auRec[$i]->updated_date))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addUserRole()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['role_name'] = mysql_escape_string($_POST['role_name']);
        $data['status'] = 'A';
        $data['created_date'] = date('Y-m-d H:i:s');
        $data['updated_date'] = date('Y-m-d H:i:s');
        $roleid = $this->_dbInsert($data, 'table_role_master');
        if (isset($roleid) && !empty($roleid)) {
            $brands = $_POST['role_brand_id'];
            if (is_array($brands) && (count($brands) > 0)) {
                foreach ($brands as $key => $brandid) {
                    $dataBrand = [];
                    $dataBrand['brand_id'] = $brandid;
                    $dataBrand['role_id'] = $roleid;
                    $this->_dbInsert($dataBrand, 'table_role_brand_mapping');
                }
            }
        }
        return $roleid;
    }

    function updateUserRole($id)
    {
        $data['role_name'] = mysql_escape_string($_POST['role_name']);
        $data['updated_date'] = date('Y-m-d H:i:s');
        $this->_dbUpdate($data, 'table_role_master', " role_id=" . $id);
        if (isset($id) && !empty($id)) {
            $brands = $_POST['role_brand_id'];
            if (is_array($brands) && (count($brands) > 0)) {
                $this->mysql_query('DELETE FROM table_role_brand_mapping WHERE role_id = ' . $id);
                foreach ($brands as $key => $brandid) {
                    $dataBrand = [];
                    $dataBrand['brand_id'] = $brandid;
                    $dataBrand['role_id'] = $id;
                    $this->_dbInsert($dataBrand, 'table_role_brand_mapping');
                }
            }
        }
        return $id;
    }

    //Todo End : Sagar : 13 Aug 2021
    function showRetailerMonthlyScheme($salesmanID)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'discount_id';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY d.scheme_id $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " d.scheme_for='R'   $cond";
        $aliase = '';
        if ($qtype == 'scheme_name' && !empty($query)) {
            $where .= " AND $qtype LIKE '%$query%' ";
        } else if ($qtype == 'scheme_type' && !empty($query)) {
            if (strtolower($query) == 'monthly') {
                $aliase = "M";
            } else if (strtolower($query) == 'quarterly') {
                $aliase = "Q";
            } else if (strtolower($query) == 'half yearly') {
                $aliase = "H";
            } else if (strtolower($query) == 'yearly') {
                $aliase = "Y";
            }
            $where .= " AND $qtype ='" . $aliase . "'";
        } else if ($qtype == 'scheme_mode' && !empty($query)) {
            if (strtolower($query) == 'quantity') {
                $aliase = '1';
            } else if (strtolower($query) == 'amount') {
                $aliase = '2';
            }
            $where .= " AND $qtype ='" . $aliase . "'";
        } else if ($qtype == 'scheme_base' && !empty($query)) {
            if (strtolower($query) == 'all') {
                $aliase = '1';
            } else if (strtolower($query) == 'state') {
                $aliase = '2';
            } else if (strtolower($query) == 'city') {
                $aliase = '3';
            } else if (strtolower($query) == 'retailer') {
                $aliase = '4';
            } else if (strtolower($query) == 'distributor') {
                $aliase = '5';
            } else if (strtolower($query) == 'stockist') {
                $aliase = '6';
            }
            $where .= " AND $qtype ='" . $aliase . "'";
        }
        $auRec = $this->_getSelectList('table_monthly_scheme_master as d', "d.*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_monthly_scheme_master as d', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $mode = ($auRec[$i]->scheme_mode == '1') ? "Quantity" : "Amount";
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            if ($auRec[$i]->scheme_type == 'M') {
                $scheme_type = "Monthly";
            } else if ($auRec[$i]->scheme_type == 'Q') {
                $scheme_type = "Quarterly";
            } else if ($auRec[$i]->scheme_type == 'H') {
                $scheme_type = "Half Yearly";
            } else if ($auRec[$i]->scheme_type == 'Y') {
                $scheme_type = "Yearly";
            }
            if ($auRec[$i]->scheme_base == '1') {
                $scheme_base = "All";
            } else if ($auRec[$i]->scheme_base == '2') {
                $scheme_base = "State";
            } else if ($auRec[$i]->scheme_base == '3') {
                $scheme_base = "City";
            } else if ($auRec[$i]->scheme_base == '4') {
                $scheme_base = "Retailer";
            } else if ($auRec[$i]->scheme_base == '5') {
                $scheme_base = "Distributor";
            } else if ($auRec[$i]->scheme_base == '6') {
                $scheme_base = "Stockist";
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->scheme_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->scheme_name) . '"';
            $json .= ',"' . addslashes(ucwords($scheme_type)) . '"';
            $json .= ',"' . addslashes(ucwords($mode)) . '"';
            $json .= ',"' . addslashes(ucwords($scheme_base)) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->fromDate))) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->toDate))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDistributorMonthlyScheme($salesmanID)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'discount_id';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY d.scheme_id $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " d.scheme_for='D'   $cond";
        $aliase = '';
        if ($qtype == 'scheme_name' && !empty($query)) {
            $where .= " AND $qtype LIKE '%$query%' ";
        } else if ($qtype == 'scheme_type' && !empty($query)) {
            if (strtolower($query) == 'monthly') {
                $aliase = 'M';
            } else if (strtolower($query) == 'quarterly') {
                $aliase = 'Q';
            } else if (strtolower($query) == 'half yearly') {
                $aliase = 'H';
            } else if (strtolower($query) == 'yearly') {
                $aliase = 'Y';
            }
            $where .= " AND $qtype ='" . $aliase . "'";
        } else if ($qtype == 'scheme_mode' && !empty($query)) {
            if (strtolower($query) == 'quantity') {
                $aliase = '1';
            } else if (strtolower($query) == 'amount') {
                $aliase = '2';
            }
            $where .= " AND $qtype ='" . $aliase . "'";
        } else if ($qtype == 'scheme_base' && !empty($query)) {
            if (strtolower($query) == 'all') {
                $aliase = '1';
            } else if (strtolower($query) == 'state') {
                $aliase = '2';
            } else if (strtolower($query) == 'city') {
                $aliase = '3';
            } else if (strtolower($query) == 'retailer') {
                $aliase = '4';
            } else if (strtolower($query) == 'distributor') {
                $aliase = '5';
            } else if (strtolower($query) == 'stockist') {
                $aliase = '6';
            }
            $where .= " AND $qtype ='" . $aliase . "'";
        }
        $auRec = $this->_getSelectList('table_monthly_scheme_master as d', "d.*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_monthly_scheme_master as d', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $mode = ($auRec[$i]->scheme_mode == '1') ? "Quantity" : "Amount";
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            if ($auRec[$i]->scheme_type == 'M') {
                $scheme_type = "Monthly";
            } else if ($auRec[$i]->scheme_type == 'Q') {
                $scheme_type = "Quarterly";
            } else if ($auRec[$i]->scheme_type == 'H') {
                $scheme_type = "Half Yearly";
            } else if ($auRec[$i]->scheme_type == 'Y') {
                $scheme_type = "Yearly";
            }
            if ($auRec[$i]->scheme_base == '1') {
                $scheme_base = "All";
            } else if ($auRec[$i]->scheme_base == '2') {
                $scheme_base = "State";
            } else if ($auRec[$i]->scheme_base == '3') {
                $scheme_base = "City";
            } else if ($auRec[$i]->scheme_base == '4') {
                $scheme_base = "Retailer";
            } else if ($auRec[$i]->scheme_base == '5') {
                $scheme_base = "Distributor";
            } else if ($auRec[$i]->scheme_base == '6') {
                $scheme_base = "stockist";
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->scheme_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->scheme_name) . '"';
            $json .= ',"' . addslashes(ucwords($scheme_type)) . '"';
            $json .= ',"' . addslashes(ucwords($mode)) . '"';
            $json .= ',"' . addslashes(ucwords($scheme_base)) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->fromDate))) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->toDate))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showStockistMonthlyScheme($salesmanID)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'discount_id';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY d.scheme_id $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " d.scheme_for='S'   $cond";
        $aliase = '';
        if ($qtype == 'scheme_name' && !empty($query)) {
            $where .= " AND $qtype LIKE '%$query%' ";
        } else if ($qtype == 'scheme_type' && !empty($query)) {
            if (strtolower($query) == 'monthly') {
                $aliase = 'M';
            } else if (strtolower($query) == 'quarterly') {
                $aliase = 'Q';
            } else if (strtolower($query) == 'half yearly') {
                $aliase = 'H';
            } else if (strtolower($query) == 'yearly') {
                $aliase = 'Y';
            }
            $where .= " AND $qtype ='" . $aliase . "'";
        } else if ($qtype == 'scheme_mode' && !empty($query)) {
            if (strtolower($query) == 'quantity') {
                $aliase = '1';
            } else if (strtolower($query) == 'amount') {
                $aliase = '2';
            }
            $where .= " AND $qtype ='" . $aliase . "'";
        } else if ($qtype == 'scheme_base' && !empty($query)) {
            if (strtolower($query) == 'all') {
                $aliase = '1';
            } else if (strtolower($query) == 'state') {
                $aliase = '2';
            } else if (strtolower($query) == 'city') {
                $aliase = '3';
            } else if (strtolower($query) == 'retailer') {
                $aliase = '4';
            } else if (strtolower($query) == 'distributor') {
                $aliase = '5';
            } else if (strtolower($query) == 'stockist') {
                $aliase = '6';
            }
            $where .= " AND $qtype ='" . $aliase . "'";
        }
        $auRec = $this->_getSelectList('table_monthly_scheme_master as d', "d.*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_monthly_scheme_master as d', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $mode = ($auRec[$i]->scheme_mode == '1') ? "Quantity" : "Amount";
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            if ($auRec[$i]->scheme_type == 'M') {
                $scheme_type = "Monthly";
            } else if ($auRec[$i]->scheme_type == 'Q') {
                $scheme_type = "Quarterly";
            } else if ($auRec[$i]->scheme_type == 'H') {
                $scheme_type = "Half Yearly";
            } else if ($auRec[$i]->scheme_type == 'Y') {
                $scheme_type = "Yearly";
            }
            if ($auRec[$i]->scheme_base == '1') {
                $scheme_base = "All";
            } else if ($auRec[$i]->scheme_base == '2') {
                $scheme_base = "State";
            } else if ($auRec[$i]->scheme_base == '3') {
                $scheme_base = "City";
            } else if ($auRec[$i]->scheme_base == '4') {
                $scheme_base = "Retailer";
            } else if ($auRec[$i]->scheme_base == '5') {
                $scheme_base = "Distributor";
            } else if ($auRec[$i]->scheme_base == '6') {
                $scheme_base = "Stockist";
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->scheme_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->scheme_name) . '"';
            $json .= ',"' . addslashes(ucwords($scheme_type)) . '"';
            $json .= ',"' . addslashes(ucwords($mode)) . '"';
            $json .= ',"' . addslashes(ucwords($scheme_base)) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->fromDate))) . '"';
            $json .= ',"' . addslashes(ucwords($this->_changeDate($auRec[$i]->toDate))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo Start: Sagar : 24 Aug 2021
    function showDistributorCheckinFeaturesList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'ut.type';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " ch.account_id = " . $_SESSION['accountId'] . " AND ch.user_type_id > 0 ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_distributor_checkin_activity_list as ch
		LEFT JOIN table_distributor_check_in_out_activity_master as mas ON mas.checkin_activity_id = ch.checkin_activity_id
LEFT JOIN table_user_type as ut ON ut.id = ch.user_type_id', "ch.user_type_id,ut.type,GROUP_CONCAT(mas.activity_name SEPARATOR ', ') as activities", $rp, $where . " GROUP BY ch.user_type_id " . $sort, '');
        $auRecCount = $this->_getSelectList2('table_distributor_checkin_activity_list as ch
		LEFT JOIN table_distributor_check_in_out_activity_master as mas ON mas.checkin_activity_id = ch.checkin_activity_id
LEFT JOIN table_user_type as ut ON ut.id = ch.user_type_id', 'ch.user_type_id', '', $where . " GROUP BY ch.user_type_id " . $sort);
        $total = (is_array($auRecCount) ? count($auRecCount) : 0);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->user_type_id . '",';
            $json .= '"cell":["' . addslashes(ucwords($this->AliaseUsers($auRec[$i]->type))) . '"';
            $json .= ',"' . addslashes(ucwords($this->AliaseUsers($auRec[$i]->activities))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End: Sagar : 24 Aug 2021
    //Todo start: Sagar : 31st Aug 2021
    function showRetailerWiseProductPrice()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.retailer_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder , it.item_name ASC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = "AND b.brand_id IN(" . $RoleBrands . ")";
        }

        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasRetPrice']) && $_SESSION['MasRetPrice'] != 'all' && $_SESSION['MasRetPrice'] != '') {
            $statusCondi = " msi.status ='" . $_SESSION['MasRetPrice'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " $statusCondi $brandCnd ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer_wise_item_price as msi
INNER JOIN table_retailer as r ON r.retailer_id = msi.retailer_id
INNER JOIN table_item as it ON it.item_id = msi.item_id
left join table_brands as b on b.brand_id = it.brand_id
', "msi.id as price_id,msi.retailer_id,r.retailer_name,r.retailer_code,msi.item_id,it.item_code,b.brand_name,it.item_name,msi.price,
msi.created_at,msi.updated_at,msi.status", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_retailer_wise_item_price as msi
INNER JOIN table_retailer as r ON r.retailer_id = msi.retailer_id
INNER JOIN table_item as it ON it.item_id = msi.item_id
left join table_brands as b on b.brand_id = it.brand_id
', 'count(msi.id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"ret_wise_item_price.php?stid=' . $auRec[$i]->price_id . '&value=' . $status . '\">' . $status . '</a>';
            $editLink = '<a href=\"edit_ret_wise_item_price.php?pid=' . base64_encode($auRec[$i]->price_id) . '\">Edit</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->price_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->price) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . $editLink . '"';
            $json .= ',"' . addslashes(date('d M Y H:i A', strtotime($auRec[$i]->created_at))) . '"';
            $json .= ',"' . ((isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at)) ? addslashes(date('d M Y H:i A', strtotime($auRec[$i]->updated_at))) : "") . '"';
            $json .= "]";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End: Sagar : 31st Aug 2021
    //Todo start: Sagar : 2nd Sep 2021 : enquiry module
    function showEnquirySource()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'source_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasEnqSource']) && $_SESSION['MasEnqSource'] != 'all' && $_SESSION['MasEnqSource'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasEnqSource'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_enquiry_source', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_enquiry_source', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"enquiry_source.php?stid=' . $auRec[$i]->source_id . '&value=' . $status . '\">' . $status . '</a>';


            $checked = '';
            if ($auRec[$i]->is_default) {
                $checked = 'checked';
            }

            $isDefaultField = '<input type="radio" name="is_default" class="is_default" value="' . $auRec[$i]->source_id . '" ' . $checked . ' />';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->source_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->source_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->last_update_date) . '"';
            $json .= ',"' . addslashes($isDefaultField) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addEnquirySource()
    {
        $data['source_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['source_name'])));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $data['account_id'] = $_SESSION['accountId'];
        $id = $this->_dbInsert($data, 'table_enquiry_source');
        return $id;
    }

    function updateEnquirySource($id)
    {
        $data['source_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['source_name'])));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['account_id'] = $_SESSION['accountId'];
        $id = $this->_dbUpdate2($data, 'table_enquiry_source', " source_id=" . $id);
        return $id;
    }

    function showEnquiryType()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'enquiry_type';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//
//        $limit = "LIMIT $start, $rp";
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasEnqType']) && $_SESSION['MasEnqType'] != 'all' && $_SESSION['MasEnqType'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasEnqType'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_enquiry_type', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_enquiry_type', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"enquiry_type.php?stid=' . $auRec[$i]->enquiry_type_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->enquiry_type_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->enqury_type) . '"';
            $json .= ',"' . addslashes($auRec[$i]->last_update_date) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addEnquiryType()
    {
        $data['enqury_type'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['enqury_type'])));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $data['account_id'] = $_SESSION['accountId'];
        $id = $this->_dbInsert($data, 'table_enquiry_type');
        return $id;
    }

    function updateEnquirytype($id)
    {
        $data['enqury_type'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['enqury_type'])));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $data['account_id'] = $_SESSION['accountId'];
        $id = $this->_dbUpdate2($data, 'table_enquiry_type', " enquiry_type_id=" . $id);
        return $id;
    }

    function showSpecificationStages()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'spec_status_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//
//        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//        $_objAdmin = new Admin();
        $where = '';
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_specification_statge_status', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_specification_statge_status', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"specification_stages.php?stid=' . $auRec[$i]->spec_status_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->spec_status_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->spec_status_name) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addSpecificationStages()
    {
        $data['account_id'] = $_SESSION['accountId'];
        $data['spec_status_name'] = mysql_escape_string($_POST['spec_status_name']);
        $data['created_date'] = date("Y-m-d");
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = "A";
        $id = $this->_dbInsert($data, 'table_specification_statge_status');
        return $id;
    }

    function updateSpecificationStages($id)
    {
        $data['account_id'] = $_SESSION['accountId'];
        $data['spec_status_name'] = mysql_escape_string($_POST['spec_status_name']);
        $data['created_date'] = date("Y-m-d");
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = "A";
        $id = $this->_dbUpdate2($data, 'table_specification_statge_status', " spec_status_id=" . $id);
        return $id;
    }

    function showSalesStage()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'sales_stg_status_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//
//        $limit = "LIMIT $start, $rp";
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasSalesStage']) && $_SESSION['MasSalesStage'] != 'all' && $_SESSION['MasSalesStage'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasSalesStage'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_sales_statge_status', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_sales_statge_status', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"sales_stage.php?stid=' . $auRec[$i]->sales_stg_status_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->sales_stg_status_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->sales_stg_status_name) . '"';
            // $json .= ',"'.addslashes($auRec[$i]->zone_code). '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addSalesStage()
    {
        $data['sales_stg_status_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['sales_stg_status_name'])));
        $data['status'] = 'A';
        $data['account_id'] = $_SESSION['accountId'];
        $data['created_date'] = date('Y-m-d');
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $id = $this->_dbInsert($data, 'table_sales_statge_status');
        return $id;
    }

    function updateSalesStage($id)
    {
        $data['sales_stg_status_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['sales_stg_status_name'])));
        $data['account_id'] = $_SESSION['accountId'];
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $id = $this->_dbUpdate2($data, 'table_sales_statge_status', " sales_stg_status_id=" . $id);
        return $id;
    }

    function showEnquiryStatus()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'enquiry_status_id';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasEnqSts']) && $_SESSION['MasEnqSts'] != 'all' && $_SESSION['MasEnqSts'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasEnqSts'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = "$statusCondi";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_enquiry_status', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_enquiry_status', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"enquiry_status.php?stid=' . $auRec[$i]->enquiry_status_id . '&value=' . $status . '\">' . $status . '</a>';

            $checked = '';
            if ($auRec[$i]->is_default) {
                $checked = 'checked';
            }

            $isDefaultField = '<input type="radio" name="is_default" class="is_default" value="' . $auRec[$i]->enquiry_status_id . '" ' . $checked . ' />';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->enquiry_status_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->enqury_status) . '"';
            $json .= ',"' . addslashes(ucfirst($auRec[$i]->show_in_app)) . '"';
            $json .= ',"' . addslashes($isDefaultField) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addEnquiryStatus()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['enqury_status'] = mysql_escape_string($_POST['enqury_status']);
        $data['show_in_app'] = mysql_escape_string($_POST['show_in_app']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = mysql_escape_string('A');
        $id = $this->_dbInsert($data, 'table_enquiry_status');
        return $id;
    }

    function updateEnquiryStatus($id)
    {
        $data['enqury_status'] = mysql_escape_string($_POST['enqury_status']);
        $data['show_in_app'] = mysql_escape_string($_POST['show_in_app']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = mysql_escape_string('A');
        $this->_dbUpdate($data, 'table_enquiry_status', " enquiry_status_id=" . $id);
        return $id;
    }


    function showLeadValidationStatus()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'id';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasLeadValiSts']) && $_SESSION['MasLeadValiSts'] != 'all' && $_SESSION['MasLeadValiSts'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasLeadValiSts'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_validation_status_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_validation_status_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"lead_validation_status.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';

            $checked = '';
            if ($auRec[$i]->is_default) {
                $checked = 'checked';
            }

            $checkedValidate = '';
            if ($auRec[$i]->is_default_validate) {
                $checkedValidate = 'checked';
            }

            $isDefaultField = '<input type="radio" name="is_default" class="is_default" value="' . $auRec[$i]->id . '" ' . $checked . ' />';
            $isDefaultValidateField = '<input type="radio" name="is_default_validate" class="is_default_validate" value="' . $auRec[$i]->id . '" ' . $checkedValidate . ' />';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->description) . '"';
            $json .= ',"' . addslashes($isDefaultField) . '"';
            $json .= ',"' . addslashes($isDefaultValidateField) . '"';
            $json .= ',"' . addslashes(date('d M Y H:i', strtotime($auRec[$i]->created_at))) . '"';
            $json .= ',"' . addslashes(date('d M Y H:i', strtotime($auRec[$i]->updated_at))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addLeadValidationStatus()
    {
        $data = [];
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['description'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['description'])));
        $data['created_at'] = date('Y-m-d H:i:s');
        $data['updated_at'] = date('Y-m-d H:i:s');
        $data['status'] = mysql_escape_string('A');
        $id = $this->_dbInsert($data, 'table_validation_status_master');
        return $id;
    }

    function updateLeadValidationStatus($id)
    {
        $data = [];
        $data['description'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['description'])));
        $data['updated_at'] = date('Y-m-d H:i:s');
        $data['status'] = mysql_escape_string('A');
        $this->_dbUpdate($data, 'table_validation_status_master', " id=" . $id);
        return $id;
    }

    function showEnquiryMaster($hierarchy)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'enquiry_id';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//
//        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($hierarchy == 4) {
            $state = $this->_getSelectList('table_salesman', "state", '', "salesman_id='" . $_SESSION['salesmanId'] . "' ");
            $salState = $state[0]->state;
            $where = " E.account_id='" . $_SESSION['accountId'] . "'and E.state_id='" . $salState . "' ";
        } else {
            $where = " E.account_id='" . $_SESSION['accountId'] . "'";
        }
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_enquiry as E 
		left join state as ST on ST.state_id=E.state_id 
		left join city as C on C.city_id=E.city_id 
		left join table_relationship as R on R.relationship_id=E.relationship_id 
		left join table_enquiry_type as ET on ET.enquiry_type_id=E.enquiry_type_id
		left join table_enquiry_source as ES on ES.source_id = E.source_id
		left join table_retailer_channel_master as RC on RC.channel_id = E.channel_id
		left join table_salesman as tsa on tsa.salesman_id=E.added_salesman_id', "E.*,ST.state_name,C.city_name,ET.enquiry_type_id,ET.enqury_type,ES.source_id,ES.source_name,RC.channel_id,RC.channel_name,tsa.salesman_name as added_salesman_name,E.added_salesman_id", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_enquiry as E 
		left join state as ST on ST.state_id=E.state_id 
		left join city as C on C.city_id=E.city_id 
		left join table_relationship as R on R.relationship_id=E.relationship_id 
		left join table_enquiry_type as ET on ET.enquiry_type_id=E.enquiry_type_id
		left join table_enquiry_source as ES on ES.source_id = E.source_id
		left join table_retailer_channel_master as RC on RC.channel_id = E.channel_id
		left join table_salesman as tsa on tsa.salesman_id=E.added_salesman_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $enqDet = $this->_getSelectList2('table_enquiry_details as ed
    left join table_enquiry_status as ST on ST.enquiry_status_id= ed.enquiry_status_id
    left join table_salesman as ts on ts.salesman_id=ed.salesman_id', 'ST.enquiry_status_id,ST.enqury_status,ts.salesman_name as assgined_salesperson ,ed.salesman_id as assgined_salesperson_id', '', "ed.enquiry_id='" . $auRec[$i]->enquiry_id . "' ORDER BY ed.enquiry_detail_id DESC LIMIT 0,1");
            $enqryDetail = [];
            if (is_array($enqDet) && (count($enqDet) > 0)) {
                $enqryDetail = $enqDet[0];
            }
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"enquiry_master.php?stid=' . $auRec[$i]->enquiry_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->enquiry_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->enquiry_id) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->channel_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_phone_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_email) . '"';
            $json .= ',"' . addslashes($auRec[$i]->std_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->telephone_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_location) . '"';
            $json .= ',"' . addslashes(preg_replace('/[^a-zA-Z0-9\']/', ' ', $auRec[$i]->enquiry_text)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->source_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->enqury_type) . '"';
            $json .= ',"' . addslashes($enqryDetail->enqury_status) . '"';
            $json .= ',"' . addslashes($auRec[$i]->qty_enqur) . '"';
            $json .= ',"' . addslashes($auRec[$i]->final_qty) . '"';//add by brajesh
            if ($auRec[$i]->added_salesman_id == 0) {
                $json .= ',"Admin"';
            } else {
                $json .= ',"' . addslashes($auRec[$i]->added_salesman_name) . '"';
            }
            $json .= ',"' . addslashes($enqryDetail->assgined_salesperson) . '"';
            $json .= ',"' . addslashes($auRec[$i]->created_date) . '"';//add by brajesh
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addEnquiry()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['retailer_name'] = mysql_escape_string($_POST['retailer_name']);
        //$data['retailer_code']=mysql_escape_string($_POST['retailer_code']);
        $data['relationship_id'] = mysql_escape_string($_POST['relationship_id']);
        $data['state_id'] = mysql_escape_string($_POST['state']);
        $data['city_id'] = mysql_escape_string($_POST['address2']);
        $data['enquiry_text'] = mysql_escape_string(preg_replace('/[^a-zA-Z0-9 \']/', '_', $_POST["enquiry_text"]));
        $data['retailer_location'] = mysql_escape_string($_POST['retailer_location']);
        $data['retailer_phone_no'] = mysql_escape_string($_POST['retailer_number']);
        $data['std_code'] = mysql_escape_string($_POST['std_code']);
        $data['telephone_no'] = mysql_escape_string($_POST['telephone_no']);
        $data['created_date'] = date("Y-m-d");
        $data['channel_id'] = mysql_escape_string($_POST['channel_id']);
        $data['retailer_email'] = mysql_escape_string($_POST['retailer_email']);
        $data['address'] = mysql_escape_string($_POST['address']);
        $data['source_id'] = mysql_escape_string($_POST['source_id']);
        $data['enquiry_type_id'] = mysql_escape_string($_POST['enquiry_type_id']);
        $data['qty_enqur'] = mysql_escape_string($_POST['qty_enqur']);
        $data['added_salesman_id'] = mysql_escape_string($_POST['added_salesman_id']);
        $data['status'] = "A";
        //echo "<pre>";print_r($data);die;
        $enquiry_id = $this->_dbInsert($data, 'table_enquiry');
        //Insert data into enquiry detail table.
        $data1['enquiry_id'] = $enquiry_id;
        $data1['salesman_id'] = $_POST["salesman_id"];
        $data1['enquiry_status_id'] = mysql_escape_string($_POST['enquiry_status_id']);
        $data1['feedback'] = '';
        $data1['reminder'] = '0000-00-00';
        $data1['transfer_status'] = 1;
        $data1['last_update_date'] = date('Y-m-d');
        $data1['last_update_time'] = date('H:i:s');
        $enq_detail_id = $this->_dbInsert($data1, 'table_enquiry_details');
        //code for push notification
        //echo "not equal";
        //	include __DIR__ . '/notification.php';
//        include("services/notification.php");
//        $notification = new Notification();
        //echo "<pre/>";print_r($notification);die;
        $salRec = mysql_query("SELECT s.salesman_name,s.gcm_regid,s.salesman_id
		FROM table_salesman as s
		WHERE s.salesman_id ='" . $_POST["salesman_id"] . "'");
        if (mysql_num_rows($salRec) > 0) {
            $deviceToken = mysql_fetch_array($salRec);
        }
        //echo $salRec;die;
        //echo "<pre/>";print_r($deviceToken);echo "<br/>";
        $title = "Enquiry Assigned";
        $message = $deviceToken['salesman_name'] . " New Enquiry Assigned To You";
        $url = 'https://fcm.googleapis.com/fcm/send';
        $sender = "Aludec";
        $photo = "no";
        $type = "enquiry";
        $date = date('Y-m-d');
        $time = date('H:i:s');
        $message = $sender . "|@|" . $deviceToken['salesman_id'] . "|@|" . $date . "|@|" . $time . "|@|" . $photo . "|@|" . $title . "|@|" . $message . "|@|" . $type;
        //echo $message;die;
        $message = array("message" => $message);
        $fields = array(
            'to' => $deviceToken['gcm_regid'],
            'data' => $message,
        );
        $fields = json_encode($fields);
        //  echo "<pre/>";print_r($fields);die;
        $headers = array(
            'Authorization: key=' . "AAAAxD6Ve-4:APA91bGm9IV8ZcgUCD5uDA4SJMHR15LOfaUidJ5D2DsJ7QB1ZfMhLQ_tGUlo0ce6cUnObUeNgQGxEyMYuz0dPlcwh29niQutzRQFEluHHMbGrEYgqDtgU9OK53pPfVa8THhSZOiBN1xQ",
            'Content-Type: application/json'
        );
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);
        $result = curl_exec($ch);
        //echo "<pre/>";print_r($result);die;
        curl_close($ch);
        //end code for push notification
        return $enquiry_id;
    }

    function updateEnquiry($id)
    {
//echo "inside update id=".$id;die;
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['retailer_name'] = mysql_escape_string($_POST['retailer_name']);
        //$data['retailer_code']=mysql_escape_string($_POST['retailer_code']);
        $data['relationship_id'] = mysql_escape_string($_POST['relationship_id']);
        $data['state_id'] = mysql_escape_string($_POST['state']);
        $data['city_id'] = mysql_escape_string($_POST['address2']);
        $data['enquiry_text'] = mysql_escape_string(preg_replace('/[^a-zA-Z0-9 \']/', '_', $_POST["enquiry_text"]));
        $data['retailer_location'] = mysql_escape_string($_POST['retailer_location']);
        $data['retailer_phone_no'] = mysql_escape_string($_POST['retailer_number']);
        $data['std_code'] = mysql_escape_string($_POST['std_code']);
        $data['telephone_no'] = mysql_escape_string($_POST['telephone_no']);
        //$data['salesman_id']=$_POST["salesman_id"];
        //$data['last_update_date']=date('Y-m-d');
        //$data['last_update_status']='New';
        $data['channel_id'] = mysql_escape_string($_POST['channel_id']);
        $data['retailer_email'] = mysql_escape_string($_POST['retailer_email']);
        $data['address'] = mysql_escape_string($_POST['address']);
        $data['source_id'] = mysql_escape_string($_POST['source_id']);
        $data['enquiry_type_id'] = mysql_escape_string($_POST['enquiry_type_id']);
        //$data['enquiry_status_id']=mysql_escape_string($_POST['enquiry_status_id']);
        $data['qty_enqur'] = mysql_escape_string($_POST['qty_enqur']);
        $data['status'] = "A";
        //echo "<pre>";print_r($data);die;
        $this->_dbUpdate2($data, 'table_enquiry', " enquiry_id=" . $id);
        //Insert data into enquiry detail table.
        $data1['enquiry_id'] = $id;
        $data1['salesman_id'] = $_POST["salesman_id"];
        $data1['enquiry_status_id'] = mysql_escape_string($_POST['enquiry_status_id']);
        $data1['feedback'] = '';
        $data1['reminder'] = '0000-00-00';
        $data1['transfer_status'] = 1;
        $data1['last_update_date'] = date('Y-m-d');
        $data1['last_update_time'] = date('H:i:s');
        $this->_dbInsert($data1, 'table_enquiry_details');
        return $id;
    }
    //Todo End: Sagar : 2nd Sep 2021 : enquiry module
    //Todo Start: Sagar : 2nd Sep 2021 : Project module
    function showProjectCategory()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//
//        $limit = "LIMIT $start, $rp";

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasParentCate']) && $_SESSION['MasParentCate'] != 'all' && $_SESSION['MasParentCate'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasParentCate'] . "'";
        }
        $where = " $statusCondi ";
        //Todo End : sudhanshu 13 june 2024 : add status filter
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_project_category', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_project_category', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"project_category.php?stid=' . $auRec[$i]->category_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->category_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->category_name) . '"';
            // $json .= ',"'.addslashes($auRec[$i]->zone_code). '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addProjectCategory()
    {
        $data['category_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['category_name'])));
        $data['status'] = 'A';
        $data['account_id'] = $_SESSION['accountId'];
        $data['created_date'] = date('Y-m-d');
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $id = $this->_dbInsert($data, 'table_project_category');
        return $id;
    }

    function updateProjectCategory($id)
    {
        $data['category_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['category_name'])));
        $data['status'] = 'A';
        $data['account_id'] = $_SESSION['accountId'];
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $id = $this->_dbUpdate($data, 'table_project_category', " category_id=" . $id);
        return $id;
    }

    function showProjectStatus()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'project_status';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//
//        $limit = "LIMIT $start, $rp";

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasProjectSts']) && $_SESSION['MasProjectSts'] != 'all' && $_SESSION['MasProjectSts'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasProjectSts'] . "'";
        }
        $where = " $statusCondi ";
        //Todo End : sudhanshu 13 june 2024 : add status filter
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_project_status_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_project_status_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"project_status.php?stid=' . $auRec[$i]->project_status_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->project_status_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->project_status) . '"';
            // $json .= ',"'.addslashes($auRec[$i]->zone_code). '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addProjectStatus()
    {
        $data['account_id'] = $_SESSION['accountId'];
        $data['project_status'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['project_status'])));
        $data['status'] = mysql_escape_string($_POST['status']);
        $data['created_date'] = date('Y-m-d');
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $id = $this->_dbInsert($data, 'table_project_status_master');
        return $id;
    }

    function updateProjectStatus($id)
    {
        $data['account_id'] = $_SESSION['accountId'];
        $data['project_status'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['project_status'])));
        $data['status'] = mysql_escape_string($_POST['status']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $id = $this->_dbUpdate($data, 'table_project_status_master', " project_status_id=" . $id);
        return $id;
    }

    function showProject($saleCond)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'p.project_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " 1=1 ";
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasProject']) && $_SESSION['MasProject'] != 'all' && $_SESSION['MasProject'] != '') {
            $statusCondi = " AND p.status ='" . $_SESSION['MasProject'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " p.status!='D' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $tbl_names = "table_project as p " .
            "LEFT JOIN table_item  AS item ON item.item_id = p.item_id " .
            "LEFT JOIN table_brands AS brand ON brand.brand_id = p.brand_id " .
            "LEFT JOIN table_salesman AS salesman ON salesman.salesman_id = p.salesman_id " .
//            "LEFT JOIN table_retailer AS architect ON architect.retailer_id = p.project_architect ".
            "LEFT JOIN table_retailer AS customer ON (customer.retailer_id = p.retailer_id) " .
            "LEFT JOIN table_distributors AS dealer ON (dealer.distributor_id = p.distributor_id) " .
            "LEFT JOIN table_zone AS zone ON zone.zone_id = p.zone_id " .
            "LEFT JOIN table_zone AS project_zone ON project_zone.zone_id = p.project_zone " .
            //for state
            "LEFT JOIN state AS state ON state.state_id = p.state_id " .
            "LEFT JOIN table_department  AS tb_dept ON tb_dept.department_id = p.department_id " .
            "LEFT JOIN table_specification_type  AS spf_type ON spf_type.specification_type_id = p.specification_type_id " .
            "LEFT JOIN table_product_type_master  AS ptypem ON ptypem.product_type_id = p.product_type_id " .
            "LEFT JOIN table_project_category AS pc ON pc.category_id = p.category_id " .
            "LEFT JOIN table_specification_statge_status  AS spec_stage ON spec_stage.spec_status_id = p.specification_stage_status_id " .
            "LEFT JOIN table_sales_statge_status  AS sales_stage ON sales_stage.sales_stg_status_id = p.sales_stage_status_id " .
            "LEFT JOIN table_boq_status  AS boq_status ON boq_status.boq_status_id = p.boq_id ";
        $col_names = "p.*,item.item_name,item.item_code,brand.brand_name,salesman.salesman_name,customer.retailer_name AS customer_name,dealer.distributor_name AS dealer_name,zone.zone_name,project_zone.zone_name AS project_zone_name,state.state_name,tb_dept.department_name,spf_type.specification_name,ptypem.product_type_name,pc.category_name,spec_stage.spec_status_name,sales_stage.sales_stg_status_name,boq_status.boq_status_name";
        $auRec = $this->_getSelectList($tbl_names, $col_names, $rp, $where . $saleCond . $sort, '');
        //echo '<pre>';
        //print_r($auRec); die;
        $auRecCount = $this->_getSelectList($tbl_names, 'count(*) as total', '', $where . $saleCond);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href="project.php?statusId=' . $auRec[$i]->project_Id . '&value=' . $sts . '">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->project_Id . '",';
            $json .= '"cell":["' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->project_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->project_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->item_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->item_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->brand_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->zone_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->project_zone_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->state_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->project_location))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->department_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->salesman_name))) . '"';
            $_custname = '';
            $_distname = '';
            if (!empty($auRec[$i]->retailer_id)) {
                $where = " customer.retailer_id IN (" . $auRec[$i]->retailer_id . ") ";
                $custnames = $this->_getSelectList("table_retailer AS customer", "customer.retailer_name AS customer_name", $rp, $where, '');
                if (count($custnames) > 0) {
                    $_custname = array_map(function ($value) {
                        return $value->customer_name;
                    }, $custnames);
                }
            }
            if (!empty($auRec[$i]->distributor_id)) {
                $where = "dealer.distributor_id IN (" . $auRec[$i]->distributor_id . ") ";
                $distnames = $this->_getSelectList("table_distributors AS dealer", "dealer.distributor_name AS dealer_name", $rp, $where, '');
                if (count($distnames) > 0) {
                    $_distname = array_map(function ($value) {
                        return $value->dealer_name;
                    }, $distnames);
                }
            }
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', implode(',', $_distname)))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', implode(',', $_custname)))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->category_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->enquiry_month))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->specification_month))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->maturity_date))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->order_qty))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->specification_remark))) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->architect_name)). '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->builder)). '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->builder_address)). '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->specification_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->projected_qty))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->product_type_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->spec_status_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->sales_stg_status_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->boq_status_name))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $sts)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /** Used to get a table fields **/
    function get_table_columns($table_name)
    {
        $col_list = array();
        if ($table_name) {
            $qry = mysqli_query($this->db_connect_id, "SHOW COLUMNS FROM " . $table_name);
            if ($qry) {
                while ($coldtl = mysqli_fetch_assoc($qry)) {
                    array_push($col_list, $coldtl['Field']);
                }
            }
        }
        return $col_list;
    }

    /** Function to insert data into table ***/
    function safe_insert($tbl_name, $data)
    {
        $ins_data = array();
        if ($tbl_name != '' && !empty($data) && is_array($data)) {
            $tbl_fields = $this->get_table_columns($tbl_name);
            foreach ($data as $tkey => $tval) {
                if (in_array($tkey, $tbl_fields)) {
                    $ins_data[$tkey] = mysqli_real_escape_string($this->db_connect_id, $tval);
                }
            }
//            echo '<pre>';
//            print_r($ins_data);
//            print_r($data);
//            die(' die here in safe_insert');
            if (!empty($ins_data)) {
                $fldset = '';
                $valset = '';
                foreach ($ins_data as $ins_key => $ins_val) {
                    $fldset .= $ins_key . ',';
                    $valset .= "'" . $ins_val . "',";
                }
                $fldset = trim($fldset, ',');
                $valset = trim($valset, ",");
                $sql = "INSERT INTO " . $tbl_name . " (" . $fldset . ") VALUES (" . $valset . ")";
                $qry = mysqli_query($this->db_connect_id, $sql);
                if ($qry) {
                    return mysqli_insert_id($this->db_connect_id);
                }
            }
        }
        return false;
    }

    /** Function to update data into table ***/
    function safe_update($tbl_name, $data, $condition)
    {
        $ins_data = array();
        if ($tbl_name != '' && !empty($data) && is_array($data) && !empty($condition)) {
            $tbl_fields = $this->get_table_columns($tbl_name);
            foreach ($data as $tkey => $tval) {
                if (in_array($tkey, $tbl_fields)) {
                    $ins_data[$tkey] = $tval;
                }
            }
            $updSt = '';
            foreach ($ins_data as $ins_key => $ins_val) {
                $updSt .= $ins_key . "='" . $ins_val . "',";
            }
            $updSt = trim($updSt);
            if ($updSt != '') {
                $sql = "UPDATE $tbl_name SET " . trim($updSt, ',') . " WHERE " . $condition;
                $qry = mysqli_query($this->db_connect_id, $sql);
                if ($qry) {
                    return mysqli_affected_rows($this->db_connect_id);
                }
            }
        }
        return false;
    }

    function showProjectDiscount()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'project_discount_id';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " 1=1 ";
        $where = " pd.status!='D' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($_SESSION['fromDate'] != '') {
            $fromdate = " and pd.created_date >= '" . date('Y-m-d', strtotime($_SESSION['fromDate'])) . "'";
        } else {
            $fromdate = " and pd.created_date >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['toDate'] != '') {
            $todate = " and pd.created_date <= '" . date('Y-m-d', strtotime($_SESSION['toDate'])) . "'";
        } else {
            $todate = " and pd.created_date <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['project_salesman_id'] != "") {
            $where .= " AND pd.salesman_id=" . $_SESSION['project_salesman_id'];
        }
        $where .= " $fromdate $todate";
        $tbl_names = "table_project_discount as pd " .
            "LEFT JOIN table_project AS p ON pd.project_id = p.project_id " .
            "LEFT JOIN table_zone AS z ON z.zone_id = p.project_zone " .
            "LEFT JOIN table_salesman AS salesman ON salesman.salesman_id = pd.salesman_id ";
        $col_names = "pd.*,salesman.salesman_name,p.project_code,p.project_name,z.zone_name";
        $auRec = $this->_getSelectList($tbl_names, $col_names, $rp, $where . $sort, '');
        //echo "<pre>";print_r($auRec);die;
        $auRecCount = $this->_getSelectList($tbl_names, 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            //if($auRec[$i]->project_name!="" && $auRec[$i]->project_code!=""){
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"project_discount.php?statusId=' . $auRec[$i]->project_discount_id . '&value=' . $sts . '\">' . $sts . '</a>';
            $view = '<a href=\"project_discount_detail.php?id=' . $auRec[$i]->project_discount_id . '\">View</a>';
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->project_discount_id . '",';
            $json .= '"cell":["' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->project_code))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->project_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->supply)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->tentative_supply_date)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->bill_to_be_done_to)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->price_val_req_upto_date)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->lat)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->lng)) . '"';
            $json .= ',"' . $view . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
            //}
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End: Sagar : 2nd Sep 2021 : Project module

    /**10th Sept 21**/
    function showUserRoleAssignment()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'rsm.salesman_id';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = '';
        if ($query) {
            $where .= " $qtype LIKE '%$query%' ";
        }
        $where .= " AND rm.account_id='" . $_SESSION['accountId'] . "' GROUP BY rsbm.role_id,rsm.role_id,rsm.salesman_id ";
        $auRec = $this->_getSelectList2('table_role_salesman_mapping as rsm
        left join table_role_brand_mapping as rsbm on rsm.role_id=rsbm.role_id		
		left join table_role_master as rm on rm.role_id=rsm.role_id
		left join table_salesman as s on s.salesman_id=rsm.salesman_id
		left join table_brands as b on b.brand_id=rsbm.brand_id',
            'rsm.*,rm.role_name,s.salesman_name,s.employee_code,group_concat(b.brand_name SEPARATOR ", ") as brand_names', $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_role_salesman_mapping as rsm
        left join table_role_brand_mapping as rsbm on rsm.role_id=rsbm.role_id		
		left join table_role_master as rm on rm.role_id=rsm.role_id
		left join table_salesman as s on s.salesman_id=rsm.salesman_id
		left join table_brands as b on b.brand_id=rsbm.brand_id', 'rsm.role_map_id', '', $where . $sort);
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"role_assignment.php?id=' . $auRec[$i]->role_map_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->role_map_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_id) . '"';
            $json .= ',"' . addslashes($auRec[$i]->role_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_names) . '"';
            $json .= ',"' . addslashes(date('d M Y H:i A', strtotime($auRec[$i]->created_on))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

//    Todo Start : jatin 13 dec 2022

    function showSalesmanCategory()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'tsc.salesman_id';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasSalCate']) && $_SESSION['MasSalCate'] != 'all' && $_SESSION['MasSalCate'] != '') {
            $statusCondi = " AND tsc.status ='" . $_SESSION['MasSalCate'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = '';
        if ($query) {
            $where .= " $qtype LIKE '%$query%' AND";
        }


        $where .= " tsc.account_id='" . $_SESSION['accountId'] . "'  $statusCondi   ";
        $auRec = $this->_getSelectList('table_salesman_category AS tsc
            LEFT JOIN table_salesman AS ts
            ON
            ts.salesman_id = tsc.salesman_id
            LEFT JOIN table_category AS tc
            ON
            tc.category_id = tsc.category_id',
            'tsc.*,ts.salesman_name ,ts.employee_code ,tc.category_name ,tc.category_code', $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList('table_salesman_category AS tsc
            LEFT JOIN table_salesman AS ts
            ON
            ts.salesman_id = tsc.salesman_id
            LEFT JOIN table_category AS tc
            ON
            tc.category_id = tsc.category_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"salesman_category_wise_report.php?id=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_code) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
// Todo End

//	function addUserRoleAssignment()
//    {
//
//        $data['salesman_id'] 	= mysql_escape_string($_POST['salesman_id']);
//		$data['role_id'] 		= mysql_escape_string($_POST['role_id']);
//        $data['status']			= 'A';
//        $data['created_on']		= date('Y-m-d H:i:s');
//        $roleid = $this->_dbInsert($data,'table_role_salesman_mapping');
//		if(isset($roleid) && !empty($roleid)){
//			$dataWeb['role_id'] = mysql_escape_string($_POST['role_id']);
//			$this->_dbUpdate2($dataWeb,'table_web_users', " salesman_id=".$_POST['salesman_id']);
//
//			$brands = $_POST['role_brand_id'];
//			if(!empty($brands) && count($brands)>0){
//				foreach($brands as $key=>$brandid){
//
//					$dataBrand['brand_id'] 		= $brandid;
//					$dataBrand['role_map_id'] 	= $roleid;
//
//					$this->_dbInsert($dataBrand,'table_role_salesman_brand_mapping');
//
//				}
//
//			}
//
//		}
//		return $roleid;
//
//    }
//    function updateUserRoleAssignment($id)
//    {
//     // echo "<pre>"; print_r($_POST);die;
//		$data['role_id'] 	= mysql_escape_string($_POST['role_id']);
//        $data['updated_on']	= date('Y-m-d H:i:s');
//        $this->_dbUpdate2($data,'table_role_salesman_mapping', " role_map_id=".$id);
//		//echo "roleid = ".$roleid;die;
//		if(isset($id) && !empty($id)){
//			$dataWeb['role_id'] = mysql_escape_string($_POST['role_id']);
//			$this->_dbUpdate2($dataWeb,'table_web_users', " salesman_id=".$_POST['salesman_id']);
//
//			$brands = $_POST['role_brand_id'];
//			if(!empty($brands) && count($brands)>0){
//				$this->mysql_query ('Delete FROM table_role_salesman_brand_mapping where role_map_id='.$id);
//				foreach($brands as $key=>$brandid){
//
//					$dataBrand['brand_id'] 		= $brandid;
//					$dataBrand['role_map_id'] 	= $id;
//
//					$this->_dbInsert($dataBrand,'table_role_salesman_brand_mapping');
//
//				}
//			}
//
//		}
//
//
//        return $roleid;
//    }
    /***************************  Distributor In-process Stock Details *******************************************/
    function showStockistInProcessStock()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'c.category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " b.brand_id IN(" . $RoleBrands . ")";
        }
        $where = $brandCnd;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($_SESSION['stockistId'] != "" && $_SESSION['stockistId'] != "0") {
            $dis = " and d.stockist_id='" . $_SESSION['stockistId'] . "'";
        }
        $auRec = $this->_getSelectList('table_item_stockist_stk_inprocess AS s 
		LEFT JOIN table_cases AS clr ON clr.case_id = s.attribute_value_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		LEFT JOIN table_stockist AS d ON d.stockist_id = s.stockist_id',
            "d.stockist_code,d.stockist_name,d.gst_no,d.pan_no,s.cess_amount,
		b.brand_name,
		c.category_name, clr.case_size, i.item_name, i.item_code, s.acpt_stock_value,s.price, s.rec_stock_value, s.status, 
		s.bill_no,s.bill_date,s.last_update_datetime,s.stockist_stk_inpro_id,s.invoice_value,s.taxable_value,s.sgst_amount,s.cgst_amount,s.igst_amount
		", $rp, $where . $dis . $sort, '');
        $auRecCount = $this->_getSelectList('table_item_stockist_stk_inprocess AS s 
		LEFT JOIN table_cases AS clr ON clr.case_id = s.attribute_value_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		LEFT JOIN table_stockist AS d ON d.stockist_id = s.stockist_id', 'count(*) as total', '', $where . $dis);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Accepted" : "In-Process";
            //$status="<a href=\"master_category.php?stid=".$auRec[$i]->category_id."&value=".$status."\">".$status."</a>";
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stockist_stk_inpro_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->stockist_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->stockist_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->gst_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->pan_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->bill_no) . '"';
            //change date format : sudhanshu 11 march
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->bill_date)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->case_size). '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rec_stock_value) . '"';
            $json .= ',"' . addslashes($auRec[$i]->price) . '"';
            $json .= ',"' . addslashes($auRec[$i]->invoice_value) . '"';
            $json .= ',"' . addslashes($auRec[$i]->taxable_value) . '"';
            $json .= ',"' . addslashes($auRec[$i]->sgst_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->cgst_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->igst_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->cess_amount) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->acpt_stock_value). '"';
            //change date format : sudhanshu 11 march
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->last_update_datetime)) . '"]';
            //$json .= ',"'.$status.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    public function CheckStockistAvlStock($stk_inpro_id)
    {
        $cond = " ip.stockist_stk_inpro_id='" . $stk_inpro_id . "' ";
        $stockVal = $this->_getSelectList('table_item_stockist_stk_inprocess as ip
		left join table_item_stockist_stock as stk on stk.stockist_id=ip.stockist_id
		AND stk.item_id=ip.item_id AND stk.category_id=ip.category_id AND 
		stk.color_id=ip.color_id',
            "(ip.rec_stock_value-ip.acpt_stock_value) as pending_stock,stk.stockist_stock_value", '', $cond);

    }

    public function stockStkTransfer()
    {
        if ($_POST['stock_val'] != "") {
            $_SESSION['value'] = '';
            unset($_SESSION['value']);
            $stkbfrAct = 0;
            if (isset($_POST['stockId']) && sizeof($_POST['stockId']) > 0 && isset($_POST['sal_stock_value']) && sizeof($_POST['sal_stock_value']) > 0) {
                foreach ($_POST['stockId'] as $key => $value) {
                    if (!empty($_POST['sal_stock_value'][$key]) && $_POST['sal_stock_value'][$key] > 0) {
                        $data = array();
                        # code...
                        //echo $value;
                        $cond = " stockist_stk_inpro_id='" . $value . "' ";
                        $stockVal = $this->_getSelectList('table_item_stockist_stk_inprocess', "*", '', $cond);
                        if (($stockVal[0]->acpt_stock_value + $_POST['sal_stock_value'][$key]) > $stockVal[0]->rec_stock_value) {
                            $_SESSION['value'] = " Entered QTY " . $_POST['sal_stock_value'][$key] . " is grater than the pending QTY " . ($stockVal[$key]->rec_stock_value - $stockVal[0]->acpt_stock_value);
                        } else {
                            $data['acpt_stock_value'] = $stockVal[0]->acpt_stock_value + $_POST['sal_stock_value'][$key];
                            $data['status'] = 'A';
                            $data['bill_status'] = 'A';
                            $data['GRN_date'] = date('Y-m-d H:i:s');
                            $id = $this->_dbUpdate($data, 'table_item_stockist_stk_inprocess', " stockist_stk_inpro_id=" . $value);
                            /* Update Stockist stock */
                            $discon = " stockist_id='" . $stockVal[0]->stockist_id . "' and category_id='" .
                                $stockVal[0]->category_id . "' and item_id='" . $stockVal[0]->item_id . "' and color_id='" . $stockVal[0]->color_id . "'";
                            $disStockValue = $this->_getSelectList('table_item_stockist_stock', "*", '', $discon);

                            $StkinvType = '';
                            if (is_array($disStockValue) && sizeof($disStockValue) > 0) {
                                $stkbfrAct = $disStockValue[0]->stockist_stock_value;
                                if (strtolower($stockVal[0]->bill_type) == 'return') {
                                    $StkinvType = 'ret_rct_qty';
                                    $dataaccept['stockist_stock_value'] = ($disStockValue[0]->stockist_stock_value - $_POST['sal_stock_value'][$key]);
                                } else {
                                    $StkinvType = 'rct_qty';
                                    $dataaccept['stockist_stock_value'] = ($disStockValue[0]->stockist_stock_value + $_POST['sal_stock_value'][$key]);
                                }
                                $dataaccept['last_updated_date'] = date('Y-m-d');
                                $id = $this->_dbUpdate($dataaccept, 'table_item_stockist_stock', " stockist_stk_id=" . $disStockValue[0]->stockist_stk_id);
                                $flag = true;
                            } else {
                                if (strtolower($stockVal[0]->bill_type) == 'return') {
                                    $StkinvType = 'ret_rct_qty';
                                } else {
                                    $StkinvType = 'rct_qty';
                                }

                                $stkbfrAct = 0;
                                $datastk = array();
                                $datastk['account_id'] = $stockVal[0]->account_id;
                                $datastk['stockist_id'] = $stockVal[0]->stockist_id;
                                $datastk['item_id'] = $stockVal[0]->item_id;
                                $datastk['category_id'] = $stockVal[0]->category_id;
                                $datastk['attribute_value_id'] = $stockVal[0]->attribute_value_id;
                                $datastk['color_id'] = $stockVal[0]->color_id;
                                $datastk['stockist_stock_value'] = ((strtolower($stockVal[0]->bill_type) == 'return') ? "-" . $_POST['sal_stock_value'][$key] : $_POST['sal_stock_value'][$key]);
                                $datastk['last_updated_date'] = date('Y-m-d');
                                $datastk['last_update_datetime'] = date('Y-m-d H:i:s');
                                $this->_dbInsert($datastk, 'table_item_stockist_stock');
                                $flag = true;
                            }
                            $this->updateStockistQtySummary($StkinvType, $stockVal[0]->stockist_id, $stockVal[0]->item_id, intval(date('m', strtotime($stockVal[0]->bill_date))), date('Y', strtotime($stockVal[0]->bill_date)), $_POST['sal_stock_value'][$key]);

//                            $Trans_data = array();
//                            $Trans_data['distributor_id'] = $stockVal[0]->distributor_id;
//                            $Trans_data['item_id'] = $stockVal[0]->item_id;
//                            $Trans_data['stock_before_activity'] = $stkbfrAct;
//                            $Trans_data['quantity'] = $_POST['sal_stock_value'][$key];
//                            $Trans_data['stock_after_activity'] = ((strtolower($stockVal[0]->bill_type) == 'return') ? ($stkbfrAct - $_POST['sal_stock_value'][$key]) : ($stkbfrAct + $_POST['sal_stock_value'][$key]));
//                            $Trans_data['activity_type'] = "GRN_REC";
//                            $Trans_data['activity_date'] = date('Y-m-d');
//                            $Trans_data['activity_time'] = date('H:i:s');
//                            $this->_dbInsert($Trans_data, 'table_item_distributor_stock_transaction_activity');


                        }
                    }
                }
                if ($flag) {
                    return 1;
                }
            }
        }
    }

    function showCoveragePJPAdherenceReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'retailer_name';
        if (!$sortorder)
            $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $condi = '';
        $where = '';
        if ($_SESSION['SalAttList'] > 0) {
            $condi .= " AND s.salesman_id ='" . $_SESSION['SalAttList'] . "'";
        }
        if ($_SESSION['state'] > 0) {
            $condi .= " AND r.state ='" . $_SESSION['state'] . "'";
        }
        if ($_SESSION['region'] > 0) {
            $condi .= " AND r.region_id ='" . $_SESSION['region'] . "'";
        }
        if (isset($_SESSION['dismonth']) && $_SESSION['dismonth'] > 0) {
            $month = $_SESSION['dismonth'];
        } else {
            $month = date('m');
        }
        if (isset($_SESSION['disCyear']) && $_SESSION['disCyear'] > 0) {
            $year = $_SESSION['disCyear'];
        } else {
            $year = date('Y');
        }
        $where .= " r.account_id=" . $_SESSION['accountId'] . " and rs.month='" . intval($month) . "' AND rs.year='" . intval($year) . "' and rs.status='A' and rsd.status='A' and r.status='A' $salesman $condi";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $where .= " group by rs.salesman_id,rsd.retailer_id ";
        $auRec = $this->_getSelectList2('table_salesman_retailer_assignment as rs
                left join table_salesman_retailer_assignment_details as rsd on rsd.route_schedule_id = rs.route_schedule_id        
		inner join table_retailer as r on r.retailer_id = rsd.retailer_id
        left join table_salesman as s on s.salesman_id = rs.salesman_id        
		left join table_relationship as rr on rr.relationship_id=r.relationship_id
        left join table_retailer_channel_master as cm on cm.channel_id=r.channel_id
        left join state as st on st.state_id=r.state', "
		rs.salesman_id,rsd.retailer_id,GROUP_CONCAT(DISTINCT rsd.assign_day) as visit_dates, COUNT(DISTINCT rsd.assign_day) as planned_visits,
		r.retailer_name,s.employee_code,r.retailer_name, r.retailer_code, cm.channel_name, 
		rr.relationship_code, st.state_name, s.salesman_id, s.salesman_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2("(select COUNT(*) as total from table_salesman_retailer_assignment as rs
                left join table_salesman_retailer_assignment_details as rsd on rsd.route_schedule_id = rs.route_schedule_id        
		inner join table_retailer as r on r.retailer_id = rsd.retailer_id
        left join table_salesman as s on s.salesman_id = rs.salesman_id        
		left join table_relationship as rr on rr.relationship_id=r.relationship_id
        left join table_retailer_channel_master as cm on cm.channel_id=r.channel_id
        left join state as st on st.state_id=r.state where $where) as tm ", 'count(tm.total) as total', '', '', '');
        $total = (isset($auRecCount[0]->total) ? $auRecCount[0]->total : 0);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ($rc)
            $json .= ",";
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc)
                $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->retailer_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->relationship_code)) . '"';
            if (strtotime(date('Y-m')) != strtotime($year . '-' . $month)) {
                $sDate = date('Y-m-01', strtotime($year . '-' . $month . '-01'));
                $eDate = date('Y-m-t', strtotime($year . '-' . $month . '-01'));
            } else {
                $sDate = date('Y-m-01');
                $eDate = date('Y-m-d');
            }
            $planned_visits = $auRec[$i]->planned_visits;
            $condition = " ta.retailer_id='" . $auRec[$i]->retailer_id . "' AND (ta.activity_type=3 OR ta.activity_type=28 OR ta.activity_type=50) AND ta.activity_date BETWEEN '" . $sDate . "' AND '" . $eDate . "'";
            $dayRet = $this->_getSelectList2('table_activity as ta',
                "ta.activity_date, '' as in_route, '' as on_date", '', $condition . ' GROUP BY ta.activity_date ORDER BY ta.activity_date ASC ', '');
            $visitArr = array();
            $actualpjpArr = array();
            $assign_day_list = explode(',', $auRec[$i]->visit_dates);
            foreach ($dayRet as $dayRetVal) {
                $visitArr[] = $dayRetVal->activity_date;
                $visitDay = intval(date('d', strtotime($dayRetVal->activity_date)));
                if (in_array($visitDay, $assign_day_list)) {
                    $actualpjpArr[] = $dayRetVal->activity_date;
                }
            }
            $pjp_gap = 0;
            $pjp_Adherancce = 0;
            $actual_pjp = COUNT($actualpjpArr);
            $pjp_gap = $actual_pjp - $planned_visits;
            $pjp_Adherancce = ROUND(($actual_pjp * 100 / $planned_visits), 2);
            $json .= ',"' . ucwords(addslashes($planned_visits)) . '"';
            $json .= ',"' . ucwords(addslashes($actual_pjp)) . '"';
            $json .= ',"' . ucwords(addslashes($pjp_gap)) . '"';
            $json .= ',"' . ucwords(addslashes($pjp_Adherancce . '%')) . '"';
            $mtd_visits = 0;
            $mtd_visits_gap = 0;
            $mtd_visits_per = 0;
            $mtd_visits = COUNT($dayRet);
            $mtd_visits_gap = $mtd_visits - $planned_visits;
            if ($mtd_visits_gap > 0) {
                $mtd_visits_gap = '+' . $mtd_visits_gap;
            }
            $mtd_visits_per = ROUND(($mtd_visits * 100 / $planned_visits), 2);
            $json .= ',"' . ucwords(addslashes($mtd_visits)) . '"';
            $json .= ',"' . ucwords(addslashes($mtd_visits_gap)) . '"';
            $json .= ',"' . ucwords(addslashes($mtd_visits_per . '%')) . '"';
            $ttl_days = cal_days_in_month(CAL_GREGORIAN, intval($month), $year);
            $assign_day = explode(',', $auRec[$i]->visit_dates);
            for ($j = 1; $j <= $ttl_days; $j++) {
                $dayVal = '';
                $dateVal = date('Y-m-d', strtotime($year . '-' . $month . '-' . $j));
                if (in_array($j, $assign_day)) {
                    if (in_array($dateVal, $visitArr)) {
                        $dayVal = "<div style='background-color: green; text-align: center; margin-top: -5px; margin-left: -5px; width: 100%;margin-bottom: -5px;color:#fff;''>1</div>";
                    } else {
                        if (strtotime($dateVal) <= strtotime($eDate)) {
                            $dayVal = "<div style='background-color: red; text-align: center; margin-top: -5px; margin-left: -5px; width: 100%;margin-bottom: -5px;color:#fff;''>0</div>";
                        }
                    }
                } else {
                    if (in_array($dateVal, $visitArr)) {
                        $dayVal = "<div style='background-color: orange; text-align: center; margin-top: -5px; margin-left: -5px; width: 100%;margin-bottom: -5px;''>1</div>";
                    }
                }
                $json .= ',"' . $dayVal . '"';
                // $json .= ',"'.ucwords(addslashes($j)). '"';
            }
            $json .= "]";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /***************************  Distributor In-process Stock Details *******************************************/
    //Todo Start: Sagar: 5th Oct 2021 : Show Customer Wise Routes
    function showCustomerWiseRouteScheduled($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 's.salesman_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//        $limit = "LIMIT $start, $rp";
//        if($_REQUEST['qtype']=="from_date" || $_REQUEST['qtype']=="to_date"){$query = date('Y-m-d', strtotime(mysql_escape_string($_REQUEST['query'])));}else{$query = $_REQUEST['query'];}
        //$query = $_REQUEST['query'];
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasCustWiseRoute']) && $_SESSION['MasCustWiseRoute'] != 'all' && $_SESSION['MasCustWiseRoute'] != '') {
            $statusCondi = " AND sra.status ='" . $_SESSION['MasCustWiseRoute'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $salesman $statusCondi";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_salesman_retailer_assignment as sra
LEFT JOIN table_salesman as s ON s.salesman_id = sra.salesman_id', "sra.*,s.salesman_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_salesman_retailer_assignment as sra
LEFT JOIN table_salesman as s ON s.salesman_id = sra.salesman_id', 'COUNT(sra.route_schedule_id) as total', '', $where . $sort);
        $monthsArr = array(1 => 'January', 2 => 'February', 3 => 'March', 4 => 'April', 5 => 'May', 6 => 'June', 7 => 'July', 8 => 'August', 9 => 'September', 10 => 'October', 11 => 'November', 12 => 'December');
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $month = $monthsArr[$auRec[$i]->month];
            $year = $auRec[$i]->year;
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            //Todo Start : sudhanshu 20 may 2024  : add created and updated column
            $updated_date = '';
            $created_date = '';
            if ($auRec[$i]->created_date != '' && $auRec[$i]->created_date != '0000-00-00 00:00:00') {
                $created_date = $this->_changeDate($auRec[$i]->created_date);
            }
            if ($auRec[$i]->last_update_date != '' && $auRec[$i]->last_update_date != '0000-00-00 00:00:00') {
                $updated_date = $this->_changeDate($auRec[$i]->last_update_date);
            }
            //Todo End  : sudhanshu 20 may 2024  : add created and updated column
            $status = '<a href=\"customer_wise_route.php?statusId=' . $auRec[$i]->route_schedule_id . '&value=' . $status . '\">' . $status . '</a>';
            $viewDetailLink = '<a target=\"_blank\" href=\"view_customer_wise_route.php?id=' . $auRec[$i]->route_schedule_id . '\">View Details</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->route_schedule_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
//            $json .= ',"'.addslashes($auRec[$i]->retailer_name). '"';
//            $json .= ',"'.addslashes($auRec[$i]->retailer_code). '"';
            $json .= ',"' . addslashes($month) . '"';
            $json .= ',"' . addslashes($year) . '"';
            //Todo Start : sudhanshu 20 may 2024  : add created and updated column
            $json .= ',"' . addslashes($created_date) . '"';
            $json .= ',"' . addslashes($updated_date) . '"';
            //Todo End : sudhanshu 20 may 2024  : add created and updated column
            $json .= ',"' . $viewDetailLink . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End: Sagar: 5th Oct 2021 : Show Customer Wise Routes
    //Todo Start: Sagar : 11th Oct 2021 : Campaign Module Changes
    function showCampaign()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'c.campaign_id';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 17 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasCamp']) && $_SESSION['MasCamp'] != 'all' && $_SESSION['MasCamp'] != '') {
            $statusCondi = " AND c.status ='" . $_SESSION['MasCamp'] . "'";
        }
        //Todo End : sudhanshu 17 june 2024 : add status filter
        $where = " c.status != 'D' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_campaign as c
		LEFT JOIN table_retailer_channel_master as ch ON ch.channel_id = c.channel_id
		LEFT JOIN table_campaign_objective as cobj ON cobj.campaign_obj_id = c.campaign_obj_id
		LEFT JOIN table_brand_objective as bobj ON bobj.brand_obj_id = c.brand_obj_id
		', "c.*,ch.channel_name,cobj.campaign_obj_name,bobj.brand_obj_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_campaign as c
		LEFT JOIN table_retailer_channel_master as ch ON ch.channel_id = c.channel_id
		LEFT JOIN table_campaign_objective as cobj ON cobj.campaign_obj_id = c.campaign_obj_id
		LEFT JOIN table_brand_objective as bobj ON bobj.brand_obj_id = c.brand_obj_id
		', 'count(c.campaign_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"campaign.php?stid=' . $auRec[$i]->campaign_id . '&value=' . $status . '\">' . $status . '</a>';
            $grpLinkStr = 'View/Edit';
            $group = '<a href=\"campaign.php?pid=' . $auRec[$i]->campaign_id . '&value=ve\" target=\"_blank\">' . $grpLinkStr . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->campaign_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->campaign_desc) . '"';
            $json .= ',"' . addslashes($auRec[$i]->channel_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->campaign_obj_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_obj_name) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_type)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->party_type)) . '"';
            $json .= ',"' . addslashes(date('d M Y', strtotime($auRec[$i]->start_date))) . '"';
            $json .= ',"' . addslashes(date('d M Y', strtotime($auRec[$i]->end_date))) . '"';
            $json .= ',"' . $group . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addCampaign()
    {
        $data['account_id'] = $_SESSION['accountId'];
        $data['campaign_desc'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['dis_desc'])));
        $data['party_type'] = mysql_escape_string($_POST['party_type']);
        $data['item_type'] = mysql_escape_string($_POST['item_type']);
        $data['channel_id'] = mysql_escape_string($_POST['channel_id']);
        $data['campaign_obj_id'] = mysql_escape_string($_POST['campaign_obj_id']);
        $data['brand_obj_id'] = mysql_escape_string($_POST['brand_obj_id']);
//		$data['campaign_type'] = mysql_escape_string($_POST['campaign_type']);
        $data['start_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = mysql_escape_string('A');
        $camp_id = $this->_dbInsert($data, 'table_campaign');
        //now save the classification data
        if (is_array($_POST['classification']) && (count($_POST['classification']) > 0)) {
            foreach ($_POST['classification'] as $key => $classId) {
                $dataCampClass = [];
                $dataCampClass['campaign_id'] = $camp_id;
                $dataCampClass['relationship_id'] = $classId;
                $this->_dbInsert($dataCampClass, 'table_campaign_classification');
            }
        }
        //now save the 'campaign on' data
        if (is_array($_POST['camp_on_opt']) && (count($_POST['camp_on_opt']) > 0)) {
            foreach ($_POST['camp_on_opt'] as $key => $campOnId) {
                $dataCampOn = [];
                $dataCampOn['campaign_id'] = $camp_id;
//				$dataCampOn['campaign_on_id'] = $campOnId;
                if ($_POST['item_type'] == 'category') {
                    $dataCampOn['category_id'] = $campOnId;
                }
                if ($_POST['item_type'] == 'product') {
                    $dataCampOn['product_id'] = $campOnId;
                }
                if ($_POST['item_type'] == 'brand') {
                    $dataCampOn['brand_id'] = $campOnId;
                }
                $this->_dbInsert($dataCampOn, 'table_campaign_item');
            }
        }
        //now save the 'campaign for' data
        if (($_POST['party_type'] == 'region') || ($_POST['party_type'] == 'state')) {
            if (is_array($_POST['camp_for_opt']) && (count($_POST['camp_for_opt']) > 0)) {
                foreach ($_POST['camp_for_opt'] as $key => $campForId) {
                    $dataCampFor = [];
                    $dataCampFor['campaign_id'] = $camp_id;
                    if ($_POST['party_type'] == 'state') {
                        $dataCampFor['state_id'] = $campForId;
                    }
                    $this->_dbInsert($dataCampFor, 'table_campaign_party');
                }
            }
        }
        //if party type = customer then we will import the customer sheet
        if ($_POST['party_type'] == 'customer') {
            ob_clean();
            if (isset($_FILES['campForCustFile']['tmp_name']) && !empty($_FILES['campForCustFile']['tmp_name'])) {
                $_objItem = new Item();
                $resp = $_objItem->uploadCampaignCustomerFile($camp_id);
                $errMsg = 'Please Note : Your campaign has been added. You don\'t need to add it again. Just resolve the customer sheet bugs & try uploading again by editing the same campaign from the list.';
                if ($resp == 'no') {
                    $_SESSION['customerFileError'] = "Empty file \n\n\n $errMsg";
                }
                if (!empty($resp)) {
                    $_SESSION['customerFileError'] = $resp . "\n\n\n" . $errMsg;
                }
            }
        }
        return $camp_id;
    }

    function updateCampaign($camp_id)
    {
        $data['account_id'] = $_SESSION['accountId'];
        $data['campaign_desc'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['dis_desc'])));
        $data['party_type'] = mysql_escape_string($_POST['party_type']);
        $data['item_type'] = mysql_escape_string($_POST['item_type']);
        $data['channel_id'] = mysql_escape_string($_POST['channel_id']);
        $data['campaign_obj_id'] = mysql_escape_string($_POST['campaign_obj_id']);
        $data['brand_obj_id'] = mysql_escape_string($_POST['brand_obj_id']);
        $data['start_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data['end_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = mysql_escape_string('A');
        $this->_dbUpdate2($data, 'table_campaign', " campaign_id = $camp_id");
        //now save the classification data
        if (is_array($_POST['classification']) && (count($_POST['classification']) > 0)) {
            $condition = " WHERE campaign_id = " . $camp_id;
            $this->mysql_query('DELETE FROM table_campaign_classification ' . $condition);
            foreach ($_POST['classification'] as $key => $classId) {
                $dataCampClass = [];
                $dataCampClass['campaign_id'] = $camp_id;
                $dataCampClass['relationship_id'] = $classId;
                $this->_dbInsert($dataCampClass, 'table_campaign_classification');
            }
        }
        //now save the 'campaign on' data
        if (is_array($_POST['camp_on_opt']) && (count($_POST['camp_on_opt']) > 0)) {
            $condition = " WHERE campaign_id = " . $camp_id;
            $this->mysql_query('DELETE FROM table_campaign_item ' . $condition);
            foreach ($_POST['camp_on_opt'] as $key => $campOnId) {
                $dataCampOn = [];
                $dataCampOn['campaign_id'] = $camp_id;
//				$dataCampOn['campaign_on_id'] = $campOnId;
                if ($_POST['item_type'] == 'category') {
                    $dataCampOn['category_id'] = $campOnId;
                }
                if ($_POST['item_type'] == 'product') {
                    $dataCampOn['product_id'] = $campOnId;
                }
                if ($_POST['item_type'] == 'brand') {
                    $dataCampOn['brand_id'] = $campOnId;
                }
                $this->_dbInsert($dataCampOn, 'table_campaign_item');
            }
        }
        //now save the 'campaign for' data
        if (($_POST['party_type'] == 'region') || ($_POST['party_type'] == 'state')) {
            if (is_array($_POST['camp_for_opt']) && (count($_POST['camp_for_opt']) > 0)) {
                $condition = " WHERE campaign_id = " . $camp_id;
                $this->mysql_query('DELETE FROM table_campaign_party ' . $condition);
                foreach ($_POST['camp_for_opt'] as $key => $campForId) {
                    $dataCampFor = [];
                    $dataCampFor['campaign_id'] = $camp_id;
                    if ($_POST['party_type'] == 'state') {
                        $dataCampFor['state_id'] = $campForId;
                    }
                    $this->_dbInsert($dataCampFor, 'table_campaign_party');
                }
            }
        }
        //if item type = customer then we will import the customer sheet
        if ($_POST['party_type'] == 'customer') {
            ob_clean();
            if (isset($_FILES['campForCustFile']['tmp_name']) && !empty($_FILES['campForCustFile']['tmp_name'])) {
                $_objItem = new Item();
                $resp = $_objItem->uploadCampaignCustomerFile($camp_id);
                $errMsg = 'Please Note : Your campaign has been updated. You don\'t need to add it again. Just resolve the customer sheet bugs & try uploading again by editing the same campaign from the list.';
                if ($resp == 'no') {
                    $_SESSION['customerFileError'] = "Empty file \n\n\n $errMsg";
                }
                if (!empty($resp)) {
                    $_SESSION['customerFileError'] = $resp . "\n\n\n" . $errMsg;
                }
            }
        }
        return $camp_id;
    }

    function showCampaignGroup()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'camp_grp_id';
        if (!$sortorder)
            $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //$_objAdmin = new Admin();
        $where = " cg.campaign_id ='" . $_SESSION['campaign_id'] . "' AND c.account_id = '" . $_SESSION['accountId'] . "'";
        if ($query)
            $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_campaign_group as cg
            left join table_campaign as c on c.campaign_id = cg.campaign_id
            left join table_element_group as eg on eg.group_id = cg.group_id', "cg.*, eg.group_name, c.campaign_desc", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_campaign_group as cg
        left join table_campaign as c on c.campaign_id = cg.campaign_id
        left join table_element_group as eg on eg.group_id = cg.group_id', 'count(cg.camp_grp_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            // $norms_for=($auRec[$i]->norms_for=='A')?"Availability":"MIR";
            $groupElement = '<a target=\"_blank\" href=\"campaign_group.php?pid=' . $auRec[$i]->camp_grp_id . '&value=ve\">' . "View / Edit" . '</a>';
            if ($rc)
                $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->camp_grp_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->campaign_desc)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->group_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->group_weightage)) . '"';
            // $json .= ',"'.ucwords(addslashes($auRec[$i]->segment_name)). '"';
            // $json .= ',"'.ucwords(addslashes($auRec[$i]->relationship_code)). '"';
            $json .= ',"' . $groupElement . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addCampaignGroup()
    {
        if (is_array($_POST['campGroupFormData']) && (count($_POST['campGroupFormData']))) {
            $weightageSum = 0;
            foreach ($_POST['campGroupFormData'] as $key => $cData) {
                $weightageSum += intval($cData['group_weightage']);
            }
            if ($weightageSum == 100) {
                foreach ($_POST['campGroupFormData'] as $key => $cmpData) {
                    //insert here
                    $data = [];
                    $data['campaign_id'] = mysql_escape_string($_POST['campaign_id']);
                    $data['group_id'] = mysql_escape_string($cmpData['group_id']);
                    $data['group_weightage'] = mysql_escape_string($cmpData['group_weightage']);
                    $data['status'] = 'A';
                    $data['last_update_date'] = date('Y-m-d');
                    $data['last_update_status'] = 'New';
                    $this->_dbInsert($data, 'table_campaign_group');
                }
            }
        }
        return $_POST['campaign_id'];
    }

    function showCampaignElement()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'ce.element_id';
        if (!$sortorder)
            $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //$_objAdmin = new Admin();
        $where = " ce.camp_grp_id ='" . $_SESSION['campaign_group_id'] . "' AND c.account_id = '" . $_SESSION['accountId'] . "' ";
        if ($query)
            $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_campaign_element as ce
        left join table_campaign_group cg on cg.camp_grp_id = ce.camp_grp_id
        left join table_campaign as c on c.campaign_id = cg.campaign_id
        left join table_element_group as eg on eg.group_id = cg.group_id
        left join  table_element as e on e.element_id = ce.element_id
        ', "ce.*, cg.group_weightage, eg.group_name, c.campaign_desc, e.element_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_campaign_element as ce
        left join table_campaign_group cg on cg.camp_grp_id = ce.camp_grp_id
        left join table_campaign as c on c.campaign_id = cg.campaign_id
        left join table_element_group as eg on eg.group_id = cg.group_id
        left join  table_element as e on e.element_id = ce.element_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
//			$status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
//			$status = "<a href=\"campaign_element.php?stid=" . $auRec[$i]->id . "&value=" . $status . "\">" . $status . "</a>";
            $groupElement = "";
            if ($auRec[$i]->image_url != "") {
                $groupElement = '<a href=\"photo/' . $auRec[$i]->image_url . '\" target=\"_blank\">View Photo</a>';
            }
            if ($rc)
                $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->campaign_desc)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->group_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->group_weightage)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->element_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->element_weightage)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->percentage_0)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->percentage_50)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->percentage_100)) . '"';
            $json .= ',"' . $groupElement . '"]';
            // $json .= ',"'.ucwords(addslashes($auRec[$i]->segment_name)). '"';
            // $json .= ',"'.ucwords(addslashes($auRec[$i]->relationship_code)). '"';
//			$json .= ',"' . $status . "']";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addCampaignElement()
    {
        if (is_array($_FILES['campGroupElementFormData']['name']) && (count($_FILES['campGroupElementFormData']['name']) > 0)) {
            $postData = $_POST['campGroupElementFormData'];
            $filesArr = [];
            foreach ($postData as $key => $elemntData) {
                $element_id = $elemntData['element_id'];
                $filesArr[$element_id]['name'] = $_FILES['campGroupElementFormData']['name'][$element_id]['success_photo'];
                $filesArr[$element_id]['type'] = $_FILES['campGroupElementFormData']['type'][$element_id]['success_photo'];
                $filesArr[$element_id]['tmp_name'] = $_FILES['campGroupElementFormData']['tmp_name'][$element_id]['success_photo'];
                $filesArr[$element_id]['error'] = $_FILES['campGroupElementFormData']['error'][$element_id]['success_photo'];
                $filesArr[$element_id]['size'] = $_FILES['campGroupElementFormData']['size'][$element_id]['success_photo'];
            }
        }
        if (is_array($_POST['campGroupElementFormData']) && (count($_POST['campGroupElementFormData']) > 0)) {
            $postData2 = $_POST['campGroupElementFormData'];
            foreach ($postData2 as $key2 => $elementData) {
                $element_id = $elementData['element_id'];
                $data['camp_grp_id'] = mysql_escape_string($_POST['campaign_group_id']);
                $data['element_id'] = mysql_escape_string($element_id);
                $data['element_weightage'] = mysql_escape_string($elementData['element_weightage']);
                $data['percentage_0'] = mysql_escape_string($elementData['percentage_0']);
                $data['percentage_50'] = mysql_escape_string($elementData['percentage_50']);
                $data['percentage_100'] = mysql_escape_string($elementData['percentage_100']);
                $data['last_update_date'] = date('Y-m-d');
                $data['last_update_status'] = 'New';
                if (is_array($filesArr[$element_id]) && (count($filesArr[$element_id]) > 0)) {
                    $data['image_url'] = $this->uploadSuccessImage($filesArr[$element_id]);
                } else {
                    $data['image_url'] = '';
                }
                $data['status'] = 'A';
                $this->_dbInsert($data, 'table_campaign_element');
            }
        }
        return $_POST['campaign_group_id'];
    }

    function uploadSuccessImage($fileArr)
    {
        if ($fileArr['name'] != '') {
            $name = uniqid() . ".jpg";
            $upload_dir = 'photo/';
            $temp_file = $fileArr['tmp_name'];
            $target_file = $upload_dir . '/' . basename($name);
            if (!is_dir($upload_dir) && mkdir($upload_dir, 0777, true)) {
                chmod($upload_dir, 0777);
            }
            if ($this->compressImage($temp_file, $target_file)) {
                return $name;
            }
        }
    }

    function showCampaignList($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_campaign desc';
        if (!$sortname)
            $sortname = 'date_of_campaign';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        // if (!$sortname) $sortname = ', m.date_of_campaign';
        // if (!$sortorder) $sortorder = 'desc';
        // $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $condi = '';
        if ($_SESSION['state'] > 0) {
            $condi .= " AND r.state ='" . $_SESSION['state'] . "'";
        }
//		if ($_SESSION['zone'] > 0) {
//			$condi .= " AND r.zone_id ='" . $_SESSION['zone'] . "'";
//		}
//		if ($_SESSION['region'] > 0) {
//			$condi .= " AND r.region_id ='" . $_SESSION['region'] . "'";
//		}
//		if ($_SESSION['RetailerID'] > 0) {
//			$condi .= " AND m.retailer_id ='" . $_SESSION['RetailerID'] . "'";
//		}
        if ($_SESSION['salID'] > 0) {
            $condi .= " AND m.salesman_id ='" . $_SESSION['salID'] . "'";
        }
        if ($_SESSION['is_audited'] > 0) {
            if ($_SESSION['is_audited'] == 1) {
                $condi .= " AND m.user_type !=''";
            } else {
                $condi .= " AND m.user_type =''";
            }
        }
        if (isset($_SESSION['fromDate']) && $_SESSION['fromDate'] != "") {
            $fromDate = date('Y-m-d', strtotime($_SESSION['fromDate']));
        } else {
            $fromDate = date('Y-m-d');
        }
        if (isset($_SESSION['toDate']) && $_SESSION['toDate'] != "") {
            $toDate = date('Y-m-d', strtotime($_SESSION['toDate']));
        } else {
            $toDate = date('Y-m-d');
        }
        $where = "  m.date_of_campaign BETWEEN '" . $fromDate . "' AND '" . $toDate . "' $salesman $condi";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_visibility_campaign as m
            left join table_retailer as r on r.retailer_id = m.retailer_id
            left join table_salesman as s on s.salesman_id = m.salesman_id
            left join table_campaign as c on c.campaign_id = m.campaign_id
            left join state as st on st.state_id=r.state
            ', "m.*, r.retailer_name, r.retailer_code, s.salesman_name, campaign_desc, st.state_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_visibility_campaign as m
            left join table_retailer as r on r.retailer_id = m.retailer_id
            left join table_salesman as s on s.salesman_id = m.salesman_id
            left join table_campaign as c on c.campaign_id = m.campaign_id
            left join state as st on st.state_id=r.state
            ', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $scoreCheck = $this->_getSelectList2('table_visibility_campaign_score', '*', '', " visibility_id='" . $auRec[$i]->visibility_id . "' ");
            $color = '';
            if (is_array($scoreCheck) && count($scoreCheck) > 0) {
                $color = "A";
            }
// new code
            $campDets = $this->_getSelectList2('table_visibility_campaign_detail as vcd', 'count(vcd.visibility_detail_id) as acc_count', '', " vcd.visibility_id=" . $auRec[$i]->visibility_id . " GROUP BY vcd.visibility_id");
            $actual_count = (isset($campDets[0]->acc_count) && ($campDets[0]->acc_count > 0)) ? $campDets[0]->acc_count : 0;
            $db_count = ($auRec[$i]->photocount > 0) ? $auRec[$i]->photocount : (isset($campDets[0]->acc_count) && ($campDets[0]->acc_count > 0)) ? $campDets[0]->acc_count : 0;
// new code stop
            $audit_by = '';
            if ($auRec[$i]->user_type == 1) {
                $audit_by = $auRec[$i]->audit_by;
            } elseif ($auRec[$i]->user_type == 6) {
                $audit_by = $auRec[$i]->audit_by . '(Auditor)';
            } else {
                if ($auRec[$i]->user_type == 5) {
                    $audit_by = $auRec[$i]->audit_by . $AliaseUsers['salesman'];
                } elseif ($auRec[$i]->user_type == 6) {
                    $audit_by = '';
                }
            }
            $audit_date = '';
            if ($auRec[$i]->audit_date != '0000-00-00 00:00:00') {
                $audit_date = $this->_changeDate($auRec[$i]->audit_date);
            }
//			$campaign_type = ($auRec[$i]->campaign_type == 'S' ? 'Swag' : "Campaign");
            if ($rc)
                $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->visibility_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . addslashes($this->_changeDate($auRec[$i]->date_of_campaign)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->time_of_campaign) . '"';
//			$json .= ',"' . addslashes($campaign_type) . '"';
            $json .= ',"' . addslashes($auRec[$i]->campaign_desc) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
//			$json .= ',"' . addslashes($auRec[$i]->zone_name) . '"';
//			$json .= ',"' . addslashes($auRec[$i]->region_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($db_count) . '"';
            $json .= ',"' . addslashes($actual_count) . '"';
            $json .= ',"' . addslashes($audit_by) . '"';
            $json .= ',"' . addslashes($audit_date) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End: Sagar : 11th Oct 2021 : Campaign Module Changes
    //Todo Start: Sagar : 21st Oct 2021 : Zone Master
    function showZone()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'zone_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_zone', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_zone', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"zone.php?stid=' . $auRec[$i]->zone_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->last_update_date));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->zone_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->zone_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zone_code) . '"';
            $json .= ',"' . addslashes($lastUpdate) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addZone()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['zone_name'] = mysql_escape_string(trim($_POST['zone_name']));
        $data['zone_code'] = mysql_escape_string(trim($_POST['zone_code']));
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_zone');
        return $id;
    }

    function updateZone($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['zone_name'] = mysql_escape_string(trim($_POST['zone_name']));
        $data['zone_code'] = mysql_escape_string(trim($_POST['zone_code']));
        $data['last_update_date'] = date('Y-m-d H:i:s');
        //$data['status'] = 'A';
        $this->_dbUpdate($data, 'table_zone', " zone_id=" . $id);
        return $id;
    }
    //Todo End: Sagar : 21st Oct 2021 : Zone Master
    //Todo Start: Ankit : 28st Oct 2021 : Product Type Master
    function showProductType()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'product_type_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasProductType']) && $_SESSION['MasProductType'] != 'all' && $_SESSION['MasProductType'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasProductType'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_product_type_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_product_type_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"product_type.php?stid=' . $auRec[$i]->product_type_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->last_update_date));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->product_type_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->product_type_name) . '"';
            $json .= ',"' . addslashes($lastUpdate) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addProductType()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['product_type_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['product_type_name'])));
        $data['created_date'] = date('Y-m-d H:i:s');
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_product_type_master');
        return $id;
    }

    function updateProductType($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['product_type_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['product_type_name'])));
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_product_type_master', " product_type_id=" . $id);
        return $id;
    }
    //Todo End: Ankit : 28st Oct 2021 : Product Type Master
    //Todo Start: Ankit : 28st Oct 2021 : Specification Type Master
    function showSpecificationType()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'specification_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasSpciType']) && $_SESSION['MasSpciType'] != 'all' && $_SESSION['MasSpciType'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasSpciType'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_specification_type', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_specification_type', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"specification_type.php?stid=' . $auRec[$i]->specification_type_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->last_update_date));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->specification_type_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->specification_name) . '"';
            $json .= ',"' . addslashes($lastUpdate) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addSpecificationType()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['specification_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['specification_name'])));
        $data['created_date'] = date('Y-m-d H:i:s');
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_specification_type');
        return $id;
    }

    function updateSpecificationType($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['specification_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['specification_name'])));
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_specification_type', " specification_type_id=" . $id);
        return $id;
    }
    //Todo End: Ankit : 28st Oct 2021 : Specification Type Master
    //Todo Start: Ankit : 28st Oct 2021 : Boq Status
    function showBoqStatus()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'boq_status_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_boq_status', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_boq_status', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"boq_status.php?stid=' . $auRec[$i]->boq_status_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->last_update_date));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->boq_status_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->boq_status_name) . '"';
            $json .= ',"' . addslashes($lastUpdate) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addBoqStatus()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['boq_status_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['boq_status_name'])));
        $data['created_date'] = date('Y-m-d H:i:s');
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_boq_status');
        return $id;
    }

    function updateBoqStatus($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['boq_status_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['boq_status_name'])));
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_boq_status', " boq_status_id=" . $id);
        return $id;
    }
    //Todo End: Ankit : 28st Oct 2021 : Boq Status
//Todo Start: Ankit : 28st Oct 2021 : Must Sell Reason Master
    function showMustSellReason()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasMust']) && $_SESSION['MasMust'] != 'all' && $_SESSION['MasMust'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasMust'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_must_sell_reason_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_must_sell_reason_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"must_sell_reason.php?stid=' . $auRec[$i]->reason_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->created_at));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->reason_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->reason) . '"';
            $json .= ',"' . addslashes($lastUpdate) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addMustSellReason()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['reason'] = mysql_escape_string(trim($_POST['reason']));
        $data['created_at'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_must_sell_reason_master');
        return $id;
    }

    function updateMustSellReason($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['reason'] = mysql_escape_string(trim($_POST['reason']));
        $data['created_at'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_must_sell_reason_master', " reason_id=" . $id);
        return $id;
    }
//Todo End: Ankit : 28st Oct 2021 : Must Sell Reason Master
//Todo Start: Ankit : 29st Oct 2021 : Delete Reason Master
    function showDeleteRetailerReason()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 10 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasDel']) && $_SESSION['MasDel'] != 'all' && $_SESSION['MasDel'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasDel'] . "'";
        }
        //Todo End : sudhanshu 10 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_delete_customer_reason_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_delete_customer_reason_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 1) ? "Active" : "Inactive";
            $status = '<a href=\"delete_retailer_reason.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->created_on));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->reason) . '"';
            $json .= ',"' . addslashes($lastUpdate) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addDeleteRetailerReason()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['reason'] = mysql_escape_string(trim($_POST['reason']));
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['status'] = 1;
        $id = $this->_dbInsert($data, 'table_delete_customer_reason_master');
        return $id;
    }

    function updateDeleteRetailerReason($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['reason'] = mysql_escape_string(trim($_POST['reason']));
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['status'] = 1;
        $this->_dbUpdate($data, 'table_delete_customer_reason_master', " id=" . $id);
        return $id;
    }
//Todo End: Ankit : 29st Oct 2021 : Delete Reason Master
//Todo Start: Ankit : 09th Nov 2021 : Route Retailer
    function showRouteRetailer()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.route_name';
        if (!$sortorder) $sortorder = 'ASC';
        //$sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        $condi = "r.status!='D' and r.account_id='" . $_SESSION['accountId'] . "' ORDER BY r.route_name";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_route_retailer as rr
	Left JOIN table_route as r ON r.route_id = rr.route_id
	LEFT JOIN table_retailer as ret ON ret.retailer_id = rr.retailer_id
	LEFT JOIN state as st ON st.state_id = ret.state
	LEFT JOIN city as ct ON ct.city_id = ret.city 
	LEFT JOIN table_location as loc ON loc.location_id = ret.location_id', "rr.route_id,r.route_name,r.status,rr.retailer_id,ret.retailer_name,ret.retailer_code,st.state_name,ct.city_name,loc.location_name", $rp, $condi, '');
        $auRecCount = $this->_getSelectList('table_route_retailer as rr
	Left JOIN table_route as r ON r.route_id = rr.route_id
	LEFT JOIN table_retailer as ret ON ret.retailer_id = rr.retailer_id
	LEFT JOIN state as st ON st.state_id = ret.state
	LEFT JOIN city as ct ON ct.city_id = ret.city 
	LEFT JOIN table_location as loc ON loc.location_id = ret.location_id', 'count(*) as total', '', $condi);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) { //print_r($auRec[$i]);die;
            //$status=($auRec[$i]->status==1)?"Active":"Inactive";
            //$status="<a href=\"route_retailers.php?stid=".$auRec[$i]->id."&value=".$status."\">".$status."</a>";
            //$lastUpdate = date('d M Y',strtotime($auRec[$i]->created_on));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->route_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->route_id) . '"';
            $json .= ',"' . addslashes($auRec[$i]->route_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . $auRec[$i]->location_name . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
//Todo End: Ankit : 09th Nov 2021 : Route Retailer
//Todo Start: Ankit : 10th Nov 2021 : Brand Objective Master
    function showBrandObjective()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'brand_obj_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 17 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasBrandObj']) && $_SESSION['MasBrandObj'] != 'all' && $_SESSION['MasBrandObj'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasBrandObj'] . "'";
        }
        //Todo End : sudhanshu 17 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_brand_objective', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_brand_objective', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == "A") ? "Active" : "Inactive";
            $status = '<a href=\"brand_objective.php?stid=' . $auRec[$i]->brand_obj_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->create_date));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->brand_obj_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->brand_obj_name) . '"';
            //$json .= ',"'.addslashes($lastUpdate). '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addBrandObjective()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['brand_obj_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9." "]/', trim($_POST['brand_obj_name'])));
        $data['create_date'] = date('Y-m-d H:i:s');
        $data['status'] = "A";
        $id = $this->_dbInsert($data, 'table_brand_objective');
        return $id;
    }

    function updateBrandObjective($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['brand_obj_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9." "]/', trim($_POST['brand_obj_name'])));
        $data['create_date'] = date('Y-m-d H:i:s');
        $data['status'] = "A";
        $this->_dbUpdate($data, 'table_brand_objective', " brand_obj_id=" . $id);
        return $id;
    }
//Todo End: Ankit : 10th Nov 2021 : Brand Objective Master
//Todo Start: Ankit : 10th Nov 2021 : Campaign Objective Master
    function showCampaignObjective()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'campaign_obj_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 17 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasCampaignObj']) && $_SESSION['MasCampaignObj'] != 'all' && $_SESSION['MasCampaignObj'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasCampaignObj'] . "'";
        }
        //Todo End : sudhanshu 17 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_campaign_objective', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_campaign_objective', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == "A") ? "Active" : "Inactive";
            $status = '<a href=\"campaign_objective.php?stid=' . $auRec[$i]->campaign_obj_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->create_date));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->campaign_obj_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->campaign_obj_name) . '"';
            //$json .= ',"'.addslashes($lastUpdate). '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addCampaignObjective()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['campaign_obj_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['campaign_obj_name'])));
        $data['create_date'] = date('Y-m-d H:i:s');
        $data['status'] = "A";
        $id = $this->_dbInsert($data, 'table_campaign_objective');
        return $id;
    }

    function updateCampaignObjective($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['campaign_obj_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['campaign_obj_name'])));
        $data['create_date'] = date('Y-m-d H:i:s');
        $data['status'] = "A";
        $this->_dbUpdate($data, 'table_campaign_objective', " campaign_obj_id=" . $id);
        return $id;
    }
//Todo End: Ankit : 10th Nov 2021 : Campaign Objective Master
//Todo Start: Ankit : 11th Nov 2021 : Element Group Master
    function showElementGroup()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'group_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 17 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasEleGrp']) && $_SESSION['MasEleGrp'] != 'all' && $_SESSION['MasEleGrp'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasEleGrp'] . "'";
        }
        //Todo End : sudhanshu 17 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_element_group', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_element_group', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == "A") ? "Active" : "Inactive";
            $status = '<a href=\"element_group.php?stid=' . $auRec[$i]->group_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->last_update_date));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->group_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->group_name) . '"';
            //$json .= ',"'.addslashes($lastUpdate). '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addElementGroup()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['group_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9,." "]/', trim($_POST['group_name'])));
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = "New";
        $data['status'] = "A";
        $id = $this->_dbInsert($data, 'table_element_group');
        return $id;
    }

    function updateElementGroup($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['group_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9,." "]/', trim($_POST['group_name'])));
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = "Update";
        $data['status'] = "A";
        $this->_dbUpdate($data, 'table_element_group', " group_id=" . $id);
        return $id;
    }
//Todo End: Ankit : 11th Nov 2021 : Element Group Master
//Todo Start: Ankit : 11th Nov 2021 : Element Master
    function showElement()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'element_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 17 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasEle']) && $_SESSION['MasEle'] != 'all' && $_SESSION['MasEle'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasEle'] . "'";
        }
        //Todo End : sudhanshu 17 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_element', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_element', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == "A") ? "Active" : "Inactive";
            $status = '<a href=\"element.php?stid=' . $auRec[$i]->element_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->last_update_date));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->element_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->element_name) . '"';
            //$json .= ',"'.addslashes($lastUpdate). '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addElement()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['element_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9.," "]/', trim($_POST['element_name'])));
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = "New";
        $data['status'] = "A";
        $id = $this->_dbInsert($data, 'table_element');
        return $id;
    }

    function updateElement($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['element_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9.," "]/', trim($_POST['element_name'])));
        $data['last_update_date'] = date('Y-m-d H:i:s');
        $data['last_update_status'] = "Update";
        $data['status'] = "A";
        $this->_dbUpdate($data, 'table_element', " element_id=" . $id);
        return $id;
    }
//Todo End: Ankit : 10th Nov 2021 : Element Master
//Todo Start: Ankit : 19th Nov 2021 : Gift Benefit Master
    function showGiftBenefit()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'description';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_scheme_gift_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_scheme_gift_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == "A") ? "Active" : "Inactive";
            $status = '<a href=\"gift_benefit_master.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->created_on));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->description) . '"';
            //$json .= ',"'.addslashes($lastUpdate). '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addGiftBenefit()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['description'] = mysql_escape_string($_POST['description']);
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['status'] = "A";
        $id = $this->_dbInsert($data, 'table_scheme_gift_master');
        return $id;
    }

    function updateGiftBenefit($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['description'] = mysql_escape_string($_POST['description']);
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['status'] = "A";
        $this->_dbUpdate($data, 'table_scheme_gift_master', " id=" . $id);
        return $id;
    }
//Todo End: Ankit : 19th Nov 2021 : Gift Benefit Master
    //Todo Start: Sagar: 8th Dec 2021 : Show Route Requests
    function showRouteRequests_to_be_continue($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 's.salesman_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " GROUP BY ars.salesman_id,req_year,req_month ORDER BY $sortname $sortorder , req_month DESC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//        $limit = "LIMIT $start, $rp";
//        if($_REQUEST['qtype']=="from_date" || $_REQUEST['qtype']=="to_date"){$query = date('Y-m-d', strtotime(mysql_escape_string($_REQUEST['query'])));}else{$query = $_REQUEST['query'];}
        //$query = $_REQUEST['query'];
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " $salesman ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_app_route_schedule as ars
LEFT JOIN table_salesman as s ON s.salesman_id = ars.salesman_id 
LEFT JOIN table_location as loc ON loc.location_id = ars.location', "ars.salesman_id,s.salesman_name,MONTH(ars.app_route_visit_date) as req_month,YEAR(ars.app_route_visit_date) as req_year", $rp, $where . $sort);
        $auRecCount = $this->_getSelectList('table_app_route_schedule as ars
LEFT JOIN table_salesman as s ON s.salesman_id = ars.salesman_id 
LEFT JOIN table_location as loc ON loc.location_id = ars.location', 'ars.salesman_id', '', $where . $sort);
        $monthsArr = array(1 => 'January', 2 => 'February', 3 => 'March', 4 => 'April', 5 => 'May', 6 => 'June', 7 => 'July', 8 => 'August', 9 => 'September', 10 => 'October', 11 => 'November', 12 => 'December');
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $month = $monthsArr[$auRec[$i]->req_month];
            $year = $auRec[$i]->req_year;
//            $status=($auRec[$i]->status=='A')?"Active":"Inactive";
//            $status="<a href=\"customer_wise_route.php?statusId=".$auRec[$i]->route_schedule_id."&value=".$status."\">".$status."</a>";
            $viewDetailLink = "<a target='_blank' href=\"view_customer_wise_route.php?id=" . $auRec[$i]->route_schedule_id . "\">View Details</a>";
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= "id:'" . $auRec[$i]->salesman_id . "'-'" . $auRec[$i]->req_month . "'-'" . $auRec[$i]->req_year . "',";
            $json .= "cell:['" . addslashes($auRec[$i]->salesman_name) . "'";
//            $json .= ",'".addslashes($auRec[$i]->retailer_name)."'";
//            $json .= ",'".addslashes($auRec[$i]->retailer_code)."'";
            $json .= ",'" . addslashes($month) . "'";
            $json .= ",'" . addslashes($year) . "']";
//            $json .= ",'".addslashes($viewDetailLink)."'";
//            $json .= ",'".$status."']";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo $json;
        exit;
    }

    function showRouteRequests($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 's.salesman_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " GROUP BY sra.salesman_id,sra.request_month,sra.request_year ORDER BY $sortname $sortorder ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " sra.request_status = 'Pending' AND sra.requested_date >= '" . date('Y-m-d') . "' $salesman ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_salesman_route_requests as sra
LEFT JOIN table_salesman as s ON s.salesman_id = sra.salesman_id', "sra.*,s.salesman_name,s.employee_code,COUNT(sra.request_id) as ttl_req", $rp, $where . $sort);
        $auRecCount = $this->_getSelectList('table_salesman_route_requests as sra
LEFT JOIN table_salesman as s ON s.salesman_id = sra.salesman_id', 'sra.salesman_id', '', $where . $sort);
        $monthsArr = array(1 => 'January', 2 => 'February', 3 => 'March', 4 => 'April', 5 => 'May', 6 => 'June', 7 => 'July', 8 => 'August', 9 => 'September', 10 => 'October', 11 => 'November', 12 => 'December');
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $month = $monthsArr[$auRec[$i]->request_month];
            $year = $auRec[$i]->request_year;
            $viewDetailLink = '<a href=\"approve_route_requests.php?sid=' . $auRec[$i]->salesman_id . '&month=' . $auRec[$i]->request_month . '&year=' . $auRec[$i]->request_year . '\" target=\"_blank\">View Details</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->salesman_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($month) . '"';
            $json .= ',"' . addslashes($year) . '"';
            $json .= ',"' . $auRec[$i]->ttl_req . '"';
            $json .= ',"' . $viewDetailLink . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End: Sagar: 8th Dec 2021 : Show Route Requests
//Todo Start: Ankit : 22nd Dec 2021 : Distributor Change Reason Master
    function showDistributorChangeReason()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasDisChange']) && $_SESSION['MasDisChange'] != 'all' && $_SESSION['MasDisChange'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasDisChange'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_change_reason_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributor_change_reason_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 1) ? "Active" : "Inactive";
            $status = '<a href=\"distributor_change_reason.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->created_on));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->reason) . '"';
            //$json .= ',"'.addslashes($lastUpdate). '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addDistributorChangeReason()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['reason'] = mysql_escape_string(trim($_POST['reason']));
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['status'] = 1;
        $id = $this->_dbInsert($data, 'table_distributor_change_reason_master');
        return $id;
    }

    function updateDistributorChangeReason($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['reason'] = mysql_escape_string(trim($_POST['reason']));
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['status'] = 1;
        $this->_dbUpdate($data, 'table_distributor_change_reason_master', " id=" . $id);
        return $id;
    }
//Todo End: Ankit : 22nd Dec 2021 : Distributor Change Reason Master
// show salesman stock load in and load out report
    function showStockLoadInOut()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = "DATE_FORMAT(sta.created_datetime, '%Y-%m-%d'),sta.time_of_app ASC";
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Added condition for role based access at brand lavel.
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if (isset($_SESSION['salesman_id']) && isset($_SESSION['FromAttList']) && isset($_SESSION['ToAttList'])) {
            $where = " sta.salesman_id=" . $_SESSION['salesman_id'] . " and sta.date_of_app >='" . date('Y-m-d', strtotime($_SESSION['FromAttList'])) . "' and sta.date_of_app <='" . date('Y-m-d', strtotime($_SESSION['ToAttList'])) . "' ";
        }
        $auRes = $this->_getSelectList('table_item_salesman_stock_activity as sta
                        left join table_salesman as s on s.salesman_id = sta.salesman_id
                        left join table_item as i on i.item_id = sta.item_id						
                        left join table_category as c on c.category_id = sta.category_id
                        left join table_color as cl on cl.color_id = sta.attribute_value_id
						LEFT JOIN table_item_case_relationship as rel on rel.item_id= sta.item_id
						LEFT JOIN table_cases as tc on tc.case_id = rel.case_id
						', "sta.sal_stk_activity_id, 
						DATE_FORMAT(sta.created_datetime, '%Y-%m-%d') as activity_date,sta.time_of_app, i.item_id, 
						i.item_name, i.item_code, c.category_id, c.category_name,cl.color_code, 
						s.salesman_name, s.employee_code,sta.status,sta.rec_stock_value,tc.case_size",
            '', " $where ORDER BY DATE_FORMAT(sta.created_datetime, '%Y-%m-%d'),sta.time_of_app ASC");
        $auRecCount = $this->_getSelectList('table_item_salesman_stock_activity as sta
                        left join table_salesman as s on s.salesman_id = sta.salesman_id
                        left join table_item as i on i.item_id = sta.item_id						
                        left join table_category as c on c.category_id = sta.category_id
                        left join table_color as cl on cl.color_id = sta.attribute_value_id
						LEFT JOIN table_item_case_relationship as rel on rel.item_id= sta.item_id
						LEFT JOIN table_cases as tc on tc.case_id = rel.case_id',
            "count(*) as total", '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->sal_stk_activity_id . '",';
            $json .= '"cell":["' . $this->_changeDate($auRec[$i]->activity_date) . '"';
            $json .= ',"' . addslashes($auRec[$i]->time_of_app) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->color_code) . '"';
            $json .= ',"' . round(($auRec[$i]->rec_stock_value / $auRec[$i]->case_size), 2) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rec_stock_value) . '"';
            $json .= ',"' . addslashes((($auRec[$i]->status == 'LI') ? 'Load In' : 'Load Out')) . '"]';
            /*$json .= ',"'.$status.'"]';*/
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showStockDeliveryReport()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = "DATE_FORMAT(sta.date_of_order, '%Y-%m-%d'),sta.time_of_order ASC";
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Added condition for role based access at brand lavel.
        if (isset($_SESSION['salesman_id'])) {
            $where = " sta.salesman_id=" . $_SESSION['salesman_id'] . " and ";
        }
        if (isset($_SESSION['FromAttList']) && isset($_SESSION['ToAttList'])) {
            $where .= " sta.date_of_order >='" . date('Y-m-d', strtotime($_SESSION['FromAttList'])) . "' and sta.date_of_order <='" . date('Y-m-d', strtotime($_SESSION['ToAttList'])) . "' ";
        } else {
            $where .= " sta.date_of_order >='" . date('Y-m-d') . "' and sta.date_of_order <='" . date('Y-m-d') . "' ";
        }
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_item_delivery as sta
						left join table_item_delivery_detail as dd on dd.order_id=sta.order_id
                        left join table_salesman as s on s.salesman_id = sta.salesman_id
                        left join table_retailer as r on r.retailer_id = sta.retailer_id
                        left join table_location as loc on loc.location_id=r.location_id
                        left join state as st on st.state_id=r.state 						
                        left join table_distributors as d on d.distributor_id = sta.distributor_id
                        ', "sta.*,SUM(dd.quantity) as total_qty,count(distinct dd.item_id) as total_item,s.salesman_name, s.employee_code,r.retailer_name,r.retailer_code,d.distributor_name,d.distributor_code,st.state_name,loc.location_name",
            '', " $where group by sta.order_id ORDER BY DATE_FORMAT(sta.date_of_order, '%Y-%m-%d'),sta.time_of_order ASC");
        $auRecCount = $this->_getSelectList('table_item_delivery as sta
                        left join table_salesman as s on s.salesman_id = sta.salesman_id
                        left join table_retailer as r on r.retailer_id = sta.retailer_id						
                        left join table_distributors as d on d.distributor_id = sta.distributor_id',
            "count(*) as total", '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $color = '';
            if ($auRec[$i]->updated_by_app > 0) {
                if ($auRec[$i]->total_qty == 0) {
                    $color = 'CNO';
                } else if ($auRec[$i]->total_qty > 0) {
                    $color = 'Y';
                }
            }
//Todo Start : sudhasnhu 19 july 2024 : add LPO column
            $chck = $auRec[$i]->lpo_no . '<input type="hidden"  class="lpo_no"  /> ';

//Todo End : sudhasnhu 19 july 2024 : add LPO column
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . $this->_changeDate($auRec[$i]->date_of_order) . '"';
            $json .= ',"' . addslashes($auRec[$i]->time_of_order) . '"';
            $json .= ',"' . addslashes($auRec[$i]->bill_no) . '"';
            $json .= ',"' . addslashes($chck) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
          
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
        
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->total_item) . '"';
            $json .= ',"' . addslashes($auRec[$i]->total_qty) . '"';
            $json .= ',"' . round($auRec[$i]->ttl_tax_amt, 2) . '"';
            $json .= ',"' . round($auRec[$i]->total_invoice_amount, 2) . '"]';
            /*$json .= ',"'.$status.'"]';*/
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo Start : Sagar : 14th Feb 2022 Salesman & Customer Mapping
    function showCustomerSalesmanMapping($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 's.salesman_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " $salesman ";
        if ($query) $where .= "AND $qtype LIKE '%$query%' ";

// echo $where;die;


        $auRec = $this->_getSelectList('table_customer_salesman_mapping as csm
LEFT JOIN table_salesman as s ON s.salesman_id = csm.salesman_id
LEFT JOIN table_retailer as r ON r.retailer_id = csm.retailer_id', "csm.salesman_id,s.salesman_name,s.employee_code,COUNT(csm.retailer_id) as cust_count", $rp, $where . ' GROUP BY csm.salesman_id ' . $sort);

        $auRecCount = $this->_getSelectList('table_customer_salesman_mapping as csm
LEFT JOIN table_salesman as s ON s.salesman_id = csm.salesman_id LEFT JOIN table_retailer as r ON r.retailer_id = csm.retailer_id', 'csm.salesman_id', '', $where . '  GROUP BY csm.salesman_id ' . $sort);
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $viewLink = '<a href=\"view_sal_cust_mapping.php?id=' . $auRec[$i]->salesman_id . '\">View</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->salesman_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->cust_count) . '"';
            $json .= ',"' . $viewLink . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo End : Sagar : 14th Feb 2022 Salesman & Customer Mapping
    function serialNumberScanReport($salesman)
    {
        //$salesman = "";
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname)
            $sortname = 'scn.appDate';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY scn.appDate desc";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $condition = '';
        if (isset($_SESSION['retailer_id']) && $_SESSION['retailer_id'] != '' && $_SESSION['retailer_id'] != 'all') {
            $condition .= " scn.retailer_id = " . $_SESSION['retailer_id'] . " AND ";
        }
        if (isset($_SESSION['SalOrderList']) && $_SESSION['SalOrderList'] != '') {
            $condition .= " scn.salesman_id = " . $_SESSION['SalOrderList'] . " AND ";
        }
        if (isset($_SESSION['distributor_id']) && $_SESSION['distributor_id'] != '' && $_SESSION['distributor_id'] != 'all') {
            $condition .= " scn.distributor_id = " . $_SESSION['distributor_id'] . " AND ";
        }
        if ($_SESSION['FromProductList'] != '') {
            $fromdate = "  scn.appDate  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
        } else {
            $fromdate = " scn.appDate  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToProductList'] != '') {
            $todate = " scn.appDate <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
        } else {
            $todate = "  scn.appDate <= '" . date('Y-m-d') . "'";
        }
        if (isset($_SESSION['scan_id'])) {
            $condition .= " scn.scan_id= " . $_SESSION['scan_id'] . "  AND ";
        }
        $where = " scn.account_id='" . $_SESSION['accountId'] . "' and $condition $fromdate $todate ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_serial_number_scan as scn			
			LEFT JOIN table_salesman AS s ON s.salesman_id = scn.salesman_id
			LEFT JOIN table_retailer AS R ON R.retailer_id = scn.retailer_id
			LEFT JOIN table_distributors AS Dis ON Dis.distributor_id = scn.distributor_id',
            'scn.*,
			Dis.distributor_name, Dis.distributor_code,s.salesman_name,s.employee_code,
			R.retailer_name, R.retailer_code', $rp, $where . $sort, '');
        $total = $this->_getSelectList2('table_serial_number_scan as scn			
			LEFT JOIN table_salesman AS s ON s.salesman_id = scn.salesman_id
			LEFT JOIN table_retailer AS R ON R.retailer_id = scn.retailer_id
			LEFT JOIN table_distributors AS Dis ON Dis.distributor_id = scn.distributor_id',
            "COUNT(*) AS total", '', $where . $sort, '');
        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $scanBy = '';
            $appDate = $_objAdmin->_changeDate($auRec[$i]->appDate);
            if ($auRec[$i]->scan_by == 'S') {
                $scanBy = $this->AliaseUsers['salesman'];
            } else if ($auRec[$i]->scan_by == 'R') {
                $scanBy = $this->AliaseUsers['retailer'];
            } else if ($auRec[$i]->scan_by == 'D') {
                $scanBy = $this->AliaseUsers['distributor'];
            }
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->scan_id . '",';
            $serial_number_string = preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace(array('\t', '\n', '	', ','), ' ', $auRec[$i]->serial_number_string));
            $comment = preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace(array('\t', '\n', '	', ','), ' ', $auRec[$i]->comment));
            $viewPhoto = "";

            $viewPhoto = '<a href="rotate_img.php?sr_scan_id=' . base64_encode($auRec[$i]->scan_id) . ' " target="blank">View Image</a>';

            $json .= '"cell":["' . (addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($scanBy)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->serial_number)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->status)) . '"';
            $json .= ',"' . ucwords(addslashes($serial_number_string)) . '"';
            $json .= ',"' . ucwords(addslashes($comment)) . '"';
            $json .= ',"' . ucwords(addslashes($appDate)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->appTime)) . '"';
            $json .= ',"' . ucwords(addslashes($viewPhoto)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /******************Customer contact list******************************/
    function showContactList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'customer_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = '';
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_customer AS c
		left join table_retailer as r on r.retailer_id = c.retailer_id
		left join table_designation as d on d.designation_id=c.designation_id
		left join table_salesman as s on s.salesman_id=c.salesman_id',
            "c.*,r.retailer_name,r.retailer_code,d.designation_name,s.salesman_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_customer AS c
		left join table_retailer as r on r.retailer_id = c.retailer_id
		left join table_designation as d on d.designation_id=c.designation_id',
            'count(c.customer_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"customer_contact.php?statusId=' . $auRec[$i]->customer_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->customer_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->customer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->designation_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->customer_phone_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->server_date) . '"';
            $json .= ',"' . addslashes($auRec[$i]->status) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    /******************Customer contact list******************************/
    //Todo Start: Ankit : 11th Apr 2022 : Designation Wise Route Schedule
    function showDesignationWiseRouteScheduleByMonth($salsLists)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'salesman_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasDesiRTSch']) && $_SESSION['MasDesiRTSch'] != 'all' && $_SESSION['MasDesiRTSch'] != '') {
            $statusCondi = " AND r.status ='" . $_SESSION['MasDesiRTSch'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " r.salesman_id IN ($salsLists) AND s.status='A' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_route_scheduled as r left join table_salesman as s on r.salesman_id=s.salesman_id', "r.*,s.salesman_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_route_scheduled as r left join table_salesman as s on r.salesman_id=s.salesman_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        //echo "<pre>"; print_r($auRec);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"designation_wise_route_schedule_by_month.php?statusId=' . $auRec[$i]->route_schedule_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->route_schedule_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes(date('M', strtotime('01-' . $auRec[$i]->month . '-' . $auRec[$i]->year))) . '"';
            $json .= ',"' . addslashes(date('Y', strtotime('01-' . $auRec[$i]->month . '-' . $auRec[$i]->year))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End: Ankit : 11th Apr 2022 : Designation Wise Route Schedule
    //Todo Start: Ankit : 12th Apr 2022 : Retailer Target
    function showRetailerTarget()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'retailer_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        if ($_SESSION['target_month'] != '') {
            $target_month = $_SESSION['target_month'];
        } else {
            $target_month = date('n');
        }
        if ($_SESSION['target_year'] != '') {
            $target_year = $_SESSION['target_year'];
        } else {
            $target_year = date('Y');
        }
        $where = "rt.target_month = '" . $target_month . "' AND rt.target_year ='" . $target_year . "'";
        if ($query) $where .= " AND $qtype  LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer_target as rt left join table_retailer as r on rt.retailer_id=r.retailer_id', "rt.*,r.retailer_name,r.retailer_code", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_retailer_target as rt left join table_retailer as r on rt.retailer_id=r.retailer_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->target_month == 1) {
                $target_month = 'January';
            } elseif ($auRec[$i]->target_month == 2) {
                $target_month = 'February';
            } elseif ($auRec[$i]->target_month == 3) {
                $target_month = 'March';
            } elseif ($auRec[$i]->target_month == 4) {
                $target_month = 'April';
            } elseif ($auRec[$i]->target_month == 5) {
                $target_month = 'May';
            } elseif ($auRec[$i]->target_month == 6) {
                $target_month = 'June';
            } elseif ($auRec[$i]->target_month == 7) {
                $target_month = 'July';
            } elseif ($auRec[$i]->target_month == 8) {
                $target_month = 'August';
            } elseif ($auRec[$i]->target_month == 9) {
                $target_month = 'September';
            } elseif ($auRec[$i]->target_month == 10) {
                $target_month = 'October';
            } elseif ($auRec[$i]->target_month == 11) {
                $target_month = 'November';
            } elseif ($auRec[$i]->target_month == 12) {
                $target_month = 'December';
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->target_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($target_month) . '"';
            $json .= ',"' . addslashes($auRec[$i]->target_year) . '"';
            $json .= ',"' . addslashes($auRec[$i]->target_value) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function updateRetailerTarget($id)
    {
        $data['target_value'] = mysql_escape_string($_POST['target_value']);
        $data['updated_at'] = date('Y-m-d H:i:s');
        $this->_dbUpdate($data, 'table_retailer_target', " target_id=" . $id);
        return $id;
    }
    //Todo End: Ankit : 12th Apr 2022 : Retailer Target
    //Todo Start: Sagar : 4th May 2022 : Item MGB Norms
    function showItemMGBNorms()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'i.item_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//
//        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " and b.brand_id IN(" . $RoleBrands . ")";
        }
        $where = " i.item_type='I' $brandCnd ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_mgb_norms as n 
            LEFT JOIN table_item as i on i.item_id = n.item_id 
            LEFT JOIN state as st on st.state_id = n.state_id
			LEFT JOIN table_location as loc on loc.location_id = n.location_id
			LEFT JOIN table_retailer as tr on tr.retailer_id = n.retailer_id 
			LEFT JOIN table_relationship as r on r.relationship_id = n.relationship_id ', "n.*,i.item_name,i.item_code,tr.retailer_code,tr.retailer_name,st.state_name,loc.location_name,r.relationship_code", $rp, $where . ' ' . $sort, '');
        $auRecCount = $this->_getSelectList('table_mgb_norms as n 
            LEFT JOIN table_item as i on i.item_id = n.item_id 
            LEFT JOIN state as st on st.state_id = n.state_id
			LEFT JOIN table_location as loc on loc.location_id = n.location_id
			LEFT JOIN table_retailer as tr on tr.retailer_id = n.retailer_id 
			LEFT JOIN table_relationship as r on r.relationship_id = n.relationship_id ', 'count(n.norms_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $editDateStr = '<i class=\"fa fa-2x fa-pencil-square\"></i>';
            $editDateLink = '<a href=\"javascript:void(0)\" class=\"edit_date\" data-toggle=\"tooltip\" title=\"Edit\">' . $editDateStr . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->norms_id . '",';
            $json .= '"cell":["' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->norms)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->relationship_code)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->retailer_code)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->retailer_name)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->state_name)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->location_name)))) . '"';
            $json .= ',"' . addslashes(date('d M Y', strtotime($auRec[$i]->start_date))) . '"';
            $json .= ',"' . addslashes(addslashes(date('d M Y', strtotime($auRec[$i]->end_date)))) . '"';
            $json .= ',"' . $editDateLink . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End: Sagar : 4th May 2022 : Item MGB Norms


    //Todo Start: Sagar : 4th May 2022 : Route wise PJP Coverage Report
    function showRouteWiseCoveragePJPAdherenceReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'ret.retailer_name';
        if (!$sortorder)
            $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $condi = '';
        $where = '';
        if ($_SESSION['SalAttList'] > 0) {
            $condi .= " AND s.salesman_id ='" . $_SESSION['SalAttList'] . "'";
        }
        if (isset($_SESSION['dismonth']) && $_SESSION['dismonth'] > 0) {
            $month = $_SESSION['dismonth'];
        } else {
            $month = date('m');
        }
        if (isset($_SESSION['disCyear']) && $_SESSION['disCyear'] > 0) {
            $year = $_SESSION['disCyear'];
        } else {
            $year = date('Y');
        }
        $fromDate = date('Y-m-d', strtotime($year . '-' . $month . '-01'));
        $toDate = date('Y-m-t', strtotime($year . '-' . $month . '-01'));
        $where .= " sd.status='A' and sd.month='" . intval($month) . "' and  sd.year='" . intval($year) . "' and s.status = 'A' $salesman $condi ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $groupBy = " GROUP BY sd.salesman_id,rr.retailer_id ";
        $auRec = $this->_getSelectList('table_route_scheduled as sd 
		left join table_route_schedule_details as rd on sd.route_schedule_id=rd.route_schedule_id  
		left join table_route_retailer AS rr on rr.route_id=rd.route_id
		left join table_retailer AS ret ON ret.retailer_id=rr.retailer_id 
		left join table_relationship as rel on rel.relationship_id=ret.relationship_id
        left join table_retailer_channel_master as cm on cm.channel_id=ret.channel_id
		left join table_salesman as s on s.salesman_id=sd.salesman_id', "rr.retailer_id,ret.retailer_name,ret.retailer_code,ret.start_date,cm.channel_name,rel.relationship_code,sd.salesman_id,s.salesman_name,s.employee_code,sd.month,sd.year,GROUP_CONCAT(DISTINCT rd.assign_day) as visit_dates", $rp, $where . $groupBy . $sort, '');

        $auRecCount = $this->_getSelectList('table_route_scheduled as sd 
		left join table_route_schedule_details as rd on sd.route_schedule_id=rd.route_schedule_id  
		left join table_route_retailer AS rr on rr.route_id=rd.route_id
		left join table_retailer AS ret ON ret.retailer_id=rr.retailer_id 
		left join table_relationship as rel on rel.relationship_id=ret.relationship_id
        left join table_retailer_channel_master as cm on cm.channel_id=ret.channel_id 
		left join table_salesman as s on s.salesman_id=sd.salesman_id', 'rr.retailer_id,ret.start_date,GROUP_CONCAT(DISTINCT rd.assign_day) as visit_dates', '', $where . $groupBy . $sort, '');
        $account_id = $_SESSION['accountId'];
        $featureList = $this->getAccountFeaturesList($account_id);
        if (strtotime(date('Y-m')) != strtotime($year . '-' . $month)) {
            $eDate = date('Y-m-t', strtotime($year . '-' . $month . '-01'));
        } else {
            $eDate = date('Y-m-d');
        }
        $ttl_days = cal_days_in_month(CAL_GREGORIAN, intval($month), $year);
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $assign_day = explode(',', $auRec[$i]->visit_dates);
//            $lowestAssignDay = min($assign_day);
//            $lowestAssignDate = date('Y-m-d', strtotime($year . '-' . $month . '-' . $lowestAssignDay));
            $retStartDate = date('Y-m-d', strtotime($auRec[$i]->start_date));
//            if($retStartDate <= $lowestAssignDate) {
            if ($rc) {
                $json .= ",";
            }
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->retailer_id . '",';
            $json .= '"cell":["' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->salesman_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->employee_code)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->retailer_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->retailer_code)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->channel_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->relationship_code)))) . '"';
            if (count($featureList) > 0 && in_array(73, $featureList)) {
                $condition = " ta.retailer_id='" . $auRec[$i]->retailer_id . "' AND ta.salesman_id=" . $auRec[$i]->salesman_id . " AND ta.checkin_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "'";
                $dayRet = $this->_getSelectList('table_capture_checkin_out as ta',
                    "ta.retailer_id, ta.checkin_date", '', $condition . ' GROUP BY ta.checkin_date ORDER BY ta.checkin_date ASC ');
                $visitArr = array();
                $actualpjpArr = array();
                if (is_array($dayRet) && (count($dayRet) > 0)) {
                    foreach ($dayRet as $dayRetVal) {
                        $visitArr[] = $dayRetVal->checkin_date;
                        $visitDay = intval(date('d', strtotime($dayRetVal->checkin_date)));
                        if (in_array($visitDay, $assign_day)) {
                            $actualpjpArr[] = $dayRetVal->checkin_date;
                        }
                    }
                }
            } else {
                $odrwhere = "o.retailer_id='" . $auRec[$i]->retailer_id . "' AND o.salesman_id=" . $auRec[$i]->salesman_id . " AND o.order_type IN('Yes','No') AND o.date_of_order BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY o.date_of_order ORDER BY o.date_of_order ASC";
                $auRecOrder = $this->_getSelectList('table_order as o', "o.retailer_id,o.salesman_id,o.date_of_order", '', $odrwhere, '');
                $visitArr = array();
                $actualpjpArr = array();
                if (is_array($auRecOrder) && (count($auRecOrder) > 0)) {
                    foreach ($auRecOrder as $auRecOrderVal) {
                        $visitArr[] = $auRecOrderVal->date_of_order;
                        $visitDay = intval(date('d', strtotime($auRecOrderVal->date_of_order)));
                        if (in_array($visitDay, $assign_day)) {
                            $actualpjpArr[] = $auRecOrderVal->date_of_order;
                        }
                    }
                }
            }
//                $json .= ',"' . count($actualpjpArr) . '"'; //Actual PJP
//                $json .= ',"' . count($visitArr) . '"'; //MTD Visits
            $pjp_gap = 0;
            $pjp_Adherancce = 0;
            $planned_visits = count($assign_day);
            $actual_pjp = count($actualpjpArr);
            $pjp_gap = $actual_pjp - $planned_visits;
            $pjp_Adherancce = ROUND(($actual_pjp * 100 / $planned_visits), 2);
            $json .= ',"' . ucwords(addslashes($planned_visits)) . '"'; //Planned PJP/visits
            $json .= ',"' . ucwords(addslashes($actual_pjp)) . '"'; //Actual PJP
            $json .= ',"' . ucwords(addslashes($pjp_gap)) . '"'; //PJP Gap
            $json .= ',"' . ucwords(addslashes($pjp_Adherancce . '%')) . '"'; //PJP Adherancce %
            $mtd_visits = 0;
            $mtd_visits_gap = 0;
            $mtd_visits_per = 0;
            $mtd_visits = count($visitArr);
            $mtd_visits_gap = $mtd_visits - $planned_visits;
            if ($mtd_visits_gap > 0) {
                $mtd_visits_gap = '+' . $mtd_visits_gap;
            }
            $mtd_visits_per = ROUND(($mtd_visits * 100 / $planned_visits), 2);
            $json .= ',"' . ucwords(addslashes($mtd_visits)) . '"';
            $json .= ',"' . ucwords(addslashes($mtd_visits_gap)) . '"';
            $json .= ',"' . ucwords(addslashes($mtd_visits_per . '%')) . '"';
            /**
             * 1. green indicates that visit has been done on planned pjp
             * 2. orange indicates he has visited on the date which is not planned in the pjp
             * 3. Red indicates that pjp has been planned for that day but not visited by the salesman
             **/
            for ($j = 1; $j <= $ttl_days; $j++) {
                $dayVal = '';
                $dateVal = date('Y-m-d', strtotime($year . '-' . $month . '-' . $j));
                if (in_array($j, $assign_day)) {
                    if (in_array($dateVal, $visitArr)) {
                        $dayVal = "<div style='background-color: green; text-align: center; margin-top: -5px; margin-left: -5px; width: 100%;margin-bottom: -5px;color:#fff;''>1</div>";
                    } else {
                        if (strtotime($dateVal) <= strtotime($eDate)) {
                            if ($retStartDate <= $dateVal) {
                                $dayVal = "<div style='background-color: red; text-align: center; margin-top: -5px; margin-left: -5px; width: 100%;margin-bottom: -5px;color:#fff;''>0</div>";
                            }
                        }
                    }
                } else {
                    if (in_array($dateVal, $visitArr)) {
                        $dayVal = "<div style='background-color: orange; text-align: center; margin-top: -5px; margin-left: -5px; width: 100%;margin-bottom: -5px;''>1</div>";
                    }
                }
                $json .= ',"' . $dayVal . '"';
            }
            $json .= "]";
            $json .= "}";
            $rc = true;
//            }
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo End: Sagar : 4th May 2022 : Route wise PJP Coverage Report

    function showStateWiseProductPrice()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'st.state_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder , it.item_name ASC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//		$start = (($page-1) * $rp);
//		$limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " AND b.brand_id IN(" . $RoleBrands . ")";
        }
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasstWiseItmPrice']) && $_SESSION['MasstWiseItmPrice'] != 'all' && $_SESSION['MasstWiseItmPrice'] != '') {
            $statusCondi = " msi.status ='" . $_SESSION['MasstWiseItmPrice'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " $statusCondi $brandCnd ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_state_wise_item_price as msi
INNER JOIN state as st ON st.state_id = msi.state_id
INNER JOIN table_item as it ON it.item_id = msi.item_id
left join table_brands as b on b.brand_id = it.brand_id
', "msi.id as price_id,msi.state_id,st.state_name,msi.item_id,it.item_code,b.brand_name,it.item_name,msi.price,msi.created_at,msi.updated_at,msi.status", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_state_wise_item_price as msi
INNER JOIN state as st ON st.state_id = msi.state_id
INNER JOIN table_item as it ON it.item_id = msi.item_id
left join table_brands as b on b.brand_id = it.brand_id', 'count(msi.id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"statewise_item_price.php?stid=' . $auRec[$i]->price_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->price_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->price) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . addslashes(date('d M Y H:i A', strtotime($auRec[$i]->created_at))) . '"';
            $json .= ',"' . ((isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at)) ? addslashes(date('d M Y H:i A', strtotime($auRec[$i]->updated_at))) : "") . '"';
            $json .= "]";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // deduct batch wise stocks from distributor stock table
    public function adjustStock($disStockArr, $quantity, $odrVal)
    {
        $acc_quantity = $remainingQty = $quantity;
        foreach ($disStockArr as $key => $disStock) {
            if ($remainingQty > 0) {
                $data = array();
                if (($disStock->dis_stock_value >= $remainingQty) || $key == (count($disStockArr) - 1)) {
                    $data['dis_stock_value'] = ($disStock->dis_stock_value - $remainingQty);
                    $acc_quantity = $remainingQty;
                    $remainingQty = 0;
                } else if (($disStock->dis_stock_value <= $remainingQty) && ($disStock->dis_stock_value > 0)) {
                    $data['dis_stock_value'] = 0;
                    $remainingQty = ($remainingQty - $disStock->dis_stock_value);
                    $acc_quantity = $disStock->dis_stock_value;
                }
                $data['last_updated_date'] = date('Y-m-d');
                $this->_dbUpdate($data, 'table_item_distributor_stock', " dis_stk_id='" . $disStock->dis_stk_id . "'");
                $data = array();
                $data['account_id'] = $odrVal->account_id;
                $data['distributor_id'] = $odrVal->distributor_id;
                $data['item_id'] = $odrVal->item_id;
                $data['category_id'] = $odrVal->category_id;
                $data['dispatch_stock_value'] = $acc_quantity;
                $data['bill_date'] = $odrVal->bill_date;
                $data['bill_no'] = $odrVal->bill_no;
                $data['created_datetime'] = date('Y-m-d H:i:s');
                $data['status'] = 'D';
                $this->_dbInsert($data, 'table_item_dis_stk_dispatch_activity');
                $data = array();
                $data['distributor_id'] = $odrVal->distributor_id;
                $data['order_id'] = $odrVal->order_id;
                $data['item_id'] = $odrVal->item_id;
                $data['stock_before_activity'] = $disStock->dis_stock_value;
                $data['quantity'] = $acc_quantity;
                $data['stock_after_activity'] = ($disStock->dis_stock_value - $acc_quantity);
                $data['activity_type'] = "INV_REC";
                $data['activity_date'] = date('Y-m-d');
                $data['activity_time'] = date('H:i:s');
                $this->_dbInsert($data, 'table_item_distributor_stock_transaction_activity');
            }
        }
        return true;
    }

    // deduct batch wise stocks from distributor stock table
    public function adjustStockByProcOrder($disStockArr, $quantity, $odrVal)
    {
        $acc_quantity = $remainingQty = $quantity;
        foreach ($disStockArr as $key => $disStock) {
            if ($remainingQty > 0) {
                $data = array();
                if (($disStock->dis_stock_value >= $remainingQty) || $key == (count($disStockArr) - 1)) {
                    $data['dis_stock_value'] = ($disStock->dis_stock_value - $remainingQty);
                    $acc_quantity = $remainingQty;
                    $remainingQty = 0;
                } else if (($disStock->dis_stock_value <= $remainingQty) && ($disStock->dis_stock_value > 0)) {
                    $data['dis_stock_value'] = 0;
                    $remainingQty = ($remainingQty - $disStock->dis_stock_value);
                    $acc_quantity = $disStock->dis_stock_value;
                }
                $data['last_updated_date'] = date('Y-m-d');
                $this->_dbUpdate($data, 'table_item_distributor_stock', " dis_stk_id='" . $disStock->dis_stk_id . "'");
                $data = array();
                $data['account_id'] = $disStock->account_id;
                $data['distributor_id'] = $disStock->distributor_id;
                $data['item_id'] = $odrVal->item_id;
                $data['category_id'] = $disStock->category_id;
                $data['dispatch_stock_value'] = $acc_quantity;
                $data['bill_date'] = date('Y-m-d H:i:s');
                $data['bill_no'] = '';
                $data['created_datetime'] = date('Y-m-d H:i:s');
                $data['status'] = 'D';
                $this->_dbInsert($data, 'table_item_dis_stk_dispatch_activity');
                $data = array();
                $data['distributor_id'] = $disStock->distributor_id;
                $data['order_id'] = $odrVal->order_id;
                $data['item_id'] = $odrVal->item_id;
                $data['stock_before_activity'] = $disStock->dis_stock_value;
                $data['quantity'] = $acc_quantity;
                $data['stock_after_activity'] = ($disStock->dis_stock_value - $acc_quantity);
                $data['activity_type'] = "INV_REC";
                $data['activity_date'] = date('Y-m-d');
                $data['activity_time'] = date('H:i:s');
                $this->_dbInsert($data, 'table_item_distributor_stock_transaction_activity');
            }
        }
        return true;
    }

    //Todo Start : Sagar : 10th June 2022 Salesman & Distributor Mapping
    function showSalesmanDistributorMapping()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 's.salesman_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " ";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_salesman_distributor_mapping as csm
            LEFT JOIN table_salesman as s ON s.salesman_id = csm.salesman_id
            LEFT join table_distributors as d on d.distributor_id=csm.distributor_id', "csm.salesman_id,s.salesman_name,s.employee_code,COUNT(csm.distributor_id) as dist_count", $rp, $where . ' AND s.status = "A" AND d.status = "A" GROUP BY csm.salesman_id ' . $sort);
        $auRecCount = $this->_getSelectList('table_salesman_distributor_mapping as csm
            LEFT JOIN table_salesman as s ON s.salesman_id = csm.salesman_id
            LEFT join table_distributors as d on d.distributor_id=csm.distributor_id', 'csm.salesman_id', '', $where . ' AND s.status = "A" AND d.status = "A" GROUP BY csm.salesman_id ' . $sort);
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $viewLink = '<a href=\"view_sal_dist_mapping.php?id=' . $auRec[$i]->salesman_id . '\">View</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->salesman_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->dist_count) . '"';
            $json .= ',"' . $viewLink . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : Sagar : 10th June 2022 Salesman & Distributor Mapping
    //Todo Start : Sagar : 10th June 2022 Asset Condition Master
    function showAssetConditionList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'description';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasAsset']) && $_SESSION['MasAsset'] != 'all' && $_SESSION['MasAsset'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasAsset'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_asset_condition_master', "*", $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_asset_condition_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"asset_condition_list.php?statusId=' . $auRec[$i]->id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->description)) . '"';
            $json .= ',"' . addslashes(date('d M Y, H:i A', strtotime($auRec[$i]->created_at))) . '"';
            $json .= ',"' . addslashes(date('d M Y, H:i A', strtotime($auRec[$i]->updated_at))) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addAssetCondition()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['description'] = mysql_escape_string(trim($_POST['description']));
        $data['created_at'] = date('Y-m-d H:i:s');
        $data['updated_at'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_asset_condition_master');
        return $id;
    }

    function updateAssetCondition($id)
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['description'] = mysql_escape_string(trim($_POST['description']));
        $data['updated_at'] = date('Y-m-d H:i:s');
        $this->_dbUpdate($data, 'table_asset_condition_master', " id=" . $id);
        return $id;
    }
    //Todo End : Sagar : 10th June 2022 Asset Condition Master
    //Todo Start : Sagar : 17th June 2022 : Lead Master
    function addLead()
    {
        $lead_start_date = date('Y-m-d');
        $lead_start_time = date('H:i:s');
        $retPhnNo = $_POST['retailer_phone_no'];
        $isDuplicate = 'no';
        if (isset($retPhnNo) && !empty($retPhnNo)) {
            $checkDuplicate = $this->_getSelectList('table_lead', 'lead_id', '', " retailer_phone_no = '" . $retPhnNo . "' ");
            if (is_array($checkDuplicate) && (count($checkDuplicate) > 0)) {
                $isDuplicate = 'yes';
            }
        } else {
            $isDuplicate = 'no';
        }
        $data = [];
        //Lead Info :
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['title'] = mysql_escape_string($this->validateForm('/[^A-Za-z" "]/', trim($_POST['title'])));
        $data['lead_code'] = mysql_escape_string(trim($_POST['lead_code']));
        $data['validation_status_id'] = mysql_escape_string($_POST['validation_status_id']);
        $data['validated_by_id'] = mysql_escape_string($_POST['lead_created_by_id']);
        $data['lead_start_date'] = mysql_escape_string($lead_start_date);
        $data['lead_start_time'] = mysql_escape_string($lead_start_time);
//        $data['recieved_by_id']=mysql_escape_string($_POST['recieved_by_id']);
        $data['lead_source_id'] = mysql_escape_string($_POST['lead_source_id']);
        $data['lead_status_id'] = mysql_escape_string($_POST['lead_status_id']);
        $data['next_step_id'] = mysql_escape_string($_POST['next_step_id']);
        $data['lead_type_id'] = mysql_escape_string($_POST['lead_type_id']);
        $data['reason_id'] = mysql_escape_string($_POST['reason_id']);
//        $data['priority_status_id'] = mysql_escape_string($_POST['priority_status_id']);
        $data['cycle_code_id'] = mysql_escape_string($_POST['cycle_code_id']);
//        $data['category_id'] =  (is_array($_POST['category_id']) && (count($_POST['category_id']) > 0)) ?  implode(',',$_POST['category_id']) : '';
        $data['remark'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9,." "]/', trim($_POST['remark'])));
        $data['order_qty'] = mysql_escape_string($_POST['order_qty']);
        $data['order_value'] = mysql_escape_string($_POST['order_value']);
        //Customer Info :
        $data['retailer_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z" "]/', trim($_POST['retailer_name'])));
        $data['retailer_type_id'] = mysql_escape_string($_POST['retailer_type_id']);
        $data['channel_id'] = mysql_escape_string($_POST['channel_id']);
        $data['class_id'] = (is_array($_POST['class_id']) && (count($_POST['class_id']) > 0)) ? implode(',', $_POST['class_id']) : '';
        $data['retailer_phone_no'] = mysql_escape_string($_POST['retailer_phone_no']);
        $data['std_code'] = mysql_escape_string($_POST['std_code']);
        $data['telephone_no'] = mysql_escape_string($_POST['telephone_no']);
        $data['retailer_email'] = mysql_escape_string($_POST['retailer_email']);
        $data['contact_person'] = mysql_escape_string($this->validateForm('/[^A-Za-z" "]/', trim($_POST['contact_person'])));
        $data['state_id'] = mysql_escape_string($_POST['state_id']);
        $data['city_id'] = mysql_escape_string($_POST['city_id']);
        $data['location_id'] = mysql_escape_string($_POST['location_id']);
        $data['address'] = mysql_escape_string($this->validateForm('/[^A-Za-z,." "]/', trim($_POST['address'])));
        $data['retailer_location'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9,." "]/', trim($_POST['retailer_location'])));
        $data['assign_to_id'] = mysql_escape_string($_POST['assign_to_id']);
        if (isset($_POST['assign_to_id']) && !empty($_POST['assign_to_id']) && (intval($_POST['assign_to_id']) > 0)) {
            $data['assigned_by_id'] = mysql_escape_string($_POST['lead_created_by_id']);
        }
        $data['lead_created_by_id'] = mysql_escape_string($_POST['lead_created_by_id']);
        $data['is_duplicate'] = mysql_escape_string($isDuplicate);
        $data['landmark'] = mysql_escape_string($_POST['landmark']);
        $data['created_at'] = date("Y-m-d H:i:s");
//        $data['updated_at']=date("Y-m-d H:i:s");
        $id = 2;//$this->_dbInsert($data, 'table_lead');
        //generate unique lead code and update
        if (($id > 0) && empty(trim($_POST['lead_code']))) {
            $leadIdLength = strlen($id);
            $lengthReq = (8 - $leadIdLength);
//            if($lengthReq > 0) {
//                $LeadCode = $id . $this->generateNumericCode($lengthReq);
//            }
//            else {
//                $getAllLeadCodes = $this->_getSelectList2('table_lead', "lead_code", '', " lead_id > 0 ");
//                $allLeadCodeArr = [];
//                if (is_array($getAllLeadCodes) && (count($getAllLeadCodes) > 0)) {
//                    foreach ($getAllLeadCodes as $key3 => $allLeadCode) {
//                        $allLeadCodeArr[] = $allLeadCode->lead_code;
//                    }
//                }
//
//                if (is_array($allLeadCodeArr) && (count($allLeadCodeArr) > 0)) {
//                    $LeadCode = $this->generateNumericCode(6);
//                    while (in_array($LeadCode, $allLeadCodeArr)) {
//                        $LeadCode = $this->generateNumericCode(6);
//                    }
//                }
//            }
            if ($lengthReq > 0) {
                $LeadCode = 'PEPUP-' . sprintf("%08s", $id);
            } else {
                $LeadCode = 'PEPUP-' . $id;
            }

            //insert contact details and map with lead
            $dataLeadContact = [];
            $dataLeadContact['account_id'] = mysql_escape_string($_SESSION['accountId']);
            $dataLeadContact['lead_id'] = $id;
            $dataLeadContact['salesman_id'] = $_POST['assign_to_id'];
            $dataLeadContact['contact_person_name'] = mysql_escape_string($_POST['contact_person']);
            $dataLeadContact['email'] = mysql_escape_string($_POST['contact_email']);
            $dataLeadContact['designation_id'] = mysql_escape_string($_POST['designation_id']);
            $dataLeadContact['phoneno'] = mysql_escape_string($_POST['contact_phoneno']);
            $dataLeadContact['is_default'] = '1';
            $dataLeadContact['created_on'] = date('Y-m-d H:i:s');
            $dataLeadContact['updated_on'] = date('Y-m-d H:i:s');
            $dataLeadContact['app_date'] = date('Y-m-d');
            $dataLeadContact['app_time'] = date('H:i:s');
            $leadContactId = $this->_dbInsert($dataLeadContact, 'table_lead_contact_person');

            $dataLeadCode = [];
            $dataLeadCode['lead_code'] = $LeadCode;
            $dataLeadCode['contact_person_id'] = $leadContactId;
            $this->_dbUpdate($dataLeadCode, 'table_lead', " lead_id=" . $id);
        }
        //add lead history
        if ($id > 0) {
            $data2 = [];
            //Lead Info :
            $data2['lead_id'] = mysql_escape_string($id);
            $data2['title'] = mysql_escape_string($_POST['title']);
            $data2['lead_code'] = (isset($_POST['lead_code']) && !empty($_POST['lead_code'])) ? $_POST['lead_code'] : $LeadCode;
            $data2['account_id'] = mysql_escape_string($_SESSION['accountId']);
            $data2['validation_status_id'] = mysql_escape_string($_POST['validation_status_id']);
            $data2['validated_by_id'] = mysql_escape_string($_POST['lead_created_by_id']);
            $data2['lead_start_date'] = mysql_escape_string($lead_start_date);
            $data2['lead_start_time'] = mysql_escape_string($lead_start_time);
//            $data2['recieved_by_id']=mysql_escape_string($_POST['recieved_by_id']);
            $data2['lead_status_id'] = mysql_escape_string($_POST['lead_status_id']);
            $data2['lead_type_id'] = mysql_escape_string($_POST['lead_type_id']);
            $data2['next_step_id'] = mysql_escape_string($_POST['next_step_id']);
            $data2['reason_id'] = mysql_escape_string($_POST['reason_id']);
//            $data2['priority_status_id'] = mysql_escape_string($_POST['priority_status_id']);
            $data2['cycle_code_id'] = mysql_escape_string($_POST['cycle_code_id']);
//            $data2['category_id'] =  (is_array($_POST['category_id']) && (count($_POST['category_id']) > 0)) ?  implode(',',$_POST['category_id']) : '';
            $data2['remark'] = mysql_escape_string($_POST['remark']);
            $data2['order_qty'] = mysql_escape_string($_POST['order_qty']);
            $data2['order_value'] = mysql_escape_string($_POST['order_value']);
            //Customer Info :
            $data2['retailer_name'] = mysql_escape_string($_POST['retailer_name']);
            $data2['retailer_type_id'] = mysql_escape_string($_POST['retailer_type_id']);
            $data2['channel_id'] = mysql_escape_string($_POST['channel_id']);
            $data2['class_id'] = (is_array($_POST['class_id']) && (count($_POST['class_id']) > 0)) ? implode(',', $_POST['class_id']) : '';
            $data2['retailer_phone_no'] = mysql_escape_string($_POST['retailer_phone_no']);
            $data2['std_code'] = mysql_escape_string($_POST['std_code']);
            $data2['telephone_no'] = mysql_escape_string($_POST['telephone_no']);
            $data2['retailer_email'] = mysql_escape_string($_POST['retailer_email']);
            $data2['contact_person'] = mysql_escape_string($_POST['contact_person']);
            $data2['state_id'] = mysql_escape_string($_POST['state_id']);
            $data2['city_id'] = mysql_escape_string($_POST['city_id']);
            $data2['location_id'] = mysql_escape_string($_POST['location_id']);
            $data2['address'] = mysql_escape_string($_POST['address']);
            $data2['retailer_location'] = mysql_escape_string($_POST['retailer_location']);
            $data2['assign_to_id'] = mysql_escape_string($_POST['assign_to_id']);
            if (isset($_POST['assign_to_id']) && !empty($_POST['assign_to_id']) && (intval($_POST['assign_to_id']) > 0)) {
                $data2['assigned_by_id'] = mysql_escape_string($_POST['lead_created_by_id']);
            }
//            $data2['last_updated_at'] = date("Y-m-d H:i:s");
//            $data2['last_updated_by_id'] = $_SESSION['salesmanId'];
            $this->_dbInsert($data2, 'table_lead_details');


            $assign_to_id = $_POST['assign_to_id'];
            // var_dump($assign_to_id);exit;
            $account_id = $_SESSION['accountId'];
            $valStsMstr = $this->_getSelectList2('table_validation_status_master', 'id', '', " account_id = $account_id AND LOWER(description) IN('validate','language barrier') AND status = 'A' ");
            $validStatusIdArr = [];
            if (is_array($valStsMstr) && (count($valStsMstr) > 0)) {
                foreach ($valStsMstr as $keyv => $valStsData) {
                    $validStatusIdArr[] = $valStsData->id;
                }
            }

            if (1==1) {
                $auSal = $this->_getSelectList('table_salesman as s 
            LEFT JOIN table_pepup_app_version as v ON v.salesman_id = s.salesman_id', "s.salesman_id,s.salesman_name,s.gcm_regid,v.app_type", '', " s.salesman_id='" . $assign_to_id . "' ");

                $deviceToken = $auSal[0]->gcm_regid;
                $appType = $auSal[0]->app_type;
                $msgid = $id;
                $read_status = 0;
                $msg_type = 'lead';
                //msg body for ios apps
                $subject = $_POST['title'];
                $imgReq = 'No';

                $messageStr = (isset($_POST['remark']) && !empty($_POST['remark'])) ? preg_replace("/[[:blank:]]+/", " ", str_replace(["<br>", "<br />", "<br/>"], "\n", preg_replace('/[^a-zA-Z0-9., <>\/:\']/', '', $_POST['remark']))) : preg_replace("/[[:blank:]]+/", " ", str_replace(["<br>", "<br />", "<br/>"], "\n", preg_replace('/[^a-zA-Z0-9., <>\/:\']/', '', $_POST['retailer_name'])));

                $date = date('Y-m-d');
                $time = date('H:i:s');

                $message = $msgid . "|@|" . $auSal[0]->salesman_id . "|@|" . $date . "|@|" . $time . "|@|" . $imgReq . "|@|" . preg_replace("/[[:blank:]]+/", " ", $subject) . "|@|" . preg_replace("/[[:blank:]]+/", " ", $messageStr) . "|@|" . $read_status . "|@|" . $msg_type;

                // $message = array("message" => $message);




                // Create the notification message
                $message = [
                    'message' => [
                        'token' => $deviceToken,
                        'notification' => [
                            'title' => $subject,
                            'body' => $messageStr,
                        ],
                        'data' => [
                            'message' => $message,
                        ],
                    ],
                ];
                include($_SERVER['DOCUMENT_ROOT'].'/firebase.php');
                // $objFirebase = new firebase();
                $accessToken = GetToken();

                $url = 'https://fcm.googleapis.com/v1/projects/sfa-app-47837/messages:send';
                $headers = array(
                    'Authorization: Bearer ' . $accessToken['access_token'],
                    'Content-Type: application/json'
                );

                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_VERBOSE, 1);
                curl_setopt($ch, CURLOPT_POST, true);
                curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($message));
                $result = curl_exec($ch);
                curl_close($ch);
                $data = json_decode($result, true);

                // $url = 'https://fcm.googleapis.com/fcm/send';

                // if (strtolower($appType) == 'android') {
                //     $fields = array(
                //         'to' => $deviceToken,
                //         'data' => $message
                //     );
                // } else {
                //     $fields = array(
                //         'to' => $deviceToken,
                //         'notification' => [
                //             'body' => $messageStr,
                //             'title' => $subject
                //         ],
                //         'data' => [
                //             'msgId' => $msgid,
                //             'salesmanId' => $auSal[0]->salesman_id,
                //             'retailerId' => '',
                //             'distributorId' => '',
                //             'date' => $date,
                //             'time' => $time,
                //             'imgReq' => $imgReq,
                //             'readStatus' => $read_status,
                //             'msg_type' => $msg_type
                //         ]
                //     );
                // }

                // $headers = array(
                //     'Authorization: key=' . "AAAAxD6Ve-4:APA91bGm9IV8ZcgUCD5uDA4SJMHR15LOfaUidJ5D2DsJ7QB1ZfMhLQ_tGUlo0ce6cUnObUeNgQGxEyMYuz0dPlcwh29niQutzRQFEluHHMbGrEYgqDtgU9OK53pPfVa8THhSZOiBN1xQ",
                //     'Content-Type: application/json'
                // );

                // $ch = curl_init();
                // curl_setopt($ch, CURLOPT_URL, $url);
                // curl_setopt($ch, CURLOPT_POST, true);
                // curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
                // curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                // curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
                // curl_exec($ch);
                // curl_close($ch);

                if ($data['name']) {
                    //set is_notification_sent to 1 for the lead
                    $dataNotif = [];
                    $dataNotif['is_notification_sent'] = '1';
                    $this->_dbUpdate($dataNotif, 'table_lead', " lead_id=" . $id);
                }
                
            }
        }
        //Todo Start : sudhanshu : 30 April 2024 lead assignment notification
        if (isset($_POST['assign_to_id']) && !empty($_POST['assign_to_id']) && (intval($_POST['assign_to_id']) > 0)) {
            $valStsMstr = $this->_getSelectList('table_validation_status_master', 'id,description', '', " status = 'A' AND id= '" . $_POST['validation_status_id'] . "'");

            if (is_array($valStsMstr) && count($valStsMstr) > 0) {
                if (strtolower($valStsMstr[0]->description) == 'validate') {
                    $noti = [];
                    $noti['salesman_id'] = $_POST['assign_to_id'];
                    $noti['subject'] = "Lead Assignment";
                    $noti['message'] = "You have assigned new lead - " . trim($_POST['title']);
                    $noti['send_date'] = date("Y-m-d");
                    $noti['send_time'] = date("H:i:s");
                    $noti['msg_type'] = 'lead_assignment';
                    $noti['image_required'] = 'No';
                    $noti['status'] = 'A';

                    $this->_dbInsert($noti, 'table_message');
                }
            }


        }

        //Todo End : sudhanshu : 30 April 2024 lead assignment notification
        return $id;
    }

    function updateLead($id)
    {
        $leadDataRec = $this->_getSelectList('table_lead as E ', "E.assign_to_id", '', " lead_id=$id");
        if (is_array($leadDataRec) && (count($leadDataRec) > 0)) {
            //previously saved lead data
            $leadData = $leadDataRec[0];
        }
        $retPhnNo = $_POST['retailer_phone_no'];
        $isDuplicate = 'no';
        if (isset($retPhnNo) && !empty($retPhnNo)) {
            $checkDuplicate = $this->_getSelectList('table_lead', 'lead_id', '', " retailer_phone_no = '" . $retPhnNo . "' AND lead_id != $id");
            if (is_array($checkDuplicate) && (count($checkDuplicate) > 0)) {
                $isDuplicate = 'yes';
            }
        } else {
            $isDuplicate = 'no';
        }
        //Todo Start : get validation status and assing to for notification
        $valStsMstr = $this->_getSelectList('table_validation_status_master', 'id,description', '', " status = 'A' AND id= '" . $_POST['validation_status_id'] . "'");
        $leadAssingSal = $this->_getSelectList('table_lead', 'lead_id,validation_status_id,assign_to_id', '', " lead_id= '" . $id . "'");
        $assignedId = $leadAssingSal[0]->assign_to_id;
        $valStatus = $leadAssingSal[0]->validation_status_id;
        $validationStatus = '';
        if (is_array($valStsMstr) && count($valStsMstr) > 0) {
            $validationStatus = $valStsMstr[0]->description;
        }
//        echo $valStatus;die;
        //echo "<pre>";print_r($leadAssingSal);print_r($valStsMstr);die;
        //Todo End : get validation status and assing to for notification
        $data = [];
        //Lead Info :
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['title'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['title'])));
        $data['lead_code'] = mysql_escape_string($_POST['lead_code']);
        $data['validation_status_id'] = mysql_escape_string($_POST['validation_status_id']);
        $data['validated_by_id'] = mysql_escape_string($_POST['lead_created_by_id']);
//        $data['lead_start_date']=mysql_escape_string(date('Y-m-d'));
//        $data['recieved_by_id']=mysql_escape_string($_POST['recieved_by_id']);
//        $data['lead_source_id']=mysql_escape_string($_POST['lead_source_id']);
        $data['lead_status_id'] = mysql_escape_string($_POST['lead_status_id']);
        $data['next_step_id'] = mysql_escape_string($_POST['next_step_id']);
        $data['lead_type_id'] = mysql_escape_string($_POST['lead_type_id']);
        $data['reason_id'] = mysql_escape_string($_POST['reason_id']);
//        $data['priority_status_id'] = mysql_escape_string($_POST['priority_status_id']);
        $data['cycle_code_id'] = mysql_escape_string($_POST['cycle_code_id']);
//        $data['category_id'] =  (is_array($_POST['category_id']) && (count($_POST['category_id']) > 0)) ?  implode(',',$_POST['category_id']) : '';

        $data['remark'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9,." "]/', trim($_POST['remark'])));
        $data['order_qty'] = mysql_escape_string($_POST['order_qty']);
        $data['final_qty'] = mysql_escape_string($_POST['final_qty']);
        $data['order_value'] = mysql_escape_string($_POST['order_value']);
        //Customer Info :
        $data['retailer_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z" "]/', trim($_POST['retailer_name'])));
        $data['retailer_type_id'] = mysql_escape_string($_POST['retailer_type_id']);
        $data['channel_id'] = mysql_escape_string($_POST['channel_id']);
        $data['class_id'] = (is_array($_POST['class_id']) && (count($_POST['class_id']) > 0)) ? implode(',', $_POST['class_id']) : '';
        $data['retailer_phone_no'] = mysql_escape_string($_POST['retailer_phone_no']);
        $data['std_code'] = mysql_escape_string($_POST['std_code']);
        $data['telephone_no'] = mysql_escape_string($_POST['telephone_no']);
        $data['retailer_email'] = mysql_escape_string($_POST['retailer_email']);
        $data['contact_person'] = mysql_escape_string($this->validateForm('/[^A-Za-z" "]/', trim($_POST['contact_person'])));
        $data['state_id'] = mysql_escape_string($_POST['state_id']);
        $data['city_id'] = mysql_escape_string($_POST['city_id']);
        $data['location_id'] = mysql_escape_string($_POST['location_id']);
        $data['address'] = mysql_escape_string($_POST['address']);
        $data['retailer_location'] = mysql_escape_string($_POST['retailer_location']);
        $data['assign_to_id'] = mysql_escape_string($_POST['assign_to_id']);
        $data['landmark'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9,." "]/', trim($_POST['landmark'])));

        if (isset($_POST['assign_to_id']) && !empty($_POST['assign_to_id']) && (intval($_POST['assign_to_id']) > 0)) {
            $data['assigned_by_id'] = mysql_escape_string($_POST['lead_created_by_id']);
        } else {
            $data['assigned_by_id'] = '';
        }
//        $data['lead_created_by_id']=mysql_escape_string($_POST['lead_created_by_id']);
//        $data['created_at']=date("Y-m-d H:i:s");
        $data['is_duplicate'] = mysql_escape_string($isDuplicate);
        $data['updated_at'] = date("Y-m-d H:i:s");
        $this->_dbUpdate($data, 'table_lead', " lead_id=" . $id);
        //add lead history
        if ($id > 0) {

            //generate unique lead code and update
            if (($id > 0) && empty(trim($_POST['lead_code']))) {
                $leadIdLength = strlen($id);
                $lengthReq = (8 - $leadIdLength);

                if ($lengthReq > 0) {
                    $LeadCode = 'PEPUP-' . sprintf("%08s", $id);
                } else {
                    $LeadCode = 'PEPUP-' . $id;
                }
                $dataLeadCode = [];
                $dataLeadCode['lead_code'] = $LeadCode;
                $this->_dbUpdate($dataLeadCode, 'table_lead', " lead_id=" . $id);
            }


            //update contact details which is mapped with lead
            $dataLeadContact = [];
//            $dataLeadContact['account_id'] = mysql_escape_string($_SESSION['accountId']);
            $dataLeadContact['lead_id'] = $id;
            $dataLeadContact['salesman_id'] = $_POST['assign_to_id'];
            $dataLeadContact['contact_person_name'] = mysql_escape_string($_POST['contact_person']);
            $dataLeadContact['email'] = mysql_escape_string($_POST['contact_email']);
            $dataLeadContact['designation_id'] = mysql_escape_string($_POST['designation_id']);
            $dataLeadContact['phoneno'] = mysql_escape_string($_POST['contact_phoneno']);
            $dataLeadContact['updated_on'] = date('Y-m-d H:i:s');
            if (isset($_POST['contact_person_id']) && !empty($_POST['contact_person_id']) && (intval($_POST['contact_person_id']) > 0)) {
                $leadContactId = $_POST['contact_person_id'];
                $this->_dbUpdate($dataLeadContact, 'table_lead_contact_person', " contact_person_id=" . $leadContactId);
            }


            $data2 = [];
            //Lead Info :
            $data2['lead_id'] = mysql_escape_string($id);
            $data2['account_id'] = mysql_escape_string($_SESSION['accountId']);
            $data2['title'] = mysql_escape_string($_POST['title']);
            $data2['lead_code'] = (isset($_POST['lead_code']) && !empty($_POST['lead_code'])) ? $_POST['lead_code'] : $LeadCode;

            $data2['validation_status_id'] = mysql_escape_string($_POST['validation_status_id']);
            $data2['validated_by_id'] = mysql_escape_string($_POST['lead_created_by_id']);
            $data2['lead_start_date'] = mysql_escape_string($_POST['lead_start_date']);
            $data2['lead_start_time'] = mysql_escape_string($_POST['lead_start_time']);
//            $data2['recieved_by_id']=mysql_escape_string($_POST['recieved_by_id']);
            $data2['lead_status_id'] = mysql_escape_string($_POST['lead_status_id']);
            $data2['lead_type_id'] = mysql_escape_string($_POST['lead_type_id']);
            $data2['next_step_id'] = mysql_escape_string($_POST['next_step_id']);
            $data2['reason_id'] = mysql_escape_string($_POST['reason_id']);
//            $data2['priority_status_id'] = mysql_escape_string($_POST['priority_status_id']);
            $data2['cycle_code_id'] = mysql_escape_string($_POST['cycle_code_id']);
//            $data2['category_id'] =  (is_array($_POST['category_id']) && (count($_POST['category_id']) > 0)) ?  implode(',',$_POST['category_id']) : '';
            $data2['remark'] = mysql_escape_string($_POST['remark']);
            $data2['order_qty'] = mysql_escape_string($_POST['order_qty']);
            $data2['final_qty'] = mysql_escape_string($_POST['final_qty']);
            $data2['order_value'] = mysql_escape_string($_POST['order_value']);
            //Customer Info :
            $data2['retailer_name'] = mysql_escape_string($_POST['retailer_name']);
            $data2['retailer_type_id'] = mysql_escape_string($_POST['retailer_type_id']);
            $data2['channel_id'] = mysql_escape_string($_POST['channel_id']);
            $data2['class_id'] = (is_array($_POST['class_id']) && (count($_POST['class_id']) > 0)) ? implode(',', $_POST['class_id']) : '';
            $data2['retailer_phone_no'] = mysql_escape_string($_POST['retailer_phone_no']);
            $data2['std_code'] = mysql_escape_string($_POST['std_code']);
            $data2['telephone_no'] = mysql_escape_string($_POST['telephone_no']);
            $data2['retailer_email'] = mysql_escape_string($_POST['retailer_email']);
            $data2['contact_person'] = mysql_escape_string($_POST['contact_person']);
            $data2['state_id'] = mysql_escape_string($_POST['state_id']);
            $data2['city_id'] = mysql_escape_string($_POST['city_id']);
            $data2['location_id'] = mysql_escape_string($_POST['location_id']);
            $data2['address'] = mysql_escape_string($_POST['address']);
            $data2['retailer_location'] = mysql_escape_string($_POST['retailer_location']);
            $data2['assign_to_id'] = mysql_escape_string($_POST['assign_to_id']);
            if (isset($_POST['assign_to_id']) && !empty($_POST['assign_to_id']) && (intval($_POST['assign_to_id']) > 0)) {
                $data2['assigned_by_id'] = mysql_escape_string($_POST['lead_created_by_id']);
            }
            $data2['last_updated_at'] = date("Y-m-d H:i:s");
            $data2['last_updated_by_id'] = $_SESSION['salesmanId'];
            $data2['landmark'] = mysql_escape_string($_POST['landmark']);
            $this->_dbInsert($data2, 'table_lead_details');

            $assign_to_id = $_POST['assign_to_id'];
            $account_id = $_SESSION['accountId'];
            $valStsMstr = $this->_getSelectList2('table_validation_status_master', 'id', '', " account_id = $account_id AND LOWER(description) IN('validate','language barrier') AND status = 'A' ");
            $validStatusIdArr = [];
            if (is_array($valStsMstr) && (count($valStsMstr) > 0)) {
                foreach ($valStsMstr as $keyv => $valStsData) {
                    $validStatusIdArr[] = $valStsData->id;
                }
            }

            if (isset($assign_to_id) && !empty($assign_to_id) && (intval($assign_to_id) > 0) && ($leadData->assign_to_id != $assign_to_id) && (in_array($_POST['validation_status_id'], $validStatusIdArr))) {
                $auSal = $this->_getSelectList('table_salesman as s 
            LEFT JOIN table_pepup_app_version as v ON v.salesman_id = s.salesman_id', "s.salesman_id,s.salesman_name,s.gcm_regid,v.app_type", '', " s.salesman_id='" . $assign_to_id . "' ");

                $deviceToken = $auSal[0]->gcm_regid;
                $appType = $auSal[0]->app_type;
                $msgid = $id;
                $read_status = 0;
                $msg_type = 'lead';
                //msg body for ios apps
                $subject = $_POST['title'];
                $imgReq = 'No';

                $messageStr = (isset($_POST['remark']) && !empty($_POST['remark'])) ? preg_replace("/[[:blank:]]+/", " ", str_replace(["<br>", "<br />", "<br/>"], "\n", preg_replace('/[^a-zA-Z0-9., <>\/:\']/', '', $_POST['remark']))) : preg_replace("/[[:blank:]]+/", " ", str_replace(["<br>", "<br />", "<br/>"], "\n", preg_replace('/[^a-zA-Z0-9., <>\/:\']/', '', $_POST['retailer_name'])));

                $date = date('Y-m-d');
                $time = date('H:i:s');

                $message = $msgid . "|@|" . $auSal[0]->salesman_id . "|@|" . $date . "|@|" . $time . "|@|" . $imgReq . "|@|" . preg_replace("/[[:blank:]]+/", " ", $subject) . "|@|" . preg_replace("/[[:blank:]]+/", " ", $messageStr) . "|@|" . $read_status . "|@|" . $msg_type;

                $message = array("message" => $message);

                $url = 'https://fcm.googleapis.com/fcm/send';

                if (strtolower($appType) == 'android') {
                    $fields = array(
                        'to' => $deviceToken,
                        'data' => $message
                    );
                } else {
                    $fields = array(
                        'to' => $deviceToken,
                        'notification' => [
                            'body' => $messageStr,
                            'title' => $subject
                        ],
                        'data' => [
                            'msgId' => $msgid,
                            'salesmanId' => $auSal[0]->salesman_id,
                            'retailerId' => '',
                            'distributorId' => '',
                            'date' => $date,
                            'time' => $time,
                            'imgReq' => $imgReq,
                            'readStatus' => $read_status,
                            'msg_type' => $msg_type
                        ]
                    );
                }

                $headers = array(
                    'Authorization: key=' . "AAAAxD6Ve-4:APA91bGm9IV8ZcgUCD5uDA4SJMHR15LOfaUidJ5D2DsJ7QB1ZfMhLQ_tGUlo0ce6cUnObUeNgQGxEyMYuz0dPlcwh29niQutzRQFEluHHMbGrEYgqDtgU9OK53pPfVa8THhSZOiBN1xQ",
                    'Content-Type: application/json'
                );

                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_POST, true);
                curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
                curl_exec($ch);
                curl_close($ch);


                //set is_notification_sent to 1 for the lead
                $dataNotif = [];
                $dataNotif['is_notification_sent'] = '1';
                $this->_dbUpdate($dataNotif, 'table_lead', " lead_id=" . $id);
            }
        }
        //Todo Start : sudhanshu : 30 April 2024 lead assignment notification
        if (isset($_POST['assign_to_id']) && !empty($_POST['assign_to_id']) && (intval($_POST['assign_to_id']) > 0)) {


            if ((strtolower($validationStatus) == 'validate') && ($assignedId != $_POST['assign_to_id'] || $valStatus != 16)) {

                $noti = [];
                $noti['salesman_id'] = $_POST['assign_to_id'];
                $noti['subject'] = "Lead Assignment";
                $noti['message'] = "You have assigned new lead - " . trim($_POST['title']);
                $noti['send_date'] = date("Y-m-d");
                $noti['send_time'] = date("H:i:s");
                $noti['msg_type'] = 'lead_assignment';
                $noti['image_required'] = 'No';
                $noti['status'] = 'A';

                $this->_dbInsert($noti, 'table_message');
            }


        }

        //Todo End : sudhanshu : 30 April 2024 lead assignment notification
        return $id;
    }

    function showLeadMaster($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'E.created_at';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $filterConditions = '';
        if (isset($_SESSION['state_id']) && !empty($_SESSION['state_id']) && (intval($_SESSION['state_id']) > 0)) {
            $filterConditions .= ' AND E.state_id = ' . $_SESSION['state_id'];
        }
        if (isset($_SESSION['salid']) && !empty($_SESSION['salid']) && (intval($_SESSION['salid']) > 0)) {
            $filterConditions .= ' AND E.assign_to_id = ' . $_SESSION['salid'];
        }
//        else{
//            if(isset($_SESSION['salesmanId']) && !empty($_SESSION['salesmanId']) && (intval($_SESSION['salesmanId']) > 0)) {
//                $filterConditions .= $salesman;
//            }
//            else{
//                $_objArrayList = new ArrayList();
//                $salsList = $_objArrayList->SalesmanArrayList();
//                $salsList[] = 0;
//                $adminSalCondi = implode(',',$salsList);
//                $filterConditions .= ' AND E.lead_created_by_id IN('.$adminSalCondi.') ';
//            }
//        }
        if (isset($_SESSION['val_sts_id']) && !empty($_SESSION['val_sts_id']) && (intval($_SESSION['val_sts_id']) > 0)) {
            $filterConditions .= ' AND E.validation_status_id = ' . $_SESSION['val_sts_id'];
        }
        if (isset($_SESSION['lead_status_id']) && !empty($_SESSION['lead_status_id']) && (intval($_SESSION['lead_status_id']) > 0)) {
            $filterConditions .= ' AND E.lead_status_id = ' . $_SESSION['lead_status_id'];
        }
        if (!empty($_SESSION['frmDate']) && !empty($_SESSION['toDate']) && ($_SESSION['frmDate'] != 'all') && ($_SESSION['toDate'] != 'all')) {
            $frmDate = date('Y-m-d', strtotime($_SESSION['frmDate']));
            $toDate = date('Y-m-d', strtotime($_SESSION['toDate']));


//            if (isset($_SESSION['lead_status_id']) && !empty($_SESSION['lead_status_id']) && (intval($_SESSION['lead_status_id']) > 0)) {
//                $where = " AND (E.updated_at BETWEEN '" . $frmDate . "' AND '" . $toDate . "') ";
//            } else {
//                $where = " AND (E.lead_start_date BETWEEN '" . $frmDate . "' AND '" . $toDate . "') ";
//            }

            if (isset($_SESSION['dateFilterOn']) && !empty($_SESSION['dateFilterOn'])) {
                $dateFilterOn = $_SESSION['dateFilterOn'];
                $where = " AND (DATE(E.$dateFilterOn) BETWEEN '" . $frmDate . "' AND '" . $toDate . "') ";
            } else {
                $where = " AND (DATE(E.lead_start_date) BETWEEN '" . $frmDate . "' AND '" . $toDate . "') ";
            }
        } else {
//            $frmDate = date('Y-m-d');
//            $toDate = date('Y-m-d');
            $where = "";
        }
        if ($query) {
            if ($qtype == 'E.lead_id') {
                $query1 = intval($query);
                if (is_numeric($query1) && ($query1 > 0)) {
                    $query = $query1;
                } else {
                    $query = '-1';
                }
            }
            $where .= " AND $qtype LIKE '%$query%' ";
        }
        if (!empty($_SESSION['frmDate']) && !empty($_SESSION['toDate'])) {
            $auRec = $this->_getSelectList('table_lead as E
        left join table_validation_status_master as vs on vs.id = E.validation_status_id
		left join state as st on st.state_id=E.state_id
		left join city AS ct on ct.city_id=E.city_id
		left join table_location AS loc on loc.location_id=E.location_id
		left join table_enquiry_type as ET on ET.enquiry_type_id = E.lead_type_id
		left join table_enquiry_source as ES on ES.source_id = E.lead_source_id
		left join table_enquiry_status as Ests on Ests.enquiry_status_id = E.lead_status_id
		left join table_retailer_type_master as RC on RC.type_id = E.retailer_type_id
        left join table_lead_sales_cycle_codes as lscc on lscc.id = E.cycle_code_id
        left join table_lead_next_step_master as nsm on nsm.id = E.next_step_id
        left join table_lead_reason_master as lrm on lrm.id = E.reason_id
        left join table_lead_customer_channel_master as lch on lch.id = E.channel_id
		left join table_salesman as s on s.salesman_id=E.assign_to_id
		left join table_salesman as s3 on s3.salesman_id=E.lead_created_by_id
		left join table_salesman as s4 on s4.salesman_id=E.validated_by_id
		left join table_salesman as s5 on s5.salesman_id=E.assigned_by_id', "E.*,st.state_name,ct.city_name,loc.location_name,ET.enqury_type as lead_type,Ests.enqury_status as lead_status,vs.description as validation_status,ES.source_name,RC.type_name as ret_type,s.salesman_name as assigned_to_name,s3.salesman_name as lead_created_by_name,s4.salesman_name as validated_by_name,s5.salesman_name as assigned_by_name,lscc.cycle_code,nsm.next_step,lrm.reason,lch.channel_name", $rp, $where . ' ' . $filterConditions . ' ' . $sort);

            $auRecCount = $this->_getSelectList('table_lead as E
        left join table_validation_status_master as vs on vs.id = E.validation_status_id
		left join state as st on st.state_id=E.state_id
		left join city AS ct on ct.city_id=E.city_id
		left join table_location AS loc on loc.location_id=E.location_id
		left join table_enquiry_type as ET on ET.enquiry_type_id = E.lead_type_id
		left join table_enquiry_source as ES on ES.source_id = E.lead_source_id
		left join table_enquiry_status as Ests on Ests.enquiry_status_id = E.lead_status_id
		left join table_retailer_type_master as RC on RC.type_id = E.retailer_type_id
        left join table_lead_sales_cycle_codes as lscc on lscc.id = E.cycle_code_id
        left join table_lead_next_step_master as nsm on nsm.id = E.next_step_id
        left join table_lead_reason_master as lrm on lrm.id = E.reason_id
        left join table_lead_customer_channel_master as lch on lch.id = E.channel_id
		left join table_salesman as s on s.salesman_id=E.assign_to_id
		left join table_salesman as s3 on s3.salesman_id=E.lead_created_by_id', "COUNT(E.lead_id) as total", '', $where . ' ' . $filterConditions);
        }
        $total = (isset($auRecCount[0]->total) && !empty($auRecCount[0]->total) && (intval($auRecCount[0]->total) > 0)) ? $auRecCount[0]->total : 0;

        $catgryRec = $this->_getSelectList('table_category', 'category_id, category_name', '', " status='A' AND cat_type LIKE 'C' AND type LIKE 'I' ORDER BY category_id ASC ");
        $catgryMasterArr = [];
        if (is_array($catgryRec) && (count($catgryRec) > 0)) {
            foreach ($catgryRec as $keyc => $catgry) {
                $catgryMasterArr[$catgry->category_id] = $catgry->category_name;
            }
        }

        $custClassRec = $this->_getSelectList('table_lead_customer_class_master', 'id, class_name', '', " status='A' ORDER BY id ASC ");
        $custClassMasterArr = [];
        if (is_array($custClassRec) && (count($custClassRec) > 0)) {
            foreach ($custClassRec as $keyc => $class) {
                $custClassMasterArr[$class->id] = $class->class_name;
            }
        }

//        echo '<pre>';
//        print_r($catgryMasterArr);
//        die(' die here');

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r", "\t");

        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target="_blank"';
        }

        for ($i = 0; $i < count($auRec); $i++) {
            $leadId = $auRec[$i]->lead_id;
            $leadIdLength = strlen($leadId);
            $lengthReq = (8 - $leadIdLength);
            if ($lengthReq > 0) {
                $LeadPkId = sprintf("%08s", $leadId);
            } else {
                $LeadPkId = $leadId;
            }
            $lead_start_date = '';
            if (isset($auRec[$i]->lead_start_time) && !empty($auRec[$i]->lead_start_time) && ($auRec[$i]->lead_start_time != '00:00:00')) {
                $lead_start_date = date('d M Y H:i A', strtotime($auRec[$i]->lead_start_date . ' ' . $auRec[$i]->lead_start_time));
            } else {
                $lead_start_date = date('d M Y', strtotime($auRec[$i]->lead_start_date));
            }
            $color = ($auRec[$i]->is_duplicate == 'yes') ? 'I' : '';

            $viewContactsLink = '<a href="lead_contacts_list.php?id=' . base64_encode($auRec[$i]->lead_id) . '" ' . $targetBlank . '>View Contacts</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->lead_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . addslashes($LeadPkId) . '"';
            $json .= ',"' . addslashes(ucwords(str_replace($remove, '', $auRec[$i]->lead_code))) . '"';
            $json .= ',"' . addslashes(ucwords(str_replace($remove, ' ', $auRec[$i]->title))) . '"';
            $json .= ',"' . addslashes($lead_start_date) . '"';
//            $json .= ',"'.addslashes($auRec[$i]->recieved_by_name). '"';
            $json .= ',"' . addslashes($auRec[$i]->source_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->lead_type) . '"';

            $surveyStatus = '';
            if (strtolower($auRec[$i]->survey_status) == 'c') {
                $surveyStatus = 'Completed';
            } else {
                $surveyStatus = 'Not Completed';
            }

            $json .= ',"' . addslashes($surveyStatus) . '"';
            $json .= ',"' . addslashes($auRec[$i]->lead_status) . '"';

            $json .= ',"' . addslashes($auRec[$i]->reason) . '"';
            $json .= ',"' . addslashes($auRec[$i]->next_step) . '"';
//            $json .= ',"' . addslashes($auRec[$i]->priority_status) . '"';
            $json .= ',"' . addslashes($auRec[$i]->cycle_code) . '"';

            $catValuesArr = [];
            if (isset($auRec[$i]->category_id) && !empty($auRec[$i]->category_id)) {
                $catgryIdArr = explode(',', $auRec[$i]->category_id);
                foreach ($catgryIdArr as $keycid => $catgryId) {
                    if (isset($catgryMasterArr[$catgryId]) && !empty($catgryMasterArr[$catgryId])) {
                        $catValuesArr[] = $catgryMasterArr[$catgryId];
                    }
                }
            }

            $json .= ',"' . addslashes(implode(', ', $catValuesArr)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->validation_status) . '"';

//            if (isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at) && ($auRec[$i]->updated_at != '0000-00-00 00:00:00')) {
            if ($auRec[$i]->validation_status != 'Not Started') {
                if (intval($auRec[$i]->validated_by_id) > 0) {
                    $validatedBy = $auRec[$i]->validated_by_name;
                } else {
                    $validatedBy = 'Admin';
                }
            } else {
                $validatedBy = '';
            }
//            } else {
//                $validatedBy = '';
//            }

            $json .= ',"' . addslashes($validatedBy) . '"';

            $json .= ',"' . addslashes(preg_replace('/[^a-zA-Z0-9., <>\/:\']/', ' ', $auRec[$i]->remark)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ret_type) . '"';

            $json .= ',"' . addslashes($auRec[$i]->channel_name) . '"';

            $classValuesArr = [];
            if (isset($auRec[$i]->class_id) && !empty($auRec[$i]->class_id)) {
                $classIdArr = explode(',', $auRec[$i]->class_id);
                foreach ($classIdArr as $keycid => $classId) {
                    if (isset($custClassMasterArr[$classId]) && !empty($custClassMasterArr[$classId])) {
                        $classValuesArr[] = $custClassMasterArr[$classId];
                    }
                }
            }

            $json .= ',"' . addslashes(implode(', ', $classValuesArr)) . '"';

            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->retailer_phone_no)) . '"';
            $telephone = '';
            if (!empty($auRec[$i]->std_code) && !empty($auRec[$i]->telephone_no)) {
                $telephone = addslashes($auRec[$i]->std_code . ' - ' . $auRec[$i]->telephone_no);
            } else {
                $telephone = $auRec[$i]->std_code . $auRec[$i]->telephone_no;
            }
            $json .= ',"' . addslashes(str_replace($remove, '', $telephone)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->retailer_email)) . '"';
            $json .= ',"' . addslashes($viewContactsLink) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->state_name)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->city_name)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->location_name)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->retailer_location)) . '"';
            $json .= ',"' . addslashes(preg_replace('/[^a-zA-Z0-9., <>\/:\']/', ' ', $auRec[$i]->address)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->order_qty)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->final_qty)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->order_value)) . '"';

            

            if (is_numeric($auRec[$i]->lead_created_by_id)) {
                if ($auRec[$i]->lead_created_by_id > 0) {
                    $json .= ',"' . addslashes($auRec[$i]->lead_created_by_name) . '"';
                } else {
                    $json .= ',"Admin"';
                }
            } else {
                $json .= ',"' . addslashes($auRec[$i]->lead_created_by_id) . '"';
            }

            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->assigned_to_name)) . '"';

            if (intval($auRec[$i]->assign_to_id) > 0) {
                if (intval($auRec[$i]->assigned_by_id) > 0) {
                    $assignedBy = $auRec[$i]->assigned_by_name;
                } else {
//                    if (isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at) && ($auRec[$i]->updated_at != '0000-00-00 00:00:00')) {
                    $assignedBy = 'Admin';
//                    } else {
//                        $assignedBy = '';
//                    }
                }
            } else {
                $assignedBy = '';
            }

            $json .= ',"' . addslashes(str_replace($remove, '', $assignedBy)) . '"';
            $json .= ',"' . addslashes(date('d M Y H:i A', strtotime($auRec[$i]->created_at))) . '"';
            $updatedAt = '';
            if (isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at) && ($auRec[$i]->updated_at != '0000-00-00 00:00:00')) {
                $updatedAt = date('d M Y H:i A', strtotime($auRec[$i]->updated_at));
            }
            $json .= ',"' . addslashes($updatedAt) . '"';
            $json .= ',"' . addslashes(preg_replace('/[^a-zA-Z0-9., <>\/:\']/', ' ', $auRec[$i]->landmark)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showLeadReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'E.created_at';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $filterConditions = '';
        if (isset($_SESSION['state_id_rep']) && !empty($_SESSION['state_id_rep']) && (intval($_SESSION['state_id_rep']) > 0)) {
            $filterConditions .= ' AND E.state_id = ' . $_SESSION['state_id_rep'];
        }
        if (isset($_SESSION['salidrep']) && !empty($_SESSION['salidrep']) && (intval($_SESSION['salidrep']) > 0)) {
            $filterConditions .= ' AND E.assign_to_id = ' . $_SESSION['salidrep'];
        } else {
            if (isset($_SESSION['salesmanId']) && !empty($_SESSION['salesmanId']) && (intval($_SESSION['salesmanId']) > 0)) {
                $filterConditions .= $salesman;
            } else {
                $_objArrayList = new ArrayList();
                $salsList = $_objArrayList->SalesmanArrayList();
                $salsList[] = 0;
                $adminSalCondi = implode(',', $salsList);
                $filterConditions .= ' AND E.lead_created_by_id IN(' . $adminSalCondi . ') ';
            }
        }
        if (isset($_SESSION['val_sts_id_rep']) && !empty($_SESSION['val_sts_id_rep']) && (intval($_SESSION['val_sts_id_rep']) > 0)) {
            $filterConditions .= ' AND E.validation_status_id = ' . $_SESSION['val_sts_id_rep'];
        }
        if (isset($_SESSION['lead_status_id_rep']) && !empty($_SESSION['lead_status_id_rep']) && (intval($_SESSION['lead_status_id_rep']) > 0)) {
            $filterConditions .= ' AND E.lead_status_id = ' . $_SESSION['lead_status_id_rep'];
        }
        if (!empty($_SESSION['frmDateRep']) && !empty($_SESSION['toDateRep'])) {
            $frmDate = date('Y-m-d', strtotime($_SESSION['frmDateRep']));
            $toDate = date('Y-m-d', strtotime($_SESSION['toDateRep']));
        } else {
            $frmDate = date('Y-m-d');
            $toDate = date('Y-m-d');
        }

        if (isset($_SESSION['leadId']) && isset($_SESSION['salidrep'])) {
            $filterConditions = " AND E.lead_id= '" . $_SESSION['leadId'] . "' and E.lead_created_by_id='" . $_SESSION['salidrep'] . "' ";
        }
//        $where = " AND (E.lead_start_date BETWEEN '" . $frmDate . "' AND '" . $toDate . "') ";
//        if (isset($_SESSION['lead_status_id_rep']) && !empty($_SESSION['lead_status_id_rep']) && (intval($_SESSION['lead_status_id_rep']) > 0)) {
//            $where = " AND (E.updated_at BETWEEN '" . $frmDate . "' AND '" . $toDate . "') ";
//        } else {
//            $where = " AND (E.lead_start_date BETWEEN '" . $frmDate . "' AND '" . $toDate . "') ";
//        }
//        if($query) $where .= " AND $qtype LIKE '%$query%' ";

        if (isset($_SESSION['dateFilterOn']) && !empty($_SESSION['dateFilterOn'])) {
            $dateFilterOn = $_SESSION['dateFilterOn'];
            $where = " AND (DATE(E.$dateFilterOn) BETWEEN '" . $frmDate . "' AND '" . $toDate . "') ";
        } else {
            $where = " AND (DATE(E.lead_start_date) BETWEEN '" . $frmDate . "' AND '" . $toDate . "') ";
        }

//        echo '<pre>';
//        print_r($dateFilterOn);
//        echo '<br>';
//        print_r($where);
//        echo '<br>';
//        die(' die here');

        if ($query) {
            if ($qtype == 'E.lead_id') {
                $query1 = intval($query);
                if (is_numeric($query1) && ($query1 > 0)) {
                    $query = $query1;
                } else {
                    $query = '-1';
                }
            }
            $where .= " AND $qtype LIKE '%$query%' ";
        }
        $auRec = $this->_getSelectList('table_lead as E
        left join table_validation_status_master as vs on vs.id = E.validation_status_id
		left join state as st on st.state_id=E.state_id
		left join city AS ct on ct.city_id=E.city_id
		left join table_location AS loc on loc.location_id=E.location_id
		left join table_enquiry_type as ET on ET.enquiry_type_id = E.lead_type_id
		left join table_enquiry_source as ES on ES.source_id = E.lead_source_id
		left join table_enquiry_status as Ests on Ests.enquiry_status_id = E.lead_status_id
		left join table_retailer_type_master as RC on RC.type_id = E.retailer_type_id
        left join table_lead_sales_cycle_codes as lscc on lscc.id = E.cycle_code_id
        left join table_lead_next_step_master as nsm on nsm.id = E.next_step_id
        left join table_lead_reason_master as lrm on lrm.id = E.reason_id
        left join table_lead_customer_channel_master as lch on lch.id = E.channel_id
		left join table_salesman as s on s.salesman_id=E.assign_to_id
		left join table_salesman as s3 on s3.salesman_id=E.lead_created_by_id
		left join table_salesman as s4 on s4.salesman_id=E.validated_by_id
		left join table_salesman as s5 on s5.salesman_id=E.assigned_by_id', "E.*,st.state_name,ct.city_name,loc.location_name,ET.enqury_type as lead_type,Ests.enqury_status as lead_status,vs.description as validation_status,ES.source_name,RC.type_name as ret_type,s.salesman_name as assigned_to_name,s3.salesman_name as lead_created_by_name,s4.salesman_name as validated_by_name,s5.salesman_name as assigned_by_name,lscc.cycle_code,nsm.next_step,lrm.reason,lch.channel_name", $rp, $where . ' ' . $filterConditions . ' ' . $sort);

        $auRecCount = $this->_getSelectList('table_lead as E
        left join table_validation_status_master as vs on vs.id = E.validation_status_id
		left join state as st on st.state_id=E.state_id
		left join city AS ct on ct.city_id=E.city_id
		left join table_location AS loc on loc.location_id=E.location_id
		left join table_enquiry_type as ET on ET.enquiry_type_id = E.lead_type_id
		left join table_enquiry_source as ES on ES.source_id = E.lead_source_id
		left join table_enquiry_status as Ests on Ests.enquiry_status_id = E.lead_status_id
		left join table_retailer_type_master as RC on RC.type_id = E.retailer_type_id
        left join table_lead_sales_cycle_codes as lscc on lscc.id = E.cycle_code_id
        left join table_lead_next_step_master as nsm on nsm.id = E.next_step_id
        left join table_lead_reason_master as lrm on lrm.id = E.reason_id
        left join table_lead_customer_channel_master as lch on lch.id = E.channel_id
		left join table_salesman as s on s.salesman_id=E.assign_to_id
		left join table_salesman as s3 on s3.salesman_id=E.lead_created_by_id', "COUNT(E.lead_id) as total", '', $where . ' ' . $filterConditions);
        $total = $auRecCount[0]->total;

        $catgryRec = $this->_getSelectList('table_category', 'category_id, category_name', '', " status='A' AND cat_type LIKE 'C' AND type LIKE 'I' ORDER BY category_id ASC ");
        $catgryMasterArr = [];
        if (is_array($catgryRec) && (count($catgryRec) > 0)) {
            foreach ($catgryRec as $keyc => $catgry) {
                $catgryMasterArr[$catgry->category_id] = $catgry->category_name;
            }
        }

        $custClassRec = $this->_getSelectList('table_lead_customer_class_master', 'id, class_name', '', " status='A' ORDER BY id ASC ");
        $custClassMasterArr = [];
        if (is_array($custClassRec) && (count($custClassRec) > 0)) {
            foreach ($custClassRec as $keyc => $class) {
                $custClassMasterArr[$class->id] = $class->class_name;
            }
        }

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target="_blank"';
        }
        $remove = array("\n", "\r\n", "\r", "\t");
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $leadId = $auRec[$i]->lead_id;
            $leadIdLength = strlen($leadId);
            $lengthReq = (8 - $leadIdLength);
            if ($lengthReq > 0) {
                $LeadPkId = sprintf("%08s", $leadId);
            } else {
                $LeadPkId = $leadId;
            }
            $lead_start_date = '';
            if (isset($auRec[$i]->lead_start_time) && !empty($auRec[$i]->lead_start_time) && ($auRec[$i]->lead_start_time != '00:00:00')) {
                $lead_start_date = date('d M Y H:i A', strtotime($auRec[$i]->lead_start_date . ' ' . $auRec[$i]->lead_start_time));
            } else {
                $lead_start_date = date('d M Y', strtotime($auRec[$i]->lead_start_date));
            }
            $viewDetailsLink = '<a href="lead_details.php?id=' . base64_encode($auRec[$i]->lead_id) . '" ' . $targetBlank . '>' . $LeadPkId . '</a>';
            $viewMapLink = '<a href="show_lead_map.php?id=' . base64_encode($auRec[$i]->lead_id) . '" ' . $targetBlank . '>View Map</a>';
            $viewContactsLink = '<a href="lead_contacts_list.php?id=' . base64_encode($auRec[$i]->lead_id) . '" ' . $targetBlank . '>View Contacts</a>';

            $color = ($auRec[$i]->is_duplicate == 'yes') ? 'I' : '';
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->lead_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . addslashes($viewDetailsLink) . '"';
            $json .= ',"' . addslashes(ucwords(str_replace($remove, '', $auRec[$i]->lead_code))) . '"';
            $json .= ',"' . addslashes(ucwords(str_replace($remove, '', $auRec[$i]->title))) . '"';
            $json .= ',"' . addslashes($lead_start_date) . '"';
//            $json .= ',"'.addslashes($auRec[$i]->recieved_by_name). '"';
            $json .= ',"' . addslashes($auRec[$i]->source_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->lead_type) . '"';

            $surveyStatus = '';
            if (strtolower($auRec[$i]->survey_status) == 'c') {
                $surveyStatus = 'Completed';
            } else {
                $surveyStatus = 'Not Completed';
            }

            $json .= ',"' . addslashes($surveyStatus) . '"';

            $json .= ',"' . addslashes($auRec[$i]->lead_status) . '"';

            $json .= ',"' . addslashes($auRec[$i]->reason) . '"';
            $json .= ',"' . addslashes($auRec[$i]->next_step) . '"';
//            $json .= ',"' . addslashes($auRec[$i]->priority_status) . '"';
            $json .= ',"' . addslashes($auRec[$i]->cycle_code) . '"';

            $catValuesArr = [];
            if (isset($auRec[$i]->category_id) && !empty($auRec[$i]->category_id)) {
                $catgryIdArr = explode(',', $auRec[$i]->category_id);
                foreach ($catgryIdArr as $keycid => $catgryId) {
                    if (isset($catgryMasterArr[$catgryId]) && !empty($catgryMasterArr[$catgryId])) {
                        $catValuesArr[] = $catgryMasterArr[$catgryId];
                    }
                }
            }

            $json .= ',"' . addslashes(implode(', ', $catValuesArr)) . '"';

            $json .= ',"' . addslashes($auRec[$i]->validation_status) . '"';

//            if (isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at) && ($auRec[$i]->updated_at != '0000-00-00 00:00:00')) {
            if ($auRec[$i]->validation_status != 'Not Started') {
                if (intval($auRec[$i]->validated_by_id) > 0) {
                    $validatedBy = $auRec[$i]->validated_by_name;
                } else {
                    $validatedBy = 'Admin';
                }
            } else {
                $validatedBy = '';
            }
//            } else {
//                $validatedBy = '';
//            }

            $json .= ',"' . addslashes($validatedBy) . '"';

            $json .= ',"' . addslashes(preg_replace('/[^a-zA-Z0-9., <>\/:\']/', ' ', $auRec[$i]->remark)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ret_type) . '"';

            $json .= ',"' . addslashes($auRec[$i]->channel_name) . '"';

            $classValuesArr = [];
            if (isset($auRec[$i]->class_id) && !empty($auRec[$i]->class_id)) {
                $classIdArr = explode(',', $auRec[$i]->class_id);
                foreach ($classIdArr as $keycid => $classId) {
                    if (isset($custClassMasterArr[$classId]) && !empty($custClassMasterArr[$classId])) {
                        $classValuesArr[] = $custClassMasterArr[$classId];
                    }
                }
            }

            $json .= ',"' . addslashes(implode(', ', $classValuesArr)) . '"';

            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->retailer_phone_no)) . '"';
            $telephone = '';
            if (!empty($auRec[$i]->std_code) && !empty($auRec[$i]->telephone_no)) {
                $telephone = addslashes($auRec[$i]->std_code . ' - ' . $auRec[$i]->telephone_no);
            } else {
                $telephone = $auRec[$i]->std_code . $auRec[$i]->telephone_no;
            }

            $json .= ',"' . addslashes(str_replace($remove, '', $telephone)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->retailer_email)) . '"';
            $json .= ',"' . addslashes($viewContactsLink) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->state_name)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->city_name)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->location_name)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->retailer_location)) . '"';
            $json .= ',"' . addslashes(preg_replace('/[^a-zA-Z0-9., <>\/:\']/', ' ', $auRec[$i]->address)) . '"';
            if (isset($auRec[$i]->lat) && !empty($auRec[$i]->lat) && isset($auRec[$i]->lng) && !empty($auRec[$i]->lng)) {
                $json .= ',"' . addslashes($viewMapLink) . '"';
            } else {
                $viewMapLink = '';
                $json .= ',"' . addslashes($viewMapLink) . '"';
            }
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->order_qty)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->final_qty)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->order_value)) . '"';
            $json .= ',"' . addslashes(preg_replace('/[^a-zA-Z0-9., <>\/:\']/', ' ', $auRec[$i]->landmark)) . '"';
            if ($auRec[$i]->lead_created_by_id > 0) {
                $json .= ',"' . addslashes($auRec[$i]->lead_created_by_name) . '"';
            } else {
                $json .= ',"Admin"';
            }
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->assigned_to_name)) . '"';

            if (intval($auRec[$i]->assign_to_id) > 0) {
                if (intval($auRec[$i]->assigned_by_id) > 0) {
                    $assignedBy = $auRec[$i]->assigned_by_name;
                } else {
//                    if (isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at) && ($auRec[$i]->updated_at != '0000-00-00 00:00:00')) {
                    $assignedBy = 'Admin';
//                    } else {
//                        $assignedBy = '';
//                    }
                }
            } else {
                $assignedBy = '';
            }
            $json .= ',"' . addslashes(str_replace($remove, '', $assignedBy)) . '"';
            $json .= ',"' . addslashes(date('d M Y H:i A', strtotime($auRec[$i]->created_at))) . '"';
            $updatedAt = '';
            if (isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at) && ($auRec[$i]->updated_at != '0000-00-00 00:00:00')) {
                $updatedAt = date('d M Y H:i A', strtotime($auRec[$i]->updated_at));
            }
            $json .= ',"' . addslashes($updatedAt) . '"';
            $emptyVal = "";
            $json .= ',"' . ((isset($auRec[$i]->reminder_date) && !empty($auRec[$i]->reminder_date) && ($auRec[$i]->reminder_date != '0000-00-00')) ? date('d M Y', strtotime($auRec[$i]->reminder_date)) : $emptyVal) . '"';
            $json .= ',"' . ((isset($auRec[$i]->reminder_time) && !empty($auRec[$i]->reminder_time) && ($auRec[$i]->reminder_time != '00:00:00')) ? $auRec[$i]->reminder_time : $emptyVal) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : Sagar : 17th June 2022 : Lead Master
    //Todo Start : Sagar : 28th June 2022 : Add Distributor App Features
    function addDistributorAppFeaturesAndPhoto()
    {
        $companyid = $_POST['nav_preID'];
        $feature = $_POST['feature'];
        foreach ($feature as $key => $value) {
            $data['feature_id'] = $key;
            $data['account_id'] = $companyid;
            $data['created_date'] = date('Y-m-d');
            $data['last_update_date'] = date('Y-m-d');
            $data['status'] = 'A';
            $id = $this->_dbInsert($data, 'table_distributor_feature_map');
        }
        return $id;
    }

    //Todo End : Sagar : 28th June 2022 : Add Distributor App Features
    function showNewDistributors($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.start_date';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        if ($_REQUEST['qtype'] == "r.start_date") {
            $query = date('Y-m-d', strtotime(mysql_escape_string($_REQUEST['query'])));
        } else {
            $query = $_REQUEST['query'];
        }
        if (isset($_SESSION['status_id']) && !empty($_SESSION['status_id'])) {
            $condi = " And r.new = " . $_SESSION['status_id'];
        }
        //Todo Start : sudhanshu 02 aug 2024 add date filter
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromDisList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToDisList']));
        } else {
            $todate = date('Y-m-d');
        }
        //Todo End : sudhanshu 02 aug 2024 add date filter

        $qtype = $_REQUEST['qtype'];
        //$where = " r.new!='' AND r.new IN('1','2') $condi AND r.status = 'I' AND  r.start_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' AND r.account_id =" . $_SESSION['accountId'] .
        $where = " r.salesman_id >0 $condi  AND  r.start_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' AND r.account_id =" . $_SESSION['accountId'] .
            $salesman;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributors as r 
			left join table_account as a on a.account_id=r.account_id 
			left join table_web_users as w on w.distributor_id=r.distributor_id 
			left join state as st on st.state_id=r.state 
			left join city as c on c.city_id=r.city 
			left join table_location as loc on loc.location_id = r.location 
			left join table_salesman as s on s.salesman_id=r.salesman_id', "r.*,w.username,w.email_id,w.web_user_id,w.status as loginStatus,st.state_name,c.city_name,loc.location_name,s.salesman_name", $rp, $where . $sort . ", r.distributor_name ASC");
        $auRecCount = $this->_getSelectList('table_distributors as r 
			left join table_account as a on a.account_id=r.account_id 
			left join table_web_users as w on w.distributor_id=r.distributor_id 
			left join state as st on st.state_id=r.state 
			left join city as c on c.city_id=r.city 
			left join table_location as loc on loc.location_id = r.location 
			left join table_salesman as s on s.salesman_id=r.salesman_id', 'COUNT(r.distributor_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $start_date = $this->_changeDate($auRec[$i]->start_date);
            if ($auRec[$i]->distributor_dob == "0000-00-00") {
                $retailer_dob = "-";
            } else {
                $retailer_dob = $this->_changeDate($auRec[$i]->distributor_dob);
            }
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            //$approvalStatus = ($auRec[$i]->new == '1') ? "Pending" : "Rejected";
            if ($auRec[$i]->new == '1') {
                $approvalStatus = "Pending";
            } elseif ($auRec[$i]->new == '2') {
                $approvalStatus = "Rejected";
            } else {
                $approvalStatus = "Approved";
            }

            $survey = '<a href=\"distributor_survey.php?distId=' . $auRec[$i]->distributor_id . '\" target=\"_blank\">View Survey</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($start_date)) . '"';
//            $json .= ',"'.ucwords(addslashes($order)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
//            $json .= ',"'.$map. '"';
            $json .= ',"' . $survey . '"';
//            $json .= ',"'.$gstPhotoLink. '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->distributor_address))) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_phone_no) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_person)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->contact_number) . '"';
            $json .= ',"' . addslashes($retailer_dob) . '"';
            $json .= ',"' . $sts . '"';
            $json .= ',"' . $approvalStatus . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDistrbutorProductReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',O.time_of_order DESC';
        if (!$sortname) $sortname = 'O.date_of_order';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $condition = '';
        if ($_SESSION['categoryID'] != '' && $_SESSION['categoryID'] != 'all') {
            $condition .= " AND c.category_id = " . $_SESSION['categoryID'] . " ";
        }
        if ($_SESSION['itemID'] != '' && $_SESSION['itemID'] != 'all') {
            $condition .= " AND D.item_id = " . $_SESSION['itemID'] . " ";
        }
        if ($_SESSION['SalOrderList'] != '' && $_SESSION['SalOrderList'] != 'All') {
            $condition .= " AND O.salesman_id = " . $_SESSION['SalOrderList'] . " ";
        }
        if ($_SESSION['FromProductList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromProductList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToProductList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToProductList']));
        } else {
            $todate = date('Y-m-d');
        }
        $userWiseCondi = '';
        if (($_SESSION['userLoginType'] == 1) && ($_SESSION['salesmanId'] <= 0) && ($_SESSION['distributorId'] <= 0)) {
            $userWiseCondi = '';
        } elseif (($_SESSION['userLoginType'] == 5) && ($_SESSION['salesmanId'] > 0) && ($_SESSION['distributorId'] <= 0)) {
            if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
                $RoleBrands = $this->getUserRoleBrand();
                if (!empty($RoleBrands)) {
                    $userWiseCondi = " AND b.brand_id IN(" . $RoleBrands . ")";
                }
            } else {
                $userWiseCondi = $salesman;
            }
        } elseif (($_SESSION['userLoginType'] == 3) && ($_SESSION['salesmanId'] <= 0) && ($_SESSION['distributorId'] > 0)) {
            $userWiseCondi = " AND O.distributor_id = " . $_SESSION['distributorId'];
        } else {
            $userWiseCondi = '';
        }
        $where = " LOWER(O.order_type) = 'yes' AND O.account_id='" . $_SESSION['accountId'] . "' AND (O.date_of_order BETWEEN '" . $fromdate . "' AND '" . $todate . "') $userWiseCondi  $condition ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_distributor_order_detail AS D 
		LEFT JOIN table_distributor_order AS O ON D.order_id = O.order_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN state as st on st.state_id=Dis.state
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = Dis.state and szsm.account_id = Dis.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		LEFT JOIN city as ct on ct.city_id=Dis.city',
            'D.price, D.quantity, D.total, I.item_name,I.item_code,b.brand_name,I.item_erp_code,P.item_mrp, s.salesman_name, s.employee_code, Dis.distributor_name,Dis.distributor_code,c.category_name,O.order_id, O.date_of_order, O.time_of_order,st.state_name,ct.city_name,D.remarks,sz.zone_name', $rp, $where . $sort, '');
        $total = $this->_getSelectList2('table_distributor_order_detail AS D 
		LEFT JOIN table_distributor_order AS O ON D.order_id = O.order_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = Dis.state and szsm.account_id = Dis.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		LEFT JOIN state as st on st.state_id=Dis.state
		LEFT JOIN city as ct on ct.city_id=Dis.city', "COUNT(D.order_detail_id) AS total", '', $where . $sort, '');
//        echo '<pre>';
//        print_r($_SESSION);
//        print_r($where);
//        print_r($auRec);
//        print_r($total);
//        die(' die here');
        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
//            if($auRec[$i]->new=="1"){$retailer_type='New Retailer';} else{$retailer_type='Existing Retailer';}
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            //$json .= "ostype:'". $auRec[$i]->ostype . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->retailer_name)). '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->retailer_code)). '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->channel_name)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->brand_name)))) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->offer_name)). '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_erp_code)))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->price)) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->color_code)). '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->stock)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->quantity)) . '"';
            $json .= ',"' . $auRec[$i]->total . '"';
            // change date format : sudhanshu 11 march
            $json .= ',"' . $this->_changeDate($auRec[$i]->date_of_order) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->remarks)))) . '"]';
//            $json .= ',"'.ucwords(addslashes($retailer_type)). '"]';
//            $json .= ',"'.$status.'"]';
            //$json .= ',"'.ucwords(str_replace($remove, ' ',addslashes($auRec[$i]->comments))).'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showSalesmanExpenseList($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'sad.created';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromallownceList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromallownceList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToallownceList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToallownceList']));
        } else {
            $todate = date('Y-m-d');
        }
        $salCondi = $salesman;
        if (isset($_SESSION['allowncesalesmanID']) && !empty($_SESSION['allowncesalesmanID']) && (intval($_SESSION['allowncesalesmanID']) > 0)) {
            $salCondi = " AND sad.salesman_id = " . $_SESSION['allowncesalesmanID'];
        }
        $expType = '';
        if (isset($_SESSION['expenseType']) && !empty($_SESSION['expenseType'])) {
            $expType = " AND samd.tada_id = '" . $_SESSION['expenseType'] . "'";
        }
        $where = " sad.account_id = " . $_SESSION['accountId'] . " AND DATE(sad.created) BETWEEN '" . $fromdate . "' AND '" . $todate . "' $salCondi $expType ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_salesman_allowance_mapping as samd
LEFT JOIN table_salesman_allowance_details as sad ON sad.allws_id = samd.allws_id
LEFT JOIN table_salesman as s on s.salesman_id = sad.salesman_id 
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
LEFT JOIN table_salesman AS s2 ON s2.salesman_id = SH.rpt_user_id 
LEFT JOIN table_salesman_tags as st ON st.id = samd.tada_id
LEFT JOIN table_location as ct ON ct.location_id = sad.city_id
LEFT JOIN table_salesman AS mngr ON mngr.salesman_id = samd.status_updated_by_mngr_id
LEFT JOIN table_salesman AS adm ON adm.salesman_id = samd.status_updated_by_admin_id', "sad.allws_id,samd.allwns_map_id,samd.tada_id,sad.salesman_id,s.salesman_name,s.employee_code,H.description AS sal_desg,s2.salesman_name AS rpt_to, H2.description AS rpt_to_desg,sad.created as req_on_date,sad.app_date as req_for_date,st.desc as expense_type,ct.location_name,samd.allwns_amt,samd.remark,mngr.salesman_name as mngr_name,samd.mngr_apprvd_amt,samd.mngr_remark,samd.request_status,CONCAT(samd.status_updated_on_date,' ',samd.status_updated_on_time) as mngr_sts_updtd_on,samd.is_approved_by_admin,samd.status_updated_by_admin_id,adm.salesman_name as admin_name,samd.admin_apprvd_amt,samd.admin_remark,samd.admin_request_status,samd.admin_status_updated_on_date_time as admin_sts_updtd_on,photo_count", $rp, $where . $sort);
        $auRecCount = $this->_getSelectList2('table_salesman_allowance_mapping as samd
LEFT JOIN table_salesman_allowance_details as sad ON sad.allws_id = samd.allws_id
LEFT JOIN table_salesman as s on s.salesman_id = sad.salesman_id 
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
LEFT JOIN table_salesman AS s2 ON s2.salesman_id = SH.rpt_user_id 
LEFT JOIN table_salesman_tags as st ON st.id = samd.tada_id
LEFT JOIN table_location as ct ON ct.location_id = sad.city_id
LEFT JOIN table_salesman AS mngr ON mngr.salesman_id = samd.status_updated_by_mngr_id
LEFT JOIN table_salesman AS adm ON adm.salesman_id = samd.status_updated_by_admin_id', 'COUNT(samd.allwns_map_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target="_blank"';
        }
        for ($i = 0; $i < count($auRec); $i++) {
            $actDate = date('d M Y', strtotime($auRec[$i]->req_on_date));
            $expDate = date('d M Y', strtotime($auRec[$i]->req_for_date));
            $mngr_sts_updtd_on = '';
            if ($auRec[$i]->mngr_sts_updtd_on != '0000-00-00 00:00:00') {
                $mngr_sts_updtd_on = date('d M Y H:i', strtotime($auRec[$i]->mngr_sts_updtd_on));
            }
            $admin_sts_updtd_on = '';
            if ($auRec[$i]->admin_sts_updtd_on != '0000-00-00 00:00:00') {
                $admin_sts_updtd_on = date('d M Y H:i', strtotime($auRec[$i]->admin_sts_updtd_on));
            }
            $mngr_apprvd_amt = '';
            if (intval($auRec[$i]->mngr_apprvd_amt) > 0) {
                $mngr_apprvd_amt = $auRec[$i]->mngr_apprvd_amt;
            }
            $admin_apprvd_amt = '';
            if (intval($auRec[$i]->admin_apprvd_amt) > 0) {
                $admin_apprvd_amt = $auRec[$i]->admin_apprvd_amt;
            }
            $adminName = '';
            if (intval($auRec[$i]->is_approved_by_admin) > 0) {
                if (intval($auRec[$i]->status_updated_by_admin_id) > 0) {
                    $adminName = $auRec[$i]->admin_name;
                } else {
                    $adminName = 'Admin';
                }
            }
            $url = '<a href="expense_image.php?expid=' . $auRec[$i]->allws_id . '&tid=' . $auRec[$i]->tada_id . '" ' .
                $targetBlank . '>View Photo</a>';

            //Todo Start : Sudhanshu get photo count allowance tag wise
            $auPhotoCount = $this->_getSelectList('table_image', "count(image_id) as photo_count", '', "image_type IN('10') and ref_id='" . ($auRec[$i]->allws_id) . "' AND tag_id='" . $auRec[$i]->tada_id . "' ");

            //Todo End : Sudhanshu get photo count allowance tag wise
            if ($_SESSION['userLoginType'] == 5) {
                if ($auRec[$i]->request_status == 'approved' || $auRec[$i]->request_status == 'rejected' || $auRec[$i]->salesman_id == $_SESSION['salesmanId']) {
                    $chck = '<input type="checkbox" name="stockEdit[]" class="stock-check" value="' . $auRec[$i]->allwns_map_id . '" onclick="uncheck(this)" disabled /> ';
                } else {
                    $chck = '<input type="checkbox" name="stockEdit[]" class="stock-check" value="' . $auRec[$i]->allwns_map_id . '" onclick="uncheck(this)" /> ';
                }
            } elseif ($_SESSION['userLoginType'] == 1) {
                if ($auRec[$i]->admin_request_status == 'approved' || $auRec[$i]->admin_request_status == 'rejected') {
                    $chck = '<input type="checkbox" name="stockEdit[]" class="stock-check" value="' . $auRec[$i]->allwns_map_id . '" onclick="uncheck(this)" disabled /> ';
                } else {
                    $chck = '<input type="checkbox" name="stockEdit[]" class="stock-check" value="' . $auRec[$i]->allwns_map_id . '" onclick="uncheck(this)" /> ';
                }
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->allwns_map_id . '",';
            $json .= '"cell":["' . addslashes($chck) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_desg)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to_desg) . '"';
            $json .= ',"' . ucwords(addslashes($actDate)) . '"';
            $json .= ',"' . ucwords(addslashes($expDate)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->expense_type)) . '"';
            $json .= ',"' . ucwords(addslashes($url)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->allwns_amt)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->remark))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->request_status)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->mngr_name))) . '"';
            $json .= ',"' . ucwords(addslashes($mngr_apprvd_amt)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->mngr_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($mngr_sts_updtd_on)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->admin_request_status)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $adminName))) . '"';
            $json .= ',"' . ucwords(addslashes($admin_apprvd_amt)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->admin_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($admin_sts_updtd_on)) . '"';
            $json .= ',"' . ucwords(addslashes($auPhotoCount[0]->photo_count)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showproductlistNew($salesman)
    {
        //$salesman = "";
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $condition = '';
        if ($_SESSION['categoryID'] != '' && $_SESSION['categoryID'] != 'all') {
            $condition .= " c.category_id = " . $_SESSION['categoryID'] . " AND ";
        }
        if ($_SESSION['itemID'] != '' && $_SESSION['itemID'] != 'all') {
            $condition .= " D.item_id = " . $_SESSION['itemID'] . " AND ";
        }
        if ($_SESSION['FromProductList'] != '') {
            $fromdate = "  O.date_of_order  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
        } else {
            $fromdate = " O.date_of_order  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToProductList'] != '') {
            $todate = " O.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
        } else {
            $todate = "  O.date_of_order <= '" . date('Y-m-d') . "'";
        }
        //Added condition for role based access at brand lavel.
//        $RoleBrands = $this->getUserRoleBrand();
//        $brandCnd = '';
//        if(!empty($RoleBrands)){
//            $brandCnd = " and b.brand_id IN(".$RoleBrands.")";
//            if(isset($_SESSION['SalOrderList']) && $_SESSION['SalOrderList'] !='' && $_SESSION['SalOrderList'] !='All'){
//                $salesman  = $salesman ;
//            }else{
//                $salesman ='';
//            }
//        }
        //$groupby  = " GROUP BY table_order_detail.item_id having SUM(table_order_detail.quantity)!=0";
        //$groupby  = " AND o.order_id in (select order_id from table_order where ostype in ('D','R') AND order_type = 'Yes' AND order_status='A' AND $fromdate $todate ) group by o.item_id having SUM(o.quantity)!=0 ";
//        $groupby  = " GROUP BY D.item_id having D.item_id!=''";
        if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
            $RoleBrands = $this->getUserRoleBrand();
            if (!empty($RoleBrands)) {
                $salesman = " AND b.brand_id IN(" . $RoleBrands . ")";
            }
        }
        $where = " D.type=1 and O.account_id='" . $_SESSION['accountId'] . "' and $condition $fromdate $todate $salesman ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_order_detail AS D 
		LEFT JOIN table_order AS O ON D.order_id = O.order_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		Left join table_HSN_code_master as hsn on hsn.hsn_id = I.HSN_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
         LEFT JOIN table_subcategory AS sc ON sc.subcategory_id = I.subcategory_id
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
		LEFT JOIN table_retailer AS R ON O.retailer_id = R.retailer_id
		LEFT JOIN table_retailer_channel_master as cm ON cm.channel_id=R.channel_id
        left join table_retailer_type_master as tm on tm.type_id=R.type_id
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN state as st on st.state_id=Dis.state
		LEFT JOIN city as ct on ct.city_id=Dis.city
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = Dis.state and szsm.account_id = Dis.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		left join table_item_case_relationship as cr on cr.item_id=D.item_id
		left join table_cases as ca on ca.case_id=cr.case_id',
            'D.price, D.quantity,D.item_unit_type,D.total,R.new, I.item_name,I.item_code,I.item_size,ca.case_size,b.brand_name,cm.channel_name,sz.zone_name,
			I.item_erp_code,D.item_ptr_price as ptr_price,D.item_mrp_price as mrp_price, s.salesman_name, s.employee_code, 
			Dis.distributor_name,Dis.distributor_code,O.retailer_id,R.retailer_name,R.retailer_code,c.category_name,sc.subcategory_name,O.order_id,O.date_of_order,O.time_of_order,st.state_name,ct.city_name,D.remarks,tm.type_name,hsn.HSN_Code,O.delivery_date', $rp, $where . $sort, '');
        $retIdArr = [];
        if (is_array($auRec) && (count($auRec) > 0)) {
            foreach ($auRec as $key => $auRecData) {
                if (isset($auRecData->retailer_id) && !empty($auRecData->retailer_id) && (intval($auRecData->retailer_id) > 0)) {
                    $retIdArr[] = $auRecData->retailer_id;
                }
            }
            $retIds = implode(',', array_unique($retIdArr));
            $getRetailerRoutes = $this->_getSelectList("table_route_retailer as rr 
LEFT JOIN table_route as r ON r.route_id = rr.route_id", "rr.retailer_id, GROUP_CONCAT(DISTINCT r.route_name SEPARATOR ' | ') as route_names", "", " rr.retailer_id IN($retIds) GROUP BY rr.retailer_id ORDER BY rr.retailer_id ASC ");
            $retailerWiseRoutesArr = [];
            if (is_array($getRetailerRoutes) && (count($getRetailerRoutes) > 0)) {
                foreach ($getRetailerRoutes as $key => $retRoutes) {
                    if (isset($retRoutes->route_names) && !empty($retRoutes->route_names)) {
                        $retailerWiseRoutesArr[$retRoutes->retailer_id] = $retRoutes->route_names;
                    }
                }
            }
        }
        $total = $this->_getSelectList2('table_order_detail AS D 
		LEFT JOIN table_order AS O ON D.order_id = O.order_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
		LEFT JOIN table_retailer AS R ON O.retailer_id = R.retailer_id
		LEFT JOIN table_retailer_channel_master as cm ON cm.channel_id=R.channel_id
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN state as st on st.state_id=Dis.state
		LEFT JOIN city as ct on ct.city_id=Dis.city', "COUNT(*) AS total", '', $where . $sort, '');
//        $getRetailerRoutes = $this->_getSelectList("table_route_retailer as rr
//LEFT JOIN table_route as r ON r.route_id = rr.route_id","rr.retailer_id, GROUP_CONCAT(DISTINCT r.route_name SEPARATOR ' | ') as route_names",""," rr.retailer_id > 0 GROUP BY rr.retailer_id ORDER BY rr.retailer_id ASC ");
//        $retailerWiseRoutesArr = [];
//        if(is_array($getRetailerRoutes) && (count($getRetailerRoutes) > 0)){
//            foreach ($getRetailerRoutes as $key => $retRoutes){
//                if(isset($retRoutes->route_names) && !empty($retRoutes->route_names)){
//                    $retailerWiseRoutesArr[$retRoutes->retailer_id] = $retRoutes->route_names;
//                }
//            }
//        }
//        echo '<pre>';
//        print_r($retailerWiseRoutesArr);
//        die(' die here');
        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            //if($auRec[$i]->new=="1"){$retailer_type='New Retailer';} else{$retailer_type='Existing Retailer';}

            $routeName = (isset($retailerWiseRoutesArr[$auRec[$i]->retailer_id]) && !empty($retailerWiseRoutesArr[$auRec[$i]->retailer_id])) ? $retailerWiseRoutesArr[$auRec[$i]->retailer_id] : '';
            $pcs = '';
            $kg = '';
            $cases = '';
            if ($auRec[$i]->item_unit_type == "pcs") {
                $pcs = $auRec[$i]->quantity;
                $kg = (($auRec[$i]->item_size != 0) ? ROUND((($auRec[$i]->item_size * $auRec[$i]->quantity) / 1000), 2) : '');
                $cases = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->quantity / $auRec[$i]->case_size), 2) : '');
                $discount = number_format((($auRec[$i]->ptr_price * $pcs) - $auRec[$i]->total), 2);
            }

            if ($auRec[$i]->item_unit_type == "kg") {
                $kg = $auRec[$i]->quantity;
                $pcs = (($auRec[$i]->item_size != 0) ? ROUND((($auRec[$i]->quantity * 1000) / $auRec[$i]->item_size), 2) : '');
                $cases = (($auRec[$i]->case_size != 0) ? ROUND(($pcs / $auRec[$i]->case_size), 2) : '');

                $discount = number_format((($auRec[$i]->ptr_price * $pcs) - $auRec[$i]->total), 2);
            }

            if ($auRec[$i]->item_unit_type == "cases") {
                $cases = $auRec[$i]->quantity;
                $pcs = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->case_size * $auRec[$i]->quantity), 2) : '');
                $kg = (($auRec[$i]->item_size != 0) ? ROUND((($pcs * $auRec[$i]->item_size) / 1000), 2) : '');
                $discount = number_format((($auRec[$i]->ptr_price * $pcs) - $auRec[$i]->total), 2);
            }


            $delivery_date = $this->_changeDate($auRec[$i]->delivery_date);
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            //$json .= "ostype:'". $auRec[$i]->ostype . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->type_name)) . '"';
            $json .= ',"' . ucwords(addslashes($routeName)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->subcategory_name)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^A-Za-z0-9?!\s-,.%&#_()-+[]\/ ]/', '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^A-Za-z0-9?!\s-,.%&#_()-+[]\/ ]/', '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->brand_name)))) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->offer_name)). '"';
            $json .= ',"' . ucwords($auRec[$i]->HSN_Code) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ptr_price)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->mrp_price)) . '"';
            $json .= ',"' . ucwords(addslashes($pcs)) . '"';
            $json .= ',"' . ucwords(addslashes($kg)) . '"';
            $json .= ',"' . ucwords(addslashes($cases)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_size)) . '"';
            $json .= ',"' . ucwords(addslashes($discount)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total)) . '"';

//            $json .= ',"'.$auRec[$i]->total. '"';
            // change date format : sudhanshu 11 march 2024
            $json .= ',"' . $this->_changeDate($auRec[$i]->date_of_order) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->remarks)))) . '"';
            $json .= ',"' . ucwords(addslashes($delivery_date)) . '"]';
//            $json .= ',"'.ucwords(addslashes($retailer_type)). '"]';
//            $json .= ',"'.$status.'"]';
            //$json .= ',"'.ucwords(str_replace($remove, ' ',addslashes($auRec[$i]->comments))).'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo start : Sagar: 23rd Aug 2022 : Salesman Leave Requests
    function showSalesmanLeaveRequests($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'slr.requested_on';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromallownceList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromallownceList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToallownceList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToallownceList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['requested'] == 'for') {
            $reqFor = " AND (DATE(slr.from_date) BETWEEN '" . $fromdate . "' AND '" . $todate . "') ";
        } else {
            $reqFor = "  AND (DATE(slr.requested_on) BETWEEN '" . $fromdate . "' AND '" . $todate . "')  ";
        }
        $where = " s.account_id = " . $_SESSION['accountId'] . " $reqFor  $salesman ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_salesman_leave_request as slr
LEFT JOIN table_leave_reason_master as lrm ON lrm.status_id = slr.leave_reason_id
LEFT JOIN table_salesman as s on s.salesman_id = slr.salesman_id 
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
LEFT JOIN table_salesman AS s2 ON s2.salesman_id = SH.rpt_user_id
LEFT JOIN table_salesman as mngr on mngr.salesman_id = slr.aproved_by_id 
LEFT JOIN table_salesman as adm on adm.salesman_id = slr.admin_id', "slr.*,slr.id as request_id,s.salesman_name,s.employee_code,H.description AS sal_desg,s2.salesman_name AS rpt_to, H2.description AS rpt_to_desg,lrm.status_title as leave_reason,mngr.salesman_name as mngr_name,adm.salesman_name as admin_name", $rp, $where . $sort);
        $auRecCount = $this->_getSelectList2('table_salesman_leave_request as slr
LEFT JOIN table_leave_reason_master as lrm ON lrm.status_id = slr.leave_reason_id
LEFT JOIN table_salesman as s on s.salesman_id = slr.salesman_id 
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
LEFT JOIN table_salesman AS s2 ON s2.salesman_id = SH.rpt_user_id
LEFT JOIN table_salesman as mngr on mngr.salesman_id = slr.aproved_by_id 
LEFT JOIN table_salesman as adm on adm.salesman_id = slr.admin_id', 'COUNT(slr.id) as total', '', $where);
//        echo '<pre>';
//        print_r($auRec);
//        print_r($auRecCount);
//        die(' die here');
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $fromDate = date('d M Y', strtotime($auRec[$i]->from_date));
            $toDate = date('d M Y', strtotime($auRec[$i]->to_date));
            $requestedOnDate = date('d M Y H:i', strtotime($auRec[$i]->requested_on));
            $mngrStatus = '';
            if (strtolower($auRec[$i]->leave_status) == 'p') {
                $mngrStatus = 'Pending';
            } else if (strtolower($auRec[$i]->leave_status) == 'a') {
                $mngrStatus = 'Approved';
            } else if (strtolower($auRec[$i]->leave_status) == 'r') {
                $mngrStatus = 'Rejected';
            }
            $mngr_sts_updtd_on = '';
            if ($auRec[$i]->aproved_on != '0000-00-00 00:00:00') {
                $mngr_sts_updtd_on = date('d M Y H:i', strtotime($auRec[$i]->aproved_on));
            }
            $adminName = '';
            if (intval($auRec[$i]->is_approved_by_admin) > 0) {
                if (intval($auRec[$i]->admin_id) > 0) {
                    $adminName = $auRec[$i]->admin_name;
                } else {
                    $adminName = 'Admin';
                }
            }
            $adminStatus = '';
            if (strtolower($auRec[$i]->admin_leave_status) == 'p') {
                $adminStatus = 'Pending';
            } else if (strtolower($auRec[$i]->admin_leave_status) == 'a') {
                $adminStatus = 'Approved';
            } else if (strtolower($auRec[$i]->admin_leave_status) == 'r') {
                $adminStatus = 'Rejected';
            }
            $admin_sts_updtd_on = '';
            if ($auRec[$i]->admin_status_updated_on != '0000-00-00 00:00:00') {
                $admin_sts_updtd_on = date('d M Y H:i', strtotime($auRec[$i]->admin_status_updated_on));
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->request_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_desg)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to_desg) . '"';
            $json .= ',"' . addslashes($auRec[$i]->leave_reason) . '"';
            $json .= ',"' . ucwords(addslashes($fromDate)) . '"';
            $json .= ',"' . ucwords(addslashes($toDate)) . '"';
            $json .= ',"' . ucwords(addslashes($requestedOnDate)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->comment))) . '"';
            $json .= ',"' . ucwords(addslashes($mngrStatus)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->mngr_name))) . '"';
            $json .= ',"' . ucwords(addslashes($mngr_sts_updtd_on)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->manager_remark)) . '"';
            $json .= ',"' . ucwords(addslashes($adminStatus)) . '"';
            $json .= ',"' . ucwords(addslashes($adminName)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->admin_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($admin_sts_updtd_on)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo end : Sagar: 23rd Aug 2022 : Salesman Leave Requests
    //Todo Start : Sagar: 26th Aug 2022 : Salesman Task Report
    function showSalesmanTaskReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'ats.app_date';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder, ats.app_time DESC ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromallownceList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromallownceList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToallownceList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToallownceList']));
        } else {
            $todate = date('Y-m-d');
        }
        $where = " s.account_id = " . $_SESSION['accountId'] . " AND ats.app_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' $salesman ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_assigned_task_status as ats 
LEFT JOIN table_assigned_tasks as tsk ON tsk.task_id = ats.task_id
LEFT JOIN table_salesman as s on s.salesman_id = tsk.salesman_id 
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
LEFT JOIN table_salesman AS s2 ON s2.salesman_id = SH.rpt_user_id 
LEFT JOIN table_task_status_master as ss ON ss.status_id = ats.salesman_status
LEFT JOIN table_salesman AS mngr ON mngr.salesman_id = ats.manager_id
LEFT JOIN table_task_status_master as ms ON ms.status_id = ats.manager_status
LEFT JOIN state as st ON st.state_id = s.state
LEFT JOIN city as ct on ct.city_id = s.city
LEFT JOIN table_location as loc ON loc.location_id = s.location', "ats.task_id,ats.task_status_id,ats.app_date as task_date,ats.app_time as task_time,s.salesman_id,s.salesman_name,s.employee_code,H.description AS sal_desg,s2.salesman_name AS rpt_to, H2.description AS rpt_to_desg,st.state_name,ct.city_name,loc.location_name,tsk.task_description,tsk.task_type,tsk.from_date,tsk.to_date,ats.salesman_status,ss.status_title as slsmn_sts,ats.salesman_remark,ats.manager_status,ms.status_title as mngr_status,ats.manager_remark,mngr.salesman_name as mngr_name,ats.is_approved_by_admin,tsk.status", $rp, $where . $sort);
        $finalTaskDataArr = [];
        if (is_array($auRec) && (count($auRec) > 0)) {
            foreach ($auRec as $key => $taskData) {
                if ((strtolower($taskData->task_type) == 'predefined') && (strtolower($taskData->status) == 'i')) {
                    if (($taskData->salesman_status > 0) && !empty($taskData->slsmn_sts)) {
                        $finalTaskDataArr[] = $taskData;
                    }
                } else {
                    $finalTaskDataArr[] = $taskData;
                }
            }
        }
        $auRecCount = $this->_getSelectList2('table_assigned_task_status as ats 
LEFT JOIN table_assigned_tasks as tsk ON tsk.task_id = ats.task_id
LEFT JOIN table_salesman as s on s.salesman_id = tsk.salesman_id 
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
LEFT JOIN table_salesman AS s2 ON s2.salesman_id = SH.rpt_user_id 
LEFT JOIN table_task_status_master as ss ON ss.status_id = ats.salesman_status
LEFT JOIN table_salesman AS mngr ON mngr.salesman_id = ats.manager_id
LEFT JOIN table_task_status_master as ms ON ms.status_id = ats.manager_status
LEFT JOIN state as st ON st.state_id = s.state
LEFT JOIN city as ct on ct.city_id = s.city
LEFT JOIN table_location as loc ON loc.location_id = s.location', "tsk.task_type,ats.salesman_status,ss.status_title as slsmn_sts,tsk.status", '', $where . $sort);
        $countTaskDataArr = [];
        if (is_array($auRecCount) && (count($auRecCount) > 0)) {
            foreach ($auRecCount as $key => $taskData) {
                if ((strtolower($taskData->task_type) == 'predefined') && (strtolower($taskData->status) == 'i')) {
                    if (($taskData->salesman_status > 0) && !empty($taskData->slsmn_sts)) {
                        $countTaskDataArr[] = $taskData;
                    }
                } else {
                    $countTaskDataArr[] = $taskData;
                }
            }
        }
//echo '<pre>';
////print_r($auRec);
//print_r($finalTaskDataArr);
//print_r(count($countTaskDataArr));
//die(' die here 2');
        $total = count($countTaskDataArr);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        $auRec = $finalTaskDataArr;
        for ($i = 0; $i < count($auRec); $i++) {
            $taskDate = date('d M Y H:i', strtotime($auRec[$i]->task_date . ' ' . $auRec[$i]->task_time));
            $fromDate = date('d M Y', strtotime($auRec[$i]->from_date));
            $toDate = date('d M Y', strtotime($auRec[$i]->to_date));
            $approvedBy = '';
            if (intval($auRec[$i]->manager_status) > 0) {
                if (intval($auRec[$i]->is_approved_by_admin) > 0) {
                    $approvedBy = 'Admin';
                } else {
                    $approvedBy = (isset($auRec[$i]->mngr_name) && !empty($auRec[$i]->mngr_name)) ? $auRec[$i]->mngr_name : $auRec[$i]->rpt_to;
                }
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->task_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($taskDate)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_desg)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to_desg) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->task_description)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->task_type)) . '"';
            $json .= ',"' . ucwords(addslashes($fromDate)) . '"';
            $json .= ',"' . ucwords(addslashes($toDate)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->slsmn_sts)) . '"';
            $json .= ',"' . addslashes(str_replace(["<br>", "<br />", "<br/>"], "\n", preg_replace('/[^a-zA-Z0-9., <>\/:\']/', '', $auRec[$i]->salesman_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->mngr_status)) . '"';
            $json .= ',"' . addslashes(str_replace(["<br>", "<br />", "<br/>"], "\n", preg_replace('/[^a-zA-Z0-9., <>\/:\']/', '', $auRec[$i]->manager_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($approvedBy)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : Sagar: 26th Aug 2022 : Salesman Task Report
    /**************Unproductive Distributor**************************************************/
    /**************Create By Sachin On 30 Aug 22**************/
    function showUnproductiveDistributor($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',distributor_name ASC';
        if (!$sortname) $sortname = 'distributor_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $distributorId = "";
        $stateId = "";
        $location_id = '';
        if ($_SESSION['FromDate'] != '') {
            $fromdate = "  ods.date_of_order BETWEEN ('" . date('Y-m-d', strtotime($_SESSION['FromDate'])) . "')";
        } else {
            $fromdate = "  ods.date_of_order BETWEEN ('" . date('Y-m-d') . "') ";
        }
        if ($_SESSION['ToDate'] != '') {
            $todate = " and ('" . date('Y-m-d', strtotime($_SESSION['ToDate'])) . "')";
        } else {
            $todate = " and ('" . date('Y-m-d') . "')";
        }
        if ($_SESSION['Disstate'] != '') {
            $stateId = " and st.state_id='" . $_SESSION['Disstate'] . "'";
        }

        $salCondi = "";
        if (isset($_SESSION['SalOrderList']) && !empty($_SESSION['SalOrderList']) && (intval($_SESSION['SalOrderList']) > 0)) {
            $salCondi = " AND s.salesman_id=" . $_SESSION['SalOrderList'];
        } else {
            $salCondi = $salesman;
        }

//       echo $salCondi;
//       die;

        //Added condition for role based access at brand lavel.
//        $RoleBrands = $this->getUserRoleBrand();
//        $brandCnd = '';
//        if(!empty($RoleBrands)){
//            $brandCnd = " and b.brand_id IN(".$RoleBrands.")";
//            $salCondi ='';
//        }
        //$brandCnd
        $where = " $stateId and d.distributor_name!='' and d.status='A' $salCondi";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $where .= " GROUP BY d.distributor_id having total_orders=0";
        $auRec = $this->_getSelectList("table_distributors as d
		left join table_salesman_distributor_mapping as sdm on sdm.distributor_id=d.distributor_id
		left join table_salesman as s on s.salesman_id = sdm.salesman_id
		left join table_web_users as w on w.distributor_id=d.distributor_id 
        left join country as con on con.country_id = d.country 
		left join table_location as loc on loc.location_id = d.location 
		left join state as st on st.state_id=d.state 
		left join city as ct on ct.city_id=d.city
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		left join table_stockist as ts on ts.stockist_id = d.stockist_id
		left join table_distributor_order as ods on d.distributor_id=ods.distributor_id and $fromdate $todate and ods.order_type !='No' and ods.order_status IN('A','I')	
		", "d.*,s.salesman_name,s.employee_code,w.username,w.email_id,w.web_user_id,w.status as loginStatus,con.country_name,st.state_name,ct.city_name,
		loc.location_name,ts.stockist_name,count(ods.order_id) as total_orders,sz.zone_name", $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList("table_distributors as d
        left join table_salesman_distributor_mapping as sdm on sdm.distributor_id=d.distributor_id
		left join table_salesman as s on s.salesman_id = sdm.salesman_id
		left join table_web_users as w on w.distributor_id=d.distributor_id
		left join table_distributor_order as ods on d.distributor_id=ods.distributor_id and $fromdate $todate and ods.order_type !='No' and ods.order_status IN('A','I')	
		left join state as st on st.state_id=d.state 
		left join city as ct on ct.city_id=d.city
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id",
            "d.distributor_id,count(ods.order_id) as total_orders", '', $where);
        //echo "<pre/>";print_r($auRecCount);die;
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->gst_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->pan_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->country_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_address)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_address2)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_phone_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_phone_no2)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_phone_no3)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_leadline_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_person)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_number)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_person2)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_number2)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_person3)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_number3)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->username)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_email)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_email2)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_email3)) . '"';
            $json .= ',"' . $this->_changeDate($auRec[$i]->distributor_dob) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo Start : Sagar: 1st Sep 2022 : New Route List
    function showNewRouteList($salesmanID)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'route_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//        $start = (($page-1) * $rp);
//        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//        $_objArrayList = new ArrayList();
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasNewRout']) && $_SESSION['MasNewRout'] != 'all' && $_SESSION['MasNewRout'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasNewRout'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
//        $where.= $_objArrayList->getFilterCondForRouteSchemeIncentiveTargets($salesmanID);
        $where .= " AND new IN(0,1) ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_route AS r', "r.*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_route AS r', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        $routeIdArr = [];
        $routeIds = '';
        if (is_array($auRec) && (count($auRec) > 0)) {
            foreach ($auRec as $key => $routeData) {
                $routeIdArr[] = $routeData->route_id;
            }
        }
        if (is_array($routeIdArr) && (count($routeIdArr) > 0)) {
            $routeIds = implode(',', $routeIdArr);
            //retailer counts & states
//            $stRet = $this->_getSelectList('table_route_retailer as rr
//LEFT JOIN table_retailer as r ON r.retailer_id = rr.retailer_id
//LEFT JOIN state as st ON st.state_id = r.state', "rr.route_id,COUNT(DISTINCT r.retailer_id) as ttl_ret,COUNT(DISTINCT r.distributor_id) as ttl_ret_dist, GROUP_CONCAT(DISTINCT st.state_name SEPARATOR ' | ') as states", '', " rr.route_id IN($routeIds) AND r.status = 'A' GROUP BY rr.route_id ");

            $stRet = $this->_getSelectList('table_route_retailer as rr
LEFT JOIN table_retailer as r ON r.retailer_id = rr.retailer_id
LEFT JOIN state as st ON st.state_id = r.state', "rr.route_id,COUNT(DISTINCT r.retailer_id) as ttl_ret,GROUP_CONCAT(DISTINCT st.state_name SEPARATOR ' | ') as states", '', " rr.route_id IN($routeIds) AND r.status = 'A' GROUP BY rr.route_id ");

            $stateRetCountArr = [];
            if (is_array($stRet) && (count($stRet) > 0)) {
                foreach ($stRet as $key1 => $stRetData) {
                    $stateRetCountArr[$stRetData->route_id]['ttl_ret'] = $stRetData->ttl_ret;
//                    $stateRetCountArr[$stRetData->route_id]['ttl_ret_dist'] = $stRetData->ttl_ret_dist;
                    $stateRetCountArr[$stRetData->route_id]['states'] = $stRetData->states;
                }
            }
            //distributor counts & states
            $stDist = $this->_getSelectList('table_route_retailer as rr 
LEFT JOIN table_distributors as r ON r.distributor_id = rr.distributor_id
LEFT JOIN state as st ON st.state_id = r.state', "rr.route_id,COUNT(DISTINCT r.distributor_id) as ttl_dist, GROUP_CONCAT(DISTINCT st.state_name SEPARATOR ' | ') as states", '', " rr.route_id IN($routeIds) AND r.status = 'A' GROUP BY rr.route_id ");
            $stateDistCountArr = [];
            if (is_array($stDist) && (count($stDist) > 0)) {
                foreach ($stDist as $key2 => $stDistData) {
                    $stateDistCountArr[$stDistData->route_id]['ttl_dist'] = $stDistData->ttl_dist;
                    $stateDistCountArr[$stDistData->route_id]['states'] = $stDistData->states;
                }
            }

            $retDist = $this->_getSelectList('table_route_retailer as rr 
LEFT JOIN table_retailer as r ON r.retailer_id = rr.retailer_id', "rr.route_id,COUNT(DISTINCT r.distributor_id) as ttl_ret_dist", '', " rr.route_id IN($routeIds) AND rr.retailer_id > 0 AND r.distributor_id NOT IN (SELECT DISTINCT rr2.distributor_id FROM table_route_retailer as rr2 WHERE rr2.route_id = rr.route_id AND rr2.distributor_id > 0)
GROUP BY rr.route_id ");
            $retDistCountArr = [];
            if (is_array($retDist) && (count($retDist) > 0)) {
                foreach ($retDist as $key2 => $stDistData) {
                    $retDistCountArr[$stDistData->route_id]['ttl_ret_dist'] = $stDistData->ttl_ret_dist;
                }
            }
        }
//        echo '<pre>';
//        print_r($stateRetCountArr);
//        print_r($stateDistCountArr);
//        die(' die here 1');
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r", "\t");
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"new_route_list.php?statusId=' . $auRec[$i]->route_id . '&value=' . $status . '\">' . $status . '</a>';
            $exportRouteLink = '<a href=\"export.inc.php?routeId=' . $auRec[$i]->route_id . '&export_new_route_retailers_details=yes\">Export</a>';
            $ttl_ret = (isset($stateRetCountArr[$auRec[$i]->route_id]['ttl_ret']) && !empty($stateRetCountArr[$auRec[$i]->route_id]['ttl_ret'])) ? $stateRetCountArr[$auRec[$i]->route_id]['ttl_ret'] : '0';
            $states = '';
            $states = (isset($stateRetCountArr[$auRec[$i]->route_id]['states']) && !empty($stateRetCountArr[$auRec[$i]->route_id]['states'])) ? $stateRetCountArr[$auRec[$i]->route_id]['states'] : '';

//            $ttl_dist = (isset($stateDistCountArr[$auRec[$i]->route_id]['ttl_dist']) && !empty($stateDistCountArr[$auRec[$i]->route_id]['ttl_dist'])) ? $stateDistCountArr[$auRec[$i]->route_id]['ttl_dist'] : $stateRetCountArr[$auRec[$i]->route_id]['ttl_ret_dist'];

            $ttl_dist = 0;
            if (isset($stateDistCountArr[$auRec[$i]->route_id]['ttl_dist']) && !empty($stateDistCountArr[$auRec[$i]->route_id]['ttl_dist'])) {
                if (isset($retDistCountArr[$auRec[$i]->route_id]['ttl_ret_dist']) && !empty($retDistCountArr[$auRec[$i]->route_id]['ttl_ret_dist'])) {
                    $ttl_dist = (intval($stateDistCountArr[$auRec[$i]->route_id]['ttl_dist']) + intval($retDistCountArr[$auRec[$i]->route_id]['ttl_ret_dist']));
                } else {
                    $ttl_dist = $stateDistCountArr[$auRec[$i]->route_id]['ttl_dist'];
                }
            } elseif (isset($retDistCountArr[$auRec[$i]->route_id]['ttl_ret_dist']) && !empty($retDistCountArr[$auRec[$i]->route_id]['ttl_ret_dist'])) {
                $ttl_dist = $retDistCountArr[$auRec[$i]->route_id]['ttl_ret_dist'];
            } else {
                $ttl_dist = 0;
            }


            if ((isset($stateRetCountArr[$auRec[$i]->route_id]['states']) && !empty($stateRetCountArr[$auRec[$i]->route_id]['states'])) && (isset($stateDistCountArr[$auRec[$i]->route_id]['states']) && !empty($stateDistCountArr[$auRec[$i]->route_id]['states']))) {
                $states .= ' | ';
            }

            $states .= (isset($stateDistCountArr[$auRec[$i]->route_id]['states']) && !empty($stateDistCountArr[$auRec[$i]->route_id]['states'])) ? $stateDistCountArr[$auRec[$i]->route_id]['states'] : '';
            if (isset($states) && !empty($states)) {
                $stateArr = array_unique(explode(' | ', $states));
                $uniqRetDistStates = implode(' | ', $stateArr);
//                echo '<pre>';
//                print_r($auRec[$i]->route_id);
//                echo '<br>';
//                print_r($states);
//                echo '<br>';
//                print_r($stateArr);
//                echo '<br>';
//                print_r($uniqRetDistStates);
//                echo '<br>';
//                die(' die here');
            }
            //Todo Start : sudhanshu 16 may 2024 : add created date and updated date
            $created_date = '';
            $updated_date = '';
            if ($auRec[$i]->created_at != '0000-00-00 00:00:00') {
                $created_date = $this->_changeDate($auRec[$i]->created_at);
            }
            if ($auRec[$i]->updated_at != '0000-00-00 00:00:00') {
                $updated_date = $this->_changeDate($auRec[$i]->updated_at);
            }

            //Todo End : sudhanshu 16 may 2024 : add created date and updated date
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->route_id . '",';
            $json .= '"cell":["' . addslashes(ucwords(str_replace($remove, ' ', trim($auRec[$i]->route_name)))) . '"';
            $json .= ',"' . $ttl_ret . '"';
            $json .= ',"' . $ttl_dist . '"';
            $json .= ',"' . $uniqRetDistStates . '"';
            //Todo Start : sudhanshu 16 may 2024 : add created date and updated date
            $json .= ',"' . $created_date . '"';
            $json .= ',"' . $updated_date . '"';
            //Todo ENd : sudhanshu 16 may 2024 : add created date and updated date
            $json .= ',"' . $status . '"';
            $json .= ',"' . $exportRouteLink . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : Sagar: 1st Sep 2022 : New Route List
    //Todo Start : Sagar: 1st Sep 2022 : Add/edit New Route
    function addNewRoute()
    {
        $data = [];
        $data['state_id'] = implode(',', $_POST['state']);
        $data['city_id'] = implode(',', $_POST['city']);
        $data['locations'] = implode(',', $_POST['market']);
//        $data['route_name'] = mysql_escape_string(trim($_POST['route_name']));
        $remove = array("\n", "\r\n", "\r", "\t", "'");
        $data['route_name'] = mysqli_real_escape_string($this->db_connect_id, ucwords(preg_replace('/[^a-zA-Z0-9-_&,.|( )]/', '', str_replace($remove, '', trim($_POST['route_name'])))));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $data['new'] = '1';
        //Todo Start : sudhanshu 04 june 2024 : add created date and column
        $data['created_at'] = date('Y-m-d H:i:s');
        $data['updated_at'] = date('Y-m-d H:i:s');
        //Todo End : sudhanshu 04 june 2024 : add created date and column
        $route_id = $this->_dbInsert($data, 'table_route');
        // Check the user Type
//        $userType = ArrayList::checkUserType();
//
//        if(isset($userType) && $userType>1) {
//
//            // Relationship with user
//
//            $data2['account_id']=mysql_escape_string($_POST['account_id']);
//
//            $data2['route_id']= $rou_id;
//
//            $data2['user_type']=  $_SESSION['userLoginType'];
//
//            $data2['web_user_id']=$_SESSION['WEBUSERID'];
//
//            $data2['salesman_id']=$_SESSION['salesmanId'];
//
//            $rou_rel_id = $this->_dbInsert($data2,'table_user_relationships');
//
//        }
        return $route_id;
    }

    function updateNewRoute($id)
    {
        $data = [];
        $data['state_id'] = implode(',', $_POST['state']);
        $data['city_id'] = implode(',', $_POST['city']);
        $data['locations'] = implode(',', $_POST['market']);
//        $data['route_name'] = mysql_escape_string(trim($_POST['route_name']));
        $remove = array("\n", "\r\n", "\r", "\t", "'");
        $data['route_name'] = mysqli_real_escape_string($this->db_connect_id, ucwords(preg_replace('/[^a-zA-Z0-9-_&,.|( )]/', '', str_replace($remove, '', trim($_POST['route_name'])))));
        $data['updated_at'] = date('Y-m-d H:i:s');
        $this->_dbUpdate($data, 'table_route', " route_id=" . $id);
        return $id;
    }

    function addNewRouteRetailers($id)
    {
        $count = 1;
        if (is_array($_POST['retailer_id']) && (count($_POST['retailer_id']))) {
            foreach ($_POST['retailer_id'] as $distributorId => $retIdArr) {
                foreach ($retIdArr as $key => $retId) {
                    if (!empty($retId)) {
                        $data = [];
                        $data['account_id'] = mysql_escape_string($_POST['account_id']);
                        $data['route_id'] = mysql_escape_string($id);
                        $data['distributor_id'] = mysql_escape_string($distributorId);
                        $data['retailer_id'] = mysql_escape_string($retId);
                        $data['sort_order'] = mysql_escape_string($count);
                        $this->_dbInsert($data, 'table_route_retailer');
                    }
                    $count++;
                }
            }
        }
        if (is_array($_POST['distributor_id']) && (count($_POST['distributor_id']))) {
            foreach ($_POST['distributor_id'] as $key => $distributorId) {
                $retDistArr = $_POST['retailer_id'][$distributorId];
                if (!isset($retDistArr) && !is_array($retDistArr)) {
                    $data['account_id'] = mysql_escape_string($_POST['account_id']);
                    $data['route_id'] = mysql_escape_string($id);
                    $data['distributor_id'] = mysql_escape_string($distributorId);
                    $data['retailer_id'] = '0';
                    $data['sort_order'] = mysql_escape_string($count);
                    $this->_dbInsert($data, 'table_route_retailer');
                    $count++;
                }
            }
        }
        return $id;
    }

    //Todo Start : Sagar: 1st Sep 2022 : Add/edit New Route
    function showUpdateOrderList($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',o.time_of_order DESC';
        if (!$sortname) $sortname = 'o.date_of_order';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromDisList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToDisList']));
        } else {
            $todate = date('Y-m-d');
        }
//        echo '<pre>';
//        print_r($_SESSION);
//        die(' die here');
        $salesmanCondi = '';
        $disList = '';
        if ($_SESSION['userLoginType'] == 3) {
            if ($_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
                $disList = " AND o.distributor_id = " . $_SESSION['distributorId'];
            } else {
                $disList = "";
            }
            if (isset($_SESSION['SalDisList']) && !empty($_SESSION['SalDisList']) && (intval($_SESSION['SalDisList']) > 0)) {
                $salesmanCondi = " and s.salesman_id = '" . $_SESSION['SalDisList'] . "'";
            }
        } else {
            if (isset($_SESSION['SalDisList']) && !empty($_SESSION['SalDisList']) && (intval($_SESSION['SalDisList']) > 0)) {
                $salesmanCondi = " and s.salesman_id = '" . $_SESSION['SalDisList'] . "'";
            } else {
                $salesmanCondi = $salesman;
            }
            if (isset($_SESSION['distId']) && !empty($_SESSION['distId']) && (intval($_SESSION['distId']) > 0)) {
                $disList = "  AND o.distributor_id = '" . $_SESSION['distId'] . "'";
            }
        }
//        if($_SESSION['userLoginType']==7) {
//            $stkList=" d.stockist_id=".$_SESSION['stockistId']." and";
//        }else{
//            $stkList="";
//        }
//        if($_SESSION['OrderBy']!=''){
//            if($_SESSION['OrderBy']==1){
//                $orderby=" and order_status IN('A','I') ";
//            }
//            if($_SESSION['OrderBy']==2){
//                $orderby=" and o.order_status='A' ";
//            }
//            if($_SESSION['OrderBy']==3){
//                $orderby=" and o.order_status='I' ";
//            }
//            if($_SESSION['OrderBy']==4){
//                $orderby=" and o.order_status='D' ";
//            }
//        }
//
//        else {
//
//            $orderby=" and order_status IN('A','I') ";
//
//        }
        //$where = " 1=1 ";
        //Added condition for role based access at brand lavel.
//        $RoleBrands = $this->getUserRoleBrand();
//
//        $orderIds = '';
//
//        if($_SESSION['SalDisList']!=''){
//
//            $salesman=" and s.salesman_id='".$_SESSION['SalDisList']."'";
//
//        }else if(!empty($RoleBrands)){
//
//            $salesman = "";
//
//        }
//        if(!empty($RoleBrands)){
//
//            $brandWhere = " o.order_for='R' and o.order_status !='C' and o.order_type !='Return' and o.retailer_id !='' $fromdate $todate ";
//
//            $orderIds = $this->getBrandsOrder($RoleBrands,$brandWhere);
//
//        }
        $where = "  r.new='' AND o.order_for='R' AND o.order_status !='C' AND LOWER(o.order_type) IN('yes','adhoc') AND (o.date_of_order BETWEEN '" . $fromdate . "' AND '" . $todate . "') $disList $salesmanCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order as o 
				left join table_retailer as r on o.retailer_id=r.retailer_id 
				left join table_salesman as s on o.salesman_id=s.salesman_id 
				left join table_distributors as d on d.distributor_id=o.distributor_id 
				left join table_retailer_channel_master as cm on cm.channel_id=r.channel_id  
				left join state as st on st.state_id=d.state
				LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
                LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
				left join city as c on c.city_id=d.city',
            "o.*,r.retailer_name,r.retailer_code,r.retailer_address,r.retailer_location,cm.channel_name,r.display_outlet,s.salesman_name,s.employee_code,d.distributor_name,d.distributor_code, st.state_name,c.city_name,sz.zone_name", $rp, $where . $sort);
        $auRecCount = $this->_getSelectList('table_order as o 
				left join table_retailer as r on o.retailer_id=r.retailer_id 
				left join table_salesman as s on o.salesman_id=s.salesman_id 
				left join table_distributors as d on d.distributor_id=o.distributor_id 
				left join table_retailer_channel_master as cm on cm.channel_id=r.channel_id  
				left join state as st on st.state_id=d.state
				LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
                LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
				left join city as c on c.city_id=d.city', 'count(o.order_id) as total', '', $where);
//        echo '<pre>';
//        print_r($rp);
//        print_r($where);
//        print_r($auRec);
//        print_r($auRecCount);
//        die('die here');
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->order_status == 'A') {
                $status = "New Order";
                $color = "A";
            }
            if ($auRec[$i]->order_status == 'I') {
                $status = "Processed";
                $color = "I";
            }
            if ($auRec[$i]->order_status == 'D') {
                $status = "Dispatched";
                $color = "O";
            }
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            //$status=($auRec[$i]->order_status=='A')?"New Adhoc Order":"Processed";
            //$color=($auRec[$i]->order_status=='A')?"O":"P";
            //$status=($auRec[$i]->order_status=='A')?"New Order":"Processed";
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . date("h:i A.", strtotime($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->acc_total_invoice_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes($outlet)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRetailerChangeReason()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'tag_type';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " tag_type='2'";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_tags', "*", $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_tags', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"retailer_order_reason_master.php?statusId=' . $auRec[$i]->tag_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->tag_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addRetaileChangeReason()
    {
        $data['tag_type'] = mysql_escape_string($_POST['tag_type']);
        $data['tag_description'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['tag_description'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_tags');
        return $id;
    }

    function updateRetaileChangeReason($id)
    {
        $data['tag_type'] = mysql_escape_string($_POST['tag_type']);
        $data['tag_description'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['tag_description'])));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_tags', " tag_id=" . $id);
        return $id;
    }

    function showRetailerDistributor($flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.retailer_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $distCondi = '';
        if ((intval($_SESSION['userLoginType']) == 3) && (intval($_SESSION['distributorId']) > 0)) {
            $distCondi = ' AND r.distributor_id = ' . intval($_SESSION['distributorId']);
        }
        $where = " r.new='' AND r.status ='A' $distCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer as r 
        LEFT JOIN table_relationship as tr on tr.relationship_id=r.relationship_id 
        left join table_account as a on a.account_id=r.account_id 
        left join table_web_users as w on w.retailer_id=r.retailer_id 
        left join country as con on con.country_id = r.country
        left join state as s on s.state_id=r.state 
        left join city as c on c.city_id=r.city 
        left join table_location as loc ON loc.location_id = r.location_id 
        left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id 
        left join table_retailer_type_master as tm on tm.type_id=r.type_id 
        left join table_distributors as d on d.distributor_id=r.distributor_id', "r.*,w.username,cm.channel_name,d.distributor_name,d.distributor_code,w.email_id,w.web_user_id,tr.relationship_code,tm.type_name,con.country_name,s.state_name,c.city_name,loc.location_name", $rp, $where . ' GROUP BY r.retailer_id ' . $sort, '');
        $auRecCount = $this->_getSelectList('table_retailer as r 
        LEFT JOIN table_relationship as tr on tr.relationship_id=r.relationship_id 
        left join table_account as a on a.account_id=r.account_id 
        left join table_web_users as w on w.retailer_id=r.retailer_id 
        left join country as con on con.country_id = r.country
        left join state as s on s.state_id=r.state 
        left join city as c on c.city_id=r.city 
        left join table_location as loc ON loc.location_id = r.location_id 
        left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id 
        left join table_retailer_type_master as tm on tm.type_id=r.type_id 
        left join table_distributors as d on d.distributor_id=r.distributor_id', 'r.retailer_id', '', $where . ' GROUP BY r.retailer_id ');
//        $total= $auRecCount[0]->total;
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r", "\t");
        for ($i = 0; $i < count($auRec); $i++) {
            $surveyStatus = '';
            if (strtolower($auRec[$i]->survey_status) == 'c') {
                $surveyStatus = 'Surveyed';
            } elseif (strtolower($auRec[$i]->survey_status) == 'i') {
                $surveyStatus = 'Not Surveyed';
            } elseif (strtolower($auRec[$i]->survey_status) == 'n') {
                $surveyStatus = 'Rejected';
            } else {
                $surveyStatus = '';
            }
            /* Display outlet*/
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'YES';
            } else {
                $outlet = '';
            }
            if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            }
            $start_date = $this->_changeDate($auRec[$i]->start_date);
            if ($auRec[$i]->retailer_dob == "0000-00-00") {
                $retailer_dob = "-";
            } else {
                $retailer_dob = $this->_changeDate($auRec[$i]->retailer_dob);
            }
            //end date
            if ($auRec[$i]->status == 'I') {
                $end_date = $this->_changeDate($auRec[$i]->end_date);
            } else {
                $end_date = ' ';
            }
            //end date
//            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
//            $sts = '<a href=\"retailer.php?statusId=' . $auRec[$i]->retailer_id . '&value=' . $sts . '\">' . $sts . '</a>';
            //login status
//            if ($auRec[$i]->web_user_id != '') {
//                if ($auRec[$i]->status == 'A') {
//                    $LogStatus = ($auRec[$i]->loginStatus == 'A') ? "Active" : "Inactive";
//                    $LogSts = '<a href=\"retailer.php?statusLogId=' . $auRec[$i]->retailer_id . '&value=' . $LogStatus . '\">' . $LogStatus . '</a>';
//                } else {
//                    $LogSts = 'Inactive';
//                }
//            } else {
//                $LogSts = ' ';
//            }
            if ($auRec[$i]->lat != '') {
                $map = '<a href=\"retailer_distributor_list.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View on Map</a>';
            } else {
                $map = "-";
            }
            if ($flag == 1) {
                $survey = '<a href=\"retailer_survey.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Photo</a>';
            }
//            $gstPhotoLink = '<a href=\"view_gst_photo.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View GST Photo</a>';
            $gstPhotoLink = '<a href=\"rotate_img.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View GST Photo</a>';

//            $aadharPhotoLink = '<a href=\"view_aadhar_photo.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Aadhar Photo</a>';

            $aadharPhotoLink = '<a href=\"rotate_img.php?adId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Aadhar Photo</a>';

            $addressLink = '<a href=\"retailer_address.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Address</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->retailer_id . '",';
            $json .= '"cell":["' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->retailer_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->retailer_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->relationship_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->type_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->channel_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $surveyStatus))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $outlet))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->country_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->state_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->city_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->location_name))) . '"';
            $json .= ',"' . $map . '"';
            // $json .= ',"' . $survey . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->zipcode))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_phone_no)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_phone_no2)) . '"';
            // $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_leadline_no)) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->contact_person))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->contact_number)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->contact_person2))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->contact_number2)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_email)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_email2)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $retailer_dob)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->gst_no)) . '"';
            $json .= ',"' . $gstPhotoLink . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->aadhar_no)) . '"';
            $json .= ',"' . $aadharPhotoLink . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->pan_no)) . '"';
            //  $json .= ',"' . addslashes($start_date) . '"';
            $json .= ',"' . $addressLink . '"';
            $json .= ',"' . addslashes($start_date) . '"]';
            //$json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->status)) . '"';
            //$json .= ',"'.$sts. '"';
            //$json .= ',"'.$LogSts.'"';
            // $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->loginStatus)) . '"';
            //$json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->routes)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

//Todo Start: Jatin : 2 September 2022 : Leave Reason Master
    function showleavereason()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasLeaveM']) && $_SESSION['MasLeaveM'] != 'all' && $_SESSION['MasLeaveM'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasLeaveM'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_leave_reason_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_leave_reason_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == "A") ? "Active" : "Inactive";
            $status = '<a href=\"leave_reason_master.php?stid=' . $auRec[$i]->status_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->created_at));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->status_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->status_title) . '"';
            //$json .= ',"'.addslashes($lastUpdate). '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addleavereason()
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['status_title'] = mysql_escape_string(trim($_POST['status_title']));
        $data['created_at'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_leave_reason_master');
        return $id;
    }

    function updateleavereason($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['status_title'] = mysql_escape_string(trim($_POST['status_title']));
        $data['updated_at'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_leave_reason_master', " status_id=" . $id);
        return $id;
    }

//Todo End: Jatin : 2 September 2022 : Leave Reason Master
    function showDistributorNoOrderReport()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order DESC';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//        $_objAdmin = new Admin();
        $distributorId = "";
        $stateId = "";
        $location_id = '';
        if ($_SESSION['FromDate'] != '') {
            $fromdate = "  ods.date_of_order BETWEEN ('" . date('Y-m-d', strtotime($_SESSION['FromDate'])) . "')";
        } else {
            $fromdate = "  ods.date_of_order BETWEEN ('" . date('Y-m-d') . "') ";
        }
        if ($_SESSION['ToDate'] != '') {
            $todate = " and ('" . date('Y-m-d', strtotime($_SESSION['ToDate'])) . "')";
        } else {
            $todate = " and ('" . date('Y-m-d') . "')";
        }
        if ($_SESSION['disID'] != '' && $_SESSION['disID'] != 'All') {
            $distributorId = " and d.distributor_id='" . $_SESSION['disID'] . "'";
        } else if ($_SESSION['stockistId'] != "" && $_SESSION['stockistId'] != "0") {
            $distributorId = " and d.stockist_id='" . $_SESSION['stockistId'] . "'";
        }
        if ($_SESSION['Disstate'] != '') {
            $stateId = " and st.state_id='" . $_SESSION['Disstate'] . "'";
        }
        if ($_SESSION['Dislocation_id'] != '') {
            $location_id = " and ct.city_id='" . $_SESSION['Dislocation_id'] . "'";
        }
        //Added condition for role based access at brand lavel.
//        $RoleBrands = $this->getUserRoleBrand();
//        $brandCnd = '';
//        if(!empty($RoleBrands)){
//            $brandCnd = " and b.brand_id IN(".$RoleBrands.")";
//            $salesman ='';
//        }
        $where = " $fromdate  $todate $distributorId $stateId $location_id and d.distributor_name!='' and LOWER(ods.order_type) = 'no' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_order as ods
		left join table_distributors as d on d.distributor_id=ods.distributor_id 
		left join state as st on st.state_id=d.state 
		left join city as ct on ct.city_id=d.city  
		left join table_salesman as s on s.salesman_id=ods.salesman_id
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		left join table_tags as tg on tg.tag_id = ods.reason',
            "ods.order_id,ods.date_of_order,ods.time_of_order,ods.order_type,ods.reason,tg.tag_description as no_order_reason,ods.reason_remark,d.distributor_id,sz.zone_name,d.distributor_name,d.distributor_code,st.state_id,st.state_name,ct.city_name,s.salesman_id,s.salesman_name,s.employee_code", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributor_order as ods  
		left join table_distributors as d on d.distributor_id=ods.distributor_id 
		left join state as st on st.state_id=d.state 
		left join city as ct on ct.city_id=d.city 
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
		left join table_salesman as s on s.salesman_id=ods.salesman_id',
            "count(ods.order_id) AS total", '', $where);
//        echo '<pre>';
//        print_r($where);
////        print_r($auRecCount);
//        die(' die ehre');
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
                $targetBlank = '';
            } else {
                $targetBlank = "target='_blank'";
            }
            $image = '<a href="dis_order_image.php?ordId=' . base64_encode($auRec[$i]->order_id) . '" ' .
                $targetBlank .
                '>View Image</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($this->_changeDate($auRec[$i]->date_of_order))) . '"';
            $json .= ',"' . addslashes($auRec[$i]->time_of_order) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zone_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->no_order_reason) . '"';
            $json .= ',"' . addslashes($auRec[$i]->reason_remark) . '"';
            $json .= ',"' . addslashes($image) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showConsolidatedExpenseReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname) $sortname = 'sd.created';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromallownceList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromallownceList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToallownceList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToallownceList']));
        } else {
            $todate = date('Y-m-d');
        }
        $salCondi = $salesman;
        if (isset($_SESSION['allowncesalesmanID']) && !empty($_SESSION['allowncesalesmanID']) && (intval($_SESSION['allowncesalesmanID']) > 0)) {
            $salCondi = " AND sd.salesman_id = " . $_SESSION['allowncesalesmanID'];
        }
        $where = " (sd.app_date BETWEEN '" . $fromdate . "' AND '" . $todate . "') $salCondi ";
//        echo '<pre>';
//        print_r($where);
//        die(' die here');
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_salesman_allowance_details as sd
		left join table_salesman as s on s.salesman_id = sd.salesman_id 
		LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
		LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
		LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
		LEFT JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id 
		LEFT JOIN city as c on c.city_id=s.city
		LEFT JOIN table_location as c2 on c2.location_id=sd.city_id
		LEFT JOIN state AS st on st.state_id=s.state', "sd.*,st.state_name, c2.location_name AS allwn_city, s.salesman_name,s.employee_code,H.description AS des1, H2.description AS des2, S2.salesman_name AS rpt_to, c.city_name", '', $where . ' ' . $sort);
//        echo '<pre>';
//        print_r($auRec);
//        die(' die here');
        $allwsIdArr = [];
        if (is_array($auRec) && (count($auRec) > 0)) {
            foreach ($auRec as $key => $auRecData) {
                $allwsIdArr[] = $auRecData->allws_id;
            }
            $allwsIds = implode(',', $allwsIdArr);
// ============== main table dataset===============
            $SalesmanWiseDataArr = [];
            if (is_array($auRec) && (count($auRec) > 0)) {
                foreach ($auRec as $key => $Date) {
                    $SalesmanWiseDataArr[$Date->salesman_id]['allws_id'][] = $Date->allws_id;
//                    $SalesmanWiseDataArr[$Date->salesman_id]['app_date'][] = date('d-M-Y ', strtotime($Date->app_date));
//                    $SalesmanWiseDataArr[$Date->salesman_id]['created'][] = date('d-M-Y ', strtotime($Date->created));
                    $SalesmanWiseDataArr[$Date->salesman_id]['city'][] = $Date->allwn_city;
//                    $SalesmanWiseDataArr[$Date->salesman_id]['cmt'][] = $Date->cmt;
                    $SalesmanWiseDataArr[$Date->salesman_id]['salesman_name'] = $Date->salesman_name;
                    $SalesmanWiseDataArr[$Date->salesman_id]['employee_code'] = $Date->employee_code;
                    $SalesmanWiseDataArr[$Date->salesman_id]['des1'] = $Date->des1;
                    $SalesmanWiseDataArr[$Date->salesman_id]['des2'] = $Date->des2;
                    $SalesmanWiseDataArr[$Date->salesman_id]['rpt_to'] = $Date->rpt_to;
                    $SalesmanWiseDataArr[$Date->salesman_id]['state_name'] = $Date->state_name;
                    $SalesmanWiseDataArr[$Date->salesman_id]['city_name'] = $Date->city_name;
                    $SalesmanWiseDataArr[$Date->salesman_id]['photo_count'] = $Date->photo_count;
                }
//                echo "<pre>";
//                print_r($SalesmanWiseDataArr);
//                die(' die here 1');
            }
            $auRecDet = $this->_getSelectList2('table_salesman_allowance_mapping as sam
LEFT JOIN table_salesman_allowance_details as sad ON sad.allws_id = sam.allws_id
LEFT JOIN table_salesman_tags as st ON st.id = sam.tada_id', "sad.salesman_id,sam.allws_id,sam.tada_id,st.desc as exp_type,sam.allwns_amt,sam.remark", '', "sam.allws_id IN($allwsIds) ORDER BY sad.salesman_id ASC,sam.allws_id ASC, sam.tada_id ASC");
            $expTypeWiseAmountArr = [];
            $expTypeWiseRemarkArr = [];
            if (is_array($auRecDet) && (count($auRecDet) > 0)) {
                foreach ($auRecDet as $key2 => $auRecDetData) {
                    $expTypeWiseAmountArr[$auRecDetData->salesman_id][$auRecDetData->tada_id][] = $auRecDetData->allwns_amt;
//                    $expTypeWiseRemarkArr[$auRecDetData->salesman_id][$auRecDetData->tada_id][] = $auRecDetData->remark;
                }
            }
//            echo "<pre>";
//            print_r($SalesmanWiseDataArr);
//            print_r($expTypeWiseAmountArr);
//            print_r($expTypeWiseRemarkArr);
//            die(' die here 3');
            $getExpenseTypes = $this->_getSelectList('table_salesman_tags as s', 's.id,s.desc', '', " ORDER BY s.id ASC ");
//            $getExpenseTypes = $this->_getSelectList2('table_salesman_tags as s LEFT JOIN table_salesman_allowance_details as ts ON ts.allws_id = s.id','s.id,s.desc,ts.salesman_id',''," ORDER BY s.id ASC ");
            $expTypeArr = [];
            if (is_array($getExpenseTypes) && (count($getExpenseTypes) > 0)) {
                foreach ($getExpenseTypes as $key => $expData) {
                    $expTypeArr[$expData->id] = $expData->desc;
                }
            }
//            echo "<pre>";
//            print_r($expTypeArr);
//            die();
        }
//        $auRecCount=$this->_getSelectList('table_salesman_allowance_details as sd
//
//		left join table_salesman as s on s.salesman_id = sd.salesman_id
//
//		LEFT JOIN city as c on c.city_id=s.city
//
//		LEFT JOIN table_location as c2 on c2.location_id=sd.city_id
//
//		LEFT JOIN state AS st on st.state_id=s.state','COUNT(sd.allws_id) AS total','',$where.' '.$sort);
        $auRecCount = $this->_getSelectList('table_salesman_allowance_details as sd
		LEFT JOIN table_salesman as s on s.salesman_id = sd.salesman_id 
		LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
		LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
		LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
		LEFT JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id 
		LEFT JOIN city as c on c.city_id=s.city
		LEFT JOIN table_location as c2 on c2.location_id=sd.city_id
		LEFT JOIN state AS st on st.state_id=s.state', "COUNT(DISTINCT sd.salesman_id) AS total", '', $where);
//        print_r($auRecCount);
//        die();
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r", "\t", "'");
        $emptyValue = '<p style="text-align: center;font-size: 30px;">-</p>';
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target="_blank"';
        }
        foreach ($SalesmanWiseDataArr as $salesmanId => $salesmanWiseData) {
//            $appDateArr = [];
//            $createdDateArr = [];
            $cityArr = [];
//            $commentArr = [];
//            $appDateArr = (is_array($SalesmanWiseDataArr[$salesmanId]['app_date']) && (count($SalesmanWiseDataArr[$salesmanId]['app_date']) > 0)) ? array_unique($SalesmanWiseDataArr[$salesmanId]['app_date']) : [];
//            $allw_date = '';
//            if(is_array($appDateArr) && (count($appDateArr) > 0)){
//                asort($appDateArr);
//                $allw_date = implode(' | ',$appDateArr);
//            }
//            $createdDateArr = (is_array($SalesmanWiseDataArr[$salesmanId]['created']) && (count($SalesmanWiseDataArr[$salesmanId]['created']) > 0)) ? array_unique($SalesmanWiseDataArr[$salesmanId]['created']) : [];
//            $created_date = '';
//            if(is_array($createdDateArr) && (count($createdDateArr) > 0)){
//                asort($createdDateArr);
//                $created_date = implode(' | ',$createdDateArr);
//            }
            $cityArr = (is_array($SalesmanWiseDataArr[$salesmanId]['city']) && (count($SalesmanWiseDataArr[$salesmanId]['city']) > 0)) ? array_unique($SalesmanWiseDataArr[$salesmanId]['city']) : [];
            $wrkingCty = '';
            if (is_array($cityArr) && (count($cityArr) > 0)) {
                asort($cityArr);
                $wrkingCty = implode(' | ', $cityArr);
            }
//            $commentArr = (is_array($SalesmanWiseDataArr[$salesmanId]['cmt']) && (count($SalesmanWiseDataArr[$salesmanId]['cmt']) > 0)) ? array_unique($SalesmanWiseDataArr[$salesmanId]['cmt']) : [];
//            $commentArr = array_filter($commentArr, function($value) { return !is_null($value) && $value !== ''; });
//            $comments = '';
//            if(is_array($commentArr) && (count($commentArr) > 0)){
//                asort($commentArr);
//                $comments = implode(' | ',$commentArr);
//            }
//            echo '<pre>';
//            print_r($salesmanWiseData);
//            print_r($commentArr);
//            echo '<br>';
//            print_r($created_date);
//            echo '<br>';
//            print_r($wrkingCty);
//            echo '<br>';
//            die(' die in loop');
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $salesmanId . '",';
            $json .= '"cell":["' . $salesmanWiseData['salesman_name'] . '"';
            $json .= ',"' . $salesmanWiseData['employee_code'] . '"';
            $json .= ',"' . $salesmanWiseData['des1'] . '"';
            $json .= ',"' . $salesmanWiseData['rpt_to'] . '"';
            $json .= ',"' . $salesmanWiseData['des2'] . '"';
            $json .= ',"' . $salesmanWiseData['state_name'] . '"';
            $json .= ',"' . $salesmanWiseData['city_name'] . '"';
//            $json .= ',"'.$comments. '"';
//            $json .= ',"'.$allw_date. '"';
            $json .= ',"' . $wrkingCty . '"';
            $ttlAmt = 0;
            if (is_array($expTypeArr) && (count($expTypeArr) > 0)) {
                foreach ($expTypeArr as $expTypeId => $expTypeName) {
                    //amount & photo
                    if (is_array($expTypeWiseAmountArr[$salesmanId][$expTypeId]) && (count($expTypeWiseAmountArr[$salesmanId][$expTypeId]) > 0)) {
                        $totalExp = array_sum($expTypeWiseAmountArr[$salesmanId][$expTypeId]);
                        $ttlAmt += $totalExp;
                        $json .= ',"' . addslashes(number_format($totalExp, 2)) . '"';
                        if (is_array($SalesmanWiseDataArr[$salesmanId]['allws_id']) && (count($SalesmanWiseDataArr[$salesmanId]['allws_id']) > 0)) {
                            $salWiseAllwsIds = implode(',', $SalesmanWiseDataArr[$salesmanId]['allws_id']);
                            $url = '<a href="view_con_exp_photo.php?expids=' . $salWiseAllwsIds . '&tid=' . $expTypeId . '" ' . $targetBlank . '>View Photo</a>';
                            $json .= ',"' . addslashes($url) . '"';
                        } else {
                            $json .= ',"' . addslashes($emptyValue) . '"';
                        }
                    } else {
                        $json .= ',"' . addslashes($emptyValue) . '"';
                        $json .= ',"' . addslashes($emptyValue) . '"';
                    }
                    //photo
//                    $url = '';
//                    if(is_array($SalesmanWiseDataArr[$salesmanId]['allws_id']) && (count($SalesmanWiseDataArr[$salesmanId]['allws_id']) > 0)) {
//                        $salWiseAllwsIds = implode(',',$SalesmanWiseDataArr[$salesmanId]['allws_id']);
//                        $url = '<a href="view_con_exp_photo.php?expids=' . $salWiseAllwsIds . '&tid=' . $expTypeId . '" ' . $targetBlank . '>View Photo</a>';
//                        $json .= ',"' . addslashes($url). '"';
//                    }
//                    else{
//                        $json .= ',"' . addslashes($emptyValue). '"';
//
//                    }
                    //remarks
//                    if (is_array($expTypeWiseRemarkArr[$salesmanId][$expTypeId]) && (count($expTypeWiseRemarkArr[$salesmanId][$expTypeId]) > 0)) {
//                        $remrkArr = array_unique($expTypeWiseRemarkArr[$salesmanId][$expTypeId]);
//                        $remarkArr = array_filter($remrkArr, function($value) { return !is_null($value) && $value !== ''; });
//                        $remarks = '';
//                        if(is_array($remarkArr) && (count($remarkArr) > 0)){
//                            asort($remarkArr);
//                            $remarks = implode(' | ',$remarkArr);
//                        }
//
//                        $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ',$remarks))) . '"';
//                    }
//                    else{
//                        $json .= ',"' . addslashes($emptyValue). '"';
//
//                    }
                }
            }
            $json .= ',"' . addslashes(number_format($ttlAmt, 2)) . '"';
            $json .= ',"' . ucwords(addslashes($salesmanWiseData['photo_count'])) . '"]';
//            $json .= ',"'.$created_date.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    public function getPriorityNorms($retailerId, $mgbDate, $state, $city)
    {
        $normsList = $this->_getSelectList2('table_mgb_norms as tm
									left join table_item as i on i.item_id = tm.item_id',
            'tm.*, i.item_name,i.item_code', '',
            " tm.retailer_id=" . $retailerId . " and tm.start_date <='" . $mgbDate . "' AND tm.end_date >='" . $mgbDate . "' and tm.norms_status='A'
									ORDER BY i.item_id ASC");
        if (count($normsList) <= 0 && !is_array($normsList)) {
            $normsList = $this->_getSelectList2('table_mgb_norms as tm
									left join table_item as i on i.item_id = tm.item_id',
                'tm.*, i.item_name,i.item_code', '',
                " tm.location_id=" . $city . " and tm.start_date <='" . $mgbDate . "' AND tm.end_date >='" . $mgbDate . "' and tm.norms_status='A'
									ORDER BY i.item_id ASC");
            if (count($normsList) <= 0 && !is_array($normsList)) {
                $normsList = $this->_getSelectList2('table_mgb_norms as tm
									left join table_item as i on i.item_id = tm.item_id',
                    'tm.*, i.item_name,i.item_code', '',
                    " tm.state_id=" . $state . " and tm.start_date <='" . $mgbDate . "' AND tm.end_date >='" . $mgbDate . "' and tm.norms_status='A'
									ORDER BY i.item_id ASC");
                if (count($normsList) <= 0 && !is_array($normsList)) {
                    $normsList = $this->_getSelectList2('table_mgb_norms as tm
										left join table_item as i on i.item_id = tm.item_id',
                        'tm.*, i.item_name,i.item_code', '',
                        " tm.state_id=0 and tm.location_id=0 and tm.retailer_id=0 and tm.item_id !=0 and tm.start_date <='" . $mgbDate . "' AND tm.end_date >='" . $mgbDate . "' and tm.norms_status='A'
										ORDER BY i.item_id ASC");
                }
            }
        }
        return $normsList;

    }

    //Todo Start: Sagar: 7th Dec 2022 : Survey Question Answer
    function deleteSurveyQuestion($id)
    {
        if ($id != "") {
            $condition = " WHERE sur_que_id IN ($id)";
            $this->mysql_query('Delete FROM survey_question' . $condition);
            $ansData = $this->_getSelectList2("survey_answer as a
                left join survey_question as s on s.show_on_parent_que_ans = a.sur_ans_id", "group_concat(DISTINCT a.sur_ans_id) as sur_ans_id, group_concat(DISTINCT s.sur_que_id) as sur_que_id", "", " a.sur_que_id IN(" . $id . ") ");
            if (is_array($ansData) && sizeof($ansData) > 0) {
                $this->deleteSurveyAnswer($ansData[0]->sur_ans_id);
                $this->deleteSurveyQuestion($ansData[0]->sur_que_id);
            }
        } else {
            return 1;
        }
        return 1;
    }

    function deleteSurveyAnswer($str)
    {
        $condition = " WHERE sur_ans_id IN ($str)";
        $this->mysql_query('Delete FROM survey_answer' . $condition);
        return true;
    }

    function getQuestionTypeDesc($value)
    {
        switch ($value) {
            case '1':
                $qusType = 'Image';
                break;

            case '2':
                $qusType = 'Text';
                break;

            case '3':
                $qusType = 'Multiple Choice';
                break;
            case '4':
                $qusType = 'Single Choice';
                break;
        }
        return $qusType;
    }

    function showSurveyQuestion()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'sq.sur_que_id';
        if (!$sortorder)
            $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " sq.parent_sur_que_id=0 AND sq.show_on_parent_que_ans=0 ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('survey_question as sq 
LEFT JOIN table_ques_ret_type_mapping as rtm ON rtm.sur_que_id = sq.sur_que_id
LEFT JOIN table_retailer_type_master as rt on rt.type_id = rtm.retailer_type_id
LEFT JOIN table_ques_dist_type_mapping as dtm ON dtm.sur_que_id = sq.sur_que_id
LEFT JOIN table_distributor_type_master as dt ON dt.dis_type_id = dtm.distributor_type_id', "sq.*,GROUP_CONCAT(DISTINCT rt.type_name SEPARATOR ', ') as ret_type, GROUP_CONCAT(DISTINCT dt.dis_type_name SEPARATOR ', ') as dist_type", $rp, $where . ' GROUP BY sq.sur_que_id,rtm.sur_que_id,dtm.sur_que_id ' . $sort);

        $auRecCount = $this->_getSelectList('survey_question as sq', 'COUNT(sq.sur_que_id) AS total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"survey_questions.php?statusId=' . $auRec[$i]->sur_que_id . '&value=' . $sts . '\">' . $sts . '</a>';

            $actionAddAns = "<a href=\"answer_based_question.php?id=" . $auRec[$i]->sur_que_id . "\">Add Answer Based Question</a>";
            $qusType = $this->getQuestionTypeDesc($auRec[$i]->sur_ans_type_id);

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->sur_que_id . '",';
            $json .= '"cell":["' . addslashes(substr($auRec[$i]->question_en, 0, 90)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ret_type) . '"';
            $json .= ',"' . addslashes($auRec[$i]->dist_type) . '"';
            $json .= ',"' . addslashes(date('d M Y', strtotime($auRec[$i]->from_date))) . '"';
            $json .= ',"' . addslashes(date('d M Y', strtotime($auRec[$i]->to_date))) . '"';
            $json .= ',"' . addslashes($qusType) . '"';
            $json .= ',"' . $sts . '"';
            $json .= ',"' . addslashes($actionAddAns) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo End: Sagar: 7th Dec 2022 : Survey Question Answer


    function showItemDiscount()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'item_code';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $where = " ids.account_id='" . $_SESSION['accountId'] . "' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_item_discount as ids 
		left join table_item as i on i.item_id=ids.item_id', "ids.*,i.item_code,i.item_name", $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList('table_item_discount as ids 
		left join table_item as i on i.item_id=ids.item_id', 'count(ids.id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_code)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->discount_percentage)) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->created_on)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


    //Todo Start : Sagar : 16th Dec 2022 Retailer & Distributor Mapping
    function showRetailerDistributorMapping()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'd.distributor_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " d.status = 'A' ";
        if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_distributors as d 
LEFT JOIN table_retailer as r ON r.distributor_id = d.distributor_id AND r.status = "A"', "d.distributor_id,d.distributor_code,d.distributor_name,COUNT(DISTINCT r.retailer_id) as ret_count", $rp, $where . ' GROUP BY d.distributor_id,r.distributor_id ' . $sort);

        $auRecCount = $this->_getSelectList('table_distributors as d', "COUNT(d.distributor_id) as total", '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }

        for ($i = 0; $i < count($auRec); $i++) {
            $viewLink = '<a ' . $targetBlank . ' href=\"view_ret_dist_mapping.php?id=' . $auRec[$i]->distributor_id . '\">View</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ret_count) . '"';
            $json .= ',"' . $viewLink . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showRetailersMappedWithDistributor($distId)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.retailer_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " r.distributor_id = $distId AND r.status = 'A' ";

        if ($query) $where .= " $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_retailer as r', "r.retailer_id,r.retailer_name,r.retailer_code", $rp, $where . ' ' . $sort);

        $auRecCount = $this->_getSelectList('table_retailer as r', "COUNT(r.retailer_id) as total", '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->retailer_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : Sagar : 16th Dec 2022 Retailer & Distributor Mapping

// Todo Start : Jatin : 4th Jan 2023 Consumer Serial Number scan report

    function consumerSerialNumberScanReport($salesman)
    {
        //$salesman = "";
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname)
            $sortname = 'tsc.appDate';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY tsc.appDate desc";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $condition = '';
        if (isset($_SESSION['retailer_id']) && $_SESSION['retailer_id'] != '' && $_SESSION['retailer_id'] != 'all') {
            $condition .= " tsc.retailer_id = " . $_SESSION['retailer_id'] . " AND ";
        }
        if (isset($_SESSION['SalOrderList']) && $_SESSION['SalOrderList'] != '') {
            $condition .= " ts.salesman_id = " . $_SESSION['SalOrderList'] . " AND ";
        }
        if (isset($_SESSION['distributor_id']) && $_SESSION['distributor_id'] != '' && $_SESSION['distributor_id'] != 'all') {
            $condition .= " td.distributor_id = " . $_SESSION['distributor_id'] . " AND ";
        }
        if ($_SESSION['FromProductList'] != '') {
            $fromdate = "  tsc.appDate  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
        } else {
            $fromdate = " tsc.appDate  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToProductList'] != '') {
            $todate = " tsc.appDate <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
        } else {
            $todate = "  tsc.appDate <= '" . date('Y-m-d') . "'";
        }
        $where = " tsc.account_id='" . $_SESSION['accountId'] . "' and $condition $fromdate $todate ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_consumer_scan_activity AS tsc LEFT JOIN table_retailer AS tr ON  tr.retailer_id = tsc.retailer_id LEFT JOIN table_distributors AS td ON td.distributor_id = tr.distributor_id LEFT JOIN table_salesman AS ts ON ts.salesman_id = td.salesman_id',
            'tsc.*, td.distributor_name, td.distributor_code , tr.retailer_name , tr.retailer_code , ts.salesman_name , ts.employee_code', $rp, $where . $sort, '');

        $total = $this->_getSelectList2('table_consumer_scan_activity AS tsc LEFT JOIN table_retailer AS tr ON tr.retailer_id = tsc.retailer_id LEFT JOIN table_distributors AS td ON td.distributor_id = tr.distributor_id LEFT JOIN table_salesman AS ts ON ts.salesman_id = td.salesman_id',
            "COUNT(*) AS total", '', $where . $sort, '');

        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $scanBy = '';
            $appDate = $_objAdmin->_changeDate($auRec[$i]->appDate);
            if ($auRec[$i]->scan_by == 'S') {
                $scanBy = $this->AliaseUsers['salesman'];
            } else if ($auRec[$i]->scan_by == 'R') {
                $scanBy = $this->AliaseUsers['retailer'];
            } else if ($auRec[$i]->scan_by == 'D') {
                $scanBy = $this->AliaseUsers['distributor'];
            }
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $serial_number_string = preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace(array('\t', '\n', '	', ','), ' ', $auRec[$i]->serial_number_string));
            $comment = preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace(array('\t', '\n', '	', ','), ' ', $auRec[$i]->comment));
            $viewPhoto = "";
            if (!empty($auRec[$i]->photo)) {
                $viewPhoto = '<a href="rotate_img.php?c_id=' . base64_encode($auRec[$i]->id) . '">View Image</a>';
            }
            $json .= '"cell":["' . (addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->consumer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->consumer_email)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->consumer_phone)) . '"';
            $json .= ',"' . ucwords(addslashes($scanBy)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->serial_number)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->status)) . '"';
            $json .= ',"' . ucwords(addslashes($serial_number_string)) . '"';
            $json .= ',"' . ucwords(addslashes($comment)) . '"';
            $json .= ',"' . ucwords(addslashes($appDate)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->appTime)) . '"';
            $json .= ',"' . ucwords(addslashes($viewPhoto)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDisCreditDebitNote($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_note desc';
        if (!$sortname)
            $sortname = 'date_of_note';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $qtype = $_REQUEST['qtype'];
        if (strtolower($_REQUEST['query']) == 'credit') {
            $query = 'C';
        } elseif (strtolower($_REQUEST['query']) == 'debit') {
            $query = 'D';
        } else {
            $query = $_REQUEST['query'];
        }

        if ($_SESSION['userLoginType'] == 7 && $_SESSION['stockistId'] > 0) {
            $stockist_id = " AND o.stockist_id =" . $_SESSION['stockistId'];
        }
        if ($_SESSION['FromAttList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromAttList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToAttList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToAttList']));
        } else {
            $todate = date('Y-m-d');
        }
//        $where = "  O.date_of_note BETWEEN '" . $fromdate . "' AND '" . $todate . "' $stockist_id  $orderby";
        if ($query)
            $where .= "  $qtype LIKE '%$query%' ";

        //        $auRec = $this->_getSelectList('table_dis_credit_debit_note AS O
//	LEFT JOIN table_distributors AS D ON O.distributor_id = D.distributor_id
//  	left join table_stockist as R on R.stockist_id = O.stockist_id
//  	left join table_tags AS T on T.tag_id = O.tag_id
//  	', " O.*,D.distributor_name, R.stockist_name, T.tag_description, D.distributor_code, R.stockist_code  ", $rp, $where . $sort, '');
//

        $auRec = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Sales Return' as note_type,substr(o.bill_no, -10) as document_no
	,o.bill_date,o.time_of_order as time_of_note ,o.due_date, 
	o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.acc_total_invoice_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.bill_date as document_date,D.distributor_name, R.stockist_name, 'Sales Return CN' as tag_description, D.distributor_code, R.stockist_code,o.date_of_order as date_of_note ,'' as note_status ,
	case when o.clearing_status ='' Then 'Unadjusted' 
	     when o.clearing_status ='Full' Then 'Fully Adjusted'
	     when o.clearing_status ='Partial' Then 'Partially Adjusted'
	     ELSE o.clearing_status 
	End as clearing_status
	FROM table_distributor_invoice as o 
	left join table_distributor_payment_received as p on p.return_order_id = o.invoice_id 
	LEFT JOIN table_distributors AS D ON o.distributor_id = D.distributor_id
  	left join table_stockist as R on R.stockist_id = o.stockist_id
  	left join table_tags AS T on T.tag_id = o.tag_id
	WHERE o.order_type='Return' AND o.order_for='D' AND o.invoice_status='A' and o.account_id ='"
            . $_SESSION['accountId'] . "'	AND o.order_status='D' and o.date_of_order BETWEEN '" . $fromdate . "' AND '" .
            $todate . "' $stockist_id
	Group by o.invoice_id order by id desc)
	
	Union
	
	(SELECT o.note_id as id, o.note_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,o.time_of_note,
	o.due_date, o.total_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.date_of_note as document_date,D.distributor_name, R.stockist_name, T.tag_description, D.distributor_code, R.stockist_code,o.date_of_note ,o.note_status ,
	case when o.clearing_status ='' Then 'Unadjusted' 
	     when o.clearing_status ='Full' Then 'Fully Adjusted'
	     when o.clearing_status ='Partial' Then 'Partially Adjusted'
	     ELSE o.clearing_status 
	End as clearing_status
	FROM table_dis_credit_debit_note as o 
	left join table_distributor_payment_received as p on p.credit_note_id = o.note_id 
	LEFT JOIN table_distributors AS D ON o.distributor_id = D.distributor_id
  	left join table_stockist as R on R.stockist_id = o.stockist_id
  	left join table_tags AS T on T.tag_id = o.tag_id
	WHERE  o.account_id ='"
            . $_SESSION['accountId'] . "' and o.date_of_note BETWEEN '" . $fromdate . "' AND '" . $todate . "' $stockist_id
	 Group by o.note_id)) as tm", "tm.*", $rp, $where . '', ' order by id desc');


//        $auRecCount = $this->_getSelectList('table_dis_credit_debit_note AS O
//	LEFT JOIN table_distributors AS D ON O.distributor_id = D.distributor_id
//  	left join table_stockist as R on R.stockist_id = O.stockist_id
//  	left join table_tags AS T on T.tag_id = O.tag_id', 'COUNT(*) AS total', '', $where);

        $auRecCount = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Sales Return' as doc_type,substr(o.bill_no, -10) as document_no
	,o.bill_date,o.time_of_order as time_of_note,o.due_date, 
	o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.acc_total_invoice_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.bill_date as document_date,D.distributor_name, R.stockist_name, 'Sales Return CN' as tag_description, D.distributor_code, R.stockist_code,'' as note_status 
	FROM table_distributor_invoice as o 
	left join table_distributor_payment_received as p on p.return_order_id = o.invoice_id 
	LEFT JOIN table_distributors AS D ON o.distributor_id = D.distributor_id
  	left join table_stockist as R on R.stockist_id = o.stockist_id
  	left join table_tags AS T on T.tag_id = o.tag_id
	WHERE o.order_type='Return' AND o.order_for='D' AND o.invoice_status='A' and o.account_id ='"
            . $_SESSION['accountId'] . "'
	AND o.order_status='D' and o.date_of_order BETWEEN '" . $fromdate . "' AND '" . $todate . "' $stockist_id
	 Group by o.invoice_id)
	
	Union
	
	(SELECT o.note_id as id, 'CN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,o.time_of_note,
	o.due_date, o.total_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.date_of_note as document_date,D.distributor_name, R.stockist_name, T.tag_description, D.distributor_code, R.stockist_code ,o.note_status
	FROM table_dis_credit_debit_note as o 
	left join table_distributor_payment_received as p on p.credit_note_id = o.note_id 
	LEFT JOIN table_distributors AS D ON o.distributor_id = D.distributor_id
  	left join table_stockist as R on R.stockist_id = o.stockist_id
  	left join table_tags AS T on T.tag_id = o.tag_id
	WHERE  o.account_id ='"
            . $_SESSION['accountId'] . "' and  o.date_of_note BETWEEN '" . $fromdate . "' AND '" . $todate . "' $stockist_id
	Group by o.note_id)) as tm", "count(*) as total", $rp, $where . '', '');

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $viewInvoice = $viewPrintInvoice = '';
            if ($auRec[$i]->note_type == 'C') {
                $note_type = "Credit";
                $type = '';
                $note_id = $auRec[$i]->id;
            } else if ($auRec[$i]->note_type == 'D') {
                $note_type = "Debit";
                $type = '';
                $note_id = $auRec[$i]->id;
            } else {
                $note_type = "Sales Return";
                $type = "&type=1";
                $note_id = '';
            }
            $note_status = $color = '';
            if ($auRec[$i]->note_status == 'C') {
                $note_status = "Cancelled Note";
                $color = 'C';
            } else {
                $note_status = "Active";
                $viewInvoice = '<a target=\"blank\" href=\"dis_cn_pdf.php?id=' . base64_encode($auRec[$i]->id) . $type
                    . '\">View</a>';
                $viewPrintInvoice = '<a target=\"blank\" href=\"dis_cn_print.php?id=' . base64_encode
                    ($auRec[$i]->id) . $type . '\">Print</a>';
            }
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $note_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . $viewInvoice . '"';
            $json .= ',"' . $viewPrintInvoice . '"';
            $json .= ',"' . $this->_changeDate($auRec[$i]->date_of_note) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_note)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->document_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';
            $json .= ',"' . ucwords(addslashes($note_type)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(floor($auRec[$i]->total_amount), 2))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->description))) . '"';
            // $json .= ',"' . ucwords(addslashes($auRec[$i]->remarks)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->clearing_status)) . '"';
            $json .= ',"' . ucwords(addslashes($note_status)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
// Todo End  : Jatin : 4th Jan 2023 Consumer Serial number scan report

// Todo Start : Jatin : 5th Jan 2023 : Distributor type list master
    function showDistributortypeList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'dis_type_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasDisType']) && $_SESSION['MasDisType'] != 'all' && $_SESSION['MasDisType'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasDisType'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " account_id='" . $_SESSION['accountId'] . "' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_type_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributor_type_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"distributor_type.php?dis_id=' . $auRec[$i]->dis_type_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->dis_type_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->dis_type_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->dis_type_code) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function updateDistributorType($id)
    {
        $data['dis_type_name'] = mysql_escape_string(trim($_POST['dis_type_name']));
        $data['dis_type_code'] = mysql_escape_string(trim($_POST['dis_type_code']));
        $data['last_update_date'] = date('Y-m-d');
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_distributor_type_master', " dis_type_id=" . $id);
        return $id;
    }

    function addDistributorType()
    {
        $data['dis_type_name'] = mysql_escape_string(trim($_POST['dis_type_name']));
        $data['dis_type_code'] = mysql_escape_string(trim($_POST['dis_type_code']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_date'] = date('Y-m-d');
        $data['last_update_date'] = date('Y-m-d');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_distributor_type_master');
        return $id;
    }
// Todo End : Jatin : 5th Jan 2023 : Distributor type list master

    //Todo Start:Sagar : 4th Jan 2023 : Retailer Type Wise Item Price
    function showRetailerTypeItemPrice()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname) $sortname = 'i.item_name';
        if (!$sortorder) $sortorder = 'ASC';

        $sort = " ORDER BY $sortname $sortorder";

        if (!$page) $page = 1;
        if (!$rp) $rp = 50;

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasRetTypeItmPrice']) && $_SESSION['MasRetTypeItmPrice'] != 'all' && $_SESSION['MasRetTypeItmPrice'] != '') {
            $statusCondi = " AND rtim.status ='" . $_SESSION['MasRetTypeItmPrice'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter

        $where = " c.status='A' AND i.status='A' AND i.account_id='" . $_SESSION['accountId'] . "' AND i.item_type='I' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_retailer_type_item_price_mapping as rtim
			left join table_item as i ON i.item_id = rtim.item_id
			left join table_retailer_type_master as rt ON rt.type_id = rtim.retailer_type_id 
			left join table_category as c on i.category_id = c.category_id 
			left join table_brands as b on b.brand_id=i.brand_id',
            "rtim.*,i.item_name,i.item_code,c.category_name,b.brand_name,rt.type_name", $rp, " $where $sort ");

        $auRecCount = $this->_getSelectList2('table_retailer_type_item_price_mapping as rtim
			left join table_item as i ON i.item_id = rtim.item_id
			left join table_retailer_type_master as rt ON rt.type_id = rtim.retailer_type_id 
			left join table_category as c on i.category_id = c.category_id 
			left join table_brands as b on b.brand_id=i.brand_id ',
            'count(rtim.mapping_id) as total', '', " $where ");

        $total = $auRecCount[0]->total;

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

//        if((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
//            $targetBlank = '';
//        }
//        else{
//            $targetBlank = 'target=\"_blank\"';
//        }

        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";

            $status = '<a href=\"ret_type_item_price.php?stid=' . $auRec[$i]->mapping_id . '&value=' . $status . '\">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";

            $json .= '"id":"' . $auRec[$i]->mapping_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->type_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->price) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addRetailerTypeItemPrice()
    {
        $data['retailer_type_id'] = mysql_escape_string($_POST['retailer_type_id']);
        $data['item_id'] = mysql_escape_string($_POST['item_id']);
        $data['price'] = mysql_escape_string($_POST['price']);
        $data['status'] = mysql_escape_string('A');
        $data['created_at'] = date('Y-m-d H:i:s');
        $data['updated_at'] = date('Y-m-d H:i:s');
        $mapping_id = $this->_dbInsert($data, 'table_retailer_type_item_price_mapping');
        return $mapping_id;
    }

    function updateRetailerTypeItemPrice($id)
    {
        $data['retailer_type_id'] = mysql_escape_string($_POST['retailer_type_id']);
        $data['item_id'] = mysql_escape_string($_POST['item_id']);
        $data['price'] = mysql_escape_string($_POST['price']);
        $data['status'] = mysql_escape_string('A');
        $data['updated_at'] = date('Y-m-d H:i:s');
        $this->_dbUpdate2($data, 'table_retailer_type_item_price_mapping', " mapping_id = " . $id);
        return $id;
    }
    //Todo End:Sagar : 4th Jan 2023 : Retailer Type Wise Item Price


    //Todo Start:Sagar : 5th Jan 2023 : Distributor Type Wise Item Price
    function showDistributorTypeItemPrice()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname) $sortname = 'i.item_name';
        if (!$sortorder) $sortorder = 'ASC';

        $sort = " ORDER BY $sortname $sortorder";

        if (!$page) $page = 1;
        if (!$rp) $rp = 50;

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasDisTypeItmPrice']) && $_SESSION['MasDisTypeItmPrice'] != 'all' && $_SESSION['MasDisTypeItmPrice'] != '') {
            $statusCondi = " AND  rtim.status ='" . $_SESSION['MasDisTypeItmPrice'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter

        $where = " c.status='A' AND i.status='A' AND i.account_id='" . $_SESSION['accountId'] . "' AND i.item_type='I' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_distributor_type_item_price_mapping as rtim
			left join table_item as i ON i.item_id = rtim.item_id
			left join table_distributor_type_master as rt ON rt.dis_type_id = rtim.distributor_type_id 
			left join table_category as c on i.category_id = c.category_id 
			left join table_brands as b on b.brand_id=i.brand_id',
            "rtim.*,i.item_name,i.item_code,c.category_name,b.brand_name,rt.dis_type_name", $rp, " $where $sort ");

        $auRecCount = $this->_getSelectList2('table_distributor_type_item_price_mapping as rtim
			left join table_item as i ON i.item_id = rtim.item_id
			left join table_distributor_type_master as rt ON rt.dis_type_id = rtim.distributor_type_id 
			left join table_category as c on i.category_id = c.category_id 
			left join table_brands as b on b.brand_id=i.brand_id ',
            'count(rtim.mapping_id) as total', '', " $where ");

        $total = $auRecCount[0]->total;

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

//        if((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
//            $targetBlank = '';
//        }
//        else{
//            $targetBlank = 'target=\"_blank\"';
//        }

        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";

            $status = '<a href=\"distributor_type_wise_item_price.php?stid=' . $auRec[$i]->mapping_id . '&value=' . $status . '\">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";

            $json .= '"id":"' . $auRec[$i]->mapping_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->dis_type_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->price) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addDistributorTypeItemPrice()
    {
        $data['distributor_type_id'] = mysql_escape_string($_POST['distributor_type_id']);
        $data['item_id'] = mysql_escape_string($_POST['item_id']);
        $data['price'] = mysql_escape_string(trim($_POST['price']));
        $data['status'] = mysql_escape_string('A');
        $data['created_at'] = date('Y-m-d H:i:s');
        $data['updated_at'] = date('Y-m-d H:i:s');
        $mapping_id = $this->_dbInsert($data, 'table_distributor_type_item_price_mapping');
        return $mapping_id;
    }

    function updateDistributorTypeItemPrice($id)
    {
        $data['distributor_type_id'] = mysql_escape_string($_POST['distributor_type_id']);
        $data['item_id'] = mysql_escape_string($_POST['item_id']);
        $data['price'] = mysql_escape_string(trim($_POST['price']));
        $data['status'] = mysql_escape_string('A');
        $data['updated_at'] = date('Y-m-d H:i:s');
        $this->_dbUpdate2($data, 'table_distributor_type_item_price_mapping', " mapping_id = " . $id);
        return $id;
    }
    //Todo End:Sagar : 4th Jan 2023 : Distributor Type Wise Item Price


    // Todo Start : Jatin : 16 Jan 2023 : Show User Device Id Listing
    function showSalesmanDeviceList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname) $sortname = 'ts.salesman_name';
        if (!$sortorder) $sortorder = 'ASC';

        $sort = " ORDER BY $sortname $sortorder";

        if (!$page) $page = 1;
        if (!$rp) $rp = 50;

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = '';
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_devices as td 
        left join table_salesman as ts on ts.salesman_id = td.salesman_id
        left join table_web_users as w on w.salesman_id = td.salesman_id',
            "td.*,ts.salesman_name,ts.employee_code,ts.session_id,w.username ", $rp, " $where $sort ");

        $auRecCount = $this->_getSelectList('table_devices as td 
        left join table_salesman as ts on ts.salesman_id = td.salesman_id
        left join table_web_users as w on w.salesman_id = td.salesman_id',
            'COUNT(td.id) as total', '', " $where ");

        $total = $auRecCount[0]->total;

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ((isset($auRec[$i]->device_id) && !empty($auRec[$i]->device_id)) || (isset($auRec[$i]->session_id) && !empty($auRec[$i]->session_id))) {
                $link = '<a style=\"cursor: pointer;color: #238eef;text-decoration: none;font-size: 15px;font-weight: 900;\" href=\"user_device_list.php?dev_id=' . base64_encode($auRec[$i]->id) . '\">Clear</a>';
            } else {
                $link = '<a style=\"cursor:pointer;color:green;text-decoration: none;font-size: 15px;font-weight: 900;\" href=\"javascript:void(0)\">Cleared</a>';
            }

            if ($rc) $json .= ",";
            $json .= "\n{";

            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->device_id) . '"';
            $json .= ',"' . $link . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function updateDeviceId($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
//        $data['salesman_id'] = mysql_escape_string($_POST['salesman_id']);
        $data['device_id'] = mysql_escape_string($_POST['device_id']);

        $this->_dbUpdate($data, 'table_devices', " id=" . $id);
        return $id;
    }
    // Todo End : Jatin : 16 Jan 2023 : Show User Device Id Listing


    // Todo Start : Jatin : 16 Jan 2023 : Pernod Answer based Questions

    function addSurveyQuestion()
    {
        $data = [];
        $data['account_id'] = intval($_SESSION['accountId']);
        $data['parent_sur_que_id'] = intval($_POST['parent_sur_que_id']);
        $data['show_on_parent_que_ans'] = $_POST['show_on_parent_que_ans'];
        $data['sur_ans_type_id'] = intval($_POST['sur_ans_type_id']);
        $data['question_en'] = mysql_escape_string(trim($_POST['question_en']));
        $data['sort_order'] = mysql_escape_string(trim($_POST['order']));
        $data['from_date'] = mysql_escape_string(date('Y-m-d', strtotime($_POST['from'])));
        $data['to_date'] = mysql_escape_string(date('Y-m-d', strtotime($_POST['to'])));
        $data['status'] = 'A';
        $data['created_on'] = date('Y-m-d H:i:s');

        $web_id = $this->_dbInsert($data, 'survey_question');

        if ($web_id > 0) {
            if (is_array($_POST['retailer_type_id']) && (count($_POST['retailer_type_id']) > 0)) {
                foreach ($_POST['retailer_type_id'] as $key1 => $retTypeId) {
                    $data1 = [];
                    $data1['sur_que_id'] = $web_id;
                    $data1['retailer_type_id'] = $retTypeId;
                    $data1['created_at'] = date('Y-m-d H:i:s');
                    $this->_dbInsert($data1, 'table_ques_ret_type_mapping');
                }
            }

            if (is_array($_POST['distributor_type_id']) && (count($_POST['distributor_type_id']) > 0)) {
                foreach ($_POST['distributor_type_id'] as $key2 => $distTypeId) {
                    $data1 = [];
                    $data1['sur_que_id'] = $web_id;
                    $data1['distributor_type_id'] = $distTypeId;
                    $data1['created_at'] = date('Y-m-d H:i:s');
                    $this->_dbInsert($data1, 'table_ques_dist_type_mapping');
                }
            }


            if ($_POST['sur_ans_type_id'] == 1) {
                // $ansData['sur_que_id'] = $web_id;
                // $ansData['answer_en'] = "Yes";
                // $this->_dbInsert($ansData,'survey_answer');
                // $ansData['answer_en'] = "No";
                // $this->_dbInsert($ansData,'survey_answer');
            } else if ($_POST['sur_ans_type_id'] == 3 || $_POST['sur_ans_type_id'] == 4) {
                if (isset($_POST['optionArray'])) {
                    foreach ($_POST['optionArray'] as $key => $value) {
                        $ansData = array();
                        $ansData['sur_que_id'] = $web_id;
                        $ansData['answer_en'] = $value;
                        $ansData['answer_sp'] = $value;
                        $ansData['created_on'] = date('Y-m-d H:i:s');
                        $this->_dbInsert($ansData, 'survey_answer');
                    }
                }
            }
        }
        return $web_id;
    }

    function updateSurveyQuestion($id)
    {
        $data = [];
        $data['account_id'] = intval($_SESSION['accountId']);
        $data['question_en'] = mysql_escape_string(trim($_POST['question_en']));
        $data['sort_order'] = mysql_escape_string(trim($_POST['order']));
        $data['from_date'] = mysql_escape_string(date('Y-m-d', strtotime($_POST['from'])));
        $data['to_date'] = mysql_escape_string(date('Y-m-d', strtotime($_POST['to'])));
        $data['modified_on'] = date('Y-m-d H:i:s');
        $this->_dbUpdate($data, 'survey_question', " sur_que_id=" . $id);

        if ($id > 0) {
            $this->mysql_query('DELETE FROM table_ques_ret_type_mapping WHERE sur_que_id = ' . $id);
            $this->mysql_query('DELETE FROM table_ques_dist_type_mapping WHERE sur_que_id = ' . $id);

            if (is_array($_POST['retailer_type_id']) && (count($_POST['retailer_type_id']) > 0)) {
                foreach ($_POST['retailer_type_id'] as $key1 => $retTypeId) {
                    $data1 = [];
                    $data1['sur_que_id'] = $id;
                    $data1['retailer_type_id'] = $retTypeId;
                    $data1['created_at'] = date('Y-m-d H:i:s');
                    $this->_dbInsert($data1, 'table_ques_ret_type_mapping');
                }
            }

            if (is_array($_POST['distributor_type_id']) && (count($_POST['distributor_type_id']) > 0)) {
                foreach ($_POST['distributor_type_id'] as $key2 => $distTypeId) {
                    $data1 = [];
                    $data1['sur_que_id'] = $id;
                    $data1['distributor_type_id'] = $distTypeId;
                    $data1['created_at'] = date('Y-m-d H:i:s');
                    $this->_dbInsert($data1, 'table_ques_dist_type_mapping');
                }
            }

            if ($_POST['sur_ans_type_id'] == 1) {
                // $ansData['sur_que_id'] = $id;
                // $ansData['answer_en'] = "Yes";
                // $this->_dbInsert($ansData,'survey_answer');
                // $ansData['answer_en'] = "No";
                // $this->_dbInsert($ansData,'survey_answer');
            } else if ($_POST['sur_ans_type_id'] == 3 || $_POST['sur_ans_type_id'] == 4) {
                if (isset($_POST['optionArray'])) {
                    for ($i = 1; $i <= count($_POST['optionArray']); $i++) {
                        if ($_POST['optionArray'][$i] != "") {
                            if ($_POST['surAnsId'][$i] > 0) {
                                $sur_ans_id = $_POST['surAnsId'][$i];
                                // $ansData['sur_que_id'] = $id;
                                $ansData['answer_en'] = $_POST['optionArray'][$i];
                                $ansData['answer_sp'] = $_POST['optionArray'][$i];
                                $ansData['modified_on'] = date('Y-m-d H:i:s');
                                $this->_dbUpdate2($ansData, 'survey_answer', " sur_ans_id=" . $sur_ans_id);
                            } else {
                                $ansData = array();
                                $ansData['sur_que_id'] = $id;
                                $ansData['answer_en'] = $_POST['optionArray'][$i];
                                $ansData['answer_sp'] = $_POST['optionArray'][$i];
                                $ansData['created_on'] = date('Y-m-d H:i:s');
                                $this->_dbInsert($ansData, 'survey_answer');
                            }
                        }
                    }
                }
            }
        }
        return $id;
    }

    function addAnswerBasedQuestion()
    {
        echo '<pre>';
        print_r($_POST);
        die(' die here');
        $data['show_on_parent_que_ans'] = $_POST['answer_id'];
        $data['sur_ans_type_id'] = intval($_POST['sur_ans_type_id']);
        $data['question_en'] = mysql_escape_string(trim($_POST['question_en']));
        $data['account_id'] = mysql_escape_string(trim($_POST['account_id']));
        $data['sort_order'] = mysql_escape_string(trim($_POST['order']));
        $data['created_on'] = date('Y-m-d H:i:s');
        $web_id = $this->_dbInsert($data, 'survey_question');

        if ($_POST['sur_ans_type_id'] == 1) {
            // $ansData['sur_que_id'] = $web_id;
            // $ansData['answer_en'] = "Yes";
            // $this->_dbInsert($ansData,'survey_answer');
            // $ansData['answer_en'] = "No";
            // $this->_dbInsert($ansData,'survey_answer');
        } else if ($_POST['sur_ans_type_id'] == 3 || $_POST['sur_ans_type_id'] == 4) {
            if (isset($_POST['optionArray'])) {
                foreach ($_POST['optionArray'] as $key => $value) {
                    $ansData = array();
                    $ansData['sur_que_id'] = $web_id;
                    $ansData['answer_en'] = $value;
                    $ansData['answer_sp'] = $value;
                    $ansData['created_on'] = date('Y-m-d H:i:s');
                    $this->_dbInsert($ansData, 'survey_answer');
                }
            }
        }
        return $web_id;
    }


    function editAnswerBasedQuestion($id)
    {
        $data = [];
        $data['account_id'] = intval($_SESSION['accountId']);
        $data['question_en'] = mysql_escape_string(trim($_POST['question_en']));
        $data['sort_order'] = mysql_escape_string(trim($_POST['order']));
//        $data['from_date'] = mysql_escape_string(date('Y-m-d',strtotime($_POST['from'])));
//        $data['to_date'] = mysql_escape_string(date('Y-m-d',strtotime($_POST['to'])));
        $data['modified_on'] = date('Y-m-d H:i:s');
        $this->_dbUpdate($data, 'survey_question', " sur_que_id=" . $id);

        if ($id > 0) {
//            $this->mysql_query('DELETE FROM table_ques_ret_type_mapping WHERE sur_que_id = ' . $id);
//            $this->mysql_query('DELETE FROM table_ques_dist_type_mapping WHERE sur_que_id = ' . $id);
//
//            if (is_array($_POST['retailer_type_id']) && (count($_POST['retailer_type_id']) > 0)) {
//                foreach ($_POST['retailer_type_id'] as $key1 => $retTypeId) {
//                    $data1 = [];
//                    $data1['sur_que_id'] = $id;
//                    $data1['retailer_type_id'] = $retTypeId;
//                    $data1['created_at'] = date('Y-m-d H:i:s');
//                    $this->_dbInsert($data1, 'table_ques_ret_type_mapping');
//                }
//            }
//
//            if (is_array($_POST['distributor_type_id']) && (count($_POST['distributor_type_id']) > 0)) {
//                foreach ($_POST['distributor_type_id'] as $key2 => $distTypeId) {
//                    $data1 = [];
//                    $data1['sur_que_id'] = $id;
//                    $data1['distributor_type_id'] = $distTypeId;
//                    $data1['created_at'] = date('Y-m-d H:i:s');
//                    $this->_dbInsert($data1, 'table_ques_dist_type_mapping');
//                }
//            }

            if ($_POST['sur_ans_type_id'] == 1) {
                // $ansData['sur_que_id'] = $id;
                // $ansData['answer_en'] = "Yes";
                // $this->_dbInsert($ansData,'survey_answer');
                // $ansData['answer_en'] = "No";
                // $this->_dbInsert($ansData,'survey_answer');
            } else if ($_POST['sur_ans_type_id'] == 3 || $_POST['sur_ans_type_id'] == 4) {
                if (isset($_POST['optionArray'])) {
                    for ($i = 1; $i <= count($_POST['optionArray']); $i++) {
                        if ($_POST['optionArray'][$i] != "") {
                            if ($_POST['surAnsId'][$i] > 0) {
                                $sur_ans_id = $_POST['surAnsId'][$i];
                                // $ansData['sur_que_id'] = $id;
                                $ansData['answer_en'] = $_POST['optionArray'][$i];
                                $ansData['answer_sp'] = $_POST['optionArray'][$i];
                                $ansData['modified_on'] = date('Y-m-d H:i:s');
                                $this->_dbUpdate2($ansData, 'survey_answer', " sur_ans_id=" . $sur_ans_id);
                            } else {
                                $ansData = array();
                                $ansData['sur_que_id'] = $id;
                                $ansData['answer_en'] = $_POST['optionArray'][$i];
                                $ansData['answer_sp'] = $_POST['optionArray'][$i];
                                $ansData['created_on'] = date('Y-m-d H:i:s');
                                $this->_dbInsert($ansData, 'survey_answer');
                            }
                        }
                    }
                }
            }
        }
        return $id;
    }
//
//    function addAnswerBasedQuestion()
//    {
//        $data['show_on_parent_que_ans'] = $_POST['answer_id'];
//        $data['sur_ans_type_id'] = intval($_POST['sur_ans_type_id']);
//        $data['account_id'] = mysql_escape_string(trim($_POST['account_id']));
//        $data['question_en'] = mysql_escape_string(trim($_POST['question_en']));
//        $data['sort_order'] = mysql_escape_string(trim($_POST['order']));
//        $data['created_on'] = date('Y-m-d H:i:s');
//
//        $web_id = $this->_dbInsert($data, 'survey_question');
//
//        if ($_POST['sur_ans_type_id'] == 1) {
//            // $ansData['sur_que_id'] = $web_id;
//            // $ansData['answer_en'] = "Yes";
//            // $this->_dbInsert($ansData,'survey_answer');
//            // $ansData['answer_en'] = "No";
//            // $this->_dbInsert($ansData,'survey_answer');
//        } else if ($_POST['sur_ans_type_id'] == 3 || $_POST['sur_ans_type_id'] == 4) {
//            if (isset($_POST['optionArray'])) {
//                foreach ($_POST['optionArray'] as $key => $value) {
//                    $ansData = array();
//                    $ansData['sur_que_id'] = $web_id;
//                    $ansData['answer_en'] = $value;
//                    $ansData['answer_sp'] = $value;
//                    $ansData['created_on'] = date('Y-m-d H:i:s');
//                    $this->_dbInsert($ansData, 'survey_answer');
//                }
//            }
//        }
//        return $web_id;
//    }

    function showAnswerBasedQuestion()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname)
            $sortname = 'sur_que_id';
        if (!$sortorder)
            $sortorder = 'desc';

        $sort = " ORDER BY $sortname $sortorder";

        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;

        $start = (($page - 1) * $rp);

        $limit = "LIMIT $start, $rp";

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $where = '';
        if ($query)
            $where .= " $qtype LIKE '%$query%' AND";
        $where .= " sq.parent_sur_que_id = 0 AND sq.show_on_parent_que_ans > 0";
        // $where1 .= $where." and sqp.parent_sur_que_id=0 ";

        $auRec = $this->_getSelectList('survey_question as sq 
        left join survey_answer as sqp on sq.show_on_parent_que_ans=sqp.sur_ans_id', "sq.*,sqp.answer_en as parent_answer", $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList('survey_question as sq
        left join survey_answer as sqp on sq.show_on_parent_que_ans=sqp.sur_ans_id', 'COUNT(sq.sur_que_id) AS total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $action = '<a href=\"javascript:deleteSurveyQuestion(' . $auRec[$i]->sur_que_id . ')\">Delete</a>';
            $action .= ' | <a href=\"edit_answer_based_question.php?id=' . $auRec[$i]->sur_que_id . '\">Edit</a>';
            if ($auRec[$i]->sur_ans_type_id == 3 || $auRec[$i]->sur_ans_type_id == 4) {
                $action .= ' | <a href=\"answer_based_question.php?id=' . $auRec[$i]->sur_que_id . '\">Add answer based question</a>';
            }
            if ($rc) $json .= ",";
            $json .= "\n{";

            $json .= '"id":"' . $auRec[$i]->sur_que_id . '",';
            $json .= '"cell":["' . addslashes(substr($auRec[$i]->question_en, 0, 90)) . '"';
            $json .= ',"' . addslashes(substr($auRec[$i]->parent_answer, 0, 90)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->sort_order) . '"';
            $json .= ',"' . $action . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showResponses()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname)
            $sortname = 'sr.created_on';
        if (!$sortorder)
            $sortorder = 'DESC';

        $sort = " ORDER BY $sortname $sortorder";

        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;

        $start = (($page - 1) * $rp);

        $limit = "LIMIT $start, $rp";

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if (isset($_SESSION['dismonth']) && !empty($_SESSION['dismonth'])) {
            $month = $_SESSION['dismonth'];

        } else {
            $month = date('m');
        }

        if (isset($_SESSION['disCyear']) && !empty($_SESSION['disCyear'])) {
            $year = $_SESSION['disCyear'];

        } else {
            $year = date('Y');
        }


        $where = '';
        if ($query)
            $where .= " $qtype LIKE '%$query%' AND ";

        $where .= " DATE_FORMAT(sr.created_on, '%m')='" . $month . "' AND DATE_FORMAT(sr.created_on, '%Y')='" . $year . "'  GROUP BY sr.created_on, sr.retailer_id, sr.salesman_id ";

        $auRec = $this->_getSelectList2('survey_response as sr
            LEFT JOIN table_retailer as r ON r.retailer_id = sr.retailer_id
            LEFT JOIN table_salesman as s on s.salesman_id = sr.salesman_id', 'sr.sur_res_id,sr.created_on,sr.retailer_id,r.retailer_name,r.retailer_code,sr.salesman_id,s.salesman_name', $rp, $where . $sort, '');


        $auRecCount = $this->_getSelectList2('survey_response as sr
            LEFT JOIN table_retailer as r ON r.retailer_id = sr.retailer_id
            LEFT JOIN table_salesman as s on s.salesman_id = sr.salesman_id', 'sr.sur_res_id', '', $where);

        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $action = '<a target=\"_blank\" href=\"response_details.php?retailer_id=' . $auRec[$i]->retailer_id . '&request=' . base64_encode(strtotime(date("Y-m-d", strtotime($auRec[$i]->created_on)))) . '\">View Response</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";

            $json .= '"id":"' . $auRec[$i]->sur_res_id . '",';
            $json .= '"cell":["' . $this->_changeDate($auRec[$i]->created_on) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . $action . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Jatin : 16 Jan 2023 : Pernod Answer based Questions

    // Todo Start : Sagar : 20th Jan 2023 : Survey Questionnaire
    function showSurveyQuestionnaire()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'sq.status';
        if (!$sortorder)
            $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder, sq.sort_order ASC";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " sq.survey_quest_id > 0 ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_survey_questionnaire as sq 
LEFT JOIN table_sur_ques_ret_type_mapping as rtm ON rtm.survey_quest_id = sq.survey_quest_id
LEFT JOIN table_retailer_type_master as rt on rt.type_id = rtm.retailer_type_id
LEFT JOIN table_sur_ques_dist_type_mapping as dtm ON dtm.survey_quest_id = sq.survey_quest_id
LEFT JOIN table_distributor_type_master as dt ON dt.dis_type_id = dtm.distributor_type_id', "sq.*,GROUP_CONCAT(DISTINCT rt.type_name SEPARATOR ', ') as ret_type, GROUP_CONCAT(DISTINCT dt.dis_type_name SEPARATOR ', ') as dist_type", $rp, $where . ' GROUP BY sq.survey_quest_id,rtm.survey_quest_id,dtm.survey_quest_id ' . $sort);

        $auRecCount = $this->_getSelectList('table_survey_questionnaire as sq', 'COUNT(sq.survey_quest_id) AS total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"survey_questionnaire.php?statusId=' . $auRec[$i]->survey_quest_id . '&value=' . $sts . '\">' . $sts . '</a>';

            $cmpltedSts = (intval($auRec[$i]->is_verified) > 0) ? "Completed" : "Not Completed";

            $sortOrder = (($auRec[$i]->sort_order > 0) ? addslashes($auRec[$i]->sort_order) : '');

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->survey_quest_id . '",';
            $json .= '"cell":["' . $sortOrder . '"';
            $json .= ',"' . addslashes(substr($auRec[$i]->survey_name, 0, 100)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ret_type) . '"';
            $json .= ',"' . addslashes($auRec[$i]->dist_type) . '"';
            $json .= ',"' . addslashes(date('d M Y', strtotime($auRec[$i]->from_date))) . '"';
            $json .= ',"' . addslashes(date('d M Y', strtotime($auRec[$i]->to_date))) . '"';
            $json .= ',"' . addslashes($cmpltedSts) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addSurveyQuestionnaire()
    {
        $getSortOrdrRec = $this->_getSelectList('table_survey_questionnaire', 'MAX(sort_order) as max_sort_order', '', " status = 'A' ");

        $max_sort_order = 1;
        if (is_array($getSortOrdrRec) && (count($getSortOrdrRec) > 0)) {
            $max_sort_order = ($getSortOrdrRec[0]->max_sort_order + 1);
        }

        $data = [];
        $data['account_id'] = intval($_SESSION['accountId']);
        $data['survey_name'] = $this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['survey_name']));
        $data['from_date'] = mysql_escape_string(date('Y-m-d', strtotime($_POST['from'])));
        $data['to_date'] = mysql_escape_string(date('Y-m-d', strtotime($_POST['to'])));
        $data['status'] = 'A';
        $data['is_verified'] = '0';
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['sort_order'] = mysql_escape_string($max_sort_order);
        $survey_id = $this->_dbInsert($data, 'table_survey_questionnaire');

        if ($survey_id > 0) {
            if (is_array($_POST['retailer_type_id']) && (count($_POST['retailer_type_id']) > 0)) {
                foreach ($_POST['retailer_type_id'] as $key1 => $retTypeId) {
                    $data1 = [];
                    $data1['survey_quest_id'] = $survey_id;
                    $data1['retailer_type_id'] = $retTypeId;
                    $data1['created_at'] = date('Y-m-d H:i:s');
                    $this->_dbInsert($data1, 'table_sur_ques_ret_type_mapping');
                }
            }

            if (is_array($_POST['distributor_type_id']) && (count($_POST['distributor_type_id']) > 0)) {
                foreach ($_POST['distributor_type_id'] as $key2 => $distTypeId) {
                    $data1 = [];
                    $data1['survey_quest_id'] = $survey_id;
                    $data1['distributor_type_id'] = $distTypeId;
                    $data1['created_at'] = date('Y-m-d H:i:s');
                    $this->_dbInsert($data1, 'table_sur_ques_dist_type_mapping');
                }
            }

            $data = [];
            $data['account_id'] = intval($_SESSION['accountId']);
            $data['survey_quest_id'] = intval($survey_id);
            $data['question_en'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9.!@#$%^&*()?,<>" "]/', trim($_POST['question_en'])));
            $data['sur_ans_type_id'] = intval($_POST['sur_ans_type_id']);
            $data['is_mandatory'] = mysql_escape_string($_POST['is_mandatory']);
            if ($_POST['sur_ans_type_id'] == 2) {
                $data['keyboard_input_type'] = isset($_POST['keyboard_input_type']) && !empty($_POST['keyboard_input_type']) ? mysql_escape_string($_POST['keyboard_input_type']) : NULL;
            }
            $data['status'] = 'A';
            $data['created_on'] = date('Y-m-d H:i:s');
            $data['sort_order'] = 1;
            $ques_id = $this->_dbInsert($data, 'table_survey_questions');
            // Add Ques ans Mapping
            $surQusAns = [];
            $surQusAns['survey_id'] = $survey_id;
            $surQusAns['sur_qus_id'] = $ques_id;
            $surQusAns['sur_ans_type_id'] = intval($_POST['sur_ans_type_id']);
            $surQusAns['created_at'] = date('Y-m-d H:i:s');
            $ques_ans_id = $this->_dbInsert($surQusAns, 'table_survey_ques_ans_mapping');
            if ($ques_id > 0) {
                if ($_POST['sur_ans_type_id'] == 3 || $_POST['sur_ans_type_id'] == 4) {
                    if (is_array($_POST['optionArray']) && (count($_POST['optionArray']) > 0)) {
                        foreach ($_POST['optionArray'] as $key => $value) {
                            if (!empty($value)) {
                                $ansData = array();
                                $ansData['sur_que_id'] = $ques_id;
                                $ansData['answer_en'] = $value;
                                $ansData['created_on'] = date('Y-m-d H:i:s');
                                $this->_dbInsert($ansData, 'table_survey_question_answers');
                            }
                        }
                    }
                }
            }
        }
        return $survey_id;
    }

    function updateSurveyQuestionnaire($formData)
    {
        $surveyQuestId = $formData['surveyQuestId'];

        if ($surveyQuestId > 0) {
            $data = [];
            $data['survey_name'] = $formData['survey_name'];
            $data['from_date'] = mysql_escape_string(date('Y-m-d', strtotime($formData['from'])));
            $data['to_date'] = mysql_escape_string(date('Y-m-d', strtotime($formData['to'])));
            $data['modified_on'] = date('Y-m-d H:i:s');
            $this->_dbUpdate($data, 'table_survey_questionnaire', "survey_quest_id = $surveyQuestId");


            $this->mysql_query('DELETE FROM table_sur_ques_ret_type_mapping WHERE survey_quest_id = ' . $surveyQuestId);
            $this->mysql_query('DELETE FROM table_sur_ques_dist_type_mapping WHERE survey_quest_id = ' . $surveyQuestId);

            if (is_array($formData['retailer_type_id']) && (count($formData['retailer_type_id']) > 0)) {
                foreach ($formData['retailer_type_id'] as $key1 => $retTypeId) {
                    $data1 = [];
                    $data1['survey_quest_id'] = $surveyQuestId;
                    $data1['retailer_type_id'] = $retTypeId;
                    $data1['created_at'] = date('Y-m-d H:i:s');
                    $this->_dbInsert($data1, 'table_sur_ques_ret_type_mapping');
                }
            }

            if (is_array($formData['distributor_type_id']) && (count($formData['distributor_type_id']) > 0)) {
                foreach ($formData['distributor_type_id'] as $key2 => $distTypeId) {
                    $data1 = [];
                    $data1['survey_quest_id'] = $surveyQuestId;
                    $data1['distributor_type_id'] = $distTypeId;
                    $data1['created_at'] = date('Y-m-d H:i:s');
                    $this->_dbInsert($data1, 'table_sur_ques_dist_type_mapping');
                }
            }

            return $surveyQuestId;
        }
    }

    function addSurveyQuestions($formData)
    {
        $surveyQuestId = $formData['surveyQuestId'];

        if ($surveyQuestId > 0) {
            $getSortOrdrRec = $this->_getSelectList('table_survey_questions', 'MAX(sort_order) as max_sort_order', '', " survey_quest_id = $surveyQuestId");

            $max_sort_order = 2;
            if (is_array($getSortOrdrRec) && (count($getSortOrdrRec) > 0)) {
                $max_sort_order = ($getSortOrdrRec[0]->max_sort_order + 1);
            }

            $data = [];
            $data['account_id'] = intval($_SESSION['accountId']);
            $data['survey_quest_id'] = intval($surveyQuestId);
            $data['question_en'] = mysql_escape_string(trim($formData['question_en']));
            $data['sur_ans_type_id'] = intval($formData['sur_ans_type_id']);
            $data['is_mandatory'] = mysql_escape_string($formData['is_mandatory']);
            if ($formData['sur_ans_type_id'] == 2) {
                $data['keyboard_input_type'] = isset($formData['keyboard_input_type']) && !empty($formData['keyboard_input_type']) ? mysql_escape_string($formData['keyboard_input_type']) : NULL;
            }
            $data['status'] = 'A';
            $data['created_on'] = date('Y-m-d H:i:s');
            $data['sort_order'] = $max_sort_order;
            $ques_id = $this->_dbInsert($data, 'table_survey_questions');
            // Add Mapping
            $surQusAns = [];
            $surQusAns['survey_id'] = $surveyQuestId;
            $surQusAns['sur_qus_id'] = $ques_id;
            $surQusAns['sur_ans_id'] = intval($formData['sur_ans_type_id']);
            $surQusAns['created_at'] = date('Y-m-d H:i:s');
            $ques_ans_id = $this->_dbInsert($surQusAns, 'table_survey_ques_ans_mapping');

            if ($ques_id > 0) {
                if ($formData['sur_ans_type_id'] == 3 || $formData['sur_ans_type_id'] == 4) {
                    if (is_array($formData['optionArray']) && (count($formData['optionArray']) > 0)) {
                        foreach ($formData['optionArray'] as $key => $value) {
                            if (!empty($value)) {
                                $ansData = array();
                                $ansData['sur_que_id'] = $ques_id;
                                $ansData['answer_en'] = $value;
                                $ansData['status'] = 'A';
                                $ansData['created_on'] = date('Y-m-d H:i:s');
                                $this->_dbInsert($ansData, 'table_survey_question_answers');
                            }
                        }
                    }
                }
            }

            return $surveyQuestId;
        }
    }

    function updateSurveyQuestions($formData)
    {
        $id = $formData['questId'];
        $data = [];
        if (isset($formData['question_en']) && !empty($formData['question_en'])) {
            $data['question_en'] = mysql_escape_string(trim($formData['question_en']));
        }
        $data['is_mandatory'] = mysql_escape_string(trim($formData['is_mandatory']));

        if ($formData['sur_ans_type_id'] == 2) {
            $data['keyboard_input_type'] = isset($formData['keyboard_input_type']) && !empty($formData['keyboard_input_type']) ? mysql_escape_string($formData['keyboard_input_type']) : NULL;
        }

        $data['modified_on'] = date('Y-m-d H:i:s');
        $this->_dbUpdate($data, 'table_survey_questions', " sur_que_id=" . $id);

        if ($id > 0) {
            if ($formData['sur_ans_type_id'] == 3 || $formData['sur_ans_type_id'] == 4) {
                if (is_array($formData['optionArray']) && (count($formData['optionArray']) > 0)) {
                    foreach ($formData['optionArray'] as $sur_ans_id => $optValue) {
                        if (isset($optValue) && !empty($optValue)) {
                            if ($formData['surAnsId'][$sur_ans_id] > 0) {
                                $ansData = array();
                                $status = $formData['ansStatus'][$sur_ans_id];

                                $ansData['answer_en'] = $optValue;
                                $ansData['status'] = $status;
                                $ansData['modified_on'] = date('Y-m-d H:i:s');
                                $this->_dbUpdate2($ansData, 'table_survey_question_answers', " sur_ans_id=" . $sur_ans_id);
                            }
                        }
                    }
                }

                if (is_array($formData['newOptionArray']) && (count($formData['newOptionArray']) > 0)) {
                    foreach ($formData['newOptionArray'] as $key => $value) {
                        $ansData = array();
                        $ansData['sur_que_id'] = $id;
                        $ansData['answer_en'] = $value;
                        $ansData['status'] = 'A';
                        $ansData['created_on'] = date('Y-m-d H:i:s');
                        $this->_dbInsert($ansData, 'table_survey_question_answers');
                    }
                }
            }
        }
        return $id;
    }


    function showSurveyQuestionnaireActivity()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname)
            $sortname = 'sr.survey_date';
        if (!$sortorder)
            $sortorder = 'DESC';

        $sort = " ORDER BY $sortname $sortorder, sr.survey_time DESC";

        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;

        $start = (($page - 1) * $rp);

        $limit = "LIMIT $start, $rp";

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if (isset($_SESSION['dismonth']) && !empty($_SESSION['dismonth'])) {
            $month = $_SESSION['dismonth'];
        } else {
            $month = date('m');
        }

        if (isset($_SESSION['disCyear']) && !empty($_SESSION['disCyear'])) {
            $year = $_SESSION['disCyear'];
        } else {
            $year = date('Y');
        }

        $salesmanCondi = '';
        if (($_SESSION['salQuest'] != 'All') && !empty($_SESSION['salQuest']) && (intval($_SESSION['salQuest']) > 0)) {
            $salesmanCondi = " and s.salesman_id = " . $_SESSION['salQuest'];
        }

        $where = " DATE_FORMAT(sr.survey_date, '%m') = '" . $month . "' AND DATE_FORMAT(sr.survey_date, '%Y')='" . $year . "' $salesmanCondi ";

        if ($query)
            $where .= " AND $qtype LIKE '%$query%'  ";

        $auRec = $this->_getSelectList('table_survey_questionnaire_activity as sr
            LEFT JOIN table_survey_questionnaire as sq on sq.survey_quest_id = sr.survey_quest_id
            LEFT JOIN table_salesman as s on s.salesman_id = sr.salesman_id
            LEFT JOIN table_retailer as r ON r.retailer_id = sr.retailer_id
            LEFT JOIN table_distributors as d ON d.distributor_id = sr.distributor_id
            LEFT JOIN table_lead as l ON l.lead_id = sr.lead_id
            ', 'sr.*,sq.survey_name,s.salesman_name,s.employee_code,r.retailer_name,r.retailer_code,d.distributor_name,d.distributor_code,l.title as lead_title,l.lead_code', $rp, $where . $sort, '');


        $auRecCount = $this->_getSelectList('table_survey_questionnaire_activity as sr
            LEFT JOIN table_survey_questionnaire as sq on sq.survey_quest_id = sr.survey_quest_id
            LEFT JOIN table_salesman as s on s.salesman_id = sr.salesman_id
            LEFT JOIN table_retailer as r ON r.retailer_id = sr.retailer_id
            LEFT JOIN table_distributors as d ON d.distributor_id = sr.distributor_id
            LEFT JOIN table_lead as l ON l.lead_id = sr.lead_id', 'COUNT(sr.sur_res_id) as total', '', $where);

//        echo '<pre>';
//        print_r($auRec);
//        print_r($auRecCount);
//        die(' die here');

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }

        for ($i = 0; $i < count($auRec); $i++) {
            $action = '<a ' . $targetBlank . ' href=\"survey_questionnaire_activity_details.php?act_id=' . $auRec[$i]->sur_res_id . '\">View Details</a>';

            $actDate = date('d M Y H:i A', strtotime($auRec[$i]->survey_date . ' ' . $auRec[$i]->survey_time));
            $actType = '';
            if (strtolower($auRec[$i]->activity_type) == 'r') {
                $actType = $this->AliaseUsers['retailer'];
            } elseif (strtolower($auRec[$i]->activity_type) == 'd') {
                $actType = $this->AliaseUsers['distributor'];
            } elseif (strtolower($auRec[$i]->activity_type) == 'l') {
                $actType = 'Lead';
            } else {
                $actType = '';
            }

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->sur_res_id . '",';
            $json .= '"cell":["' . $actDate . '"';
            $json .= ',"' . addslashes($auRec[$i]->survey_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
        
            $json .= ',"' . addslashes($actType) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
        
            $json .= ',"' . addslashes($auRec[$i]->lead_title) . '"';
            $json .= ',"' . addslashes($auRec[$i]->lead_code) . '"';
            $json .= ',"' . $action . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Sagar : 20th Jan 2023 : Survey Questionnaire

    function getDistributorStockFromInprocessStock($invoice_id)
    {
        $condi = " status = 'I' and invoice_id=" . $invoice_id;
        $resultset = $this->_getSelectList2('table_item_dis_stk_inprocess ', '*', '', $condi);

        if (is_array($resultset) && !empty($resultset) && count($resultset) > 0) {
            foreach ($resultset as $key => $value) {
                $stkbfrAct = 0;
                $rec_stock_value = 0;
                $dis_stk_inpro_id = $this->clean($value->dis_stk_inpro_id);
                $stockist_id = $this->clean($value->stockist_id);
                $distributor_id = $this->clean($value->distributor_id);
                $item_id = $this->clean($value->item_id);
                $category_id = $this->clean($value->category_id);
                $color_id = $this->clean($value->color_id);
                $rec_stock_value = $this->clean($value->rec_stock_value);
                $bill_date = $this->clean($value->bill_date);
                $bill_no = $this->clean($value->bill_no);
                $bill_type = $this->clean($value->bill_type);
                $Cond = " distributor_id = '" . $distributor_id . "' AND item_id = '" . $item_id . "' AND category_id = '" . $category_id . "' AND color_id = '" . $color_id . "'";
                $result = $this->_getSelectList2('table_item_distributor_stock', '*', '', $Cond);
                $data = array();
                $StkinvType = '';
                if (is_array($result) && !empty($result) && count($result) > 0) {
                    $dis_stk_id = $result[0]->dis_stk_id;
                    $dis_stock_value = $result[0]->dis_stock_value;
                    $stkbfrAct = $dis_stock_value;
                    if (strtolower($bill_type) == 'return') {
                        $StkinvType = 'ret_rct_qty';
                        $total_stock = ($dis_stock_value - $rec_stock_value);
                    } else {
                        $StkinvType = 'rct_qty';
                        $total_stock = ($rec_stock_value + $dis_stock_value);
                    }
                    //  Update distributor stock
                    $data['dis_stock_value'] = $total_stock;
                    $data['last_updated_date'] = date('Y-m-d');
                    $data['last_update_datetime'] = date('Y-m-d H:i:s');
                    $WhereCond = "dis_stk_id = '" . $dis_stk_id . "' ";
                    $this->_dbUpdate($data, 'table_item_distributor_stock', $WhereCond);
                } else {
                    if (strtolower($bill_type) == 'return') {
                        $StkinvType = 'ret_rct_qty';
                    } else {
                        $StkinvType = 'rct_qty';
                    }
                    $stkbfrAct = 0;
                    // insert distributor stock
                    $data['account_id'] = $this->clean($_SESSION['accountId']);
                    $data['distributor_id'] = $distributor_id;
                    $data['item_id'] = $item_id;
                    $data['category_id'] = $category_id;
                    $data['color_id'] = $color_id;
                    if (strtolower($bill_type) == 'return') {
                        $data['dis_stock_value'] = (0 - $rec_stock_value);
                    } else {
                        $data['dis_stock_value'] = $rec_stock_value;
                    }
                    $data['last_updated_date'] = date('Y-m-d');
                    $data['last_update_datetime'] = date('Y-m-d H:i:s');
                    $result = $this->_dbInsert($data, 'table_item_distributor_stock');
                }
                $this->updateDistQtySummary($StkinvType, $distributor_id, $item_id, intval(date('m', strtotime($bill_date))), date('Y', strtotime($bill_date)), $rec_stock_value);
                $Trans_data = array();
                $Trans_data['distributor_id'] = $distributor_id;
                $Trans_data['item_id'] = $item_id;
                $Trans_data['stock_before_activity'] = $stkbfrAct;
                $Trans_data['quantity'] = $rec_stock_value;

                if (strtolower($bill_type) == 'return') {
                    $Trans_data['stock_after_activity'] = ($stkbfrAct - $rec_stock_value);
                    $Trans_data['activity_type'] = "GRN_RET";
                } else {
                    $Trans_data['stock_after_activity'] = ($stkbfrAct + $rec_stock_value);
                    $Trans_data['activity_type'] = "GRN_REC";
                }
                $Trans_data['activity_date'] = date('Y-m-d');
                $Trans_data['activity_time'] = date('H:i:s');
                $this->_dbInsert($Trans_data, 'table_item_distributor_stock_transaction_activity');


                $data = array();
                //  Update distributor inprocess stock
                $data['acpt_stock_value'] = $rec_stock_value;
                $data['last_update_datetime'] = date('Y-m-d H:i:s');
                $data['status'] = 'A';
                $data['GRN_date'] = date('Y-m-d H:i:s');
                $WhereCond1 = "dis_stk_inpro_id = '" . $dis_stk_inpro_id . "' ";
                $this->_dbUpdate($data, 'table_item_dis_stk_inprocess', $WhereCond1);
            }

        }
        return;
    }

    // Todo Start : Jatin : 19 Jan 2023 : Dispatched Order Summary Report
    function showDispatchOrderList($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname)
            $sortname = 'too.order_id';
        if (!$sortorder)
            $sortorder = 'ASC';

        $sort = " ORDER BY $sortname $sortorder";

        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;

        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//        $_objAdmin = new Admin();
        $salesman = str_replace('s.', 'too.', $salesman);
        if ($_SESSION['salesman_id'] != '') {
            $salesman = " AND too.salesman_id = '" . $_SESSION['salesman_id'] . "'";
        }
        if ($_SESSION['FromDate'] != '') {
            $fromdate = " and too.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromDate'])) . "'";
        } else {
            $fromdate = " and too.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDate'] != '') {
            $todate = " and too.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToDate'])) . "'";
        } else {
            $todate = " and too.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if (isset($_SESSION['dispatchOrderStatus']) && $_SESSION['dispatchOrderStatus'] != '') {
            if ($_SESSION['dispatchOrderStatus'] == 'FD') {
                $orderSts = " HAVING SUM(tod.quantity) = SUM(todi.dispatched_qty) ";
            }
            if ($_SESSION['dispatchOrderStatus'] == 'FP') {
                $orderSts = " HAVING 0 = SUM(IFNULL(todi.dispatched_qty,0)) ";

            }
            if ($_SESSION['dispatchOrderStatus'] == 'PP') {
                $orderSts = " HAVING SUM(tod.quantity) > SUM(todi.dispatched_qty) AND SUM(todi.dispatched_qty) !=0";
            }

        }
        $where = '';
        if ($query)
            $where .= " $qtype LIKE '%$query%' and ";    //AND too.order_status = 'A'
        $where .= " too.order_status !='C' AND too.order_for = 'R' $salesman $fromdate $todate  and too.order_type IN ('Yes','Adhoc') AND too.return_type = 0 GROUP BY too.order_id $orderSts ";

        $auRec = $this->_getSelectList('table_order AS too
LEFT JOIN table_retailer as r ON r.retailer_id = too.retailer_id
LEFT JOIN table_relationship as tr on tr.relationship_id=r.relationship_id
left join table_retailer_type_master as tm on tm.type_id=r.type_id
LEFT JOIN table_zone_state_mapping AS zsm ON zsm.state_id = r.state AND zsm.account_id = r.account_id
LEFT JOIN table_zone AS z ON z.zone_id = zsm.zone_id 
left join state as st on st.state_id=r.state 
left join city as ct on ct.city_id=r.city 
left join table_location as loc ON loc.location_id = r.location_id
LEFT JOIN table_distributors as dis ON dis.distributor_id = too.distributor_id
left join state as dst on dst.state_id=dis.state
LEFT JOIN table_order_detail AS tod ON tod.order_id = too.order_id and tod.type=1
LEFT JOIN view_order_dispatched_item AS todi ON todi.order_id = tod.order_id and todi.item_id=tod.item_id

LEFT JOIN table_salesman AS s1 ON s1.salesman_id = too.salesman_id
LEFT JOIN table_salesman_hierarchy_relationship AS SH1 ON SH1.salesman_id = s1.salesman_id
LEFT JOIN table_salesman_hierarchy AS H1 ON H1.hierarchy_id = SH1.hierarchy_id
LEFT JOIN table_salesman AS rpt ON rpt.salesman_id = SH1.rpt_user_id

LEFT JOIN table_salesman AS s ON s.salesman_id = todi.salesman_id
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id', "too.date_of_order,too.order_id,
s1.salesman_name as order_sal_name,s1.employee_code as order_sal_code,H1.description AS order_sal_designation,rpt.salesman_name AS order_rpt_person,

s.salesman_name,s.employee_code,H.description AS sal_designation,S2.salesman_name AS rptPerson,

r.retailer_id,r.retailer_name,r.retailer_code,st.state_name as ret_state,ct.city_name as ret_district,loc.location_name as ret_city,tr.relationship_code as ret_class,tm.type_name as ret_type,

dis.distributor_id,z.zone_name,dis.distributor_name,dis.distributor_code,dst.state_name as dist_state,SUM(tod.total) as order_value,

SUM(tod.quantity) as quantity,
(SUM(tod.price) * SUM(IFNULL(todi.dispatched_qty,0))) as dispatched_value,
SUM(IFNULL(todi.dispatched_qty,0)) as dispatched_qty,
(SUM(tod.quantity) - SUM(IFNULL(todi.dispatched_qty,0))) AS pending_dispatch,too.photo_count,s1.salesman_id ,count(todi.order_id) as p_count", $rp, $where ." , too.time_of_order DESC". $sort, '');

        $retIdArr = [];
        if (is_array($auRec) && (count($auRec) > 0)) {
            foreach ($auRec as $key => $auRecData) {
                if (isset($auRecData->retailer_id) && !empty($auRecData->retailer_id)) {
                    $retIdArr[] = $auRecData->retailer_id;
                }
            }
        }


        if (is_array($retIdArr) && (count($retIdArr) > 0)) {
            $retIds = implode(',', array_unique($retIdArr));
            $routesRec = $this->_getSelectList('table_retailer as r
            LEFT JOIN table_route_retailer AS RR ON RR.retailer_id = r.retailer_id
		    LEFT JOIN table_route AS RT ON RT.route_id = RR.route_id', "r.retailer_id,GROUP_CONCAT(DISTINCT RT.route_name SEPARATOR ', ') AS routes", "", " r.retailer_id IN($retIds) GROUP BY r.retailer_id ");
            $retRouteArr = [];
            if (is_array($routesRec) && (count($routesRec) > 0)) {
                foreach ($routesRec as $key => $routesRecData) {
                    $retRouteArr[$routesRecData->retailer_id] = $routesRecData;
                }
            }
        }

        $odr_id = [];
        if (is_array($auRec) && (count($auRec) > 0)) {
            foreach ($auRec as $key => $auRecData1) {
                if (isset($auRecData1->order_id) && !empty($auRecData1->order_id)) {
                    $odr_id[] = $auRecData1->order_id;
                }
            }
        }


        if (is_array($odr_id) && (count($odr_id) > 0)) {
            $odrIds = implode(',', array_unique($odr_id));
            $auData = $this->_getSelectList('table_order AS too 
LEFT JOIN table_order_detail AS tod ON tod.order_id = too.order_id 
LEFT JOIN table_order_dispatched_item AS todi ON todi.order_id = tod.order_id and todi.item_id=tod.item_id 
LEFT JOIN table_item as ti on ti.item_id = tod.item_id
', "tod.order_id,tod.price,tod.quantity,tod.total,SUM(IFNULL(todi.dispatched_qty,0)) as dispatched_qty,(tod.price * (SUM(IFNULL(todi.dispatched_qty,0)))) as dispatched_value,(tod.quantity - SUM(IFNULL(todi.dispatched_qty,0))) AS pending_dispatch ", '', "too.order_id IN($odrIds) GROUP BY tod.order_id, tod.item_id ORDER BY tod.order_detail_id ASC ");
            $disValue = [];
            if (is_array($auData) && (count($auData) > 0)) {
                foreach ($auData as $key => $routesRecData) {
                    $disValue[$routesRecData->order_id][] = $routesRecData;

                }
            }
//            echo "<pre>";
//            print_r($disValue);
//            die;
        }
//Todo Start :sudhasnhu 18 july 2024 get image count
        if ($_SESSION['FromDate'] != '') {
            $fromdate = " and i.date_app >= '" . date('Y-m-d', strtotime($_SESSION['FromDate'])) . "'";
        } else {
            $fromdate = " and i.date_app >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDate'] != '') {
            $todate = " and i.date_app <= '" . date('Y-m-d', strtotime($_SESSION['ToDate'])) . "'";
        } else {
            $todate = " and i.date_app <= '" . date('Y-m-d') . "'";
        }

        $imgCondi = " and image_type = '111' group by ref_id";
        $imageRec = $this->_getSelectList('table_image as i
           ', "count(image_id) as photo_count,ref_id,salesman_id", "", $imgCondi);

        if (is_array($imageRec) && (count($imageRec) > 0)) {
            $phptoCountArr = [];
            foreach ($imageRec as $key => $photo) {
                $phptoCountArr[$photo->ref_id][$photo->salesman_id] = $photo->photo_count;

            }

        }
       
//Todo End :sudhasnhu 18 july 2024 get image count
        $auRecCount = $this->_getSelectList('table_order AS too
LEFT JOIN table_retailer as r ON r.retailer_id = too.retailer_id
LEFT JOIN table_relationship as tr on tr.relationship_id=r.relationship_id
left join table_retailer_type_master as tm on tm.type_id=r.type_id
LEFT JOIN table_zone_state_mapping AS zsm ON zsm.state_id = r.state AND zsm.account_id = r.account_id
LEFT JOIN table_zone AS z ON z.zone_id = zsm.zone_id
left join state as st on st.state_id=r.state 
left join city as ct on ct.city_id=r.city 
left join table_location as loc ON loc.location_id = r.location_id
LEFT JOIN table_distributors as dis ON dis.distributor_id = too.distributor_id
left join state as dst on dst.state_id=dis.state
LEFT JOIN table_order_detail AS tod ON tod.order_id = too.order_id and tod.type=1
LEFT JOIN view_order_dispatched_item AS todi ON todi.order_id = tod.order_id and todi.item_id=tod.item_id
LEFT JOIN table_salesman AS s ON s.salesman_id = todi.salesman_id
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id', 'too.order_id', '', $where);

        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $dispatched_value = '';
            foreach ($disValue[$auRec[$i]->order_id] as $key => $data) {
                $dispatched_value[$data->order_id] += $data->dispatched_value;
            }

            $details = '<a target=\"_blank\" href=\"dispatch_order_details.php?odrId=' . $auRec[$i]->order_id . '\">View Details</a>';
            $photo = '<a target=\"_blank\" href=\"dispatch_order_image.php?Imgid=' . $auRec[$i]->order_id . '\">View Photo</a>';
            if ($auRec[$i]->quantity == $auRec[$i]->dispatched_qty) {
                $status = 'Fully Dispatched';
            } elseif ($auRec[$i]->dispatched_qty == 0) {
                $status = ' Fully Pending';
            } else {
                $status = 'Partial Pending';
            }

            $retRoutes = '';
            if (isset($retRouteArr[$auRec[$i]->retailer_id]) && !empty($retRouteArr[$auRec[$i]->retailer_id])) {
                $retRoutes = $retRouteArr[$auRec[$i]->retailer_id]->routes;
            }

            if (isset($dispatched_value[$auRec[$i]->order_id]) && !empty($dispatched_value[$auRec[$i]->order_id])) {
                $disvalue = round($dispatched_value[$auRec[$i]->order_id], 2);
            } else {
                $disvalue = 0;
            }

            $photo_count = ($phptoCountArr[$auRec[$i]->order_id][$auRec[$i]->salesman_id] != '') ? $phptoCountArr[$auRec[$i]->order_id][$auRec[$i]->salesman_id] : '0';
           
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"cell":["' . $this->_changeDate($auRec[$i]->date_of_order) . '"';
            $json .= ',"' . addslashes($auRec[$i]->order_id) . '"';

            $json .= ',"' . addslashes($auRec[$i]->order_sal_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->order_sal_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->order_sal_designation) . '"';
            $json .= ',"' . addslashes($auRec[$i]->order_rpt_person) . '"';

            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->sal_designation) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rptPerson) . '"';

            $json .= ',"' . $retRoutes . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zone_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ret_state) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ret_district) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ret_city) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ret_type) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ret_class) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->dist_state) . '"';
            $json .= ',"' . addslashes($auRec[$i]->quantity) . '"';
            $json .= ',"' . addslashes($auRec[$i]->order_value) . '"';
            $json .= ',"' . addslashes($auRec[$i]->dispatched_qty) . '"';
            $json .= ',"' . $disvalue . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . $photo . '"';
            $json .= ',"' . addslashes($photo_count) . '"';
            $json .= ',"' . $details . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Jatin : 19 Jan 2023 : Dispatched Order Summary Report

    // Todo Start : Jatin : 30 Jan 2023 : next step lead master
    function showLeadNextStepMaster()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'next_step';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasLeadNextStep']) && $_SESSION['MasLeadNextStep'] != 'all' && $_SESSION['MasLeadNextStep'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasLeadNextStep'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_lead_next_step_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_lead_next_step_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"?statusId=' . $auRec[$i]->id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->next_step)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addnextLead()
    {
        $data['next_step'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['next_step'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_lead_next_step_master');
        return $id;
    }

    function updatenextLead($id)
    {
        $data['next_step'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['next_step'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_lead_next_step_master', " id=" . $id);
        return $id;
    }
    // Todo End : Jatin : 30 Jan 2023 : next step lead master

    // Todo Start : Jatin : 30 Jan 2023 : lead Resaon master
    function showLeadReasonList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasLeadReasonMas']) && $_SESSION['MasLeadReasonMas'] != 'all' && $_SESSION['MasLeadReasonMas'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasLeadReasonMas'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_lead_reason_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_lead_reason_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"?statusId=' . $auRec[$i]->id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->reason)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addLeadReason()
    {
        $data['reason'] = mysql_escape_string($this->validateForm('/[^A-Za-z" "]/', trim($_POST['reason'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_lead_reason_master');
        return $id;
    }

    function updateLeadReason($id)
    {
        $data['reason'] = mysql_escape_string($this->validateForm('/[^A-Za-z" "]/', trim($_POST['reason'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_lead_reason_master', " id=" . $id);
        return $id;
    }
    // Todo End : Jatin : 30 Jan 2023 : lead Resaon master

    // Todo Start : Jatin : 30 Jan 2023 : lead Customer Channel master
    function showCustomerChannelList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'channel_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasLeadChannel']) && $_SESSION['MasLeadChannel'] != 'all' && $_SESSION['MasLeadChannel'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasLeadChannel'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_lead_customer_channel_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_lead_customer_channel_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"?statusId=' . $auRec[$i]->id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addCustomerChannel()
    {
        $data['channel_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z" "]/', trim($_POST['channel_name'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_lead_customer_channel_master');
        return $id;
    }

    function updateCustomerChannel($id)
    {
        $data['channel_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z" "]/', trim($_POST['channel_name'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_lead_customer_channel_master', " id=" . $id);
        return $id;
    }
    // Todo End : Jatin : 30 Jan 2023 : lead Customer Channel master

    // Todo Start : Jatin : 30 Jan 2023 : lead Customer Class master
    function showCustomerClassList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'class_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 17 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasLeadCustClass']) && $_SESSION['MasLeadCustClass'] != 'all' && $_SESSION['MasLeadCustClass'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasLeadCustClass'] . "'";
        }
        //Todo End : sudhanshu 17 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_lead_customer_class_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_lead_customer_class_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"?statusId=' . $auRec[$i]->id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->class_name)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addCustomerClass()
    {
        $data['class_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['class_name'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_lead_customer_class_master');
        return $id;
    }

    function updateCustomerClass($id)
    {
        $data['class_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['class_name'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_lead_customer_class_master', " id=" . $id);
        return $id;
    }
    // Todo End : Jatin : 30 Jan 2023 : lead Customer Class master


    // Todo Start : Jatin : 31 Jan 2023 : lead Priority Status master
    function showPriorityStatus()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'priority_status';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_lead_priority_status', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_lead_priority_status', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"?statusId=' . $auRec[$i]->id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->priority_status)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addPriorityStatus()
    {
        $data['priority_status'] = mysql_escape_string($_POST['priority_status']);
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_lead_priority_status');
        return $id;
    }

    function updatePriorityStatus($id)
    {
        $data['priority_status'] = mysql_escape_string($_POST['priority_status']);
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_lead_priority_status', " id=" . $id);
        return $id;
    }
    // Todo End : Jatin : 31 Jan 2023 : lead Priority Status master


    // Todo Start : Jatin : 31 Jan 2023 : lead Sales Cycle Codes master
    function showSalesCycleCodes()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'cycle_code';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 17 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasSalesCodes']) && $_SESSION['MasSalesCodes'] != 'all' && $_SESSION['MasSalesCodes'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasSalesCodes'] . "'";
        }
        //Todo End : sudhanshu 17 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_lead_sales_cycle_codes', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_lead_sales_cycle_codes', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"?statusId=' . $auRec[$i]->id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->cycle_code)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addSalesCycleCode()
    {
        $data['cycle_code'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['cycle_code'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_on'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_lead_sales_cycle_codes');
        return $id;
    }

    function updateSalesCycleCode($id)
    {
        $data['cycle_code'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['cycle_code'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_lead_sales_cycle_codes', " id=" . $id);
        return $id;
    }
    // Todo End : Jatin : 31 Jan 2023 : lead Sales Cycle Codes master

    // Todo Start : Sagar : 3rd Feb 2023 : lead Check in out Features List
    function showLeadCheckInOutFeaturesList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'ut.type';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " ch.account_id = " . $_SESSION['accountId'] . " AND ch.user_type_id > 0 ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_lead_checkinout_act_designation_wise as ch
		LEFT JOIN table_lead_check_in_out_activity_master as mas ON mas.checkin_activity_id = ch.checkin_activity_id
LEFT JOIN table_user_type as ut ON ut.id = ch.user_type_id', "ch.user_type_id,ut.type,GROUP_CONCAT(mas.activity_name SEPARATOR ', ') as activities", $rp, $where . " GROUP BY ch.user_type_id " . $sort, '');

        $auRecCount = $this->_getSelectList2('table_lead_checkinout_act_designation_wise as ch
		LEFT JOIN table_lead_check_in_out_activity_master as mas ON mas.checkin_activity_id = ch.checkin_activity_id
LEFT JOIN table_user_type as ut ON ut.id = ch.user_type_id', 'ch.user_type_id', '', $where . " GROUP BY ch.user_type_id " . $sort);

        $total = (is_array($auRecCount) ? count($auRecCount) : 0);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->user_type_id . '",';
            $json .= '"cell":["' . addslashes(ucwords($this->AliaseUsers($auRec[$i]->type))) . '"';
            $json .= ',"' . addslashes(ucwords($this->AliaseUsers($auRec[$i]->activities))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Sagar : 3rd Feb 2023 : lead Check in out Features List

    // Todo Start : Jatin : 7th Feb 2023 : Route Wise Retailer Distributor
    function showRoutewiseRetDis()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname)
            $sortname = 'tr.route_id';
        if (!$sortorder)
            $sortorder = 'ASC';

        $sort = " ORDER BY $sortname $sortorder";

        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;

        $start = (($page - 1) * $rp);

        $limit = "LIMIT $start, $rp";

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();

        if ($_SESSION['rid'] != '') {
            $ret = "tr.route_id = '" . $_SESSION['rid'] . "' and";
        } else {
            $ret = "";
        }
        if ($_SESSION['FromDate'] != '') {
            $fromdate = "  tr.created_at >= '" . date('Y-m-d', strtotime($_SESSION['FromDate'])) . "'";
        } else {
            $fromdate = "  tr.created_at >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDate'] != '') {
            $todate = " and tr.created_at <= '" . date('Y-m-d', strtotime($_SESSION['ToDate'])) . "'";
        } else {
            $todate = " and tr.created_at <= '" . date('Y-m-d') . "'";
        }
        $where = '';
        if ($query)
            $where .= " $qtype LIKE '%$query%' and ";
        $where .= "$ret $fromdate $todate and tr.status= 'A' and tds.status='A' group by tr.route_id ,tds.distributor_id ";

        $auRec = $this->_getSelectList('`table_route` as tr 
        left join `table_route_retailer` as trr on trr.route_id = tr.route_id 
        left join `table_retailer` as tbr on tbr.retailer_id = trr.retailer_id 
        left JOIN `table_distributors` as tds on tds.distributor_id= tbr.distributor_id', 'tr.route_id,tr.route_name,tds.distributor_name,tds.distributor_code ,count(DISTINCT trr.retailer_id) as retailer_count,trr.distributor_id', $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList('`table_route` as tr 
        left join `table_route_retailer` as trr on trr.route_id = tr.route_id left join `table_retailer` as tbr on tbr.retailer_id = trr.retailer_id left JOIN `table_distributors` as tds on tds.distributor_id= tbr.distributor_id', '*', '', $where);

        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            $details = '<a target=\"_blank\" href=\"route_retailer_details.php?rtRet_id=' . $auRec[$i]->distributor_id . '\">View Details</a>';


            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->route_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->route_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_count) . '"';
            $json .= ',"' . $details . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Jatin : 7th Feb 2023 : Route Wise Retailer Distributor

    // Todo Start : Jatin : 20th Feb 2023 : Remove End Attendance Master

    function showRemoveEndAttendance($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 's.salesman_name  ';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];


        if (isset($_SESSION['salesman_id']) && $_SESSION['salesman_id'] != '') {
            $salesman = " AND asa.salesman_id = '" . $_SESSION['salesman_id'] . "' ";
        }

        if (isset($_SESSION['FromDate']) && $_SESSION['FromDate'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromDate']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if (isset($_SESSION['ToDate']) && $_SESSION['ToDate'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToDate']));
        } else {
            $todate = date('Y-m-d');
        }

        $where = " (asa.activity_date BETWEEN '" . $fromdate . "' AND '" . $todate . "') $salesman and asa.activity_type = '11' AND s.account_id = " . $_SESSION['accountId'];

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_activity_salesman_attendance as asa
                LEFT JOIN table_activity_salesman_attendance as asa1 on asa1.salesman_id=asa.salesman_id and asa1.activity_date = asa.activity_date AND asa1.activity_type = 12
                LEFT JOIN table_salesman as s on s.salesman_id=asa.salesman_id
                LEFT JOIN table_web_users as wu on wu.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id
                ', "s.salesman_name,s.employee_code,s.salesman_id,		
                min(asa.start_time) as attendance_start ,
                asa1.end_time as attendance_end,
                asa.activity_date,
                asa.activity_id as in_activity,
                asa1.activity_id as out_activity,		
                H.description AS des1, S2.salesman_name AS rptPerson, asa1.activity_type as activity_end,wu
                .username", '', " $where group by s.salesman_id ORDER BY s.salesman_name ASC, asa.activity_date DESC, attendance_start DESC");

        $auRecCount = $this->_getSelectList2('table_activity_salesman_attendance as asa
                LEFT JOIN table_activity_salesman_attendance as asa1 on asa1.salesman_id=asa.salesman_id and asa1.activity_date = asa.activity_date AND asa1.activity_type = 12
                LEFT JOIN table_salesman as s on s.salesman_id=asa.salesman_id                
                LEFT JOIN table_web_users as wu on wu.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id', 'COUNT(asa.salesman_id) as total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        for ($i = 0; $i < count($auRec); $i++) {

            if ($_SESSION['salesmanId'] == $auRec[$i]->salesman_id) {
                $remove_Attendance = '';
            } else {
                if ($auRec[$i]->activity_end == '12' && $auRec[$i]->activity_date == date("Y-m-d")) {
                    $remove_Attendance = '<button  onclick=\"javascript:delid(' . $auRec[$i]->out_activity . ')\" class=\" btn btn-success\">Remove_Attendance</button>';
                } else {
                    $remove_Attendance = '';
                }
            }

            if ($auRec[$i]->attendance_start != '' && $auRec[$i]->attendance_start != '00:00:00') {
                $start_time = addslashes($auRec[$i]->attendance_start);
            } else {
                $start_time = "In Time is not available";
            }
            if ($auRec[$i]->attendance_end != '' && $auRec[$i]->attendance_end != '00:00:00') {
                $end_time = addslashes($auRec[$i]->attendance_end);
            } else {
                $end_time = "Out Time is not available";
            }

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->salesman_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->des1) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rptPerson) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes(date('d M Y', strtotime($auRec[$i]->activity_date))) . '"';
            $json .= ',"' . $start_time . '"';
            $json .= ',"' . $end_time . '"';
            $json .= ',"' . $remove_Attendance . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Jatin : 20th Feb 2023 : Remove End Attendance Master

    // Todo Start : Jatin : 21th Feb 2023 : Dynamic Data Report Master

    function showDynamicDataReport()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'dr.id';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_dynamic_report  as dr left join table_dynamic_report_type as drt on drt.rpt_type_id = dr.rpt_type_id', "dr.* ,drt.rpt_type as rpt_type", $rp, $where . $sort, '');


        $custClassRec = $this->_getSelectList2('table_dynamic_report_filter', 'fil_name ,rpt_fil_id', '', "  status='A' ORDER BY rpt_fil_id ASC ");
        $custClassMasterArr = [];
        if (is_array($custClassRec) && (count($custClassRec) > 0)) {
            foreach ($custClassRec as $keyc => $class) {
                $custClassMasterArr[$class->rpt_fil_id] = $class->fil_name;
            }
        }

        $auRecCount = $this->_getSelectList2('table_dynamic_report  as dr left join table_dynamic_report_type as drt on drt.rpt_type_id = dr.rpt_type_id', 'count(*) as total', '', $where);

        $total = $auRecCount[0]->total;

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            $classValuesArr = [];
            if (isset($auRec[$i]->rpt_fil_id) && !empty($auRec[$i]->rpt_fil_id)) {
                $classIdArr = explode(',', $auRec[$i]->rpt_fil_id);
                foreach ($classIdArr as $keycid => $classId) {
                    if (isset($custClassMasterArr[$classId]) && !empty($custClassMasterArr[$classId])) {
                        $classValuesArr[] = $custClassMasterArr[$classId];
                    }
                }
            }

            $name = implode(', ', $classValuesArr);

            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"dynamic_data_report_master.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' .
                $status .
                '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->rpt_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_type) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_url) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_api_name) . '"';
            $json .= ',"' . $name . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addDynamicReport()
    {

        $data['rpt_name'] = mysql_escape_string($_POST['rpt_name']);
//        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['rpt_type_id'] = mysql_escape_string($_POST['rpt_type_id']);
        $data['no_of_level'] = mysql_escape_string($_POST['no_of_label']);
        $data['rpt_url'] = mysql_escape_string($_POST['rpt_url']);
        $data['rpt_api_name'] = mysql_escape_string($_POST['rpt_api_name']);
        $data['rpt_fil_id'] = implode(',', $_POST['rpt_fil_id']);
        $data['status'] = mysql_escape_string($_POST['status']);
        $data['is_pagination'] = $_POST['is_pagination'];

        $id = $this->_dbInsert($data, 'table_dynamic_report');

        return $id;
    }

    function updateDynamicReport($id)
    {
        $data['rpt_name'] = mysql_escape_string($_POST['rpt_name']);
//        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
//        $data['rpt_type_id'] = mysql_escape_string($_POST['rpt_type_id']);
        $data['no_of_level'] = mysql_escape_string($_POST['no_of_label']);
        $data['rpt_url'] = mysql_escape_string($_POST['rpt_url']);
        $data['rpt_api_name'] = mysql_escape_string($_POST['rpt_api_name']);
        $data['rpt_fil_id'] = implode(',', $_POST['rpt_fil_id']);
        $data['status'] = mysql_escape_string($_POST['status']);
        $data['is_pagination'] = $_POST['is_pagination'];

        $cid = $this->_dbUpdate2($data, 'table_dynamic_report', " id=" . $id);

    }

    // Todo End : Jatin : 21th Feb 2023 : Dynamic Data Report Master

    // Todo Start  : Jatin : 9th March 2023 : Salesman State city district combination
    function showRouteStateDistCity()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'sdc.route_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasRoutStDistCity']) && $_SESSION['MasRoutStDistCity'] != 'all' && $_SESSION['MasRoutStDistCity'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasRoutStDistCity'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter

        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_route as sdc', "*", $rp, $where . ' ' . $sort);


        $routeIdArr = [];
        $routeIds = '';
        if (is_array($auRec) && (count($auRec) > 0)) {
            foreach ($auRec as $key => $routeData) {
                $routeIdArr[] = $routeData->route_id;
            }
        }
        if (is_array($routeIdArr) && (count($routeIdArr) > 0)) {
            $routeIds = implode(',', $routeIdArr);
            //retailer counts & states
//            $stRet = $this->_getSelectList('table_route_retailer as rr
//LEFT JOIN table_retailer as r ON r.retailer_id = rr.retailer_id', "rr.route_id,COUNT(DISTINCT r.retailer_id) as ttl_ret,COUNT(DISTINCT r.distributor_id) as ttl_ret_dist", '', " rr.route_id IN($routeIds) AND r.status = 'A' GROUP BY rr.route_id ");

            $stRet = $this->_getSelectList('table_route_retailer as rr
LEFT JOIN table_retailer as r ON r.retailer_id = rr.retailer_id', "rr.route_id,COUNT(DISTINCT r.retailer_id) as ttl_ret", '', " rr.route_id IN($routeIds) AND r.status = 'A' GROUP BY rr.route_id ");

            $stateRetCountArr = [];
            if (is_array($stRet) && (count($stRet) > 0)) {
                foreach ($stRet as $key1 => $stRetData) {
                    $stateRetCountArr[$stRetData->route_id]['ttl_ret'] = $stRetData->ttl_ret;
//                    $stateRetCountArr[$stRetData->route_id]['ttl_ret_dist'] = $stRetData->ttl_ret_dist;
//                    $stateRetCountArr[$stRetData->route_id]['states'] = $stRetData->states;
                }
            }

            //distributor counts & states
            $stDist = $this->_getSelectList('table_route_retailer as rr 
LEFT JOIN table_distributors as r ON r.distributor_id = rr.distributor_id', "rr.route_id,COUNT(DISTINCT r.distributor_id) as ttl_dist", '', " rr.route_id IN($routeIds) AND r.status = 'A' GROUP BY rr.route_id ");
            $stateDistCountArr = [];
            if (is_array($stDist) && (count($stDist) > 0)) {
                foreach ($stDist as $key2 => $stDistData) {
                    $stateDistCountArr[$stDistData->route_id]['ttl_dist'] = $stDistData->ttl_dist;
//                    $stateDistCountArr[$stDistData->route_id]['states'] = $stDistData->states;
                }
            }

            $retDist = $this->_getSelectList('table_route_retailer as rr 
LEFT JOIN table_retailer as r ON r.retailer_id = rr.retailer_id', "rr.route_id,COUNT(DISTINCT r.distributor_id) as ttl_ret_dist", '', " rr.route_id IN($routeIds) AND rr.retailer_id > 0 AND r.distributor_id NOT IN (SELECT DISTINCT rr2.distributor_id FROM table_route_retailer as rr2 WHERE rr2.route_id = rr.route_id AND rr2.distributor_id > 0)
GROUP BY rr.route_id ");
            $retDistCountArr = [];
            if (is_array($retDist) && (count($retDist) > 0)) {
                foreach ($retDist as $key2 => $stDistData) {
                    $retDistCountArr[$stDistData->route_id]['ttl_ret_dist'] = $stDistData->ttl_ret_dist;
                }
            }
        }


        $auRecCount = $this->_getSelectList('table_route as sdc', 'COUNT(sdc.route_id) as total', '', $where);

        $countryRec = $this->_getSelectList2('country', "country_id,country_name", '', " status = 'A' ORDER BY country_id ASC ");
        $stateRec = $this->_getSelectList2('state', "state_id,state_name", '', " status = 'A' ORDER BY state_id ASC ");
        $distRec = $this->_getSelectList2('city', "city_id,city_name", '', " status = 'A' ORDER BY city_id ASC ");
        $ctyRec = $this->_getSelectList2('table_location', "location_id,location_name", '', " status = 'A' ORDER BY location_id ASC ");

        $countryMasterArr = [];
        if (is_array($countryRec) && (count($countryRec) > 0)) {
            foreach ($countryRec as $key => $countryRecData) {
                $countryMasterArr[$countryRecData->country_id] = $countryRecData->country_name;
            }
        }

        $stateMasterArr = [];
        if (is_array($stateRec) && (count($stateRec) > 0)) {
            foreach ($stateRec as $key => $stateRecData) {
                $stateMasterArr[$stateRecData->state_id] = $stateRecData->state_name;
            }
        }

        $districtMasterArr = [];
        if (is_array($distRec) && (count($distRec) > 0)) {
            foreach ($distRec as $key => $distRecData) {
                $districtMasterArr[$distRecData->city_id] = $distRecData->city_name;
            }
        }

        $cityMasterArr = [];
        if (is_array($ctyRec) && (count($ctyRec) > 0)) {
            foreach ($ctyRec as $key => $ctyRecData) {
                $cityMasterArr[$ctyRecData->location_id] = $ctyRecData->location_name;
            }
        }


        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r", "\t");
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"route_state_district_city_master.php?stid=' . $auRec[$i]->route_id . '&value=' . $status . '\">' . $status . '</a>';

            $updated_at = '';
            if (isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at)) {
                $updated_at = date('d M Y H:i A', strtotime($auRec[$i]->updated_at));
            }


            $stateArr = explode(',', $auRec[$i]->state_id);
            $districtArr = explode(',', $auRec[$i]->city_id);
            $cityArr = explode(',', $auRec[$i]->locations);

            $countryStrArr = [];
            $countryStr = '';
            if (isset($auRec[$i]->country_id) && !empty($auRec[$i]->country_id)) {
                $countryArr = explode(',', $auRec[$i]->country_id);
                if (is_array($countryArr) && (count($countryArr) > 0)) {
                    foreach ($countryArr as $key => $countryId) {
                        $countryStrArr[] = $countryMasterArr[$countryId];
                    }
                    $countryStr = implode(' | ', $countryStrArr);
                }
            } else {
                $countryArr = [];
                $auRecCountry = $this->_getSelectList2('state', "DISTINCT country_id", '', " state_id IN(" . $auRec[$i]->state_id . ") ");

                if (is_array($auRecCountry) && (count($auRecCountry) > 0)) {
                    foreach ($auRecCountry as $key => $countryData) {
                        $countryArr[] = $countryData->country_id;
                    }
                    if (is_array($countryArr) && (count($countryArr) > 0)) {
                        foreach ($countryArr as $key => $countryId) {
                            $countryStrArr[] = $countryMasterArr[$countryId];
                        }
                        $countryStr = implode(' | ', $countryStrArr);
                    }
                }
            }


            $stateStrArr = [];
            $stateStr = '';
            if (is_array($stateArr) && (count($stateArr) > 0)) {
                foreach ($stateArr as $key => $stateId) {
                    $stateStrArr[] = $stateMasterArr[$stateId];
                }
                $stateStr = implode(' | ', $stateStrArr);
            }

            $districtStrArr = [];
            $districtStr = '';
            if (is_array($districtArr) && (count($districtArr) > 0)) {
                foreach ($districtArr as $key => $districtId) {
                    $districtStrArr[] = $districtMasterArr[$districtId];
                }
                $districtStr = implode(' | ', $districtStrArr);
            }

            $cityStrArr = [];
            $cityStr = '';
            if (is_array($cityArr) && (count($cityArr) > 0)) {
                foreach ($cityArr as $key => $cityId) {
                    $cityStrArr[] = $cityMasterArr[$cityId];
                }
                $cityStr = implode(' | ', $cityStrArr);
            }


            $ttl_ret = (isset($stateRetCountArr[$auRec[$i]->route_id]['ttl_ret']) && !empty($stateRetCountArr[$auRec[$i]->route_id]['ttl_ret'])) ? $stateRetCountArr[$auRec[$i]->route_id]['ttl_ret'] : '0';

//            $ttl_dist = (isset($stateDistCountArr[$auRec[$i]->route_id]['ttl_dist']) && !empty($stateDistCountArr[$auRec[$i]->route_id]['ttl_dist'])) ? $stateDistCountArr[$auRec[$i]->route_id]['ttl_dist'] : (isset($stateRetCountArr[$auRec[$i]->route_id]['ttl_ret_dist']) && !empty($stateRetCountArr[$auRec[$i]->route_id]['ttl_ret_dist'])) ? $stateRetCountArr[$auRec[$i]->route_id]['ttl_ret_dist'] : '0';

//            $ttl_dist = (isset($stateDistCountArr[$auRec[$i]->route_id]['ttl_dist']) && !empty($stateDistCountArr[$auRec[$i]->route_id]['ttl_dist'])) ? $stateDistCountArr[$auRec[$i]->route_id]['ttl_dist'] : '0';

            $ttl_dist = 0;

            if (isset($stateDistCountArr[$auRec[$i]->route_id]['ttl_dist']) && !empty($stateDistCountArr[$auRec[$i]->route_id]['ttl_dist'])) {
                if (isset($retDistCountArr[$auRec[$i]->route_id]['ttl_ret_dist']) && !empty($retDistCountArr[$auRec[$i]->route_id]['ttl_ret_dist'])) {
                    $ttl_dist = (intval($stateDistCountArr[$auRec[$i]->route_id]['ttl_dist']) + intval($retDistCountArr[$auRec[$i]->route_id]['ttl_ret_dist']));
                } else {
                    $ttl_dist = $stateDistCountArr[$auRec[$i]->route_id]['ttl_dist'];
                }
            } elseif (isset($retDistCountArr[$auRec[$i]->route_id]['ttl_ret_dist']) && !empty($retDistCountArr[$auRec[$i]->route_id]['ttl_ret_dist'])) {
                $ttl_dist = $retDistCountArr[$auRec[$i]->route_id]['ttl_ret_dist'];
            } else {
                $ttl_dist = 0;
            }

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->route_id . '",';
            $json .= '"cell":["' . addslashes(ucwords(str_replace($remove, ' ', trim($auRec[$i]->route_name)))) . '"';
            $json .= ',"' . addslashes(ucwords(str_replace($remove, '', trim($countryStr)))) . '"';
            $json .= ',"' . addslashes(ucwords(str_replace($remove, '', trim($stateStr)))) . '"';
            $json .= ',"' . addslashes(ucwords(str_replace($remove, '', trim($districtStr)))) . '"';
            $json .= ',"' . addslashes(ucwords(str_replace($remove, '', trim($cityStr)))) . '"';
            $json .= ',"' . $ttl_ret . '"';
            $json .= ',"' . $ttl_dist . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . addslashes(date('d M Y H:i A', strtotime($auRec[$i]->created_at))) . '"';
            $json .= ',"' . addslashes($updated_at) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End  : Jatin : 9th March 2023 : Salesman State city district combination

    // Todo Start  : Jatin : 15th March 2023 : Distributor wise Item price Report
    function showDistributorWiseProductPrice()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'd.distributor_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder , it.item_name ASC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " AND b.brand_id IN(" . $RoleBrands . ")";
        }
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasDisItmPrice']) && $_SESSION['MasDisItmPrice'] != 'all' && $_SESSION['MasDisItmPrice'] != '') {
            $statusCondi = " msi.status ='" . $_SESSION['MasDisItmPrice'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter

        $where = " $statusCondi $brandCnd";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_wise_item_price as msi
        INNER JOIN table_distributors as d ON d.distributor_id = msi.distributor_id
        INNER JOIN table_item as it ON it.item_id = msi.item_id
        left join table_brands as b on b.brand_id = it.brand_id
        ', "msi.id as id,msi.distributor_id,d.distributor_name,d.distributor_code,msi.item_id,       it.item_code,b.brand_name,it.item_name,msi.price,
        msi.created_at,msi.updated_at,msi.status", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributor_wise_item_price as msi
        INNER JOIN table_distributors as d ON d.distributor_id = msi.distributor_id
        INNER JOIN table_item as it ON it.item_id = msi.item_id
        left join table_brands as b on b.brand_id = it.brand_id
        ', 'count(msi.id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"distributor_wise_item_price.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';
            $editLink = '<a href=\"edit_dis_wise_item_price.php?pid=' . base64_encode($auRec[$i]->id) . '\">Edit</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->price) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . $editLink . '"';
            $json .= ',"' . addslashes(date('d M Y H:i A', strtotime($auRec[$i]->created_at))) . '"';
            $json .= ',"' . ((isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at)) ? addslashes(date('d M Y H:i A', strtotime($auRec[$i]->updated_at))) : "") . '"';
            $json .= "]";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End  : Jatin : 15th March 2023 : Distributor wise Item price Report

    // Todo Start  : Jatin : 16th March 2023 : Distributor State wise Item price Report
    function showDistributorStateWiseProductPrice()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'st.state_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder , it.item_name ASC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
//		$start = (($page-1) * $rp);
//		$limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " AND b.brand_id IN(" . $RoleBrands . ")";
        }
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasDisItmPrice']) && $_SESSION['MasDisItmPrice'] != 'all' && $_SESSION['MasDisItmPrice'] != '') {
            $statusCondi = " msi.status ='" . $_SESSION['MasDisItmPrice'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi $brandCnd ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_state_wise_item_price as msi
INNER JOIN state as st ON st.state_id = msi.dis_state_id
INNER JOIN table_item as it ON it.item_id = msi.item_id
left join table_brands as b on b.brand_id = it.brand_id
', "msi.id as price_id,msi.dis_state_id,st.state_name,msi.item_id,it.item_code,b.brand_name,it.item_name,msi.price,msi.created_at,msi.updated_at,msi.status", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributor_state_wise_item_price as msi
INNER JOIN state as st ON st.state_id = msi.dis_state_id
INNER JOIN table_item as it ON it.item_id = msi.item_id
left join table_brands as b on b.brand_id = it.brand_id', 'count(msi.id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"statewise_distributor_item_price.php?stid=' . $auRec[$i]->price_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->price_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->price) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . addslashes(date('d M Y H:i A', strtotime($auRec[$i]->created_at))) . '"';
            $json .= ',"' . ((isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at)) ? addslashes(date('d M Y H:i A', strtotime($auRec[$i]->updated_at))) : "") . '"';
            $json .= "]";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End  : Jatin : 16th March 2023 : Distributor State wise Item price Report

    // Todo Start  : Jatin : 22th March 2023 : RetOpening Stock By date Report
    function showdynamicRetailerStockByDate($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();

        // ---------------start dynamic filter condition-----------
        $salesmanCnd = '';
//        $salCond = '';

        if (isset($_SESSION['fil_salesman']) && $_SESSION['fil_salesman'] > 0) {

            $salesmanCnd = ' AND s.salesman_id = "' . $_SESSION['fil_salesman'] . '"';
//            $salCond .= ' AND dcc.salesman_id = "' . $_SESSION['fil_salesman'] . '"';
        } else if (isset($_SESSION['fil_salesman_manager']) && ($_SESSION['fil_salesman_manager'] > 0)) {
            $salesmanManagerId = $_SESSION['fil_salesman_manager'];
            $account_id = $_SESSION['accountId'];
            $res = $_objAdmin->_getSelectList2('table_salesman_hierarchy_relationship AS SHR 
    LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
    LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id', 's.salesman_id,SH.hierarchy_id,SH.sort_order', '', " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanManagerId ORDER BY SH.sort_order ASC ");
            $_objArrayList = new ArrayList();
            if (is_array($res) && (count($res) > 0)) {
                $sortOrder = $res[0]->sort_order;
                $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanManagerId), $sortOrder,
                    $account_id);

                if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                    $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                }

//                $salCond .= " AND dcc.salesman_id IN($bottomUsersIds) ";
                $salesmanCnd = " AND s.salesman_id IN($bottomUsersIds) ";
            }
        } else if (isset($_SESSION['fil_salesman_designation']) && ($_SESSION['fil_salesman_designation'] > 0)) {
            $account_id = $_SESSION['accountId'];
            $_objArrayList = new ArrayList();
            $getDesignationWiseBottomUsersIdArr = $_objArrayList->getDesignationWiseBottomUsers($_SESSION['fil_salesman_designation'], $account_id);

            if (is_array($getDesignationWiseBottomUsersIdArr) && (count($getDesignationWiseBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getDesignationWiseBottomUsersIdArr);
                $salesmanCnd = " AND s.salesman_id IN($bottomUsersIds) ";
            }
        } else {
            $salesmanCnd .= $salesman;
        }
        if (isset($_SESSION['fil_salesman_zone']) && $_SESSION['fil_salesman_zone'] > 0) {
//            $salCond .= ' AND z2.zone_id = "' . $_SESSION['fil_salesman_zone'] . '"';
            $salesmanCnd .= ' AND z2.zone_id = "' . $_SESSION['fil_salesman_zone'] . '"';
        }
        if (isset($_SESSION['fil_retailer_zone']) && $_SESSION['fil_retailer_zone'] > 0) {
//            $salCond .= ' AND z.zone_id = "' . $_SESSION['fil_retailer_zone'] . '"';
            $salesmanCnd .= ' AND z.zone_id = "' . $_SESSION['fil_retailer_zone'] . '"';
        }

        if (isset($_SESSION['fil_salesman_state']) && $_SESSION['fil_salesman_state'] > 0) {
//            $salCond .= ' AND s.state = "' . $_SESSION['fil_salesman_state'] . '"';
            $salesmanCnd .= ' AND s.state = "' . $_SESSION['fil_salesman_state'] . '"';
        }
        if (isset($_SESSION['fil_retailer']) && $_SESSION['fil_retailer'] > 0) {
//            $salCond .= ' AND r.retailer_id = "' . $_SESSION['fil_retailer'] . '"';
            $salesmanCnd .= ' AND r.retailer_id = "' . $_SESSION['fil_retailer'] . '"';
        }
        if (!isset($_SESSION['fil_from']) && empty($_SESSION['fil_from'])) {
            $_SESSION['fil_from'] = date('d M Y');
        }

        if (!isset($_SESSION['fil_to']) && empty($_SESSION['fil_to'])) {
            $_SESSION['fil_to'] = date('d M Y');
        }
        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $_SESSION['fil_from'] = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $_SESSION['fil_to'] = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
        }

        // -------------End dynamic filter condition------------

        if (isset($_SESSION['userLoginType']) && in_array($_SESSION['userLoginType'], array(6, 7, 8, 9))) {
            $condwhere = $this->getSalesMenID();
        }

        $where = " ot.ostype='R' $salesmanCnd AND ot.date_of_order BETWEEN '" . date('Y-m-d', strtotime($_SESSION['fil_from'])) . "' AND '" . date('Y-m-d', strtotime($_SESSION['fil_to'])) . "' ";

        if ($query) {
            if ($qtype == 'ot.date_of_order') {
                $query = date('Y-m-d', strtotime($query));
            }
            $where .= " AND $qtype LIKE '%$query%' ";
        }

        $auRec = $this->_getSelectList('table_order_os AS ot 
        LEFT JOIN table_order_detail_os AS tod ON tod.os_id = ot.os_id 
        LEFT JOIN table_retailer AS r ON r.retailer_id = ot.retailer_id 
        LEFT JOIN table_salesman AS s ON s.salesman_id = ot.salesman_id 
        LEFT JOIN state AS ss ON ss.state_id = s.state
        LEFT JOIN state AS rs ON rs.state_id = r.state
        LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id 
        LEFT JOIN table_zone_state_mapping AS zsm ON zsm.state_id = r.state AND zsm.account_id = r.account_id
        LEFT JOIN table_zone AS z ON z.zone_id = zsm.zone_id 
        LEFT JOIN table_zone_state_mapping AS zsm2 ON zsm2.state_id = s.state AND zsm2.account_id = s.account_id
        LEFT JOIN table_zone AS z2 ON z2.zone_id = zsm2.zone_id 
        LEFT JOIN table_item AS i ON i.item_id = tod.item_id 
        LEFT JOIN table_grade as g on g.grade_id = i.grade_id
        LEFT JOIN table_brands as b on b.brand_id=i.brand_id
        LEFT JOIN table_price AS p ON p.item_id = tod.item_id 
        LEFT JOIN table_category AS c ON c.category_id = i.category_id 
        LEFT JOIN table_retailer_channel_master AS cm ON cm.channel_id = r.channel_id', "ot.*,tod.*,r.retailer_name,r.retailer_code,cm.channel_name,r.display_outlet,s.salesman_name,rs.state_name AS retailer_state,
    z.zone_name AS retailer_zone,d.distributor_name,d.distributor_code,s.employee_code,i.item_name,ss.state_name AS salesman_state,z2.zone_name AS salesman_zone,i.item_code,c.category_name,(p.item_mrp * tod.quantity) as stockValuePTR, (p.item_dp * tod.quantity) as stockValueMRP,g.grade_name,b.brand_name", $rp, $where . $condwhere . $sort, '');

        $auRecCount = $this->_getSelectList('table_order_os AS ot LEFT JOIN table_order_detail_os AS tod ON tod.os_id = ot.os_id LEFT JOIN table_retailer AS r ON r.retailer_id = ot.retailer_id LEFT JOIN table_salesman AS s ON s.salesman_id = ot.salesman_id LEFT JOIN state AS ss ON ss.state_id = s.state
        LEFT JOIN state AS rs ON rs.state_id = r.state
        LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id 
        LEFT JOIN table_zone_state_mapping AS zsm ON zsm.state_id = r.state AND zsm.account_id = r.account_id
        LEFT JOIN table_zone AS z ON z.zone_id = zsm.zone_id 
        LEFT JOIN table_zone_state_mapping AS zsm2 ON zsm2.state_id = s.state AND zsm2.account_id = s.account_id
        LEFT JOIN table_zone AS z2 ON z2.zone_id = zsm2.zone_id 
        LEFT JOIN table_item AS i ON i.item_id = tod.item_id 
        LEFT JOIN table_grade as g on g.grade_id = i.grade_id
        LEFT JOIN table_brands as b on b.brand_id=i.brand_id
        LEFT JOIN table_price AS p ON p.item_id = tod.item_id 
        LEFT JOIN table_category AS c ON c.category_id = i.category_id 
        LEFT JOIN table_retailer_channel_master AS cm ON cm.channel_id = r.channel_id', 'count(*) AS total', '', $where . $condwhere);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            /* ---Display outlet ---*/
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } elseif ($auRec[$i]->display_outlet == 'No') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
//            $closingStock = $this->_getSelectList("table_order_os AS ot
//		  LEFT JOIN table_order_detail_os AS tod ON tod.os_id=ot.os_id
//		  LEFT JOIN table_order AS O ON O.salesman_id = ot.salesman_id AND O.retailer_id = ot.retailer_id
//		  LEFT JOIN table_order_detail AS OD ON OD.order_id = O.order_id", "tod.quantity AS closing_stock ,OD.quantity AS order_quantity ", "", " ot.salesman_id =" . $auRec[$i]->salesman_id . " AND ot.retailer_id ='" . $auRec[$i]->retailer_id . "' AND ot.date_of_order <='" . $auRec[$i]->date_of_order . "' AND tod.item_id = '" . $auRec[$i]->item_id . "' AND O.order_status!='D' ORDER BY ot.os_id, O.order_id DESC LIMIT 1,1");
            $closingStock = $this->_getSelectList("table_order_os AS ot
		  LEFT JOIN table_order_detail_os AS tod ON tod.os_id=ot.os_id
		  ", "tod.quantity ", "", " 
                 AND ot.retailer_id =" . $auRec[$i]->retailer_id . " AND tod.item_id = '" . $auRec[$i]->item_id . "'  AND os_detail_id < '" . $auRec[$i]->os_detail_id . "' ORDER BY ot.os_id desc limit 1 ");

            if (is_array($closingStock) && count($closingStock) > 0) {
                $closingstk = $closingStock[0]->quantity;
            } else {
                $closingstk = "NA";
            }
            //echo "<pre>";print_R($closingStock);


            $orderStock = $this->_getSelectList("table_order AS O 
		  LEFT JOIN table_order_detail AS tod ON tod.order_id = O.order_id
		  ", "sum(tod.quantity) AS order_quantity  ", "", " AND O.retailer_id =" .
                $auRec[$i]->retailer_id . " AND O.date_of_order ='" . $auRec[$i]->date_of_order . "' AND tod.item_id = '" . $auRec[$i]->item_id . "'  ORDER BY O.order_id DESC ");

            $odrstk = (isset($orderStock[0]->order_quantity) && !empty($orderStock[0]->order_quantity)) ?
                $orderStock[0]->order_quantity : 0;

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->salesman_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_state) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_zone) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_state) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_zone) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->channel_name) . '"';
            $json .= ',"' . addslashes($outlet) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->grade_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->quantity) . '"';
            $json .= ',"' . addslashes(round($auRec[$i]->stockValuePTR, 2)) . '"';
            $json .= ',"' . addslashes(round($auRec[$i]->stockValueMRP, 2)) . '"';
            $json .= ',"' . addslashes($_objAdmin->_changeDate($auRec[$i]->date_of_order)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->time_of_order) . '"';
            $json .= ',"' . addslashes($closingstk) . '"';
            $json .= ',"' . addslashes($odrstk) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo Start  : Jatin : 22th March 2023 : RetOpening Stock By date Report


    // Todo Start : Sagar : 23rd March 2023 : Route Wise State District City mapping
    function addRouteWiseStateDistrictCityMapping()
    {
        $data = [];
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
//        $data['route_name'] = mysql_escape_string(trim($_POST['route_name']));
        $remove = array("\n", "\r\n", "\r", "\t", "'");
        $data['route_name'] = mysqli_real_escape_string($this->db_connect_id, ucwords(preg_replace('/[^a-zA-Z0-9-_&,.|( )]/', '', str_replace($remove, '', trim($_POST['route_name'])))));
        $data['country_id'] = implode(',', $_POST['country']);
        $data['state_id'] = implode(',', $_POST['state']);
        $data['city_id'] = implode(',', $_POST['city']);
        $data['locations'] = implode(',', $_POST['market']);
        $data['status'] = 'A';
        $data['new'] = ((is_array($_POST['retailer_id']) && (count($_POST['retailer_id']))) || (is_array($_POST['distributor_id']) && (count($_POST['distributor_id'])))) ? '3' : '2';
        $data['created_at'] = date('Y-m-d H:i:s');
        //Todo Start :  Sudhanshu 20 may 2024 : add updated at column
        $data['updated_at'] = date('Y-m-d H:i:s');
        //Todo End : Sudhanshu 20 may 2024 : add updated at column
        $route_id = $this->_dbInsert($data, 'table_route');
        return $route_id;
    }

    function updateRouteWiseStateDistrictCityMapping($id)
    {
        $data = [];
        $data['country_id'] = implode(',', $_POST['country']);
        $data['state_id'] = implode(',', $_POST['state']);
        $data['city_id'] = implode(',', $_POST['city']);
        $data['locations'] = implode(',', $_POST['market']);
//        $data['route_name'] = mysql_escape_string(trim($_POST['route_name']));
        $remove = array("\n", "\r\n", "\r", "\t", "'");
        $data['route_name'] = mysqli_real_escape_string($this->db_connect_id, ucwords(preg_replace('/[^a-zA-Z0-9-_&,.|( )]/', '', str_replace($remove, '', trim($_POST['route_name'])))));
        $data['new'] = ((is_array($_POST['retailer_id']) && (count($_POST['retailer_id']))) || (is_array($_POST['distributor_id']) && (count($_POST['distributor_id'])))) ? '3' : '2';
        $data['updated_at'] = date('Y-m-d H:i:s');
        $this->_dbUpdate($data, 'table_route', " route_id=" . $id);
        return $id;
    }
    // Todo End : Sagar : 23rd March 2023 : Route Wise State District City mapping


    // Todo Start : Sagar : 29th March 2023 : Available Tertiary Stocks
    function showAvailableTertiaryStock()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname) $sortname = 'stk.stock_id';
        if (!$sortorder) $sortorder = 'ASC';

        $sort = " ORDER BY $sortname $sortorder ";

        if (!$page) $page = 1;
        if (!$rp) $rp = 10;

        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";

        $where = " stk.stock_id > 0 ";

        if (isset($_SESSION['dealerIdav']) && !empty($_SESSION['dealerIdav']) && ($_SESSION['dealerIdav'] > 0)) {
            $where .= " AND stk.retailer_id = " . $_SESSION['dealerIdav'];
        } else {
            if (($_SESSION['userLoginType'] == 4) && ($_SESSION['retailerId'] > 0)) {
                $where .= " AND stk.retailer_id = " . $_SESSION['retailerId'];
            }

            if (($_SESSION['userLoginType'] == 5) && ($_SESSION['salesmanId'] > 0)) {
                $retIdArr = $this->getRouteWiseRetailers($_SESSION['salesmanId'], $_SESSION['accountId']);

                if (is_array($retIdArr) && (count($retIdArr) > 0)) {
                    $retIds = implode(',', $retIdArr);
                    $where .= " AND stk.retailer_id IN($retIds) ";
                }
            }
        }

        if (isset($_SESSION['smcItmIdav']) && !empty($_SESSION['smcItmIdav']) && ($_SESSION['smcItmIdav'] > 0)) {
            $where .= " AND stk.item_id = " . $_SESSION['smcItmIdav'];
        }

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_tertiary_stock as stk
LEFT JOIN table_retailer as r ON r.retailer_id = stk.retailer_id
LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id
LEFT JOIN table_item as itm ON itm.item_id = stk.item_id
LEFT JOIN table_price as p on p.item_id = itm.item_id 
LEFT JOIN state as s on s.state_id = r.state 
LEFT JOIN table_zone_state_mapping as zsm on zsm.state_id = r.state and zsm.account_id = r.account_id
LEFT JOIN table_zone as z on z.zone_id = zsm.zone_id 
LEFT JOIN table_location as l on l.location_id = r.location_id 
LEFT JOIN city as c on c.city_id = r.city', " stk.stock_id,r.retailer_id,r.retailer_name,r.retailer_code,itm.item_id,itm.item_name,itm.item_code,p.item_dp,s.state_name,z.zone_name,c.city_name,d.distributor_name,d.distributor_code,l.location_name,stk.stock_qty,stk.created_at,stk.updated_at", $rp, $where . $sort);


        $auRecCount = $this->_getSelectList('table_tertiary_stock as stk
LEFT JOIN table_retailer as r ON r.retailer_id = stk.retailer_id
LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id
LEFT JOIN table_item as itm ON itm.item_id = stk.item_id
LEFT JOIN table_price as p on p.item_id = itm.item_id 
LEFT JOIN state as s on s.state_id = r.state 
LEFT JOIN table_zone_state_mapping as zsm on zsm.state_id = r.state and zsm.account_id = r.account_id
LEFT JOIN table_zone as z on z.zone_id = zsm.zone_id 
LEFT JOIN table_location as l on l.location_id = r.location_id 
LEFT JOIN city as c on c.city_id = r.city', 'COUNT(stk.stock_id) as total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $createdAt = date('d M Y H:i', strtotime($auRec[$i]->created_at));
            $updatedAt = '';
            if (isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at)) {
                $updatedAt = date('d M Y H:i', strtotime($auRec[$i]->updated_at));
            }
            $chck = '<input type="checkbox" name="stockEdit[]" class="stock-check" value="' . $auRec[$i]->stock_id . '" onclick="uncheck(this)" /> ';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stock_id . '",';
            $json .= '"cell":["' . addslashes($chck) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_dp) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zone_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->stock_qty) . '"';
            $json .= ',"' . addslashes($createdAt) . '"';
            $json .= ',"' . addslashes($updatedAt) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Sagar : 29th March 2023 : Available Tertiary Stocks

    // Todo Start : Jatin : 29rd March 2023 : Bill no configuration Master
    function showBillConfig()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'dynamic_string';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $where = " c.account_id=" . $_SESSION['accountId'];
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_bill_no_configuration as c',
            "c.*", $rp, $where, '');
        $auRecCount = $this->_getSelectList('table_bill_no_configuration as c',
            'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->config_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->dynamic_string) . '"';
            $json .= ',"' . addslashes($auRec[$i]->year_type) . '"';
            $json .= ',"' . addslashes($auRec[$i]->sequence) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addBillConfig()
    {
        $data['dynamic_string'] = mysql_escape_string($_POST['dynamic_string']);
        $data['year_type'] = mysql_escape_string($_POST['year_type']);
        $data['sequence'] = mysql_escape_string($_POST['sequence']);
        $data['account_id'] = $_SESSION['accountId'];
        $data['created_at'] = date('Y-m-d H:i:s');
        $data['updated_at'] = date('Y-m-d H:i:s');
        $id = $this->_dbInsert($data, 'table_bill_no_configuration');
        return $id;
    }

    function updateBillConfig($id)
    {

        $data['dynamic_string'] = mysql_escape_string($_POST['dynamic_string']);
        $data['year_type'] = mysql_escape_string($_POST['year_type']);
        $data['sequence'] = mysql_escape_string($_POST['sequence']);
        $data['account_id'] = $_SESSION['accountId'];
        $data['updated_at'] = date('Y-m-d H:i:s');
        $id = $this->_dbUpdate2($data, 'table_bill_no_configuration', " config_id=" . $id);
        return $id;
    }

    // Todo End : Jatin : 29rd March 2023 : Bill no configuration Master

    // Todo Start : Jatin : 3th April 2023 : Master to add Company details

    function showMasterCompanyDetails()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'company_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = '';
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_company_detail', "*", $rp, $sort, '');
        $auRecCount = $this->_getSelectList('table_company_detail', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"company_details_master.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' .
                $status .
                '</a>';
            $image = '<a href=\"rotate_img.php?cmd_id=' . base64_encode($auRec[$i]->id) . '\" target=\"_blank\">View Logo</a>';
            $item_image = '<a href=\"rotate_img.php?it_id=' . base64_encode($auRec[$i]->id) . '\" target=\"_blank\">View Logo</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->company_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->email) . '"';
            $json .= ',"' . addslashes($auRec[$i]->phone_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->company_address) . '"';
            $json .= ',"' . $image . '"';
            $json .= ',"' . $item_image . '"';
            $json .= ',"' . addslashes($auRec[$i]->footer_remark) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End: Jatin : 3th April 2023 : Master to add company details


    // Todo Start : Sagar : 3rd April 2023 : Stock Inward Ledger Report
    function showStockInwardReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname) $sortname = 'stk.stock_activity_id';
        if (!$sortorder) $sortorder = 'DESC';

        $sort = " ORDER BY $sortname $sortorder ";

        if (!$page) $page = 1;
        if (!$rp) $rp = 10;

        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";

        $startDate = date('Y-m-d', strtotime($_SESSION['disCyear'] . '-' . $_SESSION['dismonth'] . '-01'));
        $endDate = date('Y-m-t', strtotime($_SESSION['disCyear'] . '-' . $_SESSION['dismonth'] . '-01'));

        $where = " stk.activity_type = 'stock_inward' AND (stk.app_date BETWEEN '" . $startDate . "' AND '" . $endDate . "') ";

        if (!empty($_SESSION['SalAttList']) && (intval($_SESSION['SalAttList']) > 0)) {
            $where .= ' AND stk.salesman_id = ' . $_SESSION['SalAttList'];
        } else {
            $where .= $salesman;
        }

        if (!empty($_SESSION['dealerId']) && (intval($_SESSION['dealerId']) > 0)) {
            $where .= ' AND stk.retailer_id = ' . $_SESSION['dealerId'];
        } else {
            if (($_SESSION['userLoginType'] == 5) && ($_SESSION['salesmanId'] > 0)) {
                $retIdArr = $this->getRouteWiseRetailers($_SESSION['salesmanId'], $_SESSION['accountId']);
                if (is_array($retIdArr) && (count($retIdArr) > 0)) {
                    $retIds = implode(',', $retIdArr);
                    $where .= " AND stk.retailer_id IN($retIds) ";
                }
            }
        }

        if (!empty($_SESSION['smcItmId']) && (intval($_SESSION['smcItmId']) > 0)) {
            $where .= ' AND stk.item_id = ' . $_SESSION['smcItmId'];
        }


        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_tertiary_stock_activity as stk
        LEFT JOIN table_salesman as s ON s.salesman_id = stk.salesman_id 
        LEFT JOIN table_item as itm ON itm.item_id = stk.item_id
        LEFT JOIN table_retailer as r ON r.retailer_id = stk.retailer_id
        LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id
', 'stk.*,s.salesman_name,s.employee_code,d.distributor_name,d.distributor_code,r.retailer_name,r.retailer_code,itm.item_id,itm.item_name,itm.item_code',
            $rp, " $where $sort ");

        $auRecCount = $this->_getSelectList('table_tertiary_stock_activity as stk
        LEFT JOIN table_salesman as s ON s.salesman_id = stk.salesman_id 
        LEFT JOIN table_item as itm ON itm.item_id = stk.item_id
        LEFT JOIN table_retailer as r ON r.retailer_id = stk.retailer_id
        LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id', 'COUNT(stk.stock_activity_id) as total', '', $where);


        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $transDate = date('d M Y H:i A', strtotime($auRec[$i]->app_date . ' ' . $auRec[$i]->app_time));

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stock_activity_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($transDate)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->stock_qty) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Sagar : 3rd April 2023 : Stock Inward Ledger Report

    // Todo Start : Jatin : 10th April 2023 Update Company Details

    function updateCompanyFeature($id)
    {
        $data = [];
        if ($_FILES['item_image']['name'] != '') {
            $date = date('dmY-His');
            $target_folder = 'photo/';
            $original_image_name = $_FILES['item_image']['name'];
            $newname = rand(1, 9) . $date . basename(str_replace(" ", "", $_FILES['item_image']['name']));
            $upload_image = $target_folder . $newname;
            if ($this->compressImage($_FILES['item_image']['tmp_name'], $upload_image)) {
                $data['item_image'] = $newname;
                $data['item_download_link'] = $upload_image;
            }
        }
        if ($_FILES['logo']['name'] != '') {
            $date = date('dmY-His');
            $target_folder = 'photo/';
            $newname = rand(1, 9) . $date . basename(str_replace(" ", "", $_FILES['logo']['name']));
            $upload_image = $target_folder . $newname;
            if ($this->compressImage($_FILES['logo']['tmp_name'], $upload_image)) {
                $data['logo'] = $newname;
                $data['download_link'] = $upload_image;
            }
        }
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['email'] = mysql_escape_string($_POST['email']);
        $data['phone_no'] = mysql_escape_string($_POST['phone']);
        $data['company_name'] = mysql_escape_string($_POST['company_name']);
        $data['company_address'] = mysql_escape_string($_POST['company_address']);
        $data['footer_remark'] = mysql_escape_string($_POST['footer_remark']);
        $data['updated_at'] = date('Y-m-d H:i:s');
//        $data['created_at'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';

        $this->_dbUpdate($data, 'table_company_detail', " id=" . $id);
    }

    // Todo End : Jatin : 10th April 2023 Update Company Details

    // Todo Start : Jatin : 13th April 2023 Dynamic Available Tertiary Stock Report

    function showDynamicAvailableTertiaryStock()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname) $sortname = 'stk.stock_id';
        if (!$sortorder) $sortorder = 'ASC';

        $sort = " ORDER BY $sortname $sortorder ";

        if (!$page) $page = 1;
        if (!$rp) $rp = 10;

        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";

        $where = " stk.stock_id > 0 ";

//        if(isset($_SESSION['dealerIdav']) && !empty($_SESSION['dealerIdav']) && ($_SESSION['dealerIdav'] > 0)){
//            $where .= " AND stk.retailer_id = ". $_SESSION['dealerIdav'];
//        }
//
//        if(isset($_SESSION['smcItmIdav']) && !empty($_SESSION['smcItmIdav']) && ($_SESSION['smcItmIdav'] > 0)){
//            $where .= " AND stk.item_id = ". $_SESSION['smcItmIdav'];
//        }
        // ------------------Start dynamic filter ------------------

        if (isset($_SESSION['fil_item']) && !empty($_SESSION['fil_item'])) {
            $where .= " AND stk.item_id = '" . $_SESSION['fil_item'] . "' ";
        }
        if (isset($_SESSION['fil_retailer_auto']) && $_SESSION['fil_retailer_auto'] > 0) {
            $where .= ' AND stk.retailer_id = "' . $_SESSION['fil_retailer_auto'] . '"';
        } else {
            if (($_SESSION['userLoginType'] == 4) && ($_SESSION['retailerId'] > 0)) {
                $where .= " AND stk.retailer_id = " . $_SESSION['retailerId'];
            }

            if (($_SESSION['userLoginType'] == 5) && ($_SESSION['salesmanId'] > 0)) {
                $retIdArr = $this->getRouteWiseRetailers($_SESSION['salesmanId'], $_SESSION['accountId']);

                if (is_array($retIdArr) && (count($retIdArr) > 0)) {
                    $retIds = implode(',', $retIdArr);
                    $where .= " AND stk.retailer_id IN($retIds) ";
                }
            }
        }
        if (isset($_SESSION['fil_retailer_state']) && $_SESSION['fil_retailer_state'] > 0) {
            $where .= ' AND r.state= "' . $_SESSION['fil_retailer_state'] . '"';
        }
        if (isset($_SESSION['fil_retailer_zone']) && $_SESSION['fil_retailer_zone'] > 0) {
            $where .= ' AND zsm.zone_id = "' . $_SESSION['fil_retailer_zone'] . '"';
        }
        // Date range , month and year
//        if (!isset($_SESSION['fil_from']) && empty($_SESSION['fil_from'])) {
//            $_SESSION['fil_from'] = date('d M Y');
//        }
//
//        if (!isset($_SESSION['fil_to']) && empty($_SESSION['fil_to'])) {
//            $_SESSION['fil_to'] = date('d M Y');
//        }
//        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
//            $_SESSION['fil_from'] = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
//            $_SESSION['fil_to'] = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
//        }
        // ------------------End dynamic filter ------------------

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_tertiary_stock as stk
LEFT JOIN table_retailer as r ON r.retailer_id = stk.retailer_id
LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id
LEFT JOIN table_item as itm ON itm.item_id = stk.item_id
LEFT JOIN state as s on s.state_id = r.state 
LEFT JOIN table_zone_state_mapping as zsm on zsm.state_id = r.state and zsm.account_id = r.account_id
LEFT JOIN table_zone as z on z.zone_id = zsm.zone_id 
LEFT JOIN table_location as l on l.location_id = r.location_id 
LEFT JOIN city as c on c.city_id = r.city', " stk.stock_id,r.retailer_id,r.retailer_name,r.retailer_code,itm.item_id,itm.item_name,itm.item_code,s.state_name,z.zone_name,c.city_name,d.distributor_name,d.distributor_code,l.location_name,stk.stock_qty,stk.created_at,stk.updated_at", $rp, $where . $sort);


        $auRecCount = $this->_getSelectList('table_tertiary_stock as stk
LEFT JOIN table_retailer as r ON r.retailer_id = stk.retailer_id
LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id
LEFT JOIN table_item as itm ON itm.item_id = stk.item_id
LEFT JOIN state as s on s.state_id = r.state 
LEFT JOIN table_zone_state_mapping as zsm on zsm.state_id = r.state and zsm.account_id = r.account_id
LEFT JOIN table_zone as z on z.zone_id = zsm.zone_id 
LEFT JOIN table_location as l on l.location_id = r.location_id 
LEFT JOIN city as c on c.city_id = r.city', 'COUNT(stk.stock_id) as total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $createdAt = date('d M Y H:i', strtotime($auRec[$i]->created_at));
            $updatedAt = '';
            if (isset($auRec[$i]->updated_at) && !empty($auRec[$i]->updated_at)) {
                $updatedAt = date('d M Y H:i', strtotime($auRec[$i]->updated_at));
            }

            $chck = '<input type="checkbox" name="stockEdit[]" class="stock-check" value="' . $auRec[$i]->stock_id . '" onclick="uncheck(this)" /> ';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stock_id . '",';
            $json .= '"cell":["' . addslashes($chck) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zone_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->stock_qty) . '"';
            $json .= ',"' . addslashes($createdAt) . '"';
            $json .= ',"' . addslashes($updatedAt) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Jatin : 13th April 2023 Dynamic Available Tertiary Stock Report

    // Todo Start : Jatin : 18 April 2023 Retailer wise item code

    function showRetailerWiseItemCode()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.retailer_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder , it.item_name ASC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " AND b.brand_id IN(" . $RoleBrands . ")";
        }
        //Todo Start : sudhanshu 17 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasRetWiseItmCode']) && $_SESSION['MasRetWiseItmCode'] != 'all' && $_SESSION['MasRetWiseItmCode'] != '') {
            $statusCondi = " msi.status ='" . $_SESSION['MasRetWiseItmCode'] . "'";
        }
        //Todo End : sudhanshu 17 june 2024 : add status filter
        $where = " $statusCondi $brandCnd";
        //$where = "it.account_id = '" .$_SESSION['accountId']."'";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer_wise_item_code as msi
        LEFT JOIN table_retailer as r ON r.retailer_id = msi.retailer_id
        LEFT JOIN table_item as it ON it.item_id = msi.item_id
        LEFT JOIN table_brands as b on b.brand_id = it.brand_id
        LEFT JOIN table_category as c on c.category_id = it.category_id', "msi.*,r.retailer_name,r.retailer_code,it.item_code,b.brand_name,it.item_name,c.category_name", $rp, $where . $sort,
            '');
        $auRecCount = $this->_getSelectList('table_retailer_wise_item_code as msi
        LEFT JOIN table_retailer as r ON r.retailer_id = msi.retailer_id
        LEFT JOIN table_item as it ON it.item_id = msi.item_id
        LEFT JOIN table_brands as b on b.brand_id = it.brand_id
        LEFT JOIN table_category as c on c.category_id = it.category_id
', 'count(msi.id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"ret_wise_item_code.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' .
                $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ret_item_code) . '"';
            $json .= ',"' . $status . '"';
            $json .= "]";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Jatin : 18 April 2023 Retailer wise item code

    function addDisthirdPartyConfigMaster()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        if (isset($_POST['distributor_id']) && $_POST['distributor_id'] != '') {
            $data['distributor_id'] = mysql_escape_string($_POST['distributor_id']);
        }

        $data['3p_master_id'] = mysql_escape_string($_POST['conf_name']);
        $data['API_key'] = mysql_escape_string($_POST['API_key']);
        $data['secret_key'] = mysql_escape_string($_POST['secret_key']);
        $data['access_token'] = mysql_escape_string($_POST['access_token']);
        $data['user_name'] = mysql_escape_string($_POST['user_name']);
        if ($_POST['password'] != '') {
            $data['password'] = mysql_escape_string($_POST['password']);
        } else {
            $data['password'] = '';
        }
        $data['host'] = mysql_escape_string($_POST['host']);
        $data['url'] = mysql_escape_string($_POST['url']);
        $data['IP_address'] = mysql_escape_string($_POST['IP_address']);
        $data['db_name'] = mysql_escape_string($_POST['db_name']);
        $data['sysnr'] = mysql_escape_string($_POST['sysnr']);
        $data['organization_id'] = mysql_escape_string($_POST['organization_id']);
        $data['refresh_token'] = mysql_escape_string($_POST['refresh_token']);
        $data['auth_token'] = mysql_escape_string($_POST['auth_token']);
        $data['codepage'] = mysql_escape_string($_POST['codepage']);
        $data['client_id'] = mysql_escape_string($_POST['client_id']);
        $data['client_secret'] = mysql_escape_string($_POST['client_secret']);
        $data['status'] = 'A';
        $data['created_on'] = date('y-m-d H:i:s');

        $this->_dbInsert($data, 'table_account_3p_mapping');

        $last_id = mysqli_insert_id($this->db_connect_id);

        if ($last_id != '') {

            foreach ($_POST['master_id'] as $key => $value) {

                $data1['account_id'] = mysql_escape_string($_POST['account_id']);
                if (isset($_POST['distributor_id']) && $_POST['distributor_id'] != '') {
                    $data['distributor_id'] = mysql_escape_string($_POST['distributor_id']);
                }
                $data1['acc_3p_mapping_id'] = mysql_escape_string($last_id);
                $data1['3p_master_id'] = mysql_escape_string($_POST['conf_name']);
                $data1['pepup_master_id'] = mysql_escape_string($_POST['master_id'][$key]);


                foreach ($_POST['sync_pull' . $_POST['master_id'][$key] . ''] as $k => $v) {

                    if ($k = 0 || $k == 1) {
                        $sync_mode = 'Both';
                    } else {
                        if ($v == 'push') {
                            $sync_mode = 'Push';
                        }
                        if ($v == 'pull') {
                            $sync_mode = 'Pull';
                        }
                    }

                }

                $data1['sync_mode'] = mysql_escape_string($sync_mode);
                $data1['api_url'] = mysql_escape_string($_POST['api_url'][$key]);
                $data1['schedule_id'] = mysql_escape_string($_POST['schedule_id'][$key]);

                if ($_POST['sync_time'][$key] != '') {
                    $data1['sync_time'] = mysql_escape_string($_POST['sync_time'][$key]);
                } else {
                    $data1['sync_time'] = '';
                }
                $data1['created_on'] = date('y-m-d H:i:s');
//                echo "<pre>";
//                print_R($data1);
                $dis_id = $this->_dbInsert($data1, 'table_account_3p_data_sync_config');
            }

        }
        return $dis_id;

    }
    // Todo End : Jatin : 25th April 2023 : Add Distributor Third party configuration master

    // Todo Start : Jatin : 28 April 2023 : Distributor third api integration form

    function showdisthirdpartyIntegration()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'ta.company_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder , tpm.conf_name ASC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Added condition for role based access at brand lavel.

        //$where = " am.distributor_id !=''";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_account_3p_mapping as am
        LEFT JOIN table_account ta on ta.account_id = am.account_id
        LEFT JOIN table_distributors as d on d.distributor_id = am.distributor_id
        LEFT JOIN table_3p_master as tpm on tpm.id = am.3p_master_id', "d.distributor_name,am.acc_3p_mapping_id,ta.company_name,tpm.conf_name", $rp, $where
            . $sort,
            '');
        $auRecCount = $this->_getSelectList2('table_account_3p_mapping as am
        LEFT JOIN table_account ta on ta.account_id = am.account_id
        LEFT JOIN table_distributors as d on d.distributor_id = am.distributor_id
        LEFT JOIN table_3p_master as tpm on tpm.id = am.3p_master_id
        ', 'count(am.acc_3p_mapping_id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $targrt = ' target=\"blank\" ';
            $status = '<a href=\"view_dis_third_party_listing.php?stid=' .
                $auRec[$i]->acc_3p_mapping_id .
                '\" ' .
                $targrt .
                '>' .
                View . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->acc_3p_mapping_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->company_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->conf_name) . '"';
            $json .= ',"' . $status . '"';
            $json .= "]";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Jatin : 28 April 2023 : Distributor third api integration form

    // Todo Start: Jatin : 28 April 2023 : Update Distribuotr Third Api integration

    function updatedisthirdPartyConfigMaster($id)
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        if (isset($_POST['distributor_id']) && $_POST['distributor_id'] != '') {
            $data['distributor_id'] = mysql_escape_string($_POST['distributor_id']);
        }
        $data['3p_master_id'] = mysql_escape_string($_POST['conf_name']);
        $data['API_key'] = mysql_escape_string($_POST['API_key']);
        $data['secret_key'] = mysql_escape_string($_POST['secret_key']);
        $data['access_token'] = mysql_escape_string($_POST['access_token']);
        $data['user_name'] = mysql_escape_string($_POST['user_name']);
        if ($_POST['password'] != '') {
            $data['password'] = mysql_escape_string($_POST['password']);
        } else {
            $data['password'] = '';
        }
        $data['host'] = mysql_escape_string($_POST['host']);
        $data['url'] = mysql_escape_string($_POST['url']);
        $data['IP_address'] = mysql_escape_string($_POST['IP_address']);
        $data['db_name'] = mysql_escape_string($_POST['db_name']);
        $data['sysnr'] = mysql_escape_string($_POST['sysnr']);
        $data['organization_id'] = mysql_escape_string($_POST['organization_id']);
        $data['refresh_token'] = mysql_escape_string($_POST['refresh_token']);
        $data['auth_token'] = mysql_escape_string($_POST['auth_token']);
        $data['codepage'] = mysql_escape_string($_POST['codepage']);
        $data['client_id'] = mysql_escape_string($_POST['client_id']);
        $data['client_secret'] = mysql_escape_string($_POST['client_secret']);
        $data['status'] = 'A';
        $data['updated_on'] = date('y-m-d H:i:s');
        $aid = $this->_dbUpdate2($data, 'table_account_3p_mapping', " acc_3p_mapping_id=" . $id);

        foreach ($_POST['master_id'] as $key => $value) {

            $data1['account_id'] = mysql_escape_string($_POST['account_id']);
            if (isset($_POST['distributor_id']) && $_POST['distributor_id'] != '') {
                $data['distributor_id'] = mysql_escape_string($_POST['distributor_id']);
            }
            $data1['acc_3p_mapping_id'] = mysql_escape_string($id);
            $data1['3p_master_id'] = mysql_escape_string($_POST['conf_name']);
            $data1['pepup_master_id'] = mysql_escape_string($_POST['master_id'][$key]);

            foreach ($_POST['sync_pull' . $_POST['master_id'][$key] . ''] as $k => $v) {

                if ($k = 0 || $k == 1) {
                    $sync_mode = 'Both';
                } else {
                    if ($v == 'push') {
                        $sync_mode = 'Push';
                    }
                    if ($v == 'pull') {
                        $sync_mode = 'Pull';
                    }
                }
            }

            $data1['sync_mode'] = mysql_escape_string($sync_mode);
            $data1['schedule_id'] = mysql_escape_string($_POST['schedule_id'][$key]);
            $data1['api_url'] = mysql_escape_string($_POST['api_url'][$key]);
            if ($_POST['sync_time'][$key] != '') {
                $data1['sync_time'] = mysql_escape_string($_POST['sync_time'][$key]);
            } else {
                $data1['sync_time'] = '';
            }
            $data1['updated_on'] = date('y-m-d H:i:s');

            $dis_id = $this->_dbUpdate2($data1, 'table_account_3p_data_sync_config', " id=" . $_REQUEST['id'][$key]);
        }

        return $dis_id;

    }
    // Todo End : Jatin : 28 April 2023 : Update Distribuotr Third Api integration

    // Todo Start : Jatin : 8 May 2023 Distributor no order Reason master

    function showTagDisList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'tag_type';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " tag_type='7'";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_tags', "*", $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_tags', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"Dis_no_order_reason_master.php?statusId=' . $auRec[$i]->tag_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->tag_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addDisTag()
    {
        $data['tag_type'] = mysql_escape_string($_POST['tag_type']);
        $data['tag_description'] = mysql_escape_string($_POST['tag_description']);
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_tags');
        return $id;
    }

    function updateDisTag($id)
    {
        $data['tag_type'] = mysql_escape_string($_POST['tag_type']);
        $data['tag_description'] = mysql_escape_string($_POST['tag_description']);
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_tags', " tag_id=" . $id);
        return $id;
    }

    // Todo End : Jatin : 8 May 2023 Distributor no order Reason master


    //Todo Start:Sagar : 23rd March 2023 : Product Wise Sales Report
    function showProductWiseSalesReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname) $sortname = 'tm.mir_id';
        if (!$sortorder) $sortorder = 'DESC';

        $sort = " ORDER BY $sortname $sortorder";

        if (!$page) $page = 1;
        if (!$rp) $rp = 50;

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if (isset($_SESSION['SalAttList']) && !empty($_SESSION['SalAttList'])) {
            $salesmanCondi = " AND tm.salesman_id='" . $_SESSION['SalAttList'] . "' ";
        } else {
            $salesmanCondi = $salesman;
        }

        $where = " (tm.server_date BETWEEN '" . date('Y-m-d', strtotime($_SESSION['FromAttList'])) . "' AND '" . date('Y-m-d', strtotime($_SESSION['ToAttList'])) . "') $salesmanCondi ";

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

//        $auRec = $this->_getSelectList2('table_retailer_type_item_price_mapping as rtim
//			left join table_item as i ON i.item_id = rtim.item_id
//			left join table_retailer_type_master as rt ON rt.type_id = rtim.retailer_type_id
//			left join table_category as c on i.category_id = c.category_id
//			left join table_brands as b on b.brand_id=i.brand_id',
//            "rtim.*,i.item_name,i.item_code,c.category_name,b.brand_name,rt.type_name", $rp, " $where $sort ");


        $auRec = $this->_getSelectList('table_mir as tm 
                            left join table_salesman as s on s.salesman_id = tm.salesman_id 
                            left join table_retailer as tr on tr.retailer_id = tm.retailer_id
                            LEFT JOIN table_retailer_group as rg ON rg.group_id = tr.group_id
                            left join table_retailer_type_master as rtm ON rtm.type_id=tr.type_id
                            left join table_retailer_channel_master as rc ON rc.channel_id=tr.channel_id 
                            left join table_relationship as rel ON rel.relationship_id=tr.relationship_id 
                            LEFT JOIN table_distributors as d on d.distributor_id = tr.distributor_id
', 'tm.*,s.salesman_name,s.employee_code,tr.retailer_name,tr.retailer_code,d.distributor_name,d.distributor_code,rg.group_name,rtm.type_name,rc.channel_name,rel.relationship_code as relation
', $rp, "  $where $sort");


        $auRecCount = $this->_getSelectList('table_mir as tm 
                            left join table_salesman as s on s.salesman_id = tm.salesman_id 
                            left join table_retailer as tr on tr.retailer_id = tm.retailer_id
                            LEFT JOIN table_retailer_group as rg ON rg.group_id = tr.group_id
                            left join table_retailer_type_master as rtm ON rtm.type_id=tr.type_id
                            left join table_retailer_channel_master as rc ON rc.channel_id=tr.channel_id 
                            left join table_relationship as rel ON rel.relationship_id=tr.relationship_id 
                            LEFT JOIN table_distributors as d on d.distributor_id = tr.distributor_id', 'COUNT(tm.mir_id) as total', '', "  $where ");

//        echo '<pre>';
//        print_r($auRec);
//        print_r($auRecCount);
//        die(' die here');

        $total = $auRecCount[0]->total;

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }

        for ($i = 0; $i < count($auRec); $i++) {

            $viewDetLink = '<a href=\"product_wise_sales_details.php?mir_id=' . $auRec[$i]->mir_id . '\" ' . $targetBlank . '>View Details</a>';

            $OrdrNoLink = '<a href=\"product_wise_sales_details.php?mir_id=' . $auRec[$i]->mir_id . '\" ' . $targetBlank . '>' . $auRec[$i]->mir_id . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->mir_id . '",';
            $json .= '"cell":["' . addslashes($this->_changeDate($auRec[$i]->server_date)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->server_time) . '"';
            $json .= ',"' . $OrdrNoLink . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->group_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->channel_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->relation) . '"';
            $json .= ',"' . addslashes($auRec[$i]->type_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ttl_order_amt) . '"';
            $json .= ',"' . $viewDetLink . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo End:Sagar : 23rd March 2023 : Product Wise Sales Report


    function DynamicshowOrderList($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query == 'Yes') {
            $query = 'Y';
        } elseif ($query == 'No') {
            $query = 'N';
        }
        // echo "<pre>"; print_r($_SESSION);
        $queryConditions = '';
        if (isset($_SESSION['fil_from']) && !empty($_SESSION['fil_from'])) {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['fil_from'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if (isset($_SESSION['fil_to']) && !empty($_SESSION['fil_to'])) {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['fil_to'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $queryConditions .= " AND o.distributor_id=" . $_SESSION['distributorId'];
        } else if (isset($_SESSION['fil_distributor']) && !empty($_SESSION['fil_distributor']) && $_SESSION['fil_distributor'] > 0) {
            $queryConditions .= " AND o.distributor_id=" . $_SESSION['fil_distributor'];
        }

        if ($_SESSION['userLoginType'] == 7 && $_SESSION['stockistId'] != "" && $_SESSION['stockistId'] > 0) {
            $queryConditions .= " AND d.stockist_id=" . $_SESSION['stockistId'];

        } else if (isset($_SESSION['fil_stockist']) && !empty($_SESSION['fil_stockist']) && $_SESSION['fil_stockist'] > 0) {
            $queryConditions .= " AND d.stockist_id=" . $_SESSION['fil_stockist'];
        }
        $salesmanCnd = "";
        if ($_SESSION['userLoginType'] == 5) {
            $salesmanCnd = str_replace("s.", "o.", $salesman);
        }

        if (isset($_SESSION['fil_salesman']) && !empty($_SESSION['fil_salesman']) && $_SESSION['fil_salesman'] > 0) {
            $salesmanCnd = " AND o.salesman_id=" . $_SESSION['fil_salesman'];
        } else if (isset($_SESSION['fil_salesman_manager']) && ($_SESSION['fil_salesman_manager'] > 0)) {
            $salesmanManagerId = $_SESSION['fil_salesman_manager'];
            $account_id = $_SESSION['accountId'];
            $res = $this->_getSelectList2('table_salesman_hierarchy_relationship AS SHR 
				LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
				LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id', 's.salesman_id,SH.hierarchy_id,SH.sort_order', '', " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanManagerId ORDER BY SH.sort_order ASC ");

            if (is_array($res) && (count($res) > 0)) {
                $sortOrder = $res[0]->sort_order;
                $_objArrayList = new ArrayList();
                $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanManagerId), $sortOrder, $account_id);

                if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                    $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                }

                $salesmanCnd = " AND o.salesman_id IN($bottomUsersIds) ";
            }
        } else if (isset($_SESSION['fil_salesman_designation']) && ($_SESSION['fil_salesman_designation'] > 0)) {
            $_objArrayList = new ArrayList();
            $account_id = $_SESSION['accountId'];
            $getDesignationWiseBottomUsersIdArr = $_objArrayList->getDesignationWiseBottomUsers($_SESSION['fil_salesman_designation'], $account_id);

            if (is_array($getDesignationWiseBottomUsersIdArr) && (count($getDesignationWiseBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getDesignationWiseBottomUsersIdArr);
                $salesmanCnd .= " AND o.salesman_id IN($bottomUsersIds) ";
            }
        } else {
            $salesmanCnd .= '';
        }
        //echo $bottomUsersIds; die;
        if (isset($_SESSION['fil_retailer']) && !empty($_SESSION['fil_retailer']) && $_SESSION['fil_retailer'] > 0) {
            $queryConditions .= " AND o.retailer_id=" . $_SESSION['fil_retailer'];
        }
        if (isset($_SESSION['fil_salesman_state']) && !empty($_SESSION['fil_salesman_state']) && $_SESSION['fil_salesman_state'] > 0) {
            $queryConditions .= " AND s.state=" . $_SESSION['fil_salesman_state'];
        }
        if (isset($_SESSION['fil_retailer_state']) && !empty($_SESSION['fil_retailer_state']) && $_SESSION['fil_retailer_state'] > 0) {
            $queryConditions .= " AND r.state=" . $_SESSION['fil_retailer_state'];
        }
        if (isset($_SESSION['fil_distributor_state']) && !empty($_SESSION['fil_distributor_state']) && $_SESSION['fil_distributor_state'] > 0) {
            $queryConditions .= " AND d.state=" . $_SESSION['fil_distributor_state'];
        }

        if (isset($_SESSION['fil_salesman_zone']) && !empty($_SESSION['fil_salesman_zone']) && $_SESSION['fil_salesman_zone'] > 0) {
            $queryConditions .= " AND zms.zone_id=" . $_SESSION['fil_salesman_zone'];
        }
        if (isset($_SESSION['fil_retailer_zone']) && !empty($_SESSION['fil_retailer_zone']) && $_SESSION['fil_retailer_zone'] > 0) {
            $queryConditions .= " AND zmr.zone_id=" . $_SESSION['fil_retailer_zone'];
        }
        if (isset($_SESSION['fil_distributor_zone']) && !empty($_SESSION['fil_distributor_zone']) && $_SESSION['fil_distributor_zone'] > 0) {
            $queryConditions .= " AND zmd.zone_id=" . $_SESSION['fil_distributor_zone'];
        }
        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $firstDate = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $lastdate = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $fromdate = " and o.date_of_order >= '" . $firstDate . "'";
            $todate = " and o.date_of_order <= '" . $lastdate . "'";
        }

//		if(isset($_SESSION['fil_order_status']) && !empty($_SESSION['fil_order_status'])){
//			$queryConditions .= " AND o.order_status='".$_SESSION['fil_order_status']."'";
//		}
//		else{
//			//$queryConditions .=" and order_status IN('A','I') ";
//		}
        if (isset($_SESSION['fil_order_type']) && !empty($_SESSION['fil_order_type'])) {
            $queryConditions .= " AND o.order_type='" . $_SESSION['fil_order_type'] . "'";
        }

        // Todo Start : add order category FIler : sudhanshu : 13 march
        if (isset($_SESSION['fil_order_category']) && !empty($_SESSION['fil_order_category']) && count($_SESSION['fil_order_category']) > 0) {
            $orderCategory = $_SESSION['fil_order_category'];
            $orderCate = "'" . implode("', '", $orderCategory) . "'";
            if (implode(',', $orderCategory) != 'all') {
                $queryConditions .= " AND LOWER(o.order_type) IN (" . $orderCate . ")";
            }
        }
        // Todo End : add order category FIler : sudhanshu : 13 march

        // Todo Start : add order ditributor type filter : sudhanshu : 05 jul 2024
        if (isset($_SESSION['fil_distributor_type']) && !empty($_SESSION['fil_distributor_type']) && $_SESSION['fil_distributor_type'] > 0) {
            $disType = $_SESSION['fil_distributor_type'];


            $queryConditions .= " AND d.distributor_type_id = $disType ";

        }
        // Todo End : add order ditributor type filter : sudhanshu : 05 jul 2024
//		else{
//			//$queryConditions .=" AND o.order_type !='Return'";
//            }

        $queryConditions = $queryConditions . $salesmanCnd . $fromdate . $todate;

        $rtype = " o.type='R' ";
        $odrDtlJoin = "";
        $odrDtlgrpBy = "";
        if ($rtype) {
            if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
                $RoleBrands = $this->getUserRoleBrand();
                if (!empty($RoleBrands)) {
                    $salesman = " AND i.brand_id IN(" . $RoleBrands . ")";
                    $odrDtlJoin = " left join table_order_detail as ord on o.order_type != 'No' and ord.order_id = o.order_id and ord.type = 1
					left join table_item as i on i.item_id = ord.item_id ";
                    $odrDtlgrpBy = " GROUP BY o.order_id ";
                }
            }
            $where = $queryConditions;
            if ($query) $where .= " AND $qtype LIKE '%$query%' ";
            $auRec = $this->_getSelectList("table_order as o    
			left join table_order_detail as ord on o.order_type != 'No' and ord.order_id = o.order_id and ord.type = 1
            left join table_item as i on i.item_id = ord.item_id
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id
            left join table_salesman_hierarchy_relationship as shr on shr.salesman_id = s.salesman_id
            left join table_salesman as s2 on s2.salesman_id=shr.rpt_user_id
            left join table_distributors as d on o.distributor_id=d.distributor_id 
            left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id 
            LEFT JOIN table_retailer_group as rg ON rg.group_id = r.group_id
            left join table_retailer_type_master as rtm ON rtm.type_id=r.type_id
            left join table_relationship as rel ON rel.relationship_id=r.relationship_id 
            left join state as str on str.state_id=r.state 
            left join state as sts on sts.state_id=s.state 
            left join state as std on std.state_id=d.state 
            left join city as c on c.city_id=r.city 
			left join table_zone_state_mapping as zms on zms.state_id=s.state and zms.account_id = s.account_id
			left join table_zone as sz on sz.zone_id=zms.zone_id 
			left join table_zone_state_mapping as zmr on zmr.state_id=r.state and zmr.account_id = r.account_id
			left join table_zone as rz on rz.zone_id=zmr.zone_id
			left join table_zone_state_mapping as zmd on zmd.state_id=d.state and zmd.account_id = d.account_id
			left join table_zone as dz on dz.zone_id=zmd.zone_id
            left join table_distributor_type_master as dt on dt.dis_type_id = d.distributor_type_id",
                "o.order_id,o.order_by,count(ord.item_id) as total_item,SUM(ord.acc_quantity) as total_ordered_qty,o.retailer_id,o.order_type,o.order_status,
			o.date_of_order,o.time_of_order,o.acc_total_invoice_amount,o.updated_by_app,
r.retailer_name,r.retailer_code,r.retailer_address,r.retailer_location,r.lat as retlat,cm.channel_name,
r.display_outlet,r.lng as retlng,s.salesman_name,s.employee_code,
s2.salesman_name as rpt_to,d.distributor_name,d.distributor_code,sz.zone_name as sal_zone,rz.zone_name as ret_zone,dz.zone_name as dist_zone,str.state_name as ret_state,sts.state_name as sal_state,std.state_name as dist_state,c.city_name,rg.group_name,rtm.type_name,rel.relationship_code as relation,o.delivery_date,o.comments,o.tag_description,r.retailer_phone_no,o.photo_count,dt.dis_type_name", $rp, $where . " group by o.order_id " . $sort, '');

            $auRecCount = $this->_getSelectList("table_order as o $odrDtlJoin           
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id            
            left join table_distributors as d on o.distributor_id=d.distributor_id 
            left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id
            left join state as str on str.state_id=r.state 
            left join state as sts on sts.state_id=s.state 
            left join state as std on std.state_id=d.state
			left join table_zone_state_mapping as zms on zms.state_id=s.state and zms.account_id = s.account_id
			left join table_zone as sz on sz.zone_id=zms.zone_id 
			left join table_zone_state_mapping as zmr on zmr.state_id=r.state and zmr.account_id = r.account_id
			left join table_zone as rz on rz.zone_id=zmr.zone_id
			left join table_zone_state_mapping as zmd on zmd.state_id=d.state and zmd.account_id = d.account_id
			left join table_zone as dz on dz.zone_id=zmd.zone_id
            left join table_distributor_type_master as dt on dt.dis_type_id = d.distributor_type_id			
			", 'COUNT(o.order_id) as total', '', $where . $odrDtlgrpBy . $sort);

            $total = $auRecCount[0]->total;
            if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
                if (!empty($RoleBrands)) {
                    $total = count($auRecCount);
                }
            } else {
                $total = $auRecCount[0]->total;
            }

        }


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {

            //----- Order by condtion -----

            switch ($auRec[$i]->order_by) {
                case 'S':
                    $order_by = $this->AliaseUsers['salesman'];
                    break;
                case "D":
                    $order_by = $this->AliaseUsers['distributor'];
                    break;
                case "R":
                    $order_by = $this->AliaseUsers['retailer'];
                    break;
                default :
                    $order_by = '';
            }

            //--------

            $orderType = '';
            if (strtolower($auRec[$i]->order_type) == 'yes') {
                $orderType = 'Sales Order';
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = "Cancelled";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "P";
            }
            if (strtolower($auRec[$i]->order_type) == 'no') {
                $orderType = 'No Order';

                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
                $color = ($auRec[$i]->order_status == 'A') ? "I" : "P";
                $NoOrderImage = '<a href=\"no_order_image.php?ordId=' . base64_encode($auRec[$i]->order_id) . '\" ' . $targetBlank . '>View Image</a>';
            } else {
                $NoOrderImage = "-";
            }
            if (strtolower($auRec[$i]->order_type) == 'adhoc') {
                //Todo Start : sudhansh add Nomenclature for adhoc
                $orderType = $this->AliaseUsers('adhoc') . ' Order';
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New " . $this->AliaseUsers('adhoc') . " Order";
                }
                //Todo End : sudhansh add Nomenclature for adhoc
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = "Cancelled";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }

            if (strtolower($auRec[$i]->order_type) == 'return') {
                $orderType = 'Return Order';
            }

            if ($auRec[$i]->updated_by_app > 0) {
                $color = 'U';
            }

            if ($flag == 1) {
                $photo = '<a href=\"retailer_survey.php?retId=' . $auRec[$i]->retailer_id . '\" ' . $targetBlank . '>View Survey Photo</a>';
            }
            //Retailer location maping only survey table
            if ($auRec[$i]->retlat != '') {
                $map = '<a href=\"show_map.php?ord=' . base64_encode($auRec[$i]->order_id) . '\" ' . $targetBlank . '>View on Map</a>';
                $colortd = "out";
            } else {
                $map = "-";
                $colortd = "out";
            }
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            $date_of_delivery = $this->_changeDate($auRec[$i]->delivery_date);
            $salRptTo = '';
            $salRptTo = $auRec[$i]->rpt_to;
            /*----Display Outlet ----*/
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            //Todo Start : sudhanshu 28 june 2024 : add download pdf column
            $downPDF = "";
            if (strtolower($auRec[$i]->order_type) != 'no') {
                $downPDF = '<a href="download_order_pdf.php?ordId=' . base64_encode($auRec[$i]->order_id) . '" ' . $targetBlank . '>Download PDF</a>';

            }
            //Todo End : sudhanshu 28 june 2024 : add download pdf column
            $viewOrderImage = '<a href="dynamic_order_image.php?ordId=' . base64_encode($auRec[$i]->order_id) . '" ' . $targetBlank . '>View Image</a>';
            //$ttlItems = isset($orderitms[$auRec[$i]->order_id]) && !empty($orderitms[$auRec[$i]->order_id]) ? $orderitms[$auRec[$i]->order_id] : 0;
            $ttlItems = $auRec[$i]->total_item;
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->acc_total_invoice_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($ttlItems)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total_ordered_qty)) . '"';
          
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_type_name)) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->region_name)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dist_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dist_state)) . '"';
          
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_state)) . '"';
            $json .= ',"' . ucwords(addslashes($salRptTo)) . '"';
          
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->group_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->relation)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->type_name)) . '"';
            $json .= ',"' . ucwords(addslashes($outlet)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->retailer_phone_no))) . '"';
            $json .= ',"' . $map . '"';
            $json .= ',"' . $photo . '"';
            $json .= ',"' . $orderType . '"';
            $json .= ',"' . $order_by . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . $NoOrderImage . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->comments))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . ucwords(addslashes($date_of_delivery)) . '"';
            $json .= ',"' . ucwords(addslashes($viewOrderImage)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"';
            $json .= ',"' . ucwords(addslashes($downPDF)) . '"]';

            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

// Todo Start : Jatin : 19 May 2023 Retailer type wise item code

    function showRetailerTypeWiseItemCode()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.type_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder , it.item_name ASC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " AND b.brand_id IN(" . $RoleBrands . ")";
        }
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasRetTypeItmCode']) && $_SESSION['MasRetTypeItmCode'] != 'all' && $_SESSION['MasRetTypeItmCode'] != '') {
            $statusCondi = " msi.status ='" . $_SESSION['MasRetTypeItmCode'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi $brandCnd ";
        //$where = "it.account_id = '" .$_SESSION['accountId']."'";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer_type_wise_item_code as msi
        LEFT JOIN table_retailer_type_master as r ON r.type_id = msi.type_id
        LEFT JOIN table_item as it ON it.item_id = msi.item_id
        LEFT JOIN table_brands as b on b.brand_id = it.brand_id
        LEFT JOIN table_category as c on c.category_id = it.category_id', "msi.*,r.type_name,it.item_code,b.brand_name,it.item_name,c.category_name", $rp, $where . $sort,
            '');
        $auRecCount = $this->_getSelectList('table_retailer_type_wise_item_code as msi
        LEFT JOIN table_retailer_type_master as r ON r.type_id = msi.type_id
        LEFT JOIN table_item as it ON it.item_id = msi.item_id
        LEFT JOIN table_brands as b on b.brand_id = it.brand_id
        LEFT JOIN table_category as c on c.category_id = it.category_id
', 'count(msi.id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $created_date = $this->_changeDate($auRec[$i]->created_at);
            $updated_date = $this->_changeDate($auRec[$i]->updated_at);
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"ret_type_wise_item_code.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' .
                $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->type_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ret_item_code) . '"';
            $json .= ',"' . addslashes($created_date) . '"';
            $json .= ',"' . addslashes($updated_date) . '"';
            $json .= ',"' . $status . '"';
            $json .= "]";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Jatin : 19 May 2023 Retailer type wise item code

    // Todo Start : Sagar : 2nd June 2023 : Edit Stock Inward Transactions
    function showEditStockInwardTransactions($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname) $sortname = 'stk.retailer_id';
        if (!$sortorder) $sortorder = 'ASC';

        $sort = " ORDER BY $sortname $sortorder, stk.item_id ASC, stk.app_date ASC, stk.app_time ASC, stk.created_at ASC ";

        if (!$page) $page = 1;
        if (!$rp) $rp = 10;

        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";

        $startDate = date('Y-m-d', strtotime($_SESSION['fromDate']));
        $endDate = date('Y-m-d', strtotime($_SESSION['toDate']));

//        echo '<pre>';
//        print_r($startDate);
//        echo '<br>';
//        print_r($endDate);
//        die(' die here');

        $where = " stk.activity_type IN('stock_inward','stock_edit') AND (stk.app_date BETWEEN '" . $startDate . "' AND '" . $endDate . "') ";

        if (!empty($_SESSION['SalAttList']) && (intval($_SESSION['SalAttList']) > 0)) {
            $where .= ' AND stk.salesman_id = ' . $_SESSION['SalAttList'];
        } else {
            $where .= $salesman;
        }

        if (!empty($_SESSION['dealerId']) && (intval($_SESSION['dealerId']) > 0)) {
            $where .= ' AND stk.retailer_id = ' . $_SESSION['dealerId'];
        }

        if (!empty($_SESSION['smcItmId']) && (intval($_SESSION['smcItmId']) > 0)) {
            $where .= ' AND stk.item_id = ' . $_SESSION['smcItmId'];
        }


        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_tertiary_stock_activity as stk
        LEFT JOIN table_salesman as s ON s.salesman_id = stk.salesman_id 
        LEFT JOIN table_item as itm ON itm.item_id = stk.item_id
        LEFT JOIN table_retailer as r ON r.retailer_id = stk.retailer_id
        LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id', 'stk.*,s.salesman_name,s.employee_code,r.retailer_name,r.retailer_code,itm.item_id,itm.item_name,itm.item_code,d.distributor_name,d.distributor_code', $rp, " $where $sort ");

        $auRecCount = $this->_getSelectList('table_tertiary_stock_activity as stk
        LEFT JOIN table_salesman as s ON s.salesman_id = stk.salesman_id 
        LEFT JOIN table_item as itm ON itm.item_id = stk.item_id
        LEFT JOIN table_retailer as r ON r.retailer_id = stk.retailer_id
        LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id', 'COUNT(stk.stock_activity_id) as total', '', $where);


        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $transDate = date('d M Y H:i A', strtotime($auRec[$i]->app_date . ' ' . $auRec[$i]->app_time));
            $stockB4Act = $auRec[$i]->stock_before_activity;

            $stockAftrAct = $auRec[$i]->stock_after_activity;
            $activityType = '';
            $refDate = '';
            if (strtolower($auRec[$i]->activity_type) == 'stock_inward') {
                $activityType = 'Stock Inward';
                $stockQty = $auRec[$i]->stock_qty;
            }

            if (strtolower($auRec[$i]->activity_type) == 'stock_edit') {
                $activityType = 'Stock Update';
                $stockQty = '- ' . $auRec[$i]->stock_qty;
                if (isset($auRec[$i]->ref_date) && !empty($auRec[$i]->ref_date)) {
                    $refDate = date('d M Y H:i A', strtotime($auRec[$i]->ref_date));
                }
            }

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stock_activity_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($transDate)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($activityType) . '"';
            $json .= ',"' . addslashes($stockB4Act) . '"';
            $json .= ',"' . addslashes($stockQty) . '"';
            $json .= ',"' . addslashes($stockAftrAct) . '"';
            $json .= ',"' . addslashes($refDate) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Sagar : 2nd June  2023 : Edit Stock Inward Transactions

    // Todo Start : Jatin : 7 June 2023 : Distributor Payment Collection
    function showDistributorPaymentTransactions()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'o.payment_date';
        if (!$sortorder)
            $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromDisList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToDisList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['distributor_id'] != '' && $_SESSION['distributor_id'] > 0) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributor_id'] . "' ";
        }
        if ($_SESSION['userLoginType'] != '' && $_SESSION['userLoginType'] == 7) {
            $stCond = " AND o.stockist_id='" . $_SESSION['stockistId'] . "' ";
        }
        $where = " o.payment_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' $disLogCond $stCond";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_payment_transactions AS o
				LEFT JOIN table_distributors as d on d.distributor_id = o.distributor_id
				LEFT JOIN table_stockist as st ON st.stockist_id = o.stockist_id
				LEFT JOIN table_payment_method as pp on pp.payment_method_id = o.payment_method_id',
            " o.*, d.distributor_name, d.distributor_code, st.stockist_name, st.stockist_code, pp.payment_method_desc",
            $rp, $where . $sort, '');
        $auRec1 = $this->_getSelectList('table_distributor_payment_transactions AS o
				LEFT JOIN table_distributors as d on d.distributor_id = o.distributor_id
				LEFT JOIN table_stockist as st ON st.stockist_id = o.stockist_id', "COUNT(*) AS total", '', $where . $sort, '');
        $total = $auRec1[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'C') ? 'Cancelled' : '';
            $pending_amount = ROUND((ROUND($auRec[$i]->total_amount, 0) - ($auRec[$i]->adjusted_amount)), 0);
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->payment_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->payment_id)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->payment_date))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->payment_time)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->payment_ref_no)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(ROUND($auRec[$i]->total_amount), 0))) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(ROUND($auRec[$i]->adjusted_amount), 0))) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($pending_amount, 2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->payment_method_desc)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->cheque_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->bank_details)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace(array("\n", "\r"), '', $auRec[$i]->payment_remarks))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->clearing_status)) . '"';
            $json .= ',"' . ucwords($status) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->remarks)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Jatin : 7 June 2023 : Distributor Payment Collection

    // Todo Start : Jatin : 8 June 2023 : Distributor Payment adjustment


    function showDistributorCreditEntries($distributor_id, $stockist_id)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'category_name';
        if (!$sortorder)
            $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " cat_type = 'C' ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auResult = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Return/Auto CN' as doc_type,substr(o.bill_no, -10) as document_no
	,o.bill_date,o.due_date, 
	o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.acc_total_invoice_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.bill_date as document_date 
	FROM table_distributor_invoice as o 
	left join table_distributor_payment_received as p on p.return_order_id = o.invoice_id 
	WHERE o.order_type='Return' AND o.order_for='D' AND o.invoice_status='A' 
	AND o.order_status='D' AND o.stockist_id='" . $stockist_id . "' AND o.distributor_id='" . $distributor_id . "' 
	AND o.clearing_status!='Full' Group by o.invoice_id)
	
	Union
	
	(SELECT o.note_id as id, 'CN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,
	o.due_date, o.total_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.date_of_note as document_date 
	FROM table_dis_credit_debit_note as o 
	left join table_distributor_payment_received as p on p.credit_note_id = o.note_id 
	WHERE o.note_type='C' AND o.note_status='A' AND o.stockist_id='" . $stockist_id . "' 
	AND o.distributor_id='" . $distributor_id . "' AND o.clearing_status!='Full' Group by o.note_id)
	
	union
	
	(SELECT o.payment_id as id, 'PMT' as doc_type ,o.payment_id as document_no, o.payment_date as bill_date,o.payment_date as due_date, o.total_amount as total_amount,
	COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.total_amount-COALESCE(sum(p.received_amount), 0) AS 
	pending_amount,
	o.payment_date as document_date FROM table_distributor_payment_transactions as o 
	left join table_distributor_payment_received as p 
	on p.transaction_id = o.payment_id WHERE o.status='A' and o.stockist_id='" . $stockist_id . "' 
	AND o.distributor_id='" . $distributor_id . "' AND o.status='A' AND o.clearing_status!='Full' 
	Group by o.payment_id)) as tm", "tm.*", $rp, '', ' ORDER BY tm.document_date ASC');
        //echo "<pre>";print_R($auResult);die;
        $auResultTotal = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Return' as doc_type,substr(o.bill_no, -10) as document_no
	,o.bill_date,o.due_date, 
	o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.acc_total_invoice_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.bill_date as document_date 
	FROM table_distributor_invoice as o 
	left join table_distributor_payment_received as p on p.return_order_id = o.invoice_id 
	WHERE o.order_type='Return' AND o.order_for='D' AND o.invoice_status='A' 
	AND o.order_status='D' AND o.stockist_id='" . $stockist_id . "' AND o.distributor_id='" . $distributor_id . "' 
	AND o.clearing_status!='Full' Group by o.invoice_id)
	Union
	(SELECT o.note_id as id, 'CN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,
	o.due_date, o.total_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.date_of_note as document_date 
	FROM table_dis_credit_debit_note as o left join table_distributor_payment_received as p on p.credit_note_id = o.note_id 
	WHERE o.note_type='C' AND o.note_status='A' AND o.stockist_id='" . $stockist_id . "' 
	AND o.distributor_id='" . $distributor_id . "' AND o.clearing_status!='Full' Group by o.note_id)
	union
	(SELECT o.payment_id as id, 'PMT' as doc_type ,o.payment_id as document_no, o.payment_date as bill_date,o.payment_date as due_date, o.total_amount as total_amount,
	COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.total_amount-COALESCE(sum(p.received_amount), 0) AS 
	pending_amount,
	o.payment_date as document_date FROM table_distributor_payment_transactions as o left join table_distributor_payment_received as p 
	on p.transaction_id = o.payment_id WHERE o.status='A' and o.stockist_id='" . $stockist_id . "' 
	AND o.distributor_id='" . $distributor_id . "' AND o.status='A' AND o.clearing_status!='Full' 
	Group by o.payment_id)) as tm", "count(*) as total", '', '', '');
        $total = $auResultTotal[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auResult); $i++) {
            if ($auResult[$i]->pending_amount >= 1) {
                $input = ' <input type=\"checkbox\" class=\"checkbox\" data-adj=\"' . $auResult[$i]->id . '\" data-adt=\"' . $auResult[$i]->doc_type . '\" data-dat=\"' . $auResult[$i]->document_date . '\" name=\"credit[]\" />';
                if ($rc)
                    $json .= ",";
                $json .= "\n{";
                $json .= '"id":"' . $auResult[$i]->id . '",';
                $json .= '"cell":["' . $input . '"';
                $json .= ',"' . addslashes($auResult[$i]->doc_type) . '"';
                $json .= ',"' . addslashes($auResult[$i]->document_no) . '"';
                $json .= ',"' . addslashes($auResult[$i]->bill_date) . '"';
                $json .= ',"' . addslashes($auResult[$i]->document_date) . '"';
                $json .= ',"' . addslashes(ROUND($auResult[$i]->total_amount, 0)) . '"';
                $json .= ',"' . addslashes(ROUND($auResult[$i]->adjusted_amount, 0)) . '"';
                $json .= ',"' . addslashes(ROUND($auResult[$i]->pending_amount, 0)) . '"]';
                $json .= "}";
                $rc = true;
            }
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDistributorDebitEntries($distributor_id, $stockist_id)
    {

        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'category_name';
        if (!$sortorder)
            $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " cat_type = 'C' ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auResult = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Invoice' as doc_type,substr(o.bill_no, -10) as 
	document_no,o.bill_date, o.due_date,
        o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
		o.acc_total_invoice_amount-COALESCE(sum(p.received_amount),
         0) AS pending_amount
            FROM table_distributor_invoice as o 
		left join table_distributor_payment_received as p on p.order_id = o.invoice_id 
		WHERE o.order_type='Yes' AND o.order_for='D' AND
        o.invoice_status='A' AND o.order_status='D' AND o.stockist_id='" . $stockist_id . "' 
		AND o.distributor_id='" . $distributor_id . "' AND
       o.clearing_status!='Full'  Group by o.invoice_id )
		Union
	(SELECT o.note_id as id, 'DN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,o.due_date, o.total_amount as total_amount,
	COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount
		FROM table_dis_credit_debit_note as o left join table_distributor_payment_received as p on p.note_id = o.note_id
		WHERE o.note_type='D' AND o.note_status='A' AND o.stockist_id='" . $stockist_id . "' 
		AND o.distributor_id='" . $distributor_id . "' AND o.clearing_status!='Full' Group by o.note_id )) as tm",
            "tm.*", $rp, '', ' ORDER BY tm.due_date ASC');
        $auResultTotal = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Invoice' as doc_type,substr(o.bill_no, -10) as document_no,o.bill_date, o.due_date,
        o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.acc_total_invoice_amount-COALESCE(sum(p.received_amount),
         0) AS pending_amount
        FROM table_distributor_invoice as o 
		left join table_distributor_payment_received as p on p.order_id = o.invoice_id 
		WHERE o.order_type='Yes' AND o.order_for='D' AND
        o.invoice_status='A' AND o.order_status='D' AND o.stockist_id='" . $stockist_id . "' 
		AND o.distributor_id='" . $distributor_id . "' AND
       o.clearing_status!='Full'  Group by o.invoice_id )
		Union
	(SELECT o.note_id as id, 'DN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,o.due_date, o.total_amount as total_amount,
	COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount
		FROM table_dis_credit_debit_note as o left join table_distributor_payment_received as p on p.note_id = o.note_id
		WHERE o.note_type='D' AND o.note_status='A' AND o.stockist_id='" . $stockist_id . "' 
		AND o.distributor_id='" . $distributor_id . "' AND o.clearing_status!='Full' Group by o.note_id )) as tm",
            "count(*) as total", '', '', '');
        $total = $auResultTotal[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auResult); $i++) {

            if ($auResult[$i]->pending_amount >= 1) {
                //echo "ddd";
                $input = ' <input type=\"checkbox\" class=\"checkbox\" data-adj=\"' . $auResult[$i]->id . '\" data-adt=\"' . $auResult[$i]->doc_type . '\" data-dat=\"' . $auResult[$i]->due_date . '\" name=\"debit[]\" />';
                if ($rc)
                    $json .= ",";
                $json .= "\n{";
                $json .= '"id":"' . $auResult[$i]->id . '",';
                $json .= '"cell":["' . $input . '"';
                $json .= ',"' . addslashes($auResult[$i]->doc_type) . '"';
                $json .= ',"' . addslashes($auResult[$i]->document_no) . '"';
                $json .= ',"' . addslashes($auResult[$i]->bill_date) . '"';
                $json .= ',"' . addslashes($this->_changeDate($auResult[$i]->due_date)) . '"';
                $json .= ',"' . addslashes(str_replace(',', '', number_format(ROUND($auResult[$i]->total_amount), 0))) . '"';
                $json .= ',"' . addslashes(str_replace(',', '', number_format(ROUND($auResult[$i]->adjusted_amount), 0))) . '"';
                $json .= ',"' . addslashes(str_replace(',', '', number_format(ROUND($auResult[$i]->pending_amount), 0))) . '"]';
                $json .= "}";
                $rc = true;
            }
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Jatin : 8 June 2023 : Distributor Payment adjustment

    // Todo Start  : Jatin : 13 June 2023 : stockist invoice list
    function showStockistInvoiceList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname)
            $sortname = 'bill_date';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['SalDisList'] != '') {
            $salesman = " and o.stockist_id='" . $_SESSION['SalDisList'] . "'";
        }
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.bill_date >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.bill_date >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.bill_date <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.bill_date <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_status='A' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_status='I' ";
            }
            if ($_SESSION['OrderBy'] == 4) {
                $orderby = " and o.order_status='D' ";
            }
        } else {
            $orderby = "";
        }


        if ($_SESSION['stockistId'] > 0) {
            $stockistCond = " AND o.stockist_id ='" . $_SESSION['stockistId'] . "' ";
        }
        if (isset($_SESSION['invoice_type']) && $_SESSION['invoice_type'] != '' && $_SESSION['invoice_type'] != 'All') {
            if (strtolower($_SESSION['invoice_type']) == 'invoice') {
                $distributorCond .= " AND o.order_type='Yes' AND o.invoice_status='A' ";
            } elseif (strtolower($_SESSION['invoice_type']) == 'return') {
                $distributorCond .= " AND o.order_type='return' AND o.invoice_status='A' ";
            } elseif (strtolower($_SESSION['invoice_type']) == 'cancel') {
                $distributorCond .= " AND o.invoice_status='C' ";
            }
        }
        $where = " AND o.order_for='D' AND o.order_status ='D'   $stockistCond $salesman $fromdate $todate   $orderby ";
        if ($query == 'Cancelled Invoice') {
            $query = 'C';
        } elseif ($query == 'Invoiced') {
            $query = 'A';
        } elseif ($query == 'Return Invoiced') {
            $qtype = 'o.order_type';
            $query = 'Return';
        }
        if ($query == 'Payment Pending' && $qtype == 'o.payment_received') {
            $query = '0';
            $where .= " AND o.return_type != '1' ";
        } elseif ($query == 'Payment Received' && $qtype == 'o.payment_received') {
            $query = '1';
            $where .= " AND o.return_type != '1' ";
        }
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $groupBy = "GROUP BY o.invoice_id";
        $auRec = $this->_getSelectList('table_stockist_invoice as o
	LEFT JOIN table_stockist_invoice_detail as OD ON OD.order_id = o.order_id
    left join table_stockist as r on o.stockist_id=r.stockist_id
    left join state as st on st.state_id=r.state
    left join city as c on c.city_id=r.city
    left join table_stockist_address as ad on ad.address_id=o.shipping_address
    left join table_stockist_address as ad2 on ad2.address_id=o.billing_address
    ', "o.*,r.stockist_name, r.stockist_code, r.stockist_location,r.stockist_address,
    r.lat as retlat,r.lng as retlng,st.state_name,
    c.city_name,r.country as retailer_country,ad.address as shipping_address,ad2.address as billing_address,ad.zipcode as shipping_zip,ad2.zipcode as billing_zip", $rp, $where . $groupBy . $sort, '');

        $auRecCount = $this->_getSelectList('table_stockist_invoice as o
    left join table_stockist as r on o.stockist_id=r.stockist_id
    left join state as st on st.state_id=r.state
    left join city as c on c.city_id=r.city
    ', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $viewInvoice = $viewSchemeInvoice = '';
            $viewPrintInvoice = $viewPrintSchemeInvoice = '';
            if ($auRec[$i]->order_status == 'A') {
                $status = "New Order";
                $invoceStatus = 'Full Pending';
                $color = "N";
            }
            if ($auRec[$i]->order_status == 'I') {
                $status = "Processed";
                $color = "I";
            }
            if ($auRec[$i]->order_status == 'D' && $auRec[$i]->invoice_status == 'A') {
                // $status="Dispatched";
                $status = "Invoiced";
                $color = "A";
                $payment_sts = ($auRec[$i]->payment_received == 0) ? "Payment Pending" : "Payment Received";
                if ($auRec[$i]->order_type == 'Return') {
                    $status = "Return Invoiced";
                    $color = "I";
                    $payment_sts = "";
                }
                $viewInvoice = '<a target=\"blank\" href=\"stockist_invoice.php?id=' . base64_encode($auRec[$i]->invoice_id) . '\">View Invoice</a>';
                $viewPrintInvoice = '<a target=\"blank\" href=\"print_stockist_invoice.php?id=' . base64_encode($auRec[$i]->invoice_id) . '\">Print Invoice</a>';
                $due_date = $this->_changeDate($auRec[$i]->due_date);
            } elseif ($auRec[$i]->order_status == 'D' && $auRec[$i]->invoice_status == 'C') {
                $color = 'R';
                $status = 'Cancelled Invoice';
                $payment_sts = "";
            }
            $outlet = '';
            /* Bill Type */
            $billTYPE = '';
            $bill_desc = '';
            switch (strtolower($auRec[$i]->bill_type)) {
                case 'apc':
                    $billTYPE = "Advance Payment Collection";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'ac':
                    $billTYPE = "Advance Cheque";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'fp':
                    $billTYPE = "Flexible Plan";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
            }
            switch (strtolower($auRec[$i]->order_for)) {
                case 'r':
                    $order_for = 'Retailer';
                    break;
                case 'd':
                    $order_for = 'Distributor';
                    break;
            }
            $date_of_invoice = $this->_changeDate($auRec[$i]->bill_date);
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            $date_of_delivery = $this->_changeDate($auRec[$i]->delivery_date);
            //Todo Start : sudhanshu 21 may 2024 : shiiping and billing address chnage in query also
            $shipping_address = $auRec[$i]->shipping_address . ' ' . $auRec[$i]->shipping_zip;
            $billing_address = $auRec[$i]->billing_address . ' ' . $auRec[$i]->billing_zip;
            //Todo End : sudhanshu 21 may 2024 : shiiping and billing address chnage in query also
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r", "'", "`");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->invoice_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . (($viewInvoice)) . '"';
            $json .= ',"' . (($viewPrintInvoice)) . '"';
            $json .= ',"' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . $date_of_invoice . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(ROUND($auRec[$i]->acc_total_invoice_amount), 0))) . '"';
            // $json .= ',"' . ucwords(addslashes($due_date)) . '"';
            $json .= ',"' . $payment_sts . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ref_order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($order_for)) . '"';
            $json .= ',"' . ucwords(addslashes($billTYPE)) . '"';
            $json .= ',"' . ucwords(addslashes($bill_desc)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_location)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_address)) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . ucwords(addslashes($date_of_delivery)) . '"';
            //Todo Start : sudhanshu 14 may 2024 : add shipping and billing address
            $json .= ',"' . ucwords(addslashes($shipping_address)) . '"';
            $json .= ',"' . ucwords(addslashes($billing_address)) . '"';
            //Todo End : sudhanshu 14 may 2024 : add shipping and billing address
            $json .= ',"' . str_replace($remove, ' ', $auRec[$i]->remark) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End  : Jatin : 13 June 2023 : stockist invoice list

    function newDistributorReportlist($salesman)
    {

        //$salesman = "";
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY o.date_of_order desc";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $condition = "";
        if (isset($_SESSION['REGIONID']) && $_SESSION['REGIONID'] != '') {
            $condition .= " re.region_id = " . $_SESSION['REGIONID'] . " AND ";
        }
        if (isset($_SESSION['SalOrderList']) && $_SESSION['SalOrderList'] != '') {
            $condition .= " o.salesman_id = " . $_SESSION['SalOrderList'] . " AND ";
        }
        if (isset($_SESSION['STATEID']) && $_SESSION['STATEID'] != '') {
            $condition .= " Dis.state = " . $_SESSION['STATEID'] . " AND ";
        }
        if ($_SESSION['categoryID'] != '' && $_SESSION['categoryID'] != 'all') {
            $condition .= " c.category_id = " . $_SESSION['categoryID'] . " AND ";
        }
        if ($_SESSION['itemID'] != '' && $_SESSION['itemID'] != 'all') {
            $condition .= " o.item_id = " . $_SESSION['itemID'] . " AND ";
        }
        if ($_SESSION['FromProductList'] != '') {
            $fromdate = "  o.date_of_order  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
            // $Invfromdate = " inv.bill_date  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
            $Invfromdate = " inv.date_of_order  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
        } else {
            $fromdate = " o.date_of_order  >= '" . date('Y-m-d') . "' AND ";
            //$Invfromdate = " inv.bill_date  >= '" . date('Y-m-d') . "' AND ";
            $Invfromdate = " inv.date_of_order  >= '" . date('Y-m-d') . "' AND "; //05/06/223
        }
        if ($_SESSION['ToProductList'] != '') {
            $todate = " o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
            //$Invtodate = " inv.bill_date <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
            $Invtodate = " inv.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
        } else {
            $todate = "  o.date_of_order <= '" . date('Y-m-d') . "'";
            //$Invtodate = "  inv.bill_date <= '" . date('Y-m-d') . "'";
            $Invtodate = "  inv.date_of_order <= '" . date('Y-m-d') . "'";
        }
        $groupby = " group by o.order_id,o.item_id ";
        //get the partial pending orders till 31st March 2020
        mysql_query("SET SESSION group_concat_max_len = 100000000");
        $validated_default_date = date("Y-m-d", strtotime("-2 Months"));
        //discarded fully pending and partial pending orders from more than 2 months before from today
        //$discarded_orders = $this->_getSelectList2('table_order', "GROUP_CONCAT(order_id) as order_ids", '', " date_of_order <='".$validated_default_date."' AND order_status IN('A', 'I')");
        $flag = true;
        /*if(strtotime(date('Y-m-d', strtotime($_SESSION['FromProductList']))) < strtotime($validated_default_date) && $flag)
    {
      $where = " o.account_id='" . $_SESSION['accountId'] . "' AND o.order_status NOT IN('A', 'I') and $condition $fromdate $todate $salesOrgCond ";
    }
    else
    {
      $where = " o.account_id='" . $_SESSION['accountId'] . "' and $condition $fromdate $todate $salesOrgCond ";
    }*/
        $where = " o.account_id='" . $_SESSION['accountId'] . "' and $condition $fromdate $todate $salesOrgCond ";
        // echo $where; die;
        if ($query)

            $where .= " AND $qtype LIKE '%$query%' ";
        //   echo $where; die;
        $auRec = $this->_getSelectList2('DISTRIBUTOR_ORDER_QTY as o
			left join table_measurement_units as mu on mu.unit_id=o.unit_id
			left join table_order_remarks as tor on tor.remark_id=o.reason
			LEFT JOIN table_item AS I ON I.item_id=o.item_id
			LEFT JOIN table_category AS c ON c.category_id = I.category_id
			LEFT JOIN table_salesman AS s ON o.salesman_id = s.salesman_id
			
			LEFT JOIN table_distributors AS Dis ON Dis.distributor_id = o.distributor_id
			LEFT JOIN state as st on st.state_id=Dis.state
			LEFT JOIN city as ct on ct.city_id=Dis.city
			LEFT JOIN table_region as re on st.region_id=re.region_id			
			
			
			',
            'o.order_id,o.date_of_order,tor.remark,o.reason_remark,
			Dis.distributor_name, Dis.distributor_code,
			
			CASE WHEN o.order_for="D" THEN re.region_name
			   WHEN o.order_for="D" THEN re.region_name END AS region_name,
			CASE WHEN o.order_for="D" THEN st.state_name
				   WHEN o.order_for="D" THEN st.state_name END AS state_name,
				CASE WHEN o.order_for="D" THEN ct.city_name
				  WHEN o.order_for="D" THEN ct.city_name END AS city_name,
			CASE WHEN o.salesman_id="0" THEN "PEPUP"
				   WHEN o.salesman_id !="0" THEN "APP" END AS order_from,
			o.order_for,s.salesman_name,s.employee_code,c.category_name,o.item_id,I.item_name,I.item_code,o.unit_id,mu.unit_code,
			o.order_quantity,ROUND(o.order_amount) as order_amount,
			"" as invoiced_quantity,
			"" as pendng_order_quantity,
			"" as invoiced_amount,
			"" as pendng_order_amount', $rp, $where . $groupby . $sort, '');

        $invoiceData = array();
        $invWhre = $Invfromdate . $Invtodate . " group by inv.ref_order_id,inv.item_id";

        //echo $invWhre;die;
        $invoiceList = $this->_getSelectList2('ORDER_WISE_DISTRIBUTOR_INVOICE_LIST_NEWW as inv ',
            "inv.ref_order_id,inv.item_id,inv.invoiced_quantity as invoiced_quantity,
            ROUND(inv.invoiced_amount) as invoiced_amount", '', $invWhre, '');
        //echo "<pre>";
//print_r($invoiceList);die;
        if (count($invoiceList) > 0) {

            foreach ($invoiceList as $key => $value) {
                $invoiceData[$value->ref_order_id][$value->item_id] = $value;
            }
        }
        // echo "<pre>";
        // print_r($invoiceData);die;
        $total = $this->_getSelectList2('DISTRIBUTOR_ORDER_QTY as o
    LEFT JOIN table_item AS I ON I.item_id=o.item_id   
    LEFT JOIN table_category AS c ON c.category_id = I.category_id
    LEFT JOIN table_salesman AS s ON o.salesman_id = s.salesman_id
  
    LEFT JOIN table_distributors AS Dis ON Dis.distributor_id = o.distributor_id
    LEFT JOIN state as st on st.state_id=Dis.state
    LEFT JOIN table_region as re on st.region_id=re.region_id', "COUNT(*) AS total", '', $where . $sort, '');
        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->date_of_order != "" && $auRec[$i]->date_of_order != "0000:00:00") {
                $date_of_order = $_objAdmin->_changeDate($auRec[$i]->date_of_order);
            } else {
                $date_of_order = "";
            }
            $resonRemark = $remarktxt = '';
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            switch (strtolower($auRec[$i]->order_for)) {
                case 'r':
                    $order_for = 'Retailer';
                    break;
                case 'd':
                    $order_for = 'Distributor';
                    break;
            }
            if (isset($invoiceData[$auRec[$i]->order_id][$auRec[$i]->item_id])) {

                $auRec[$i]->pendng_order_quantity = (floatval($auRec[$i]->order_quantity) - floatval($invoiceData[$auRec[$i]->order_id][$auRec[$i]->item_id]->invoiced_quantity));
                $auRec[$i]->pendng_order_amount = ((($auRec[$i]->pendng_order_quantity != '') ? ROUND($auRec[$i]->order_amount - $invoiceData[$auRec[$i]->order_id][$auRec[$i]->item_id]->invoiced_amount) : '0'));
                $auRec[$i]->invoiced_quantity = ($invoiceData[$auRec[$i]->order_id][$auRec[$i]->item_id]->invoiced_quantity);
                $auRec[$i]->invoiced_amount = ($invoiceData[$auRec[$i]->order_id][$auRec[$i]->item_id]->invoiced_amount);


            }

            $resonRemark = preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace(array('\t', '\n', '	', ','), ' ', $auRec[$i]->reason_remark));
            $remarktxt = preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace(array('\t', '\n', '	', ','), ' ', $auRec[$i]->remark));
            $pedingqty = 0;
            $json .= '"cell":["' . (addslashes($order_for)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . $date_of_order . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            // $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            // $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->unit_code)) . '"';
            $json .= ',"' . number_format(addslashes($auRec[$i]->order_quantity), 3) . '"';
            $json .= ',"' . number_format(addslashes($auRec[$i]->order_amount), 2) . '"';
            $json .= ',"' . number_format(addslashes($auRec[$i]->invoiced_quantity), 3) . '"';
            $json .= ',"' . number_format(addslashes($auRec[$i]->invoiced_amount), 2) . '"';
            $json .= ',"' . ((empty($auRec[$i]->pendng_order_quantity) && empty($auRec[$i]->invoiced_quantity)) ? ($auRec[$i]->order_quantity) : $auRec[$i]->pendng_order_quantity) . '"';
            $json .= ',"' . number_format((($auRec[$i]->pendng_order_amount == '') ? $auRec[$i]->order_amount : (($auRec[$i]->pendng_order_quantity == 0) ? '0' : $auRec[$i]->pendng_order_amount)), 2) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_from)) . '"';
            $json .= ',"' . ucwords(addslashes($remarktxt)) . '"';
            $json .= ',"' . ucwords(addslashes($resonRemark)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


    //********************************Start Configure customer 14-06-2023********************************** */
    function showCustomers()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'cust_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " 1=1 ";
        $where = " c.account_id =" . $_SESSION['accountId'] . " ";

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_config_customer as c ', "c.*", $rp, $where . $dis . '  ' . $sort, '');

        $total = is_array($auRec) ? count($auRec) : 0;
//
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r", "\t");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->cust_type . '",';
            $json .= '"cell":["' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->cust_type))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->cust_name))) . '"]';

            //   $json .= ',"' . $LogSts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

//********************************End Configure customer ********************************** */

    function showDistributoreCancelOrder($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($qtype == "date_of_order" && $query != '') {
            $query = date("Y-m-d", strtotime($query));
        }
        $_objAdmin = new Admin();
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromOrderList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToOrderList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_type='Adhoc' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_type!='Adhoc' ";
            }
        } else {
            $orderby = "";
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        } else if (isset($_SESSION['sel_dis']) && $_SESSION['sel_dis'] > 0) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['sel_dis'] . "' ";
        }
        if ($_SESSION['userLoginType'] == 1) {
            $salesman = '';
        }
        if (isset($_SESSION['sel_sal']) && $_SESSION['sel_sal'] > 0) {
            $disLogCond = " AND o.salesman_id='" . $_SESSION['sel_sal'] . "' ";
        }
        $StockistLogCond = '';
        if ($_SESSION['userLoginType'] == 7) {
            //Todo Start : sudhanshu 03 May 2024 : change stocksit consditon for multip,e stocksit also chage in query
            $StockistLogCond = " AND o.stockist_id='" . $_SESSION['stockistId'] . "' ";
            //Todo End : sudhanshu 03 May 2024 : change stocksit consditon for multip,e stocksit also chage in query
        }
        if (isset($_SESSION['REGIONID']) && $_SESSION['REGIONID'] > 0) {
            $regionCondition = " AND re.region_id='" . $_SESSION['REGIONID'] . "'  AND REG.region_id IS NOT NULL ";
        }
        if (isset($_SESSION['STATEID']) && $_SESSION['STATEID'] > 0) {
            $stateCondition = " AND st.state_id='" . $_SESSION['STATEID'] . "' ";
        }
        // $where = " o.order_for='D' AND o.order_type='Yes' AND (o.order_status='A' OR o.order_status='C')  $disLogCond $StockistLogCond $fromdate $todate $regionCondition $stateCondition $orderby and o.account_id =" . $_SESSION['accountId'];
        $where = " o.order_for='D' AND o.order_type IN('Yes' , 'Return') AND (o.order_status='A' OR o.order_status='C')  $disLogCond  $fromdate $todate $regionCondition $stateCondition $StockistLogCond $orderby and o.account_id =" . $_SESSION['accountId'];
        if ($qtype == 'o.date_of_order') {
            $query = date('Y-m-d', strtotime($query));
        }
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        //echo $where;die;
        $auRec = $this->_getSelectList('table_distributor_order as o
    left join table_salesman as s on o.salesman_id=s.salesman_id
  	left join table_distributors as d on d.distributor_id=o.distributor_id
  	left join table_stockist as stk on o.stockist_id=stk.stockist_id
  	left join state as st on st.state_id=d.state
  	left join city as c on c.city_id=d.city
  	left join table_region as re on re.region_id=st.region_id', "o.*,s.salesman_name,d.distributor_name,d.distributor_code,d.distributor_location, d.distributor_address, st.state_name, c.city_name, re.region_name,stk.stockist_name", $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList('table_distributor_order as o
    left join table_salesman as s on o.salesman_id=s.salesman_id
  	left join table_distributors as d on d.distributor_id=o.distributor_id
  	left join state as st on st.state_id=d.state
  	left join city as c on c.city_id=d.city
  	left join table_region as re on re.region_id=d.region_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->order_type == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = 'Cancelled';
                }
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "U";
            }
            if ($auRec[$i]->order_type == 'No') {
                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
                $color = ($auRec[$i]->order_status == 'A') ? "I" : "P";
            }
            if ($auRec[$i]->order_type == 'Adhoc') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Adhoc Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }
            if ($auRec[$i]->order_type == 'Return') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "Return Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = 'Cancelled';
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "C";
                // echo $color;die;
            }
            if ($auRec[$i]->updated_by_app > 0) {
                $color = "U";
            }

            // Todo Start : Sudhanshu 18 march 2024 as told by ritu if order is cancelled row should be red
            if ($auRec[$i]->order_status == 'C') {
                $color = "C";
            }
            // Todo End : Sudhanshu 18 march 2024 as told by ritu if order is cancelled row should be red
            $auRec2 = $this->_getSelectList2('table_distributor_order_detail', "count( distinct(item_id)) as total_item", '', " order_id = " . $auRec[$i]->order_id . " and type = 1");
            $CheckOrderSts = $this->_getSelectList2('table_distributor_order as o 
	  inner join table_distributor_order_detail as od on o.order_id = od.order_id',
                "od.quantity, od.acc_quantity,od.is_processed ", '', " o.order_id='" . $auRec[$i]->order_id . "' 
		AND ((od.quantity = od.acc_quantity AND od.is_processed=0) OR (od.quantity >od.acc_quantity AND od.is_processed=1)) 
		and od.free_item_id = 0");
            if ($auRec[$i]->order_status == 'A') {
                $orderStatus = 'Fully Pending';
            } elseif ($auRec[$i]->order_status == 'C') {
                $orderStatus = '';
            } else if (is_array($CheckOrderSts) && count($CheckOrderSts) > 0) {
                $orderStatus = 'Partially Invoiced';
            } else {
                $orderStatus = 'Fully Invoiced';
            }
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
//      $salDetails = $this->getSalesmanFullDetails($auRec[$i]->salesman_id);
            /* ----Display Outlet ---- */
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            if ($auRec[$i]->cancellation_date != "0000-00-00 00:00:00") {
                $cancel_date = $this->_changeDate($auRec[$i]->cancellation_date);
            } else {
                $cancel_date = '';
            }

            $orderid = $auRec[$i]->order_id;
            if ($orderStatus == 'Partially Pending') {
                $orderid = 0;
            } else if ($orderStatus == '') {
                $orderid = '00';
            }

            if ($auRec[$i]->sync_on_3p == '1' && $auRec[$i]->erp_order_id != '') {
                $orderid = '001';
            }

            //Tood Start : Sudhanshu 12 April : add cancel by column and  changes in query for stockist
            $cancelByUserType = '';
            $cancel_by = '';
            if (strtolower($auRec[$i]->cancel_by_user_type) == 'admin') {
                $cancelByUserType = 'Admin';
                $cancel_by = 'Admin';
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'stockist') {
                $cancelByUserType = $this->AliaseUsers('stockist');
                $cancel_by = $auRec[$i]->stockist_name;
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'distributor') {
                $cancelByUserType = $this->AliaseUsers('distributor');
                $cancel_by = $auRec[$i]->distributor_name;
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'salesman') {
                $cancelByUserType = $this->AliaseUsers('salesman');
                $cancel_by = $auRec[$i]->salesman_name;
            }
            //Tood End : Sudhanshu 12 April : add cancel by column and  changes in query for stockist
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $orderid . '",';
            $json .= '"color":"' . $color . '",';
            //$json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . $orderStatus . '"';
            $json .= ',"' . addslashes($auRec[$i]->acc_total_invoice_amount) . '"';
            $json .= ',"' . ucwords(addslashes($auRec2[0]->total_item)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_location))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->distributor_address))) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($cancel_date))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->cancellation_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($cancelByUserType)) . '"';
            $json .= ',"' . ucwords(addslashes($cancel_by)) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->remark))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->comments))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->tag_description)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function delDistributoreCancelOrder($order_id)
    {
        $where = " o.order_id='" . $order_id . "' ";
        // echo $where;die;
        $chkSts = $this->_getSelectList2('table_distributor_order as o
    ', "o.order_status", '', $where, '');
        if ($chkSts[0]->order_status == 'A') {
            //  echo "ihh";die;
            $data['order_status'] = "C";
            $data['cancellation_date'] = date('Y-m-d H:i:s');
            // print_r($data);die;
            $this->_dbUpdate($data, 'table_distributor_order', " order_id='" . $order_id . "'");
            //$this->_dbDelete($order_id, 'table_distributor_order', 'order_id');
            $_SESSION['order_cancel_success'] = "Order Cancel  successfully";
            //header("Location:distributor_cancel_order.php");
        } elseif ($chkSts[0]->order_status == 'C') {
            $_SESSION['order_cancel_err'] = "This Order is already cancelled";
            // header("Location:distributor_cancel_order.php");
        } else {
            $_SESSION['order_cancel_err'] = "Please select fully pending order";
            // header("Location:distributor_cancel_order.php");
        }

    }


    //***************************************** Distributor sales GST report 19-06-2023 ********************** */
    function showDistributorSalesGSTReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'o.bill_no';
        if (!$sortorder)
            $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromOrderList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToOrderList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        }
        if ($_REQUEST['qtype'] == "bill_date") {
            $query = date('Y-m-d', strtotime(mysql_escape_string($_REQUEST['query'])));
        }
        $groupby = " GROUP BY o.invoice_id";
        $where = " od.type=1 and o.bill_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' AND o.order_type='Yes' AND o.order_status='D' AND o.order_for='D' AND o.invoice_status='A' $disLogCond";
        //  echo $where. $sort;die;
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_invoice AS o
                inner JOIN table_distributor_invoice_detail as od on od.invoice_id = o.invoice_id and od.ref_order_id = o.ref_order_id
                LEFT JOIN table_distributors as d ON d.distributor_id=o.distributor_id
                LEFT JOIN state as st on st.state_id = d.state',
            " SUM(od.total) as total_invoice_amt,o.acc_total_invoice_amount,o.date_of_order, o.bill_no,
                d.distributor_code, d.distributor_name, d.gst_no, st.state_name, st.state_code,
                SUM(od.acc_quantity*od.price) as before_dis_amount,SUM(od.discount_amount) as discount_amount,
                SUM(od.discount_amount) as acc_discount_amount,0 as new_scheme_discount,
                SUM((od.acc_quantity*od.price)-(od.discount_amount)) as amt_before_tax, SUM(od.gst_amount) as sgst_amount,
            SUM(od.cgst_amount) as cgst_amount, SUM(od.igst_amount) as igst_amount", $rp, $where . $groupby . $sort);

        $total = $this->_getSelectList('table_distributor_invoice AS o
                inner JOIN table_distributor_invoice_detail as od on od.invoice_id = o.invoice_id and od.ref_order_id = o.ref_order_id
                LEFT JOIN table_distributors as d ON d.distributor_id=o.distributor_id
                LEFT JOIN state as st on st.state_id = d.state', "o.order_id", '', $where . $groupby . $sort);
        $total = count($total);

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $sgst_amount = $cgst_amount = $igst_amount = 0;
            $amt_before_tax = $amt_after_tax = 0;
            if ($auRec[$i]->sgst_amount > 0) {
                $sgst_amount = $auRec[$i]->sgst_amount;
            }
            if ($auRec[$i]->cgst_amount > 0) {
                $cgst_amount = $auRec[$i]->cgst_amount;
            }
            if ($auRec[$i]->igst_amount > 0) {
                $igst_amount = $auRec[$i]->igst_amount;
            }
            if ($auRec[$i]->amt_before_tax > 0) {
                $amt_before_tax = ROUND($auRec[$i]->amt_before_tax, 2);
            }
            $bill_no = '';
            $bill_details = explode('-', $auRec[$i]->bill_no);
            $bill_no = end($bill_details);
            //$amt_before_tax = ($auRec[$i]->acc_total_invoice_amount-($sgst_amount+$cgst_amount+$igst_amount));
            $amt_after_tax = number_format(floor($auRec[$i]->total_invoice_amt), 2);
            if ($rc)
                $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->gst_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->date_of_order))) . '"';
            $json .= ',"' . ROUND($auRec[$i]->before_dis_amount, 2) . '"';
            $json .= ',"' . ROUND($auRec[$i]->acc_discount_amount, 2) . '"';
            $json .= ',"' . ucwords(addslashes($amt_before_tax)) . '"';
            $json .= ',"' . ucwords(addslashes($sgst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($cgst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($igst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($amt_after_tax)) . '"';
            $json .= ',"' . ucwords(addslashes('')) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
//******************************************** End Distributor sales GST report ************************************** */

//********************************************* distributor salse gst details ********************/
    function showDistributorBTOBOrderList($salesman)
    {
        $unitArr = array();
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'o.bill_no';
        if (!$sortorder)
            $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromOrderList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToOrderList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        }
        if ($qtype == "bill_date" && $query != '') {
            $query = date("Y-m-d", strtotime($query));
        }
        $groupby = " GROUP BY o.invoice_id, od.ref_order_id,od.item_id";
        $where = " od.type=1 and o.bill_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' AND o.order_type='Yes' AND o.order_status='D' AND o.order_for='D' AND o.invoice_status='A' $disLogCond";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_invoice AS o
                inner JOIN table_distributor_invoice_detail as od on od.invoice_id = o.invoice_id and od.ref_order_id = o.ref_order_id
                inner JOIN table_item as i on i.item_id = od.item_id
                LEFT JOIN table_group as g on g.group_id = i.group_id
                LEFT JOIN table_distributors as d ON d.distributor_id=o.distributor_id
                LEFT JOIN state as st on st.state_id = d.state', " o.bill_date, o.bill_no, d.distributor_code, 
                d.distributor_name, d.gst_no,
                i.item_name, i.item_code, od.*, g.hsn_code, st.state_name, st.state_code", $rp, $where . $groupby . $sort, '');
        $total = $this->_getSelectList('table_distributor_invoice AS o
                inner JOIN table_distributor_invoice_detail as od on od.invoice_id = o.invoice_id and od.ref_order_id = o.ref_order_id
                inner JOIN table_item as i on i.item_id = od.item_id
                LEFT JOIN table_group as g on g.group_id = i.group_id
                LEFT JOIN table_distributors as d ON d.distributor_id=o.distributor_id
                LEFT JOIN state as st on st.state_id = d.state
                ', "COUNT(*) AS total", '', $where . $groupby . $sort, '');
        $total = count($total);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sgst_amount = $cgst_amount = $igst_amount = 0;
            if ($auRec[$i]->gst_amount > 0) {
                $sgst_amount = $auRec[$i]->gst_amount;
            }
            if ($auRec[$i]->cgst_amount > 0) {
                $cgst_amount = $auRec[$i]->cgst_amount;
            }
            if ($auRec[$i]->igst_amount > 0) {
                $igst_amount = $auRec[$i]->igst_amount;
            }
            $bill_details = explode('-', $auRec[$i]->bill_no);
            $bill_no = $bill_details[3];
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_detail_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->gst_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->bill_date))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->hsn_code)) . '"';
            $qty = $auRec[$i]->quantity;
            $json .= ',"' . $qty . '"';
            /* Added on request by veera sir. Added on 5 Dec by sachin */
            $amount_before_discount = ($auRec[$i]->quantity * $auRec[$i]->price);
            $discount_amount = ($auRec[$i]->acc_discount_amount);
            $json .= ',"' . $amount_before_discount . '"';
            $json .= ',"' . ROUND($auRec[$i]->acc_discount_amount, 2) . '"';
            /* Added on request by veera sir. Added on 5 Dec by sachin */
            $json .= ',"' . ucwords(addslashes(($auRec[$i]->price * $auRec[$i]->acc_quantity) - ($auRec[$i]->acc_discount_amount))) . '"';
            $json .= ',"' . ucwords(addslashes(($auRec[$i]->gst_rate + $auRec[$i]->cgst_rate + $auRec[$i]->igst_rate))) . '"';
            $json .= ',"' . ucwords(addslashes($sgst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($cgst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($igst_amount)) . '"';
            $json .= ',"' . ucwords(addslashes(ROUND($auRec[$i]->acc_total, 0))) . '"';
            $json .= ',"' . ucwords(addslashes('')) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
//*********************************************** End distributor salse gst details */

    //*************************************************Dstributor full partial pending order**********************/
    function showDstributorFullPartialPendingOrders()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($qtype == "date_of_order" && $query != '') {
            $query = date("Y-m-d", strtotime($query));
        }
        $_objAdmin = new Admin();
        // if ($_SESSION['SalDisList'] != '') {
        //     $salesman = " and s.salesman_id='" . $_SESSION['SalDisList'] . "'";
        // }
        if ($_SESSION['salesmanId'] != 'All') {
            $salesman = " and o.salesman_id='" . $_SESSION['salesmanId'] . "'";
        }
        //$validated_default_date = date("Y-m-d",strtotime("-2 Months"));
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['stockistId'] != "A") {
            $disList = "AND o.stockist_id=" . $_SESSION['stockistId'] . " ";
            //  echo $disList;die;
        } else {
            $disList = "";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_status='A' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_status='I' ";
            }
            if ($_SESSION['OrderBy'] == 4) {
                $orderby = " and o.order_status='D' ";
            }
        } else {
            $orderby = "";
        }
        if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] > 0) {
            $distributorCond = " AND o.distributor_id ='" . $_SESSION['distributorId'] . "' ";
        }
        $where = " AND d.new='' AND o.order_for='D' AND o.order_status !='D' AND o.order_status IN('A', 'I') AND o.order_type IN('Yes', 'Return', 'Adhoc') AND o.distributor_id!='' $disList $disLogCond $salesman $fromdate $todate $regionCondition $stateCondition $salesOrgCond $distributorCond $orderby  AND o.account_id =" . $_SESSION['accountId'];
        // echo $where;die;
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_order as o
      left join table_stockist as stk on o.stockist_id=stk.stockist_id
      left join table_salesman as s on o.salesman_id=s.salesman_id
      left join table_distributors as d on d.distributor_id=o.distributor_id      
      left join state as st on st.state_id=d.state
      left join table_region as re on re.region_id=st.region_id
      left join city as c on c.city_id=d.city
      left join table_branch as br on br.branch_id = d.branch_id',
            "o.*,stk.stockist_name, stk.stockist_code,s.salesman_name,s.employee_code,d.distributor_location,d.distributor_name,d.distributor_code,d.distributor_address, re.region_name,st.state_name,c.city_name, br.branch_name, br.branch_code", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributor_order as o
      left join table_stockist as stk on o.stockist_id=stk.stockist_id
      left join table_salesman as s on o.salesman_id=s.salesman_id
      left join table_distributors as d on d.distributor_id=o.distributor_id      
      left join state as st on st.state_id=d.state
      left join table_region as re on re.region_id=st.region_id
      left join city as c on c.city_id=d.city
      left join table_branch as br on br.branch_id = d.branch_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        // echo "<pre>";
        // print_r($auRec);die;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $viewInvoice = '';
            if ($auRec[$i]->order_status == 'A') {
                $status = "New Order";
                $color = "A";
            }
            if ($auRec[$i]->order_status == 'I') {
                $status = "Processed";
                $color = "I";
            }
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            /* Bill Type */
            $billTYPE = '';
            $bill_desc = '';
            switch (strtolower($auRec[$i]->bill_type)) {
                case 'apc':
                    $billTYPE = "Advance Payment Collection";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'ac':
                    $billTYPE = "Advance Cheque";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
                case 'fp':
                    $billTYPE = "Flexible Plan";
                    $bill_desc = $auRec[$i]->bill_desc;
                    break;
            }
            switch (strtolower($auRec[$i]->order_for)) {
                case 'r':
                    $order_for = 'Retailer';
                    break;
                case 'd':
                    $order_for = 'Distributor';
                    break;
            }
            if ($auRec[$i]->order_type == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $orderType = "Sales Order";
                    $color = 'A';
                } elseif ($auRec[$i]->order_status == 'I') {
                    $orderType = "Sales Order";
                    $color = 'I';
                }
            }
            if ($auRec[$i]->order_type == 'Return') {
                if ($auRec[$i]->order_status == 'A') {
                    $orderType = "Return Order";
                }
                $color = 'O';
            }
            if ($auRec[$i]->order_status != 'A') {
                $CheckOrderSts = $this->_getSelectList2('table_distributor_order as o inner join table_distributor_order_detail as od on o.order_id = od.order_id', "od.quantity, od.acc_quantity, od.is_processed ", '', " o.order_id='" . $auRec[$i]->order_id . "' AND ((od.quantity = od.acc_quantity AND od.is_processed=0) OR (od.quantity >od.acc_quantity AND od.is_processed=1)) ");
                if (is_array($CheckOrderSts) && count($CheckOrderSts) > 0) {
                    $orderStatus = 'Partially Pending';
                } else {
                    $orderStatus = 'Fully Invoiced';
                }
            } else {
                $orderStatus = 'Fully Pending';
            }
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            if ($orderStatus != "Fully Invoiced") {
                if ($rc)
                    $json .= ",";
                $remove = array("\n", "\r\n", "\r");
                $json .= "\n{";
                $json .= '"id":"' . $auRec[$i]->order_id . '",';
                $json .= '"color":"' . $color . '",';
                $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
                $json .= ',"' . ucwords(addslashes($order_for)) . '"';
                $json .= ',"' . $orderStatus . '"';
                $json .= ',"' . ucwords(addslashes($date_of_order)) . '"';
                $json .= ',"' . date("h:i A", strtotime($auRec[$i]->time_of_order)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
                $json .= ',"' . ucwords(addslashes(number_format($auRec[$i]->acc_total_invoice_amount, 2))) . '"';
                // $json .= ',"' . ucwords(addslashes($billTYPE)) . '"';
                // $json .= ',"' . ucwords(addslashes($bill_desc)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_code)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->branch_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->branch_code)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
                $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
                $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_location))) . '"';
                $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_address))) . '"';
                $json .= ',"' . $orderType . '"]';
                $json .= "}";
                $rc = true;
            }
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

//***************** customer form fields master : sudhanshu 28 june 2023  ************ */
    function showFormFields()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'label';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_customer_form_fields_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_customer_form_fields_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"customer_form_fields_master.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y H:i:s', strtotime($auRec[$i]->updated));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->label) . '"';
            $json .= ',"' . addslashes($auRec[$i]->alias_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->compulsory) . '"';
            $json .= ',"' . addslashes($lastUpdate) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addFormField()
    {

        $data['alias_name'] = mysql_escape_string($_POST['alias_name']);
        $data['label'] = mysql_escape_string($_POST['label']);
        $data['compulsory'] = mysql_escape_string(ucwords($_POST['compulsory']));
        $data['updated'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_customer_form_fields_master');
        return $id;
    }

    function updateFormField($id)
    {

        $data['alias_name'] = mysql_escape_string($_POST['alias_name']);
        $data['label'] = mysql_escape_string($_POST['label']);
        $data['compulsory'] = mysql_escape_string(ucwords($_POST['compulsory']));
        $data['updated'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $this->_dbUpdate2($data, 'table_customer_form_fields_master', " id=" . $id);
        return $id;
    }

    // Todo Start : Jatin : 5 July 2023  Replica of distributor list
    function showDistributorsListMaster()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'distributor_name';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//        $_objAdmin = new Admin();
        //$where = " 1=1 ";

//        $salesmanStateCondi = '';
//        if (isset($_SESSION['salesmanId']) && !empty($_SESSION['salesmanId']) && (intval($_SESSION['salesmanId']) > 0) && (intval($_SESSION['userLoginType']) == 5)) {
//            //get logged in salesman state
//            $stateRec = $this->_getSelectList('table_salesman', 'state', '', 'salesman_id = ' . $_SESSION['salesmanId']);
//
//            if (is_array($stateRec) && (count($stateRec) > 0)) {
//                $salesmanStateId = $stateRec[0]->state;
//                $salesmanStateCondi = ' AND d.state = ' . $salesmanStateId;
//            }
//        }
        //Todo Start : sudhanshu 28 may 2024 : add status filet
        $statusCond = '';
        if (isset($_SESSION['disStatus1']) && $_SESSION['disStatus1'] != '') {
            $statusCond = " AND d.status='" . $_SESSION['disStatus1'] . "'";
        }
        //Todo End : sudhanshu 28 may 2024 : add status filet
        $where = " a.account_id =" . $_SESSION['accountId'] . " AND d.new = ''  $statusCond ";
        if ($_SESSION['stockistId'] != "" && $_SESSION['stockistId'] != "0") {
            $dis = " and d.stockist_id='" . $_SESSION['stockistId'] . "'";
        }
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributors as d
        LEFT JOIN table_route_retailer as rr ON rr.distributor_id = d.distributor_id
		LEFT JOIN table_route AS RT ON RT.route_id = rr.route_id 
        left join table_account as a on a.account_id=d.account_id 
        left join table_web_users as w on w.distributor_id=d.distributor_id 
        left join country as con on con.country_id = d.country 
        left join state as s on s.state_id=d.state 
        LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
        left join city as c on c.city_id=d.city 
        left join table_location as loc on loc.location_id = d.location 
        left join table_relationship as tr on tr.relationship_id=d.relationship_id 
        left join table_stockist as ts on ts.stockist_id = d.stockist_id
        left join table_distributor_type_master as tdm on tdm.dis_type_id = d.distributor_type_id', "d.*,w.username,w.email_id,tdm.dis_type_name,w.web_user_id,w.status as loginStatus,con.country_name,s.state_name,c.city_name,loc.location_name, tr.relationship_code, ts.stockist_name,GROUP_CONCAT(DISTINCT RT.route_name SEPARATOR ', ') AS routes,sz.zone_name", $rp, $where . $dis . ' GROUP BY d.distributor_id ' . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributors as d 
        LEFT JOIN table_route_retailer as rr ON rr.distributor_id = d.distributor_id
		LEFT JOIN table_route AS RT ON RT.route_id = rr.route_id
        left join table_account as a on a.account_id=d.account_id
        left join table_web_users as w on w.distributor_id=d.distributor_id 
        left join country as con on con.country_id = d.country 
        left join state as s on s.state_id=d.state 
        LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
        left join city as c on c.city_id=d.city 
        left join table_location as loc on loc.location_id = d.location 
        left join table_relationship as tr on tr.relationship_id=d.relationship_id  
        left join table_stockist as ts on ts.stockist_id = d.stockist_id
        left join table_distributor_type_master as tdm on tdm.dis_type_id = d.distributor_type_id', 'd.distributor_id', '', $where . $dis . ' GROUP BY d.distributor_id ');
        $total = is_array($auRecCount) ? count($auRecCount) : 0;
//        echo '<pre>';
//        print_r($total);
//        die(' die here');
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $surveyStatus = '';
            if (strtolower($auRec[$i]->survey_status) == 'c') {
                $surveyStatus = 'Surveyed';
            } elseif (strtolower($auRec[$i]->survey_status) == 'i') {
                $surveyStatus = 'Not Surveyed';
            } elseif (strtolower($auRec[$i]->survey_status) == 'n') {
                $surveyStatus = 'Rejected';
            } else {
                $surveyStatus = '';
            }
            $start_date = $this->_changeDate($auRec[$i]->start_date);
            if ($auRec[$i]->distributor_dob == "0000-00-00") {
                $distributor_dob = "-";
            } else {
                $distributor_dob = $this->_changeDate($auRec[$i]->distributor_dob);
            }
            //end date
            if ($auRec[$i]->status == 'I') {
                $end_date = $this->_changeDate($auRec[$i]->end_date);
            } else {
                $end_date = ' ';
            }
            //end date
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"distributors_master_report.php?statusId=' . $auRec[$i]->distributor_id . '&value=' . $sts . '\">' . $sts . '</a>';
            //login status
            if ($auRec[$i]->web_user_id != '') {
                if ($auRec[$i]->status == 'A') {
                    $LogStatus = ($auRec[$i]->loginStatus == 'A') ? "Active" : "Inactive";
                    $LogSts = '<a href=\"distributors_master_report.php?statusLogId=' . $auRec[$i]->distributor_id . '&value=' . $LogStatus . '\">' . $LogStatus . '</a>';
                } else {
                    $LogSts = 'Inactive';
                }
            } else {
                $LogSts = ' ';
            }
            $survey = '<a href=\"distributor_survey.php?distId=' . $auRec[$i]->distributor_id . '\" target=\"_blank\">View Photo</a>';
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r", "\t");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"cell":["' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_name))) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_phone_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_phone_no2) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->distributor_address))) . '"';
            //$json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->distributor_address2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->country_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->location_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->stockist_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->dis_type_name))) . '"';
            $json .= ',"' . ucwords(addslashes($surveyStatus)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->gst_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->pan_no)) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->region_name)) . '"';


            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->routes)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->sms_number) . '"';

//            $json .= ',"' . addslashes($auRec[$i]->distributor_phone_no3) . '"';
//            $json .= ',"' . addslashes($auRec[$i]->distributor_leadline_no) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->contact_person))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->contact_number)) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->contact_number). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_person2)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->contact_number2) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_person3)) . '"';
//            $json .= ',"' . addslashes($auRec[$i]->contact_number3) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->distributor_email)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_email2) . '"';
//            $json .= ',"' . addslashes($auRec[$i]->distributor_email3) . '"';
            $json .= ',"' . addslashes($distributor_dob) . '"';
            $json .= ',"' . addslashes($start_date) . '"';
            $json .= ',"' . addslashes($end_date) . '"';
            $json .= ',"' . $survey . '"';
            $json .= ',"' . $sts . '"';
            //$json .= ',"'.$sts. '"';
            $json .= ',"' . $LogSts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Jatin : 5 July 2023  Replica of distributor list


    // Todo Start : Jatin : 10 July 2023 Create distributor Order List show salesman and distributor

    function showSalesmanDistributorOrderListing($salesman)
    {

        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($qtype == "date_of_order" && $query != '') {
            $query = date("Y-m-d", strtotime($query));
        }
        $_objAdmin = new Admin();
        if ($_SESSION['FromOrderList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromOrderList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToOrderList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToOrderList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = "";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_type='Adhoc' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_type!='Adhoc' ";
            }
        } else {
            $orderby = "";
        }
        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        } else if (isset($_SESSION['sel_dis']) && $_SESSION['sel_dis'] > 0) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['sel_dis'] . "' ";
        }
        if ($_SESSION['userLoginType'] == 1) {
            $salesman = '';
        }
        if (isset($_SESSION['sel_sal']) && $_SESSION['sel_sal'] > 0) {
            $disLogCond = " AND o.salesman_id='" . $_SESSION['sel_sal'] . "' ";
        }
        $StockistLogCond = '';
        if ($_SESSION['userLoginType'] == 7) {
            $StockistLogCond = " AND d.stockist_id='" . $_SESSION['stockistId'] . "' ";
        }
        if (isset($_SESSION['REGIONID']) && $_SESSION['REGIONID'] > 0) {
            $regionCondition = " AND re.region_id='" . $_SESSION['REGIONID'] . "'  AND REG.region_id IS NOT NULL ";
        }
        if (isset($_SESSION['STATEID']) && $_SESSION['STATEID'] > 0) {
            $stateCondition = " AND st.state_id='" . $_SESSION['STATEID'] . "' ";
        }
        if (isset($_SESSION['orderId']) && $_SESSION['orderId'] > 0) {
            $orderCnd = " AND o.order_id ='" . $_SESSION['orderId'] . "' ";
        }
        $where = " o.order_for='D' $disLogCond $StockistLogCond $fromdate $todate $regionCondition $stateCondition $orderby $orderCnd and o.account_id =" . $_SESSION['accountId'];
        if ($qtype == 'o.date_of_order') {
            $query = date('Y-m-d', strtotime($query));
        }

        // When salesman is loggedin
        if (($_SESSION['userLoginType'] == 5) && ($_SESSION['salesmanId'] > 0)) {
            $disIdArr = $_objAdmin->getRouteWiseDistributors($_SESSION['salesmanId'], $_SESSION['accountId']);
            //echo "<pre>";print_R($disIdArr);die;
            if (is_array($disIdArr) && (count($disIdArr) > 0)) {
                $disIds = implode(',', $disIdArr);
                $where .= " AND o.distributor_id IN($disIds) ";

            }
        }
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_order as o
    left join table_salesman as s on o.salesman_id=s.salesman_id
  	left join table_distributors as d on d.distributor_id=o.distributor_id
  	left join table_tags as t on t.tag_id=o.reason 
  	left join state as st on st.state_id=d.state
  	left join city as c on c.city_id=d.city
  	', "o.*,s.salesman_name,d.distributor_name,d.distributor_code,d.distributor_location, d.distributor_address, st.state_name, c.city_name,t.tag_description", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributor_order as o
    left join table_salesman as s on o.salesman_id=s.salesman_id
  	left join table_distributors as d on d.distributor_id=o.distributor_id
  	left join state as st on st.state_id=d.state
  	left join table_tags as t on t.tag_id=o.reason
  	left join city as c on c.city_id=d.city
  	', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
                $targetBlank = '';
            } else {
                $targetBlank = "target='_blank'";
            }


            $image1 = '<a href=\"dis_order_image.php?ordId=' . base64_encode($auRec[$i]->order_id) . '\" ' .
                $targetBlank .
                '>View Image</a>';
            //Todo Start : sudhanshu 8 july 2024 : add download pdf column
            $download_pdf = "";
            if (strtolower($auRec[$i]->order_type) != 'no') {
                $download_pdf = '<a href="distributor_order_pdf.php?ordId=' . base64_encode($auRec[$i]->order_id) . '" ' . $targetBlank . '>Download PDF</a>';

            }
            //Todo End : sudhanshu  8 july 2024 : add download pdf column

            if ($auRec[$i]->order_type == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "U";
            }
            if ($auRec[$i]->order_type == 'No') {
                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
                $color = ($auRec[$i]->order_status == 'A') ? "I" : "P";
            }
            if ($auRec[$i]->order_type == 'Adhoc') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Adhoc Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }
            if ($auRec[$i]->order_type == 'Return') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "Return Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }
            if ($auRec[$i]->updated_by_app > 0) {
                $color = "U";
            }
            $auRec2 = $this->_getSelectList2('table_distributor_order_detail', "count( distinct(item_id)) as total_item,sum(quantity) as total_qty", '', " order_id = " . $auRec[$i]->order_id . " and type = 1");
            $CheckOrderSts = $this->_getSelectList2('table_distributor_order as o 
	  inner join table_distributor_order_detail as od on o.order_id = od.order_id',
                "od.quantity, od.acc_quantity,od.is_processed ", '', " o.order_id='" . $auRec[$i]->order_id . "' 
		AND ((od.quantity = od.acc_quantity AND od.is_processed=0) OR (od.quantity >od.acc_quantity AND od.is_processed=1)) 
		and od.free_item_id = 0");
            if ($auRec[$i]->order_status == 'A') {
                $orderStatus = 'Fully Pending';
            } else if (is_array($CheckOrderSts) && count($CheckOrderSts) > 0) {
                $orderStatus = 'Partially Invoiced';
            } else {
                $orderStatus = 'Fully Invoiced';
            }
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            /* ----Display Outlet ---- */
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }


            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            //$json .= ',"' . $orderStatus . '"';
            $json .= ',"' . ucwords(addslashes(number_format(floor($auRec[$i]->acc_total_invoice_amount), 2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec2[0]->total_item)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec2[0]->total_qty)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_location))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->distributor_address))) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->reason_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"';
            $json .= ',"' . $image1 . '"';
            $json .= ',"' . ucwords(addslashes($download_pdf)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Jatin : 10 July 2023 Create distributor Order List show salesman and distributor


    // ************************** Distributor GRN accept reject 10 july 2023 sudhanshu *************************

    function showDistributorGrnAcceptReject()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'c.category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " GROUP BY d.distributor_id,s.bill_date ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $dis = " and d.distributor_id='" . $_SESSION['distributorId'] . "'";
        }
        $auRec = $this->_getSelectList('table_item_dis_stk_inprocess AS s 
		LEFT JOIN table_cases AS clr ON clr.case_id = s.attribute_value_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id',
            "d.distributor_code,d.distributor_name, c.category_name, clr.case_size, 
        s.bill_date, s.bill_no, s.status, s.last_update_datetime,s.dis_stk_inpro_id", $rp, $where . $dis . $sort, '');
        /*echo '<pre>';
		print_r($auRec);*/
        $auRecCount = $this->_getSelectList('table_item_dis_stk_inprocess AS s 
		LEFT JOIN table_cases AS clr ON clr.case_id = s.attribute_value_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id', 's.*', '', $where . $dis . $sort);
        $total = sizeof($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Accepted" : "In-Process";
            //$status='<a href=\"master_category.php?stid='.$auRec[$i]->category_id.'&value='.$status.'\">'.$status.'</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->dis_stk_inpro_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->bill_date) . '"';
            $json .= ',"' . addslashes($auRec[$i]->bill_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->last_update_datetime) . '"]';
            //$json .= ',"'.$status.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // ************************** Distributor GRN accept reject 10 july 2023 sudhanshu *************************
    function showDistributorGrnRejectedQuantity()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'c.category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " GROUP BY d.distributor_id,s.bill_date ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $dis = " and d.distributor_id='" . $_SESSION['distributorId'] . "'";
        }
        $auRec = $this->_getSelectList('distribuor_grn_rejected AS s 
     LEFT JOIN table_item_dis_stk_inprocess AS inp ON inp.dis_stk_inpro_id=s.dis_stk_inpro_id
     LEFT JOIN table_cases AS clr ON clr.case_id = inp.attribute_value_id
     LEFT JOIN table_category AS c ON c.category_id = inp.category_id
     LEFT JOIN table_item AS i ON i.item_id = inp.item_id
     LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id',
            "d.distributor_code,d.distributor_name, c.category_name, clr.case_size, 
     s.bill_date, s.id,s.bill_no, inp.status, s.updated,s.dis_stk_inpro_id", $rp, $where . $dis . $sort, '');
        /*echo '<pre>';
        print_r($auRec);*/
        $auRecCount = $this->_getSelectList('distribuor_grn_rejected AS s 
     LEFT JOIN table_item_dis_stk_inprocess AS inp ON inp.dis_stk_inpro_id=s.dis_stk_inpro_id
     LEFT JOIN table_cases AS clr ON clr.case_id = inp.attribute_value_id
     LEFT JOIN table_category AS c ON c.category_id = inp.category_id
     LEFT JOIN table_item AS i ON i.item_id = inp.item_id
     LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id',
            's.*', '', $where . $dis . $sort);
        $total = sizeof($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Accepted" : "In-Process";
            //$status='<a href=\"master_category.php?stid='.$auRec[$i]->category_id.'&value='.$status.'\">'.$status.'</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->bill_date) . '"';
            $json .= ',"' . addslashes($auRec[$i]->bill_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->updated) . '"]';
            //$json .= ',"'.$status.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addReason()
    {
        //echo "hii";die;
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['reason'] = mysql_escape_string($_POST['reason']);
        $data['created'] = date('Y-m-d H:i:s');
        $data['updated'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        //print_r($data)die;
        $id = $this->_dbInsert($data, 'table_reason_master');
        return $id;
    }

    function updateReason($id)
    {
        $data['reason'] = mysql_escape_string($_POST['reason']);
        $data['created'] = date('Y-m-d H:i:s');
        $data['updated'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_reason_master', " id=" . $id);
        return $id;
    }

    function showReason()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_reason_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_reason_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"reason_master.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->last_update_date));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->reason) . '"';

            $json .= ',"' . addslashes($lastUpdate) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


//********************************************** */

    /******************************stockTansferAccepReject 10 july 2023****************/
    public function stockTransferAcceptReject()
    {
        if ($_POST['stock_val'] != "") {
            /*----Updated accepted stock value with stock id----*/
            /*echo '<pre>';
               print_r($_POST);
               */
            //echo sizeof($_POST['stockId']);

            if (isset($_POST['stockId']) && sizeof($_POST['stockId']) > 0 && isset($_POST['sal_stock_value']) && sizeof($_POST['sal_stock_value']) > 0) {
                foreach ($_POST['stockId'] as $key => $value) {
                    # code...
                    //echo $kye;die;
                    $cond = " dis_stk_inpro_id='" . $value . "' ";
                    $stockVal = $this->_getSelectList('table_item_dis_stk_inprocess', "*", '', $cond);

                    if ($_POST['sal_stock_value'][$key] > $stockVal[0]->rec_stock_value) {
                        // die('jooo');
                        $_SESSION['value'] = "Stock value" . $_POST['sal_stock_value'][$key] . "is grater than" . $stockVal[$key]->rec_stock_value;
                    } else {
                        // echo "<pre>";
                        // print_r($stockVal);
                        /*echo '<pre>';
                            print_r($stockVal);
                            exit; */
                        if ($_POST['sal_stock_value'][$key] < $_POST['stock_val'][$key]) {
                            $rejectData['rejected_qty'] = $_POST['stock_val'][$key] - $_POST['sal_stock_value'][$key];
                            $rejectData['dis_stk_inpro_id'] = $value;
                            $rejectData['account_id'] = $_SESSION['accountId'];
                            $rejectData['distributor_id'] = $stockVal[0]->distributor_id;
                            $rejectData['bill_no'] = $stockVal[0]->bill_no;
                            $rejectData['bill_date'] = date('Y-m-d');
                            $rejectData['rejection_reason'] = $_POST['reason'][$key];
                            $rejectData['remark'] = $_POST['remark'][$key];
                            $rejectData['created'] = date('Y-m-d');
                            $rejectData['updated'] = date('Y-m-d');
                            //  echo $_POST['stock_val'][$key];
                            // print_r($data);die;
                            $rej = $this->_dbInsert($rejectData, 'distribuor_grn_rejected');
                            //echo $rej;die;
                            //echo $_POST['sal_stock_value'][$key];die;
                        }
                        $data['acpt_stock_value'] = $_POST['sal_stock_value'][$key];
                        $data['status'] = 'A';
                        // if()
                        //  print_r($data);
                        //  echo "hii";die;
                        //exit;
                        $id = $this->_dbUpdate($data, 'table_item_dis_stk_inprocess', " dis_stk_inpro_id=" . $value);
                        /* Update Distributor stock */
                        $discon = " distributor_id='" . $stockVal[0]->distributor_id . "' and category_id='" . $stockVal[0]->category_id . "' and item_id='" . $stockVal[0]->item_id . "' and attribute_value_id='" . $stockVal[0]->attribute_value_id . "'";
                        $disStockValue = $this->_getSelectList('table_item_distributor_stock', "*", '', $discon);
                        if (is_array($disStockValue) && sizeof($disStockValue) > 0) {
                            $dataaccept['dis_stock_value'] = $_POST['sal_stock_value'][$key];
                            $dataaccept['last_updated_date'] = date('Y-m-d');
                            $id = $this->_dbUpdate($dataaccept, 'table_item_distributor_stock', " dis_stk_id=" . $disStockValue[0]->dis_stk_id);
                            $flag = true;
                        }
                    }
                }
                if ($flag) {
                    return 1;
                }
            }
        }
    }

    /********************************************** */
    public function grnApprovalByAdmin()
    {

        if ($_POST['stock_val'] != "") {
            /*----Updated accepted stock value with stock id----*/
            /*echo '<pre>';
               print_r($_POST);
               */
            //echo sizeof($_POST['stockId']);

            if (isset($_POST['rej_id']) && sizeof($_POST['accepted']) > 0) {
                $rejcted = 0;
                foreach ($_POST['rej_id'] as $key => $value) {
                    # code...

                    //  echo "jii";die;
                    $cond = " id='" . $value . "' ";

                    $inpId = $this->_getSelectList('distribuor_grn_rejected', "*", '', $cond);
                    // print_r($inpId);
                    $con1 = " dis_stk_inpro_id='" . $inpId[0]->dis_stk_inpro_id . "' ";
                    $inporecesId = $this->_getSelectList('table_item_dis_stk_inprocess', "acpt_stock_value", '', $con1);

                    $accpt = $inporecesId[0]->acpt_stock_value;
                    $stockVal = $this->_getSelectList('distribuor_grn_rejected', "rejected_qty", '', $cond);

                    if ($_POST['accepted'][$key] > $stockVal[0]->rejected_qty) {
                        // die('jooo');
                        $_SESSION['value'] = "Stock value" . $_POST['accepted'][$key] . "is grater than" . $stockVal[$key]->rejected_qty;
                    } else {


                        if ($_POST['dicline'][$key] != 0) {
                            $rejcted = $rejcted + $_POST['dicline'][$key];
                        }
                        $rejectData['approved_by_admin_acc'] = $_POST['accepted'][$key];
                        $rejectData['approved_by_admin_rej'] = $_POST['dicline'][$key];
                        $rejectData['last_updated_by_admin'] = date('Y-m-d H:i:s');
                        $rejectData['rejected_qty'] = $inpId[0]->rejected_qty - $_POST['accepted'][$key];
                        $data['acpt_stock_value'] = $accpt + $_POST['accepted'][$key];

                        // if()
                        // echo "<pre>";
                        //    print_r($rejectData);
                        // echo "hii";die;
                        //exit;
                        $this->_dbUpdate($rejectData, 'distribuor_grn_rejected', " id=" . $value);


                        $id = $this->_dbUpdate($data, 'table_item_dis_stk_inprocess', " dis_stk_inpro_id=" . $inpId[0]->dis_stk_inpro_id);
                        /* Update Distributor stock */
                        $discon = " distributor_id='" . $stockVal[0]->distributor_id . "' and category_id='" . $stockVal[0]->category_id . "' and item_id='" . $stockVal[0]->item_id . "' and attribute_value_id='" . $stockVal[0]->attribute_value_id . "'";
                        $disStockValue = $this->_getSelectList('table_item_distributor_stock', "*", '', $discon);
                        if (is_array($disStockValue) && sizeof($disStockValue) > 0) {
                            $dataaccept['dis_stock_value'] = $_POST['sal_stock_value'][$key];
                            $dataaccept['last_updated_date'] = date('Y-m-d');
                            $id = $this->_dbUpdate($dataaccept, 'table_item_distributor_stock', " dis_stk_id=" . $disStockValue[0]->dis_stk_id);
                            $flag = true;
                        }

                    }
                }
                if ($rejcted) {
                    return $rejcted;
                }
            }
        }
    }
    /********************************************** */


    // Todo : Start : 17 July 2023 : Dynamic salesman distributor Order list in dms
    function showDynamicSalesmanDistributorOrderListing($salesman)
    {

        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($qtype == "date_of_order" && $query != '') {
            $query = date("Y-m-d", strtotime($query));
        }
        $_objAdmin = new Admin();


        // ---------------start dynamic filter condition-----------
        $salesmanCnd = '';
        $salCond = '';

        if (isset($_SESSION['fil_salesman']) && $_SESSION['fil_salesman'] > 0) {
            $salesmanCnd = ' AND s.salesman_id = "' . $_SESSION['fil_salesman'] . '"';
        } else if (isset($_SESSION['fil_salesman_manager']) && ($_SESSION['fil_salesman_manager'] > 0)) {
            $salesmanManagerId = $_SESSION['fil_salesman_manager'];
            $account_id = $_SESSION['accountId'];
            $res = $this->_getSelectList2('table_salesman_hierarchy_relationship AS SHR 
    LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
    LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id', 's.salesman_id,SH.hierarchy_id,SH.sort_order', '', " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanManagerId ORDER BY SH.sort_order ASC ");
            if (is_array($res) && (count($res) > 0)) {
                $sortOrder = $res[0]->sort_order;
                $_objArrayList = new ArrayList();
                $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanManagerId), $sortOrder, $account_id);

                if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                    $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                }

                $salesmanCnd = " AND s.salesman_id IN($bottomUsersIds) ";
            }
        } else if (isset($_SESSION['fil_salesman_designation']) && ($_SESSION['fil_salesman_designation'] > 0)) {
            $account_id = $_SESSION['accountId'];
            $_objArrayList = new ArrayList();
            $getDesignationWiseBottomUsersIdArr = $_objArrayList->getDesignationWiseBottomUsers($_SESSION['fil_salesman_designation'], $account_id);

            if (is_array($getDesignationWiseBottomUsersIdArr) && (count($getDesignationWiseBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getDesignationWiseBottomUsersIdArr);
                $salesmanCnd = " AND s.salesman_id IN($bottomUsersIds) ";
            }
        } else {
            $salesmanCnd .= '';
        }
        if (isset($_SESSION['fil_distributor']) && $_SESSION['fil_distributor'] > 0) {
            $salesmanCnd .= ' AND d.distributor_id = "' . $_SESSION['fil_distributor'] . '"';
        }
        if (isset($_SESSION['fil_salesman_zone']) && $_SESSION['fil_salesman_zone'] > 0) {
            $salesmanCnd .= ' AND z.zone_id = "' . $_SESSION['fil_salesman_zone'] . '"';
        }
        if (isset($_SESSION['fil_salesman_state']) && $_SESSION['fil_salesman_state'] > 0) {
            $salesmanCnd .= ' AND s.state = "' . $_SESSION['fil_salesman_state'] . '"';
        }
        if (isset($_SESSION['fil_distributor_state']) && !empty($_SESSION['fil_distributor_state']) && $_SESSION['fil_distributor_state'] > 0) {
            $salesmanCnd .= " AND d.state=" . $_SESSION['fil_distributor_state'];
        }
        if (isset($_SESSION['fil_distributor_zone']) && !empty($_SESSION['fil_distributor_zone']) && $_SESSION['fil_distributor_zone'] > 0) {
            $salesmanCnd .= " AND z2.zone_id=" . $_SESSION['fil_distributor_zone'];
        }
        if (isset($_SESSION['fil_order_status']) && !empty($_SESSION['fil_order_status'])) {
            $salesmanCnd .= " AND o.order_status='" . $_SESSION['fil_order_status'] . "'";
        }


        // Date range , month and year
        if (!isset($_SESSION['fil_from']) && empty($_SESSION['fil_from'])) {
            $_SESSION['fil_from'] = date('d M Y');
        }

        if (!isset($_SESSION['fil_to']) && empty($_SESSION['fil_to'])) {
            $_SESSION['fil_to'] = date('d M Y');
        }
        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $_SESSION['fil_from'] = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $_SESSION['fil_to'] = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
        }
        $tim_date = " and o.date_of_order BETWEEN '" . date('Y-m-d', strtotime
            ($_SESSION['fil_from'])) .
            "' AND '" . date('Y-m-d', strtotime($_SESSION['fil_to'])) . "'";


        // -------------End dynamic filter condition------------

        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        } else if (isset($_SESSION['sel_dis']) && $_SESSION['sel_dis'] > 0) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['sel_dis'] . "' ";
        }
        if ($_SESSION['userLoginType'] == 1) {
            $salesman = '';
        }

        if ($_SESSION['userLoginType'] == 7) {
            $StockistLogCond = " AND d.stockist_id='" . $_SESSION['stockistId'] . "' ";
        }

        $where = " o.order_for='D' $disLogCond $tim_date $StockistLogCond $salesmanCnd  and o.account_id =" . $_SESSION['accountId'];
        if ($qtype == 'o.date_of_order') {
            $query = date('Y-m-d', strtotime($query));
        }

        // When salesman is loggedin
        if (($_SESSION['userLoginType'] == 5) && ($_SESSION['salesmanId'] > 0)) {
            $disIdArr = $_objAdmin->getRouteWiseDistributors($_SESSION['salesmanId'], $_SESSION['accountId']);
            //echo "<pre>";print_R($disIdArr);die;
            if (is_array($disIdArr) && (count($disIdArr) > 0)) {
                $disIds = implode(',', $disIdArr);
                $where .= " AND o.distributor_id IN($disIds) ";
            }
        }


        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_order as o
    left join table_salesman as s on o.salesman_id=s.salesman_id
    left join table_distributors as d on d.distributor_id=o.distributor_id
    left join state as ss on ss.state_id = s.state
    left join state as st on st.state_id = d.state
    left join table_zone_state_mapping as zsm1 on zsm1.state_id = s.state and zsm1.account_id = s.account_id
    left join table_zone as z on z.zone_id = zsm1.zone_id
  	left join table_zone_state_mapping as zsm on zsm.state_id = d.state and zsm.account_id = d.account_id 
  	left join table_tags as t on t.tag_id=o.reason
  	left join table_zone as z1 on z1.zone_id = zsm.zone_id
  	left join city as c on c.city_id=d.city
  	left join city as c1 on c1.city_id = s.city
  	', "o.*,s.salesman_name,d.distributor_name,d.distributor_code,d.distributor_location, d.distributor_address, st.state_name as dis_state,c1.city_name as sal_city ,c.city_name as dis_city,ss.state_name as sal_state,z.zone_name as sal_zone,z1.zone_name as dis_zone,t.tag_description", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributor_order as o
    left join table_salesman as s on o.salesman_id=s.salesman_id
    left join table_distributors as d on d.distributor_id=o.distributor_id
    left join state as ss on ss.state_id = s.state
    left join state as st on st.state_id = d.state
    left join table_zone_state_mapping as zsm1 on zsm1.state_id = s.state and zsm1.account_id = s.account_id
    left join table_tags as t on t.tag_id=o.reason
    left join table_zone as z on z.zone_id = zsm1.zone_id
  	left join table_zone_state_mapping as zsm on zsm.state_id = d.state and zsm.account_id = d.account_id 
  	left join table_zone as z1 on z1.zone_id = zsm.zone_id
  	left join city as c on c.city_id=d.city
  	left join city as c1 on c1.city_id = s.city
  	', 'count(*) as total', '', $where);
        //Todo Start : get distributor lat lag : sudhanshu : 02 july 2024

        $getDisSurveyLatLng = $this->_getSelectList("table_distributors as d", "d.distributor_id,d.lat,d.lng", "", " d.status = 'A' AND d.lat_lng_capcure_accuracy!=0 AND (d.lat != '0.0' AND d.lng != '0.0') AND (d.lat != '' AND d.lng != '') ORDER BY d.distributor_id ASC");
        $disSurveyLatLngArr = [];
        if (is_array($getDisSurveyLatLng) && (count($getDisSurveyLatLng) > 0)) {
            foreach ($getDisSurveyLatLng as $key => $disSurveyLatLng) {
                $disSurveyLatLngArr[$disSurveyLatLng->distributor_id] = $disSurveyLatLng;
            }
        }

        //Todo End : get distributor lat lag : sudhanshu : 02 july 2024
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
                $targetBlank = '';
            } else {
                $targetBlank = "target='_blank'";
            }
            $image1 = '<a href=\"dis_order_image.php?ordId=' . base64_encode($auRec[$i]->stock_id) . '\" ' .
                $targetBlank .
                '>View Image</a>';


            if ($auRec[$i]->order_type == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "U";
            }
            if ($auRec[$i]->order_type == 'No') {
                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
                $color = ($auRec[$i]->order_status == 'A') ? "I" : "P";
            }
            if ($auRec[$i]->order_type == 'Adhoc') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Adhoc Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }
            if ($auRec[$i]->order_type == 'Return') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "Return Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }
            if ($auRec[$i]->updated_by_app > 0) {
                $color = "U";
            }
            $auRec2 = $this->_getSelectList2('table_distributor_order_detail', "count( distinct(item_id)) as total_item,sum(quantity) as total_qty", '', " order_id = " . $auRec[$i]->order_id . " and type = 1");
            $CheckOrderSts = $this->_getSelectList2('table_distributor_order as o 
	  inner join table_distributor_order_detail as od on o.order_id = od.order_id',
                "od.quantity, od.acc_quantity,od.is_processed ", '', " o.order_id='" . $auRec[$i]->order_id . "' 
		AND ((od.quantity = od.acc_quantity AND od.is_processed=0) OR (od.quantity >od.acc_quantity AND od.is_processed=1)) 
		and od.free_item_id = 0");
            if ($auRec[$i]->order_status == 'A') {
                $orderStatus = 'Fully Pending';
            } else if (is_array($CheckOrderSts) && count($CheckOrderSts) > 0) {
                $orderStatus = 'Partially Invoiced';
            } else {
                $orderStatus = 'Fully Invoiced';
            }
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            /* ----Display Outlet ---- */
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }

            //Todo Start : sudhanshu 02 july 204 : get distance
            if ((isset($auRec[$i]->lat) && !empty($auRec[$i]->lat) && ($auRec[$i]->lat != '0.0')) && (isset($auRec[$i]->lng) && !empty($auRec[$i]->lng) && ($auRec[$i]->lng != '0.0')) && (isset($disSurveyLatLngArr[$auRec[$i]->distributor_id]) && !empty($disSurveyLatLngArr[$auRec[$i]->distributor_id]))) {


                $retSurLat = $disSurveyLatLngArr[$auRec[$i]->distributor_id]->lat;
                $retSurLng = $disSurveyLatLngArr[$auRec[$i]->distributor_id]->lng;

                $orderDistance = round($this->distance($auRec[$i]->lat, $auRec[$i]->lng, $retSurLat, $retSurLng, 'K'), 2) . ' KM';
            } else {
                $orderDistance = '-';
            }
            //Todo End : sudhanshu 02 july 204 : get distance
            //Todo Start : sudhanshu 8 july 2024 : add download pdf column
            $download_pdf = "";
            if (strtolower($auRec[$i]->order_type) != 'no') {
                $download_pdf = '<a href="distributor_order_pdf.php?ordId=' . base64_encode($auRec[$i]->order_id) . '" ' . $targetBlank . '>Download PDF</a>';

            }
            //Todo End : sudhanshu  8 july 2024 : add download pdf column

            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            //$json .= ',"' . $orderStatus . '"';
            $json .= ',"' . ucwords(addslashes(number_format(floor($auRec[$i]->acc_total_invoice_amount), 2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec2[0]->total_item)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec2[0]->total_qty)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_city)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_city)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_location))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->distributor_address))) . '"';
            $json .= ',"' . $status . '"';
            //Todo Start : sudhanshu 02 july 2024 : order distance column
            $json .= ',"' . $orderDistance . '"';
            //Todo End : sudhanshu 02 july 2024 : order distance column
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->reason_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"';
            $json .= ',"' . $image1 . '"';
            $json .= ',"' . ucwords(addslashes($download_pdf)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo : End : 17 July 2023 : Dynamic salesman distributor Order list in dms

    // Todo : Start : Jatin : 19 July 2023 : Dynamic app filter

    function showDynamicAppFilter()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'fil_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_dynamic_report_filter', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_dynamic_report_filter', 'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"filter_app_master.php?stid=' . $auRec[$i]->rpt_fil_id . '&value=' . $status . '\">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->rpt_fil_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->fil_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->alias_name) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addDynamicApp()
    {
        $data['fil_name'] = mysql_escape_string(trim($_POST['fil_name']));
        $data['alias_name'] = mysql_escape_string($_POST['alias_name']);
        $data['status'] = 'A';
        $data['created_on'] = date('Y-m-d H:i:s');
        $id = $this->_dbInsert($data, 'table_dynamic_report_filter');
        return $id;
    }

    function updateDynamicApp($id)
    {
        $data['fil_name'] = mysql_escape_string(trim($_POST['fil_name']));
        $data['alias_name'] = mysql_escape_string($_POST['alias_name']);
        $data['status'] = 'A';
        $data['updated_on'] = date('Y-m-d H:i:s');
        $id = $this->_dbUpdate2($data, 'table_dynamic_report_filter', " rpt_fil_id=" . $id);
        return $id;
    }

    // Todo : End : Jatin : 19 July 2023 : Dynamic app filter

    // Todo Start : Sudhanshu : Sync tracking Report
    function showSyncTrackingReport($salesman)
    {

        //echo $salesman;die;
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if ($_SESSION['SalSyncList'] != '') {
            $salesmanCondi = " AND s.salesman_id='" . $_SESSION['SalSyncList'] . "' ";
        }
        //  echo $salesmanCondi;die;
        if ($_SESSION['FromSyncDate'] != '') {
            $fromdate = "  st.sync_date  >= '" . date('Y-m-d', strtotime($_SESSION['FromSyncDate'])) . "' AND ";
        } else {
            $fromdate = " st.sync_date  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToSyncDate'] != '') {
            $todate = " st.sync_date <= '" . date('Y-m-d', strtotime($_SESSION['ToSyncDate'])) . "' ";
        } else {
            $todate = "  st.sync_date <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['accId'] !== "" && $_SESSION['userLoginType'] == 'admin') {
            $accCondi = "AND st.account_id='" . $_SESSION['accId'] . "'";
        } elseif ($_SESSION['accId'] !== "" && $_SESSION['userLoginType'] !== 'admin') {
            $accCondi = "AND st.account_id='" . $_SESSION['accId'] . "'";

        } elseif ($_SESSION['accId'] == "" && $_SESSION['userLoginType'] == 'admin') {
            $accCondi = '';
        } else {
            $accCondi = "AND st.account_id='" . $_SESSION['accountId'] . "'";

        }

        $where = $fromdate . $todate . $salesmanCondi . $accCondi;
        // echo $where;
        if ($query) $where .= "AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_sync_tracking_api as st
        left join table_salesman as s ON s.salesman_id=st.salesman_id',
            "st.*,s.salesman_name,s.employee_code", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_sync_tracking_api as st
        left join table_salesman as s ON s.salesman_id=st.salesman_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->sync_status == 'S') ? "Success" : "Failed";
            $sync_date = date('d M Y', strtotime($auRec[$i]->sync_date));
            $created_date = date('d M Y', strtotime($auRec[$i]->created_date));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->sync_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($sync_date) . '"';
            $json .= ',"' . addslashes($auRec[$i]->sync_start_time) . '"';
            $json .= ',"' . addslashes($auRec[$i]->sync_end_time) . '"';
            $json .= ',"' . addslashes($auRec[$i]->last_api_call) . '"';
            $json .= ',"' . addslashes($auRec[$i]->sync_success_per) . '"';
            $json .= ',"' . addslashes($created_date) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Sudhanshu : Sync tracking Report

    // Todo Start : Sudhanshu

    function showOrederReason()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 10 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasOrdRes']) && $_SESSION['MasOrdRes'] != 'all' && $_SESSION['MasOrdRes'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasOrdRes'] . "'";
        }
        //Todo End : sudhanshu 10 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_dis_order_return_reason', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_dis_order_return_reason', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"dis_order_return_reason.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = $this->_changeDate($auRec[$i]->updated);
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->reason) . '"';

            $json .= ',"' . addslashes($lastUpdate) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addOrderReason()
    {
        //echo "hii";die;
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['reason'] = mysql_escape_string($_POST['reason']);
        $data['created'] = date('Y-m-d H:i:s');
        $data['updated'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        //print_r($data)die;
        $id = $this->_dbInsert($data, 'table_dis_order_return_reason');
        return $id;
    }

    function updateOrderReason($id)
    {
        $data['reason'] = mysql_escape_string($_POST['reason']);
        $data['created'] = date('Y-m-d H:i:s');
        $data['updated'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_dis_order_return_reason', " id=" . $id);
        return $id;
    }

    function showTertiaryOrderListing($salesman)
    {


        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($qtype == "date_of_order" && $query != '') {
            $query = date("Y-m-d", strtotime($query));

        }
        $_objAdmin = new Admin();


        mysql_query("SET SESSION group_concat_max_len = 100000000");
        $validated_default_date = date("Y-m-d", strtotime("-2 Months"));
        // $where = " (tto.date_of_order BETWEEN '" . date('Y-m-d', strtotime($_SESSION['FromAttList'])) . "' AND '" . date('Y-m-d', strtotime($_SESSION['ToAttList'])) . "') $salesman $salesmanCondi ";
        if ($_SESSION['SalAttList'] != '') {
            $salesmanCondi = " AND s.salesman_id='" . $_SESSION['SalAttList'] . "' ";
        }
        $where = " (tto.date_of_order BETWEEN '" . date('Y-m-d', strtotime($_SESSION['FromAttList'])) . "' AND '" . date('Y-m-d', strtotime($_SESSION['ToAttList'])) . "') $salesman $salesmanCondi ";
        // echo $where;
        if ($query) {
            $where .= " AND $qtype LIKE '%$query%' ";
        } //echo $where;

        $auRec = $this->_getSelectList('table_tertiary_order as tto 
     LEFT JOIN table_tertiary_order_detail as ttod ON tto.order_id= ttod.order_id 
     left join table_item as ti on ti.item_id = ttod.item_id 
     left join table_salesman as s on s.salesman_id = tto.salesman_id 
     left JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id 
     left JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id 
     left join table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id 
     left join table_retailer as tr on tr.retailer_id = tto.retailer_id 
     Left join state as st On st.state_id = tr.state 
     LEFT JOIN table_zone_state_mapping as zsm on zsm.state_id = tr.state AND zsm.account_id = tr.account_id
     LEFT JOIN table_zone as z on z.zone_id = zsm.zone_id 
     left join table_distributors as d on d.distributor_id = tr.distributor_id 
     left join city as c on c.city_id = tr.city 
     left join table_location as tl on tl.location_id = tr.location_id',
            'tto.*,s.salesman_name,tr.retailer_name,tr.retailer_code,st.state_name,c.city_name,tl.location_name,H.description AS designation, S2.salesman_name AS rptPerson, z.zone_name,d.distributor_name , d.distributor_code,COUNT(DISTINCT ttod.item_id) as total_item,SUM(ttod.quantity) as order_quantity,s.employee_code', $rp,
            $where . " GROUP BY tto.order_id,ttod.order_id " . $sort);

        $auRecCount = $this->_getSelectList('table_tertiary_order as tto 
     LEFT JOIN table_tertiary_order_detail as ttod ON tto.order_id= ttod.order_id 
     left join table_item as ti on ti.item_id = ttod.item_id 
     left join table_salesman as s on s.salesman_id = tto.salesman_id 
     left JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id 
     left JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id 
     left join table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id 
     left join table_retailer as tr on tr.retailer_id = tto.retailer_id 
     Left join state as st On st.state_id = tr.state 
     LEFT JOIN table_zone_state_mapping as zsm on zsm.state_id = tr.state AND zsm.account_id = tr.account_id
     LEFT JOIN table_zone as z on z.zone_id = zsm.zone_id 
     left join table_distributors as d on d.distributor_id = tr.distributor_id 
     left join city as c on c.city_id = tr.city 
     left join table_location as tl on tl.location_id = tr.location_id', 'count(*) as total', '',
            $where . " GROUP BY ttod.order_id ");
        // print_r($auRecCount);
        $total = count($auRecCount);
        // $total = count($auRec);
        // echo $total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $ttl_item = $auRec[$i]->total_item;
            $ttl_qty = $auRec[$i]->order_quantity;
            if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
                $targetBlank = '';
            } else {
                $targetBlank = 'target="_blank"';
            }
            $order_id = '<a href="tertiary_order_details.php?id=' . $auRec[$i]->order_id . '" ' . $targetBlank . '>' . $auRec[$i]->order_id . '</a>';
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            $routeName = (isset($retailerWiseRoutesArr[$auRec[$i]->retailer_id]) && !empty($retailerWiseRoutesArr[$auRec[$i]->retailer_id])) ? $retailerWiseRoutesArr[$auRec[$i]->retailer_id] : '';
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($order_id)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->designation)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->rptPerson)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->total_invoice_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($ttl_item)) . '"';
            $json .= ',"' . ucwords(addslashes($ttl_qty)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Sudhanshu

    //***********show Web user login details 16 aug 2023 **********/
    function showWebUserLoginDetails($salesman)
    {

        //echo $salesman;die;
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder, login_time ASC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if ($_SESSION['WebUser'] != '') {
            $uname = " AND w.web_user_id='" . $_SESSION['WebUser'] . "' ";
        }
        //  echo $salesmanCondi;die;
        if ($_SESSION['FromWebDate'] != '') {
            $fromdate = "  lt.login_date  >= '" . date('Y-m-d', strtotime($_SESSION['FromWebDate'])) . "' AND ";
        } else {
            $fromdate = " lt.login_date  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToWebDate'] != '') {
            $todate = " lt.login_date <= '" . date('Y-m-d', strtotime($_SESSION['ToWebDate'])) . "' ";
        } else {
            $todate = "  lt.login_date <= '" . date('Y-m-d') . "'";
        }


        $where = $fromdate . $todate . $uname;
        //echo $where;
        if ($query) $where .= "AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_login_track as lt
    left join table_web_users as w ON lt.username=w.username
    left join table_distributors as d ON d.distributor_id=w.distributor_id
    left join table_retailer as r ON r.retailer_id=w.retailer_id
    left join table_salesman as s ON s.salesman_id=w.salesman_id
    left join table_stockist as stk ON stk.stockist_id=w.stockist_id',
            "lt.*,w.username,w.user_type,d.distributor_name,r.retailer_name,s.salesman_name,stk.stockist_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_login_track as lt
    left join table_web_users as w ON lt.username=w.username
    left join table_distributors as d ON d.distributor_id=w.distributor_id
    left join table_retailer as r ON r.retailer_id=w.retailer_id
    left join table_salesman as s ON s.salesman_id=w.salesman_id
    left join table_stockist as stk ON stk.stockist_id=w.stockist_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            $loginDate = $this->_changeDate($auRec[$i]->login_date);
            if ($auRec[$i]->user_type == 1) {
                $userType = "Admin";
                $userName = "Admin User";
            } elseif ($auRec[$i]->user_type == 3) {
                $userType = "Distributor";
                $userName = $auRec[$i]->distributor_name;
            } elseif ($auRec[$i]->user_type == 4) {
                $userType = "Retailer";
                $userName = $auRec[$i]->retailer_name;
            } elseif ($auRec[$i]->user_type == 7) {
                $userType = "Stockist";
                $userName = $auRec[$i]->stockist_name;
            } elseif ($auRec[$i]->user_type == 5) {
                $userType = "Salesman";
                $userName = $auRec[$i]->salesman_name;
            } else {
                $userType = '';
                $userName = "";
            }


            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->sync_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes($userName) . '"';
            $json .= ',"' . addslashes($userType) . '"';
            $json .= ',"' . addslashes($auRec[$i]->ip_address) . '"';
            $json .= ',"' . addslashes($loginDate) . '"';
            $json .= ',"' . addslashes($auRec[$i]->login_time) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // customer wise route schedule 11 aug 2023 sudhanshu

    function showCustomerWiseRouteSchedule($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'salesman_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        if ($_REQUEST['qtype'] == "from_date" || $_REQUEST['qtype'] == "to_date") {
            $query = date('Y-m-d', strtotime(mysql_escape_string($_REQUEST['query'])));
        } else {
            $query = $_REQUEST['query'];
        }
        //$query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasCustRoutPjp']) && $_SESSION['MasCustRoutPjp'] != 'all' && $_SESSION['MasCustRoutPjp'] != '') {
            $statusCondi = " AND r.status ='" . $_SESSION['MasCustRoutPjp'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter

        $where = "$salesman AND s.status='A' $statusCondi";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_customer_wise_route_schedule as r left join table_salesman as s on r.salesman_id=s.salesman_id', "r.*,s.salesman_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_customer_wise_route_schedule as r left join table_salesman as s on r.salesman_id=s.salesman_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $from_date = $this->_changeDate($auRec[$i]->from_date);
            $to_date = $this->_changeDate($auRec[$i]->to_date);
            //Todo Start : sudhanshu 20 may 2024  : add created and updated column
            $created_date = $this->_changeDate($auRec[$i]->created_date);
            $updated_date = $this->_changeDate($auRec[$i]->last_updated);
            //Todo End : sudhanshu 20 may 2024  : add created and updated column
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"customer_wise_route_schedule.php?statusId=' . $auRec[$i]->route_schedule_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->route_schedule_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($from_date) . '"';
            $json .= ',"' . addslashes($to_date) . '"';
            //Todo Start : sudhanshu 20 may 2024  : add created and updated column
            $json .= ',"' . addslashes($created_date) . '"';
            $json .= ',"' . addslashes($updated_date) . '"';
            //Todo End : sudhanshu 20 may 2024  : add created and updated column
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

///************************end show customer wise route schedule ////
    function updateCustomerWiseRouteSchedule($id)
    {
        $data['salesman_id'] = mysql_escape_string($_POST['salesman_id']);
        $data['from_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data['to_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
        $data['last_updated'] = date('Y-m-d H:i:s');
        $rut_sch_id = $this->_dbUpdate($data, 'table_customer_wise_route_schedule', " route_schedule_id=" . $id);
        return $rut_sch_id;
    }


    function addCustomerWiseRouteSchedule()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['salesman_id'] = mysql_escape_string($_POST['salesman_id']);
        $data['from_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['from'])));
        $data['to_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['to'])));
        $data['created_date'] = date('Y-m-d H:i:s');
        $data['last_updated'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        //echo "<pre>"; print_r($data); exit;
        $rou_sch_id = $this->_dbInsert($data, 'table_customer_wise_route_schedule');
        return $rou_sch_id;
    }

    function addCustomerWiseRouteScheduleDay($id)
    {

        /* Updated by : Yogesh on 2016-08-19
			** Desc : to store weekday wise route*/
        $routeData = $_POST['town'];
        $retData = $_POST['retailer_id'];
        foreach ($retData as $key => $value) {
            $routeByDay = array();
            $routeId = '';

            $retId = $value;
            $routeByDay = $_POST['daynumber' . $key];
            foreach ($routeByDay as $DayKey => $DayValue) {
                $data['account_id'] = mysql_escape_string($_POST['account_id']);
                $data['route_schedule_id'] = mysql_escape_string($id);
                $data['status'] = 'A';
                $data[$DayValue] = $retId;
            }

            $rut_day_id = $this->_dbInsert($data, 'table_customer_wise_route_schedule_by_day');
            unset($data);

        }

    }

    function showItemList()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'item_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " and b.brand_id IN(" . $RoleBrands . ")";
        }
        $where = " c.status='A' and i.account_id='" . $_SESSION['accountId'] . "' and i.item_type='I' AND i.status='A' $brandCnd ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_item as i 
			left join table_category as c on i.category_id = c.category_id 
			left join table_brands as b on b.brand_id=i.brand_id',
            "i.item_id,i.item_name,i.item_code,c.category_name,b.brand_name", $rp, $where . '   GROUP BY i.item_id ' . $sort, '');
        $auRecCount = $this->_getSelectList('table_item as i 
			left join table_category as c on i.category_id = c.category_id 
			left join table_brands as b on b.brand_id=i.brand_id ',
            'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        $regex = "/[^A-Za-z0-9?!\s-',.%&#_()-+[]\/]/";
        for ($i = 0; $i < count($auRec); $i++) {

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->item_id . '",';
            $json .= '"cell":["' . addslashes(ucwords(preg_replace($regex, '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->brand_name)))) . '"';
            $json .= ',"' . addslashes(ucwords(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->category_name)))) . '"]';


            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


    //***********show Web user login details 28 aug 2023 **********/
    function showAppUserLoginDetails()
    {

        //echo $salesman;die;
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder, login_time ASC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $salName = '';
        if ($_SESSION['Sal_Id'] != '') {
            $salName = " AND lt.salesman_id='" . $_SESSION['Sal_Id'] . "' ";
        }
        //  echo $salesmanCondi;die;
        if ($_SESSION['FromWebDate'] != '') {
            $fromdate = "  lt.login_date  >= '" . date('Y-m-d', strtotime($_SESSION['FromWebDate'])) . "' AND ";
        } else {
            $fromdate = " lt.login_date  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToWebDate'] != '') {
            $todate = " lt.login_date <= '" . date('Y-m-d', strtotime($_SESSION['ToWebDate'])) . "' ";
        } else {
            $todate = "  lt.login_date <= '" . date('Y-m-d') . "'";
        }


        $where = $fromdate . $todate . $salName . " AND s.account_id='" . $_SESSION['accountId'] . "'";
        //echo $where;
        if ($query) $where .= "AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_app_login_track as lt
    left join table_web_users as w ON lt.salesman_id=w.salesman_id    
    left join table_salesman as s ON s.salesman_id=w.salesman_id',
            "lt.*,w.username,w.user_type,s.salesman_name,s.employee_code", $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList2('table_app_login_track as lt
    left join table_web_users as w ON lt.salesman_id=w.salesman_id    
    left join table_salesman as s ON s.salesman_id=w.salesman_id ', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            $loginDate = $this->_changeDate($auRec[$i]->login_date);

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->track_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->activity_type) . '"';
            $json .= ',"' . addslashes($loginDate) . '"';
            $json .= ',"' . addslashes($auRec[$i]->login_time) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //***********show Web user login details 28 aug 2023 **********/

    function showGrade()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'brand_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasGrade']) && $_SESSION['MasGrade'] != 'all' && $_SESSION['MasGrade'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasGrade'] . "'";
        }
        $where = " $statusCondi ";
        //Todo End : sudhanshu 12 june 2024 : add status filter
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_grade AS B', "B.*, B.grade_name ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_grade AS B', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"grades.php?statusId=' . $auRec[$i]->grade_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->grade_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->grade_name) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


    public function gradeExits()
    {
        if ($_POST['grade_id'] != "") {
            $cond = " grade_name='" . trim($_POST['grade_name']) . "' and grade_id<>'" . $_POST['grade_id'] . "' ";
        } else {
            $cond = " grade_name='" . trim($_POST['grade_name']) . "' ";
        }
        $grade = $this->_getSelectList('table_grade', "*", '', $cond);
        if (is_array($grade)) {
            return true;
        }
    }

    public function gradeEdit($id)
    {
        $grade = $this->_getSelectList('table_grade', "*", '', " grade_id='" . $id . "'");
        if (is_array($grade)) {
            return $grade;
        }
    }

    // To do Start : grade master add and edit : sudhanshu :06 sept 2023

    function updateGrade($id)
    {
        $data['grade_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9-_&" "]/', trim($_POST['grade_name'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated'] = date('Y-m-d h:i:s');
        $data['status'] = 'A';
        $update = $this->_dbUpdate($data, 'table_grade', " grade_id=" . $id);
        return $id;
    }

    public function addGrade()
    {
        $data['grade_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9-_&" "]/', trim
        ($_POST['grade_name'])));
        $data['account_id'] = $_POST['account_id'];
        $data['created_date'] = date('Y-m-d h:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_grade');
        return $id;
    }

    // To do End : grade master add and edit : sudhanshu :06 sept 2023


    // Todo Start : Sudhanshu : 07 sep 2023 : Retailer group master

    function showRetailerGroup()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasRetGroup']) && $_SESSION['MasRetGroup'] != 'all' && $_SESSION['MasRetGroup'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasRetGroup'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer_group', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_retailer_group', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"retailer_group.php?stid=' . $auRec[$i]->group_id . '&value=' . $status . '\">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->group_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->group_name) . '"';


            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addRetailerGroup()
    {
        //echo "hii";die;
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['group_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9.&" "]/', trim
        ($_POST['group_name'])));
        $data['created_date'] = date('Y-m-d');

        $data['status'] = 'A';
        //print_r($data)die;
        $id = $this->_dbInsert($data, 'table_retailer_group');
        return $id;
    }

    function updateRetailerGroup($id)
    {
        $data['group_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9.&" "]/', trim($_POST['group_name'])));

        $data['last_updated'] = date('Y-m-d');
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_retailer_group', " group_id=" . $id);
        return $id;
    }

    // To do : purpose of visit master : 13 sept 2023 : sudhanshu

    function showPurposeVisit()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'brand_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 10 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasPer']) && $_SESSION['MasPer'] != 'all' && $_SESSION['MasPer'] != '') {
            $statusCondi = "  status ='" . $_SESSION['MasPer'] . "' ";
        }
        $where = " $statusCondi ";
        //Todo End : sudhanshu 10 june 2024 : add status filter
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";


        $auRec = $this->_getSelectList('table_purpose_visit', "* ", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_purpose_visit AS B', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"purpose_visit.php?statusId=' . $auRec[$i]->purpose_visit_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->purpose_visit_id . '",';
            $json .= '"cell":["' . addslashes(ucwords($auRec[$i]->purpose)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    public function purposeVisitEdit($id)
    {
        $grade = $this->_getSelectList('table_purpose_visit', "*", '', " purpose_visit_id='" . $id . "'");
        if (is_array($grade)) {
            return $grade;
        }
    }

// To do Start : grade master add and edit : sudhanshu :06 sept 2023

    function updatePurposeVisit($id)
    {
        $data['purpose'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['purpose'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated'] = date('Y-m-d h:i:s');
        $data['status'] = 'A';
        $update = $this->_dbUpdate($data, 'table_purpose_visit', " purpose_visit_id=" . $id);
        return $id;
    }

    public function addPurposeVisit()
    {
        $data['purpose'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['purpose'])));
        $data['account_id'] = $_POST['account_id'];
        $data['created_date'] = date('Y-m-d h:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_purpose_visit');
        return $id;
    }

// To do End : grade master add and edit : sudhanshu :06 sept 2023
// To do Start : Retailer Order Report : sudhansshu : 11 Oct 2023

    function showRetailerOrderReport()
    {
        $RoleBrands = $this->getUserRoleBrand();
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['FromDisList'] != '') {
            $retStartDate = " and r.start_date >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $retStartDate = " and r.start_date >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $toretdate = " and r.start_date <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $toretdate = " and r.start_date <= '" . date('Y-m-d') . "'";
        }

        if ($_SESSION['SalDisList'] != '' && $_SESSION['SalDisList'] > 0) {

            $salesman = " AND s.salesman_id = " . $_SESSION['SalDisList'];
        } else {
            $salesman = "";
        }
        if ($_SESSION['retId'] != '' && $_SESSION['retId'] > 0) {

            $retailer = " AND r.retailer_id = " . $_SESSION['retId'];
        } else {
            $retailer = "";
        }


        $where = " o.salesman_id > 0 and o.order_for='R' and o.order_status !='C' and (o.order_type = 'NO'  || o.order_type = 'Yes' )
     $retailer $salesman $fromdate $todate $orderby";

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order as o            
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id 
            LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id 
            LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id         
            left join state as st on st.state_id=r.state            
            left join city as c on c.city_id=r.city
            left join table_location as loc on loc.location_id=r.location_id',
            "o.*,r.retailer_name,r.retailer_code,r.start_date,s.salesman_name,s.employee_code,
     st.state_name,c.city_name,loc.location_name,H.description as desig,SUM(o.total_invoice_amount) as total_amt,GROUP_CONCAT(NULLIF(o.tag_description, '') SEPARATOR '|')  as no_order_reason", $rp, $where . 'group by o.salesman_id,o.retailer_id,o.date_of_order' . $sort, '');

        //  $auRecCount = $this->_getSelectList('table_order as o
        //  left join table_retailer as r on o.retailer_id=r.retailer_id
        //  left join table_salesman as s on o.salesman_id=s.salesman_id
        //  left join state as st on st.state_id=r.state
        //  left join city as c on c.city_id=r.city
        //  left join table_location as loc on loc.location_id=r.location_id ',
        //      'count(*) as total', '', $where );
        //$total = $auRecCount[0]->total;


        // get retailer
        $retCondi = " r.salesman_id > 0 $retStartDate $toretdate $salesman $retailer";
        if ($query) $retCondi .= " AND $qtype LIKE '%$query%' ";
        $retRec = $this->_getSelectList('table_retailer r
    left join table_salesman as s on r.salesman_id=s.salesman_id 
    LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id 
    LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id         
    left join state as st on st.state_id=r.state            
    left join city as c on c.city_id=r.city
    left join table_location as loc on loc.location_id=r.location_id',
            "retailer_name,retailer_code,r.start_date as date_of_order,retailer_id,s.salesman_id,s.salesman_name,s.employee_code,
     st.state_name,c.city_name,loc.location_name,H.description as desig", '', $retCondi, '');

        //$total= count($auRec);

        if ((count($retRec) > 0 && !empty($retRec)) && (count($auRec) > 0 && !empty($auRec))) {

            $array = array();
            $array = array_merge($auRec, $retRec);
            $auRec = $this->sortArrayByColumn($array, array('date_of_order', 'time_of_order'));


        } elseif ((count($auRec) > 0 && !empty($auRec)) && (count($retRec) <= 0 && empty($retRec))) {

            $auRec = $auRec;

        } else {
            $auRec = $retRec;

        }
        $resArr = array();

        if (count($auRec) > 0) {
            foreach ($auRec as $aKey => $aVal) {
                $resArr[$aVal->salesman_id][$aVal->date_of_order][$aVal->retailer_id] = $aVal;
            }
        }

        //------------ now get retailer mapped route ------

        $condi = " $retailer ";
        $routeRec = $this->_getSelectList('table_route_retailer as rr            
     left join table_retailer as r on rr.retailer_id=r.retailer_id 
     left join table_route as rt on rr.route_id=rt.route_id',
            "rt.route_name,rr.retailer_id", '', $condi, '');

        $routeArr = [];
        foreach ($routeRec as $rout) {
            $routeArr[$rout->retailer_id][] = $rout->route_name;
        }
        $routeNewArr = [];
        foreach ($routeArr as $key => $val) {
            $routeNewArr[$key] = implode(" | ", $val);
        }

        //------ total count for pagination

        $count = 0;

        foreach ($resArr as $rKey => $rVal) {

            foreach ($rVal as $dkey => $dval) {

                foreach ($dval as $key => $val) {
                    $count++;
                }

            }
        }

        $total = $count;

        //----------------------------------

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        foreach ($resArr as $rKey => $rVal) {

            foreach ($rVal as $dkey => $dval) {
                // echo "<pre>"; print_r($dval);die;
                foreach ($dval as $key => $val) {

                    if ($val->no_order_reason != '') {
                        $noOrderReason = $val->no_order_reason;
                    } else {
                        $noOrderReason = "N/A";
                    }

                    $orderAmount = $val->total_amt;


                    $date_of_order = $this->_changeDate($val->date_of_order);
                    $orderDay = strtotime($val->date_of_order);
                    $rStartDate = strtotime($val->start_date);
                    $Day = date('D', $orderDay);

                    if ($rStartDate == $orderDay) {
                        $type = "New";
                    } elseif (!isset($val->order_id)) {
                        $type = "New";
                    } else {
                        $type = "Existing";
                    }

                    if ($rc) $json .= ",";
                    $remove = array("\n", "\r\n", "\r");
                    $json .= "\n{";
                    $json .= '"id":"' . $val->order_id . '",';
                    $json .= '"color":"' . $color . '",';
                    $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';

                    $json .= ',"' . ucwords(addslashes($Day)) . '"';
                    $json .= ',"' . ucwords(addslashes($val->employee_code)) . '"';
                    $json .= ',"' . ucwords(addslashes($val->salesman_name)) . '"';
                    $json .= ',"' . ucwords(addslashes($val->desig)) . '"';
                    $json .= ',"' . ucwords(addslashes($val->retailer_code)) . '"';
                    $json .= ',"' . ucwords(addslashes($val->retailer_name)) . '"';
                    $json .= ',"' . ucwords(addslashes($val->state_name)) . '"';
                    $json .= ',"' . ucwords(addslashes($val->location_name)) . '"';
                    $json .= ',"' . ucwords(addslashes($val->city_name)) . '"';
                    $json .= ',"' . ucwords(addslashes($type)) . '"';
                    $json .= ',"' . ucwords(addslashes($routeNewArr[$val->retailer_id])) . '"';
                    $json .= ',"' . ucwords(addslashes(number_format($orderAmount, 2))) . '"';

                    $json .= ',"' . $noOrderReason . '"]';
                    $json .= "}";
                    $rc = true;
                }
            }
        };
        $json .= "]\n";
        $json .= "}";

        echo str_replace("\'", '', $json);
        exit;
    }


    // Todo Start  : Jatin : 25th October 2023 : Retailer Available Batch wise stock Report

    function showdynamicAvailableRetailerStock($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();

        // ---------------start dynamic filter condition-----------
        $salesmanCnd = '';
//        $salCond = '';

        if (isset($_SESSION['fil_salesman']) && $_SESSION['fil_salesman'] > 0) {

            $salesmanCnd = ' AND s.salesman_id = "' . $_SESSION['fil_salesman'] . '"';
//            $salCond .= ' AND dcc.salesman_id = "' . $_SESSION['fil_salesman'] . '"';
        } else if (isset($_SESSION['fil_salesman_manager']) && ($_SESSION['fil_salesman_manager'] > 0)) {
            $salesmanManagerId = $_SESSION['fil_salesman_manager'];
            $account_id = $_SESSION['accountId'];
            $res = $_objAdmin->_getSelectList2('table_salesman_hierarchy_relationship AS SHR 
    LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
    LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id', 's.salesman_id,SH.hierarchy_id,SH.sort_order', '', " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanManagerId ORDER BY SH.sort_order ASC ");
            $_objArrayList = new ArrayList();
            if (is_array($res) && (count($res) > 0)) {
                $sortOrder = $res[0]->sort_order;
                $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanManagerId), $sortOrder,
                    $account_id);

                if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                    $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                }

//                $salCond .= " AND dcc.salesman_id IN($bottomUsersIds) ";
                $salesmanCnd = " AND s.salesman_id IN($bottomUsersIds) ";
            }
        } else if (isset($_SESSION['fil_salesman_designation']) && ($_SESSION['fil_salesman_designation'] > 0)) {
            $account_id = $_SESSION['accountId'];
            $_objArrayList = new ArrayList();
            $getDesignationWiseBottomUsersIdArr = $_objArrayList->getDesignationWiseBottomUsers($_SESSION['fil_salesman_designation'], $account_id);

            if (is_array($getDesignationWiseBottomUsersIdArr) && (count($getDesignationWiseBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getDesignationWiseBottomUsersIdArr);
                $salesmanCnd = " AND s.salesman_id IN($bottomUsersIds) ";
            }
        } else {
            $salesmanCnd .= $salesman;
        }
        if (isset($_SESSION['fil_salesman_zone']) && $_SESSION['fil_salesman_zone'] > 0) {
//            $salCond .= ' AND z2.zone_id = "' . $_SESSION['fil_salesman_zone'] . '"';
            $salesmanCnd .= ' AND z2.zone_id = "' . $_SESSION['fil_salesman_zone'] . '"';
        }
        if (isset($_SESSION['fil_retailer_zone']) && $_SESSION['fil_retailer_zone'] > 0) {
//            $salCond .= ' AND z.zone_id = "' . $_SESSION['fil_retailer_zone'] . '"';
            $salesmanCnd .= ' AND z.zone_id = "' . $_SESSION['fil_retailer_zone'] . '"';
        }

        if (isset($_SESSION['fil_salesman_state']) && $_SESSION['fil_salesman_state'] > 0) {
//            $salCond .= ' AND s.state = "' . $_SESSION['fil_salesman_state'] . '"';
            $salesmanCnd .= ' AND s.state = "' . $_SESSION['fil_salesman_state'] . '"';
        }
        if (isset($_SESSION['fil_retailer']) && $_SESSION['fil_retailer'] > 0) {
//            $salCond .= ' AND r.retailer_id = "' . $_SESSION['fil_retailer'] . '"';
            $salesmanCnd .= ' AND r.retailer_id = "' . $_SESSION['fil_retailer'] . '"';
        }
        if (!isset($_SESSION['fil_from']) && empty($_SESSION['fil_from'])) {
            $_SESSION['fil_from'] = date('d M Y');
        }

        if (!isset($_SESSION['fil_to']) && empty($_SESSION['fil_to'])) {
            $_SESSION['fil_to'] = date('d M Y');
        }
        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $_SESSION['fil_from'] = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $_SESSION['fil_to'] = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
        }

        // -------------End dynamic filter condition------------

        if (isset($_SESSION['userLoginType']) && in_array($_SESSION['userLoginType'], array(6, 7, 8, 9))) {
            $condwhere = $this->getSalesMenID();
        }

        $where = " ot.ostype='R' $salesmanCnd AND ot.date_of_order BETWEEN '" . date('Y-m-d', strtotime($_SESSION['fil_from'])) . "' AND '" . date('Y-m-d', strtotime($_SESSION['fil_to'])) . "' ";

        if ($query) {
            if ($qtype == 'ot.date_of_order') {
                $query = date('Y-m-d', strtotime($query));
            }
            $where .= " AND $qtype LIKE '%$query%' ";
        }

        $auRec = $this->_getSelectList('table_order_os AS ot 
        LEFT JOIN table_order_detail_os AS tod ON tod.os_id = ot.os_id 
        LEFT JOIN table_retailer AS r ON r.retailer_id = ot.retailer_id 
        LEFT JOIN table_salesman AS s ON s.salesman_id = ot.salesman_id 
        LEFT JOIN state AS ss ON ss.state_id = s.state
        LEFT JOIN state AS rs ON rs.state_id = r.state
        LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id 
        LEFT JOIN table_zone_state_mapping AS zsm ON zsm.state_id = r.state AND zsm.account_id = r.account_id
        LEFT JOIN table_zone AS z ON z.zone_id = zsm.zone_id 
        LEFT JOIN table_zone_state_mapping AS zsm2 ON zsm2.state_id = s.state AND zsm2.account_id = s.account_id
        LEFT JOIN table_zone AS z2 ON z2.zone_id = zsm2.zone_id 
        LEFT JOIN table_item AS i ON i.item_id = tod.item_id 
        LEFT JOIN table_price AS p ON p.item_id = tod.item_id 
        LEFT JOIN table_brands AS br ON br.brand_id = i.brand_id 
        LEFT JOIN table_category AS c ON c.category_id = i.category_id 
        LEFT JOIN table_retailer_channel_master AS cm ON cm.channel_id = r.channel_id', "ot.*,tod.*,r.retailer_name,r.retailer_code,cm.channel_name,r.display_outlet,s.salesman_name,rs.state_name AS retailer_state,
    z.zone_name AS retailer_zone,d.distributor_name,d.distributor_code,s.employee_code,i.item_name,ss.state_name AS salesman_state,z2.zone_name AS salesman_zone,i.item_code,c.category_name,(p.item_mrp * tod.quantity) as stockValuePTR, (p.item_dp * tod.quantity) as stockValueMRP,br.brand_name", $rp, $where . $condwhere . $sort, '');

        $auRecCount = $this->_getSelectList('table_order_os AS ot LEFT JOIN table_order_detail_os AS tod ON tod.os_id = ot.os_id LEFT JOIN table_retailer AS r ON r.retailer_id = ot.retailer_id LEFT JOIN table_salesman AS s ON s.salesman_id = ot.salesman_id LEFT JOIN state AS ss ON ss.state_id = s.state
        LEFT JOIN state AS rs ON rs.state_id = r.state
        LEFT JOIN table_distributors as d on d.distributor_id = r.distributor_id 
        LEFT JOIN table_zone_state_mapping AS zsm ON zsm.state_id = r.state AND zsm.account_id = r.account_id
        LEFT JOIN table_zone AS z ON z.zone_id = zsm.zone_id 
        LEFT JOIN table_zone_state_mapping AS zsm2 ON zsm2.state_id = s.state AND zsm2.account_id = s.account_id
        LEFT JOIN table_zone AS z2 ON z2.zone_id = zsm2.zone_id 
        LEFT JOIN table_item AS i ON i.item_id = tod.item_id 
        LEFT JOIN table_price AS p ON p.item_id = tod.item_id 
        LEFT JOIN table_brands AS br ON br.brand_id = i.brand_id 
        LEFT JOIN table_category AS c ON c.category_id = i.category_id 
        LEFT JOIN table_retailer_channel_master AS cm ON cm.channel_id = r.channel_id', 'count(*) AS total', '', $where . $condwhere);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {
            /* ---Display outlet ---*/
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } elseif ($auRec[$i]->display_outlet == 'No') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }

            $link = '<a href="dynamic_ret_batch_wise_details.php?stock_id=' . base64_encode($auRec[$i]->os_detail_id) .
                '&id=' . base64_encode($auRec[$i]->os_id) . '" >View Details</a>';

            $closingStock = $this->_getSelectList("table_order_os AS ot
		  LEFT JOIN table_order_detail_os AS tod ON tod.os_id=ot.os_id
		  LEFT JOIN table_order AS O ON O.salesman_id = ot.salesman_id AND O.retailer_id = ot.retailer_id 
		  LEFT JOIN table_order_detail AS OD ON OD.order_id = O.order_id", "tod.quantity AS closing_stock ,OD.quantity AS order_quantity ", "", " ot.salesman_id =" . $auRec[$i]->salesman_id . " AND ot.retailer_id ='" . $auRec[$i]->retailer_id . "' AND ot.date_of_order <='" . $auRec[$i]->date_of_order . "' AND tod.item_id = '" . $auRec[$i]->item_id . "' AND O.order_status!='D' ORDER BY ot.os_id, O.order_id DESC LIMIT 1,1");
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->salesman_id . '",';
            $json .= '"cell":["' . $this->_changeDate($auRec[$i]->date_of_order) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_zone) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_state) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_zone) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_state) . '"';
            $json .= ',"' . addslashes($auRec[$i]->channel_name) . '"';
            $json .= ',"' . addslashes($outlet) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->quantity) . '"';
            $json .= ',"' . addslashes(round($auRec[$i]->stockValuePTR, 2)) . '"';
            $json .= ',"' . addslashes(round($auRec[$i]->stockValueMRP, 2)) . '"';
            $json .= ',"' . addslashes($closingStock[0]->closing_stock) . '"';
            // $json .= ',"' . addslashes($closingStock[0]->order_quantity) . '"';
            $json .= ',"' . addslashes($link) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End  : Jatin : 25th October 2023 : Retailer Available Batch wise stock Report


    // Todo Start : Jatin : 27th October 2023 : Distributor Available Batch Wise Stock Report

    function showDistributorBatchWiseStock($salesman)
    {
        //echo $salesman;die;
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        $distributorId = "";
        $stateId = "";
        $location_id = '';

        // ---------------start dynamic filter condition-----------
        $salesmanCnd = '';

        if (isset($_SESSION['fil_salesman']) && $_SESSION['fil_salesman'] > 0) {

            $salesmanCnd = ' AND s.salesman_id = "' . $_SESSION['fil_salesman'] . '"';

        } else if (isset($_SESSION['fil_salesman_manager']) && ($_SESSION['fil_salesman_manager'] > 0)) {
            $salesmanManagerId = $_SESSION['fil_salesman_manager'];
            $account_id = $_SESSION['accountId'];
            $res = $_objAdmin->_getSelectList2('table_salesman_hierarchy_relationship AS SHR 
    LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
    LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id', 's.salesman_id,SH.hierarchy_id,SH.sort_order', '', " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanManagerId ORDER BY SH.sort_order ASC ");
            $_objArrayList = new ArrayList();
            if (is_array($res) && (count($res) > 0)) {
                $sortOrder = $res[0]->sort_order;
                $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanManagerId), $sortOrder,
                    $account_id);

                if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                    $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                }

                $salesmanCnd = " AND s.salesman_id IN($bottomUsersIds) ";
            }
        } else if (isset($_SESSION['fil_salesman_designation']) && ($_SESSION['fil_salesman_designation'] > 0)) {
            $account_id = $_SESSION['accountId'];
            $_objArrayList = new ArrayList();
            $getDesignationWiseBottomUsersIdArr = $_objArrayList->getDesignationWiseBottomUsers($_SESSION['fil_salesman_designation'], $account_id);

            if (is_array($getDesignationWiseBottomUsersIdArr) && (count($getDesignationWiseBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getDesignationWiseBottomUsersIdArr);
                $salesmanCnd = " AND s.salesman_id IN($bottomUsersIds) ";
            }
        } else {
            $salesmanCnd .= $salesman;
        }
        if (isset($_SESSION['fil_retailer']) && $_SESSION['fil_retailer'] > 0) {

            $salesmanCnd .= ' AND r.retailer_id = "' . $_SESSION['fil_retailer'] . '"';
        }
        if (isset($_SESSION['fil_distributor']) && $_SESSION['fil_distributor'] > 0) {

            $salesmanCnd .= ' AND d.distributor_id = "' . $_SESSION['fil_distributor'] . '"';
        }
        if (isset($_SESSION['fil_distributor_zone']) && $_SESSION['fil_distributor_zone'] > 0) {

            $salesmanCnd .= ' AND szsm.zone_id = "' . $_SESSION['fil_distributor_zone'] . '"';
        }
        if (isset($_SESSION['fil_distributor_state']) && $_SESSION['fil_distributor_state'] > 0) {

            $salesmanCnd .= ' AND d.state = "' . $_SESSION['fil_distributor_state'] . '"';
        }
        if (!isset($_SESSION['fil_from']) && empty($_SESSION['fil_from'])) {
            $_SESSION['fil_from'] = date('d M Y');
        }

        if (!isset($_SESSION['fil_to']) && empty($_SESSION['fil_to'])) {
            $_SESSION['fil_to'] = date('d M Y');
        }
        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $_SESSION['fil_from'] = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $_SESSION['fil_to'] = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
        }

        // -------------End dynamic filter condition------------


        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " and b.brand_id IN(" . $RoleBrands . ")";
            $salesman = '';
        }
        // $state=$this->_getSelectList2('table_distributors as d ','d.state',"","")
        $where = " ods.date_of_order BETWEEN '" . date('Y-m-d', strtotime($_SESSION['fil_from'])) . "' AND '" . date('Y-m-d', strtotime($_SESSION['fil_to'])) . "' $salesmanCnd $brandCnd and d.distributor_name!='' ";

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order_distributor_stock as ods
  		inner join table_order_detail_distributor_stock as ods_detail on ods.stock_id=ods_detail.stock_id 
  		left join table_distributors as d on d.distributor_id=ods.distributor_id 
  		left join state as st on st.state_id=d.state 
  		left join city as ci on ci.city_id=d.city
  		left join table_location as tl on tl.location_id = d.location
  		left join table_item as i on i.item_id=ods_detail.item_id
  		left join table_price as p on p.item_id = i.item_id
		LEFT JOIN table_brands AS b ON b.brand_id=i.brand_id
  		left join table_category as c on c.category_id=i.category_id
  		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
  		left join table_salesman as s on s.salesman_id=ods.salesman_id',
            "ods.*,ods_detail.*,d.distributor_id,d.distributor_name,d.distributor_code,i.item_name,i.item_id,b.brand_name,i.item_code,c.category_name,c.category_id,sz.zone_name,st.state_id,st.state_name,ci.city_name,ci.city_id ,s.salesman_id,s.salesman_name,s.employee_code,p.dist_price,p.item_dp,tl.location_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_order_distributor_stock as ods
  		inner join table_order_detail_distributor_stock as ods_detail on ods.stock_id=ods_detail.stock_id 
  		left join table_distributors as d on d.distributor_id=ods.distributor_id 
  		left join state as st on st.state_id=d.state left join city as ci on ci.city_id=d.city
  		left join table_item as i on i.item_id=ods_detail.item_id
  		left join table_price as p on p.item_id = i.item_id
  		left join table_location as tl on tl.location_id = d.location
  		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		LEFT JOIN table_brands AS b ON b.brand_id=i.brand_id
  		left join table_category as c on c.category_id=i.category_id
  		left join table_salesman as s on s.salesman_id=ods.salesman_id',
            'count(*) AS total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        $targetBlank1 = '';
        for ($i = 0; $i < count($auRec); $i++) {

            $image = '<a href=\"dynamic_dis_batch_wise_details.php?stock_id=' . base64_encode
                ($auRec[$i]->stock_detail_id) . '&id=' . base64_encode
                ($auRec[$i]->stock_id) . '\"  ' .
                $targetBlank1 .
                '>View Detail</a>';

            $ptd = ($auRec[$i]->dist_price > 0 && !empty($auRec[$i]->dist_price)) ? $auRec[$i]->dist_price :
                $auRec[$i]->item_dp;

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stock_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($this->_changeDate($auRec[$i]->date_of_order))) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zone_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes(($auRec[$i]->openning_stock_volume)) . '"';
            $json .= ',"' . ($ptd * $auRec[$i]->openning_stock_volume) . '"';
            $json .= ',"' . $image . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Jatin : 27th October 2023 : Distributor Available Batch Wise Stock Report


    // Todo Start : batch master add and edit : sudhanshu  : 24 Oct 2023

    function batchCodeGenrator()
    {

        $batchCode = rand(100000, 999999);

        $auBatch = $this->_getSelectList('table_color', 'color_code', '', '');

        $batch_code = array();

        foreach ($auBatch as $code) {
            $batch_code[] = $code->color_code;
        }

        while (in_array($batchCode, $batch_code)) {
            $batchCode = rand(100000, 999999);

        }
        return $batchCode;

    }

    function updateBatch($id)
    {
        if ($_POST['mfg_date'] != '') {
            $mfgDate = date('Y-m-d', strtotime($_POST['mfg_date']));
        }
        if ($_POST['expiry_date'] != '') {
            $expDate = date('Y-m-d', strtotime($_POST['expiry_date']));
        }
        $data['color_desc'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "-_|]/', trim($_POST['color_desc'])));
        $data['account_id'] = $_POST['account_id'];

        $data['mfg_date'] = $mfgDate;
        $data['expiry_date'] = $expDate;
        $data['last_update_date'] = date('Y-m-d');
        $data['created_date'] = date('Y-m-d h:i:s');

        $data['color_code'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "-_|]/', trim($_POST['color_code'])));

        $update = $this->_dbUpdate($data, 'table_color', " color_id=" . $id);
        return $id;
    }

    function addBatch()
    {

        if ($_POST['mfg_date'] != '') {
            $mfgDate = date('Y-m-d', strtotime($_POST['mfg_date']));
        }
        if ($_POST['expiry_date'] != '') {
            $expDate = date('Y-m-d', strtotime($_POST['expiry_date']));
        }
        $data['color_desc'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "-_|]/', trim($_POST['color_desc'])));
        $data['account_id'] = $_POST['account_id'];

        $data['mfg_date'] = $mfgDate;
        $data['expiry_date'] = $expDate;
        $data['last_update_date'] = date('Y-m-d');
        $data['created_date'] = date('Y-m-d h:i:s');
        $data['status'] = 'A';
        if (trim($_POST['color_code']) != '') {
            $data['color_code'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "-_|]/', trim($_POST['color_code'])));
        }

        $id = $this->_dbInsert($data, 'table_color');
        if (trim($_POST['color_code']) == '') {

            $batchCode = $this->batchCodeGenrator();

            $where = " color_code = ' " . $batchCode . "' ";

            $auBatch = $this->_getSelectList('table_color AS B', 'color_code', '', $where);

            $data2['color_code'] = $batchCode;

            $update = $this->_dbUpdate($data2, 'table_color', " color_id=" . $id);

        }
        return $id;
    }

    function showBatch()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'color_desc';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasBatch']) && $_SESSION['MasBatch'] != 'all' && $_SESSION['MasBatch'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasBatch'] . "'";
            $where = " $statusCondi ";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_color', "* ", $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList('table_color AS B', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $mfg_date = $this->_changeDate($auRec[$i]->mfg_date);
            $expiry_date = $this->_changeDate($auRec[$i]->expiry_date);
            $created_date = $this->_changeDate($auRec[$i]->created_date);
            $updated = $this->_changeDate($auRec[$i]->last_update_date);

            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"batch.php?statusId=' . $auRec[$i]->color_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->color_id . '",';
            $json .= '"cell":["' . addslashes(ucwords($auRec[$i]->color_code)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->color_desc) . '"';
            $json .= ',"' . addslashes($mfg_date) . '"';
            $json .= ',"' . addslashes($expiry_date) . '"';
            $json .= ',"' . addslashes($created_date) . '"';
            $json .= ',"' . addslashes($updated) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : batch master add and edit : sudhanshu  : 24 Oct 2023

    // Todo Start : Sudhanshu Item & batch mapping

    function showItemBatchMapping()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'ci.color_id';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasItmBatch']) && $_SESSION['MasItmBatch'] != 'all' && $_SESSION['MasItmBatch'] != '') {
            $statusCondi = " ci.status ='" . $_SESSION['MasItmBatch'] . "'";
        }
        $where = " $statusCondi ";
        //Todo End : sudhanshu 12 june 2024 : add status filter
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_item_color as ci
    left join table_color as c  ON c.color_id=ci.color_id
    left join table_item as i ON i.item_id=ci.item_id',
            "ci.item_color_id,ci.status,ci.created_on,ci.updated_on,c.color_desc,c.color_code,c.mfg_date,c.expiry_date,i.item_code,i.item_name ", $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList('table_item_color as ci
    left join table_color as c  ON c.color_id=ci.color_id
    left join table_item as i ON i.item_id=ci.item_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $mfg_date = $this->_changeDate($auRec[$i]->mfg_date);
            $expiry_date = $this->_changeDate($auRec[$i]->expiry_date);
            $created_date = $this->_changeDate($auRec[$i]->created_on);
            $updated = $this->_changeDate($auRec[$i]->updated_on);

            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"item_batch_mapping.php?statusId=' . $auRec[$i]->item_color_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->item_color_id . '",';
            $json .= '"cell":["' . addslashes(ucwords($auRec[$i]->color_code)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->color_desc) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($mfg_date) . '"';
            $json .= ',"' . addslashes($expiry_date) . '"';
            $json .= ',"' . addslashes($created_date) . '"';
            $json .= ',"' . addslashes($updated) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addItemBatchMapping()
    {

        $batchId = $_POST['color_id'];
        $accId = $_POST['account_id'];
        $items = $_POST['item_id'];

        if (is_array($items) && count($items) > 0) {

            foreach ($items as $item) {

                $data['color_id'] = $batchId;
                $data['account_id'] = $accId;
                $data['item_id'] = $item;
                $data['created_on'] = date('Y-m-d h:i:s');
                $data['updated_on'] = date('Y-m-d h:i:s');
                $data['updated_by'] = $_SESSION['PepUpSalesUserId'];
                $data['status'] = 'A';
                $id = $this->_dbInsert($data, 'table_item_color');
            }

        }


        return $id;
    }

    // Todo End : Sudhanshu Item & batch mapping

    // Todo : Start : Sudhanshu :  batch configuration : 24 Oct 2023

    function addBatchConfig()
    {
        $columns = array("batch_number", "mfg_date", "expiry_date");


        for ($i = 0; $i < count($columns); $i++) {

            $col = $_POST[$columns[$i]];

            $is_dis = 1;

            if ($col == '') {
                $col = $columns[$i];
                $is_dis = 0;
            }

            $data['account_id'] = $_POST['account_id'];
            $data['column_name'] = $col;
            $data['is_display'] = $is_dis;
            $data['created_on'] = date('Y-m-d H:i:s');

            $id = $this->_dbInsert($data, 'table_batch_column_configure');

        }

    }

    function updateBatchConfig($batchArr)
    {
        $columns = array("batch_number", "mfg_date", "expiry_date");


        for ($i = 0; $i < count($columns); $i++) {

            $col = $_POST[$columns[$i]];

            $is_dis = 1;

            if ($col == '') {
                $col = $columns[$i];
                $is_dis = 0;
            }
            $id = $batchArr[$columns[$i]];


            $data['account_id'] = $_POST['account_id'];
            $data['column_name'] = $col;
            $data['is_display'] = $is_dis;
            $data['updated_on'] = date('Y-m-d H:i:s');

            $id = $this->_dbUpdate2($data, 'table_batch_column_configure', " id=" . $id);

        }

        return $id;
    }

    // Todo : End : Sudhanshu :  batch configuration : 24 Oct 2023

    //Todo start : Sudhanshu: 20 Oct 2023 : Salesman Leave Status Report

    function showSalesmanLeaveStatus($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'slr.requested_on';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromallownceStatus'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromallownceStatus']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToallownceStatus'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToallownceStatus']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['requestedS'] == 'for') {
            $reqFor = " AND (DATE(slr.from_date) BETWEEN '" . $fromdate . "' AND '" . $todate . "') ";
        } else {
            $reqFor = "  AND (DATE(slr.requested_on) BETWEEN '" . $fromdate . "' AND '" . $todate . "')  ";
        }
        if ($_SESSION['allowncesalesmanID'] != '') {
            $salesman = " AND s.salesman_id = '" . $_SESSION['allowncesalesmanID'] . "'";
        }
        $where = " s.account_id = " . $_SESSION['accountId'] . " $reqFor  $salesman ";
        //echo $_SESSION['allowncesalesmanID'];die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_salesman_leave_request as slr
LEFT JOIN table_leave_reason_master as lrm ON lrm.status_id = slr.leave_reason_id
LEFT JOIN table_salesman as s on s.salesman_id = slr.salesman_id 
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
LEFT JOIN table_salesman AS s2 ON s2.salesman_id = SH.rpt_user_id
LEFT JOIN table_salesman as mngr on mngr.salesman_id = slr.aproved_by_id 
LEFT JOIN table_salesman as adm on adm.salesman_id = slr.admin_id', "slr.*,slr.id as request_id,s.salesman_name,s.employee_code,H.description AS sal_desg,s2.salesman_name AS rpt_to, H2.description AS rpt_to_desg,lrm.status_title as leave_reason,mngr.salesman_name as mngr_name,adm.salesman_name as admin_name", $rp, $where . $sort);
        $auRecCount = $this->_getSelectList2('table_salesman_leave_request as slr
LEFT JOIN table_leave_reason_master as lrm ON lrm.status_id = slr.leave_reason_id
LEFT JOIN table_salesman as s on s.salesman_id = slr.salesman_id 
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
LEFT JOIN table_salesman AS s2 ON s2.salesman_id = SH.rpt_user_id
LEFT JOIN table_salesman as mngr on mngr.salesman_id = slr.aproved_by_id 
LEFT JOIN table_salesman as adm on adm.salesman_id = slr.admin_id', 'COUNT(slr.id) as total', '', $where);
//        echo '<pre>';
//        print_r($auRec);
//        print_r($auRecCount);
//        die(' die here');
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $fromDate = date('d M Y', strtotime($auRec[$i]->from_date));
            $toDate = date('d M Y', strtotime($auRec[$i]->to_date));
            $requestedOnDate = date('d M Y H:i', strtotime($auRec[$i]->requested_on));
            $mngrStatus = '';
            if (strtolower($auRec[$i]->leave_status) == 'p') {
                $mngrStatus = 'Pending';
            } else if (strtolower($auRec[$i]->leave_status) == 'a') {
                $mngrStatus = 'Approved';
            } else if (strtolower($auRec[$i]->leave_status) == 'r') {
                $mngrStatus = 'Rejected';
            }
            $mngr_sts_updtd_on = '';
            if ($auRec[$i]->aproved_on != '0000-00-00 00:00:00') {
                $mngr_sts_updtd_on = date('d M Y H:i', strtotime($auRec[$i]->aproved_on));
            }
            $adminName = '';
            if (intval($auRec[$i]->is_approved_by_admin) > 0) {
                if (intval($auRec[$i]->admin_id) > 0) {
                    $adminName = $auRec[$i]->admin_name;
                } else {
                    $adminName = 'Admin';
                }
            }
            $adminStatus = '';
            if (strtolower($auRec[$i]->admin_leave_status) == 'p') {
                $adminStatus = 'Pending';
            } else if (strtolower($auRec[$i]->admin_leave_status) == 'a') {
                $adminStatus = 'Approved';
            } else if (strtolower($auRec[$i]->admin_leave_status) == 'r') {
                $adminStatus = 'Rejected';
            }
            $admin_sts_updtd_on = '';
            if ($auRec[$i]->admin_status_updated_on != '0000-00-00 00:00:00') {
                $admin_sts_updtd_on = date('d M Y H:i', strtotime($auRec[$i]->admin_status_updated_on));
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->request_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_desg)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to_desg) . '"';
            $json .= ',"' . addslashes($auRec[$i]->leave_reason) . '"';
            $json .= ',"' . ucwords(addslashes($fromDate)) . '"';
            $json .= ',"' . ucwords(addslashes($toDate)) . '"';
            $json .= ',"' . ucwords(addslashes($requestedOnDate)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->comment))) . '"';
            $json .= ',"' . ucwords(addslashes($mngrStatus)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->mngr_name))) . '"';
            $json .= ',"' . ucwords(addslashes($mngr_sts_updtd_on)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->manager_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($adminStatus)) . '"';
            $json .= ',"' . ucwords(addslashes($adminName)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->admin_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($admin_sts_updtd_on)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo end : Sagar: 23rd Aug 2022 : Salesman Leave Requests

    // Todo Start : Jatin : 15 Nov 2023 Coverage pjp Adherence report

    function showPJPAdherenceReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'retailer_name';
        if (!$sortorder)
            $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $condi = '';
        $where = '';
        if ($_SESSION['SalAttList'] > 0) {
            $condi .= " AND s.salesman_id ='" . $_SESSION['SalAttList'] . "'";
        }
        if (isset($_SESSION['dismonth']) && $_SESSION['dismonth'] > 0) {
            $month = $_SESSION['dismonth'];
        } else {
            $month = date('m');
        }
        if (isset($_SESSION['disCyear']) && $_SESSION['disCyear'] > 0) {
            $year = $_SESSION['disCyear'];
        } else {
            $year = date('Y');
        }
        $where .= " r.account_id=" . $_SESSION['accountId'] . " and rs.month='" . intval($month) . "' AND rs.year='" . intval($year) . "' and rs.status='A' and rsd.status='A' and r.status='A' $salesman $condi";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_salesman_retailer_assignment as rs
                left join table_salesman_retailer_assignment_details as rsd on rsd.route_schedule_id = rs.route_schedule_id        
		inner join table_retailer as r on r.retailer_id = rsd.retailer_id
        left join table_salesman as s on s.salesman_id = rs.salesman_id', "
		distinct rsd.assign_day as visit_dates,rs.salesman_id,rsd.retailer_id, s.employee_code, s.salesman_id, s.salesman_name,rs.year,rs.month,rs.route_schedule_id", $rp, $where . ' group by rsd.assign_day ,s.salesman_id' . $sort, '');

        $auRecCount = $this->_getSelectList2("table_salesman_retailer_assignment as rs
        left join table_salesman_retailer_assignment_details as rsd on rsd.route_schedule_id = rs.route_schedule_id        
		inner join table_retailer as r on r.retailer_id = rsd.retailer_id
        left join table_salesman as s on s.salesman_id = rs.salesman_id  ", 'count(rs.route_schedule_id) as total', '', $where
            . ' group by rsd.assign_day ,s.salesman_id ', '');
        //$total = (isset($auRecCount[0]->total) ? $auRecCount[0]->total : 0);
        // echo count($auRec);
        $total = count($auRecCount);
        $plvisData = $this->_getSelectList2('table_salesman_retailer_assignment_details as ta',
            " retailer_id,ta.route_schedule_id,  assign_day", '', '  ta.status="A" group by ta.assign_day ,ta.details_id ',
            '');
        $dataArr = array();
        foreach ($plvisData as $key => $data) {
            $dataArr[$data->route_schedule_id][$data->assign_day][] = $data->retailer_id;

        }

        //echo "<pre>";print_R($dataArr);die;

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");

        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ($rc)
            $json .= ",";
        for ($i = 0; $i < count($auRec); $i++) {
            $date = date('y-m-d', strtotime($auRec[$i]->year . '-' . $auRec[$i]->month . '-' . $auRec[$i]->visit_dates));
            if ($rc)
                $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->salesman_id . '",';
            $json .= '"cell":["' . $this->_changeDate($date) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $planned_visits = count($dataArr[$auRec[$i]->route_schedule_id][$auRec[$i]->visit_dates]);
            if (strtotime(date('Y-m')) != strtotime($year . '-' . $month)) {
                $sDate = date('Y-m-01', strtotime($year . '-' . $month . '-01'));
                $eDate = date('Y-m-t', strtotime($year . '-' . $month . '-01'));
            } else {
                $sDate = date('Y-m-01');
                $eDate = date('Y-m-d');
            }

            $condition = " ta.retailer_id='" . $auRec[$i]->retailer_id . "' AND (ta.activity_type=3 OR ta.activity_type=28 OR ta.activity_type=50) AND ta.activity_date BETWEEN '" . $sDate . "' AND '" . $eDate . "'";
            $dayRet = $this->_getSelectList2('table_activity as ta',
                "ta.activity_date, '' as in_route, '' as on_date", '', $condition . ' GROUP BY ta.activity_date ORDER BY ta.activity_date ASC ', '');
            $visitArr = array();
            $actualpjpArr = array();
            $assign_day_list = explode(',', $auRec[$i]->visit_dates);
            foreach ($dayRet as $dayRetVal) {
                $visitArr[] = $dayRetVal->activity_date;
                $visitDay = intval(date('d', strtotime($dayRetVal->activity_date)));
                if (in_array($visitDay, $assign_day_list)) {
                    $actualpjpArr[] = $dayRetVal->activity_date;
                }
            }
            $pjp_gap = 0;
            $pjp_Adherancce = 0;
            $actual_pjp = COUNT($actualpjpArr);
            $pjp_gap = $planned_visits - $actual_pjp;
            $pjp_Adherancce = ROUND(($actual_pjp * 100 / $planned_visits), 2);
            $json .= ',"' . ucwords($planned_visits) . '"';
            $json .= ',"' . ucwords(addslashes($actual_pjp)) . '"';
            $json .= ',"' . ucwords(addslashes($pjp_gap)) . '"';
            $json .= ',"' . ucwords(addslashes($pjp_Adherancce . '%')) . '"';

            $json .= "]";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : Jatin : 15 Nov 2023 Coverage pjp Adherence report


    // Todo Start : Order Execution Report : sudhansshu : 09 Oct 2023

    function showOrderExecutionReport()
    {
        $RoleBrands = $this->getUserRoleBrand();
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //$_objAdmin = new Admin();
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['disId'] != "" && $_SESSION['disId'] > 0) {
            $disList = " o.distributor_id=" . $_SESSION['disId'] . " and";
        } else {
            $disList = "";
        }
        if ($_SESSION['userLoginType'] == 7) {
            $stkList = " d.stockist_id=" . $_SESSION['stockistId'] . " and";
        } else {
            $stkList = "";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = " and order_status IN('A','I') ";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_status='A' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_status='I' ";
            }
            if ($_SESSION['OrderBy'] == 4) {
                $orderby = " and o.order_status='D' ";
            }
        } else {
            $orderby = " and order_status IN('A','I') ";
        }
        //$where = " 1=1 ";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $orderIds = '';
        if (is_array($_SESSION['SalDisList']) && (count($_SESSION['SalDisList']) > 0)) {
            $salectedSalIds = implode(',', $_SESSION['SalDisList']);
            $salesman = " AND s.salesman_id IN(" . $salectedSalIds . ") ";
        } else if (!empty($RoleBrands)) {
            $salesman = "";
        }

        if (!empty($RoleBrands)) {
            $brandWhere = " o.order_for='R' and o.order_status !='C' and o.order_type !='Return' and o.distributor_id !='' $fromdate $todate ";
            $orderIds = $this->getBrandsOrder($RoleBrands, $brandWhere);
        }
        $where = " $disList $stkList r.new='' and o.order_for='R' and o.order_status !='C' and o.order_type !='Return' 
    and o.distributor_id!='' $orderIds $orderIds $salesman $fromdate $todate $orderby";

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order as o 
            left join table_order_detail as ord on ord.order_id = o.order_id 
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id 
            left join table_distributors as d on d.distributor_id=o.distributor_id 
            left join table_retailer_channel_master as cm on cm.channel_id=r.channel_id
            LEFT JOIN table_retailer_group AS rg ON rg.group_id = r.group_id
            left join table_retailer_type_master as tm on tm.type_id=r.type_id 
            LEFT JOIN table_relationship as tr on tr.relationship_id=r.relationship_id  
            left join state as st on st.state_id=r.state 
            LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = r.state and szsm.account_id = r.account_id
            LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
            left join city as c on c.city_id=r.city
            left join table_location as loc on loc.location_id=r.location_id',
            "o.*,count(ord.item_id) as total_item,SUM(ord.quantity) as total_ordered_qty,SUM(ord.price*(quantity-acc_quantity)) as pending_amt,SUM(ord.price*acc_quantity) as acc_tot_amt,SUM(ord.price*quantity) as tot_amt,r.retailer_name,r.retailer_code,r.retailer_address,r.retailer_location,cm.channel_name,r.display_outlet,s.salesman_name,s.employee_code,tr.relationship_code as relation,tm.type_name,rg.group_name,
    d.distributor_name,d.distributor_code, st.state_name,c.city_name,sz.zone_name,loc.location_name", $rp, $where . ' AND ord.quantity > 0 GROUP BY o.order_id ' . $sort, '');
        $auRecCount = $this->_getSelectList('table_order as o 
    left join table_order_detail as ord on ord.order_id = o.order_id 
        join table_distributors as d on d.distributor_id=o.distributor_id
        left join table_retailer as r on o.retailer_id=r.retailer_id 
        left join table_salesman as s on o.salesman_id=s.salesman_id
        LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = r.state and szsm.account_id = r.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
        left join table_retailer_channel_master as cm on cm.channel_id=r.channel_id
        LEFT JOIN table_retailer_group AS rg ON rg.group_id = r.group_id
        left join table_retailer_type_master as tm on tm.type_id=r.type_id 
        LEFT JOIN table_relationship as tr on tr.relationship_id=r.relationship_id ',
            'count(*) as total', '', $where . ' AND ord.quantity > 0  GROUP BY o.order_id ');
        //$total = $auRecCount[0]->total;
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            $status = '-';


            //-------- now get item wise accept reject status

            $cond = "  a.order_id = " . $auRec[$i]->order_id;
            $rejCond = "  a.order_id = '" . $auRec[$i]->order_id . "' and action='rej' ";
            $actCond = "  a.order_id = '" . $auRec[$i]->order_id . "' and action='act' ";
            //  $rejAcc = $this->_getSelectList2('table_order_detail','order_detail_status,price*(quantity-acc_quantity) as rej_amt,price,acc_quantity,quantity','',$cond);

            $totalOrder = $this->_getSelectList2('table_order_accept_reject as a
          left join table_order_detail as o ON o.order_detail_id=a.order_detail_id', 'SUM(effected_qty*o.price) as total_amt', '', $cond);
            $act = $this->_getSelectList2('table_order_accept_reject as a
          left join table_order_detail as o ON o.order_detail_id=a.order_detail_id', 'SUM(effected_qty*o.price) as accepted_amt', '', $actCond);
            $rej = $this->_getSelectList2('table_order_accept_reject as a
          left join table_order_detail as o ON o.order_detail_id=a.order_detail_id', 'SUM(effected_qty*o.price) as rejected_amt', '', $rejCond);

            //echo "<pre>";print_r($totalOrder);die;
            $pending_amt = $auRec[$i]->tot_amt - $totalOrder[0]->total_amt;

            // $rejected_amt = 0;
            // $pending_amt =0;
            // for ($r = 0; $r < count($rejAcc); $r++) {

            // if($rejAcc[$r]->order_detail_status == 3){

            //     $rejected_amt = $rejected_amt+$rejAcc[$r]->rej_amt;

            // }else{

            //     $accQty = $rejAcc[$r]->acc_quantity;
            //     $ordQty = $rejAcc[$r]->quantity;
            //     $price  = $rejAcc[$r]->price;
            //     $pending_amt =  $pending_amt + $price * ($ordQty - $accQty);

            // }

            // }
            //------------------

            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($auRec[$i]->tot_amt, 2))) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($act[0]->accepted_amt, 2))) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($pending_amt, 2))) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($rej[0]->rejected_amt, 2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total_item)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total_ordered_qty)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->employee_code))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';


            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->channel_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->relation))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->type_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->group_name))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', $auRec[$i]->location_name)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Order Execution Report : sudhansshu : 09 Oct 2023

    // Todo Start : Retailer Master New : sudhanshu : 17 Nov 2023

    function showRetailerMaster($flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.retailer_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " r.new='' and r.status = 'A' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer as r     
    left join state as s on s.state_id=r.state 
    left join city as c on c.city_id=r.city   
    left join table_location as loc ON loc.location_id = r.location_id   
    left join table_distributors as d on d.distributor_id=r.distributor_id', "r.retailer_name,r.retailer_code,r.retailer_address,r.retailer_phone_no,d.distributor_name,d.distributor_code,s.state_name,c.city_name,loc.location_name", $rp, $where . $sort, '');


        $auRecCount = $this->_getSelectList('table_retailer as r    
    left join state as s on s.state_id=r.state 
    left join city as c on c.city_id=r.city   
    left join table_location as loc ON loc.location_id = r.location_id     
    left join table_distributors as d on d.distributor_id=r.distributor_id', 'count(retailer_id) as total', '', $where);
        $total = $auRecCount[0]->total;

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r", "\t");
        for ($i = 0; $i < count($auRec); $i++) {


            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->retailer_id . '",';
            $json .= '"cell":["' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->retailer_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->retailer_name))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_phone_no)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->state_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->city_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->location_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_name))) . '"';

            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_code))) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Retailer Master New : sudhanshu : 17 Nov 2023

    // Todo : Start : 4 Dec 2023 : Dynamic Retailer order list batch wise

    function DynamicshowbatchWiseOrderList($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query == 'Yes') {
            $query = 'Y';
        } elseif ($query == 'No') {
            $query = 'N';
        }
        // echo "<pre>"; print_r($_SESSION);
        $queryConditions = '';
        if (isset($_SESSION['fil_from']) && !empty($_SESSION['fil_from'])) {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['fil_from'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if (isset($_SESSION['fil_to']) && !empty($_SESSION['fil_to'])) {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['fil_to'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $queryConditions .= " AND o.distributor_id=" . $_SESSION['distributorId'];
        } else if (isset($_SESSION['fil_distributor']) && !empty($_SESSION['fil_distributor']) && $_SESSION['fil_distributor'] > 0) {
            $queryConditions .= " AND o.distributor_id=" . $_SESSION['fil_distributor'];
        }

        if ($_SESSION['userLoginType'] == 7 && $_SESSION['stockistId'] != "" && $_SESSION['stockistId'] > 0) {
            $queryConditions .= " AND d.stockist_id=" . $_SESSION['stockistId'];

        } else if (isset($_SESSION['fil_stockist']) && !empty($_SESSION['fil_stockist']) && $_SESSION['fil_stockist'] > 0) {
            $queryConditions .= " AND d.stockist_id=" . $_SESSION['fil_stockist'];
        }
        $salesmanCnd = "";
        if ($_SESSION['userLoginType'] == 5) {
            $salesmanCnd = str_replace("s.", "o.", $salesman);
        }

        if (isset($_SESSION['fil_salesman']) && !empty($_SESSION['fil_salesman']) && $_SESSION['fil_salesman'] > 0) {
            $salesmanCnd = " AND o.salesman_id=" . $_SESSION['fil_salesman'];
        } else if (isset($_SESSION['fil_salesman_manager']) && ($_SESSION['fil_salesman_manager'] > 0)) {
            $salesmanManagerId = $_SESSION['fil_salesman_manager'];
            $account_id = $_SESSION['accountId'];
            $res = $this->_getSelectList2('table_salesman_hierarchy_relationship AS SHR 
				LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
				LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id', 's.salesman_id,SH.hierarchy_id,SH.sort_order', '', " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanManagerId ORDER BY SH.sort_order ASC ");

            if (is_array($res) && (count($res) > 0)) {
                $sortOrder = $res[0]->sort_order;
                $_objArrayList = new ArrayList();
                $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanManagerId), $sortOrder, $account_id);

                if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                    $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                }

                $salesmanCnd = " AND o.salesman_id IN($bottomUsersIds) ";
            }
        } else if (isset($_SESSION['fil_salesman_designation']) && ($_SESSION['fil_salesman_designation'] > 0)) {
            $_objArrayList = new ArrayList();
            $account_id = $_SESSION['accountId'];
            $getDesignationWiseBottomUsersIdArr = $_objArrayList->getDesignationWiseBottomUsers($_SESSION['fil_salesman_designation'], $account_id);

            if (is_array($getDesignationWiseBottomUsersIdArr) && (count($getDesignationWiseBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getDesignationWiseBottomUsersIdArr);
                $salesmanCnd .= " AND o.salesman_id IN($bottomUsersIds) ";
            }
        } else {
            $salesmanCnd .= '';
        }
        //echo $bottomUsersIds; die;
        if (isset($_SESSION['fil_retailer']) && !empty($_SESSION['fil_retailer']) && $_SESSION['fil_retailer'] > 0) {
            $queryConditions .= " AND o.retailer_id=" . $_SESSION['fil_retailer'];
        }
        if (isset($_SESSION['fil_salesman_state']) && !empty($_SESSION['fil_salesman_state']) && $_SESSION['fil_salesman_state'] > 0) {
            $queryConditions .= " AND s.state=" . $_SESSION['fil_salesman_state'];
        }
        if (isset($_SESSION['fil_retailer_state']) && !empty($_SESSION['fil_retailer_state']) && $_SESSION['fil_retailer_state'] > 0) {
            $queryConditions .= " AND r.state=" . $_SESSION['fil_retailer_state'];
        }
        if (isset($_SESSION['fil_distributor_state']) && !empty($_SESSION['fil_distributor_state']) && $_SESSION['fil_distributor_state'] > 0) {
            $queryConditions .= " AND d.state=" . $_SESSION['fil_distributor_state'];
        }

        if (isset($_SESSION['fil_salesman_zone']) && !empty($_SESSION['fil_salesman_zone']) && $_SESSION['fil_salesman_zone'] > 0) {
            $queryConditions .= " AND zms.zone_id=" . $_SESSION['fil_salesman_zone'];
        }
        if (isset($_SESSION['fil_retailer_zone']) && !empty($_SESSION['fil_retailer_zone']) && $_SESSION['fil_retailer_zone'] > 0) {
            $queryConditions .= " AND zmr.zone_id=" . $_SESSION['fil_retailer_zone'];
        }
        if (isset($_SESSION['fil_distributor_zone']) && !empty($_SESSION['fil_distributor_zone']) && $_SESSION['fil_distributor_zone'] > 0) {
            $queryConditions .= " AND zmd.zone_id=" . $_SESSION['fil_distributor_zone'];
        }
        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $firstDate = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $lastdate = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $fromdate = " and o.date_of_order >= '" . $firstDate . "'";
            $todate = " and o.date_of_order <= '" . $lastdate . "'";
        }

//		if(isset($_SESSION['fil_order_status']) && !empty($_SESSION['fil_order_status'])){
//			$queryConditions .= " AND o.order_status='".$_SESSION['fil_order_status']."'";
//		}
//		else{
//			//$queryConditions .=" and order_status IN('A','I') ";
//		}
        if (isset($_SESSION['fil_order_type']) && !empty($_SESSION['fil_order_type'])) {
            $queryConditions .= " AND o.order_type='" . $_SESSION['fil_order_type'] . "'";
        }
//		else{
//			//$queryConditions .=" AND o.order_type !='Return'";
//            }

        $queryConditions = $queryConditions . $salesmanCnd . $fromdate . $todate;

        $rtype = " o.type='R' ";
        $odrDtlJoin = "";
        $odrDtlgrpBy = "";
        if ($rtype) {
            if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
                $RoleBrands = $this->getUserRoleBrand();
                if (!empty($RoleBrands)) {
                    $salesman = " AND i.brand_id IN(" . $RoleBrands . ")";
                    $odrDtlJoin = " left join table_order_detail as ord on o.order_type != 'No' and ord.order_id = o.order_id and ord.type = 1
					left join table_item as i on i.item_id = ord.item_id ";
                    $odrDtlgrpBy = " GROUP BY o.order_id ";
                }
            }
            $where = $queryConditions;
            if ($query) $where .= " AND $qtype LIKE '%$query%' ";
            $auRec = $this->_getSelectList("table_order as o    
			left join table_order_detail as ord on o.order_type != 'No' and ord.order_id = o.order_id and ord.type = 1
            left join table_item as i on i.item_id = ord.item_id
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id
            left join table_salesman_hierarchy_relationship as shr on shr.salesman_id = s.salesman_id
            left join table_salesman as s2 on s2.salesman_id=shr.rpt_user_id
            left join table_distributors as d on o.distributor_id=d.distributor_id 
            left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id 
            LEFT JOIN table_retailer_group as rg ON rg.group_id = r.group_id
            left join table_retailer_type_master as rtm ON rtm.type_id=r.type_id
            left join table_relationship as rel ON rel.relationship_id=r.relationship_id 
            left join state as str on str.state_id=r.state 
            left join state as sts on sts.state_id=s.state 
            left join state as std on std.state_id=d.state 
            left join city as c on c.city_id=r.city 
			left join table_zone_state_mapping as zms on zms.state_id=s.state and zms.account_id = s.account_id
			left join table_zone as sz on sz.zone_id=zms.zone_id 
			left join table_zone_state_mapping as zmr on zmr.state_id=r.state and zmr.account_id = r.account_id
			left join table_zone as rz on rz.zone_id=zmr.zone_id
			left join table_zone_state_mapping as zmd on zmd.state_id=d.state and zmd.account_id = d.account_id
			left join table_zone as dz on dz.zone_id=zmd.zone_id",
                "o.order_id,o.order_by,count(ord.item_id) as total_item,SUM(ord.acc_quantity) as total_ordered_qty,o.retailer_id,o.order_type,o.order_status,
			o.date_of_order,o.time_of_order,o.acc_total_invoice_amount,o.updated_by_app,
r.retailer_name,r.retailer_code,r.retailer_address,r.retailer_location,r.lat as retlat,cm.channel_name,
r.display_outlet,r.lng as retlng,s.salesman_name,s.employee_code,
s2.salesman_name as rpt_to,d.distributor_name,d.distributor_code,sz.zone_name as sal_zone,rz.zone_name as ret_zone,dz.zone_name as dist_zone,str.state_name as ret_state,sts.state_name as sal_state,std.state_name as dist_state,c.city_name,rg.group_name,rtm.type_name,rel.relationship_code as relation,o.delivery_date,o.comments,o.tag_description,o.photo_count", $rp, $where . " group by o.order_id " . $sort, '');

            $auRecCount = $this->_getSelectList("table_order as o $odrDtlJoin           
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id            
            left join table_distributors as d on o.distributor_id=d.distributor_id 
            left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id
            left join state as str on str.state_id=r.state 
            left join state as sts on sts.state_id=s.state 
            left join state as std on std.state_id=d.state
			left join table_zone_state_mapping as zms on zms.state_id=s.state and zms.account_id = s.account_id
			left join table_zone as sz on sz.zone_id=zms.zone_id 
			left join table_zone_state_mapping as zmr on zmr.state_id=r.state and zmr.account_id = r.account_id
			left join table_zone as rz on rz.zone_id=zmr.zone_id
			left join table_zone_state_mapping as zmd on zmd.state_id=d.state and zmd.account_id = d.account_id
			left join table_zone as dz on dz.zone_id=zmd.zone_id			
			", 'COUNT(o.order_id) as total', '', $where . $odrDtlgrpBy . $sort);

            $total = $auRecCount[0]->total;
            if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
                if (!empty($RoleBrands)) {
                    $total = count($auRecCount);
                }
            } else {
                $total = $auRecCount[0]->total;
            }

        }


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {

            //----- Order by condtion -----

            switch ($auRec[$i]->order_by) {
                case 'S':
                    $order_by = $this->AliaseUsers['salesman'];
                    break;
                case "D":
                    $order_by = $this->AliaseUsers['distributor'];
                    break;
                case "R":
                    $order_by = $this->AliaseUsers['retailer'];
                    break;
                default :
                    $order_by = '';
            }

            //--------

            $orderType = '';
            if (strtolower($auRec[$i]->order_type) == 'yes') {
                $orderType = 'Sales Order';
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = "Cancelled";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "P";
            }
            if (strtolower($auRec[$i]->order_type) == 'no') {
                $orderType = 'No Order';

                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
                $color = ($auRec[$i]->order_status == 'A') ? "I" : "P";
                $NoOrderImage = '<a href=\"no_order_image.php?ordId=' . base64_encode($auRec[$i]->order_id) . '\" ' . $targetBlank . '>View Image</a>';
            } else {
                $NoOrderImage = "-";
            }
            if (strtolower($auRec[$i]->order_type) == 'adhoc') {
                $orderType = 'Adhoc Order';
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Adhoc Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = "Cancelled";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }

            if (strtolower($auRec[$i]->order_type) == 'return') {
                $orderType = 'Return Order';
            }

            if ($auRec[$i]->updated_by_app > 0) {
                $color = 'U';
            }

            if ($flag == 1) {
                $photo = '<a href=\"retailer_survey.php?retId=' . $auRec[$i]->retailer_id . '\" ' . $targetBlank . '>View Survey Photo</a>';
            }
            //Retailer location maping only survey table
            if ($auRec[$i]->retlat != '') {
                $map = '<a href=\"show_map.php?ord=' . base64_encode($auRec[$i]->order_id) . '\" ' . $targetBlank . '>View on Map</a>';
                $colortd = "out";
            } else {
                $map = "-";
                $colortd = "out";
            }
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            $date_of_delivery = $this->_changeDate($auRec[$i]->delivery_date);
            $salRptTo = '';
            $salRptTo = $auRec[$i]->rpt_to;
            /*----Display Outlet ----*/
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            $viewOrderImage = '<a href="dynamic_order_image.php?ordId=' . base64_encode($auRec[$i]->order_id) . '" ' . $targetBlank . '>View Image</a>';
            //$ttlItems = isset($orderitms[$auRec[$i]->order_id]) && !empty($orderitms[$auRec[$i]->order_id]) ? $orderitms[$auRec[$i]->order_id] : 0;
            $ttlItems = $auRec[$i]->total_item;
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->acc_total_invoice_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($ttlItems)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total_ordered_qty)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->region_name)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dist_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dist_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_state)) . '"';
            $json .= ',"' . ucwords(addslashes($salRptTo)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->group_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->relation)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->type_name)) . '"';
            $json .= ',"' . ucwords(addslashes($outlet)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . $map . '"';
            $json .= ',"' . $photo . '"';
            $json .= ',"' . $orderType . '"';
            $json .= ',"' . $order_by . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . $NoOrderImage . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->comments))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . ucwords(addslashes($date_of_delivery)) . '"';
            $json .= ',"' . ucwords(addslashes($viewOrderImage)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"]';

            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo : End : 4 Dec 2023 : Dynamic Retailer order list batch wise

    // Todo : Start : 5 Dec 2023 : Dynamic batch wise distributor Order list
    function showDynamicbatchWiseDistributorOrderListing($salesman)
    {

        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($qtype == "date_of_order" && $query != '') {
            $query = date("Y-m-d", strtotime($query));
        }
        $_objAdmin = new Admin();


        // ---------------start dynamic filter condition-----------
        $salesmanCnd = '';
        $salCond = '';

        if (isset($_SESSION['fil_salesman']) && $_SESSION['fil_salesman'] > 0) {
            $salesmanCnd = ' AND s.salesman_id = "' . $_SESSION['fil_salesman'] . '"';
        } else if (isset($_SESSION['fil_salesman_manager']) && ($_SESSION['fil_salesman_manager'] > 0)) {
            $salesmanManagerId = $_SESSION['fil_salesman_manager'];
            $account_id = $_SESSION['accountId'];
            $res = $this->_getSelectList2('table_salesman_hierarchy_relationship AS SHR 
    LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
    LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id', 's.salesman_id,SH.hierarchy_id,SH.sort_order', '', " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanManagerId ORDER BY SH.sort_order ASC ");
            if (is_array($res) && (count($res) > 0)) {
                $sortOrder = $res[0]->sort_order;
                $_objArrayList = new ArrayList();
                $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanManagerId), $sortOrder, $account_id);

                if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                    $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                }

                $salesmanCnd = " AND s.salesman_id IN($bottomUsersIds) ";
            }
        } else if (isset($_SESSION['fil_salesman_designation']) && ($_SESSION['fil_salesman_designation'] > 0)) {
            $account_id = $_SESSION['accountId'];
            $_objArrayList = new ArrayList();
            $getDesignationWiseBottomUsersIdArr = $_objArrayList->getDesignationWiseBottomUsers($_SESSION['fil_salesman_designation'], $account_id);

            if (is_array($getDesignationWiseBottomUsersIdArr) && (count($getDesignationWiseBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getDesignationWiseBottomUsersIdArr);
                $salesmanCnd = " AND s.salesman_id IN($bottomUsersIds) ";
            }
        } else {
            $salesmanCnd .= '';
        }
        if (isset($_SESSION['fil_distributor']) && $_SESSION['fil_distributor'] > 0) {
            $salesmanCnd .= ' AND d.distributor_id = "' . $_SESSION['fil_distributor'] . '"';
        }
        if (isset($_SESSION['fil_salesman_zone']) && $_SESSION['fil_salesman_zone'] > 0) {
            $salesmanCnd .= ' AND z.zone_id = "' . $_SESSION['fil_salesman_zone'] . '"';
        }
        if (isset($_SESSION['fil_salesman_state']) && $_SESSION['fil_salesman_state'] > 0) {
            $salesmanCnd .= ' AND s.state = "' . $_SESSION['fil_salesman_state'] . '"';
        }
        if (isset($_SESSION['fil_distributor_state']) && !empty($_SESSION['fil_distributor_state']) && $_SESSION['fil_distributor_state'] > 0) {
            $salesmanCnd .= " AND d.state=" . $_SESSION['fil_distributor_state'];
        }
        if (isset($_SESSION['fil_distributor_zone']) && !empty($_SESSION['fil_distributor_zone']) && $_SESSION['fil_distributor_zone'] > 0) {
            $salesmanCnd .= " AND z2.zone_id=" . $_SESSION['fil_distributor_zone'];
        }
        if (isset($_SESSION['fil_order_status']) && !empty($_SESSION['fil_order_status'])) {
            $salesmanCnd .= " AND o.order_status='" . $_SESSION['fil_order_status'] . "'";
        }


        // Date range , month and year
        if (!isset($_SESSION['fil_from']) && empty($_SESSION['fil_from'])) {
            $_SESSION['fil_from'] = date('d M Y');
        }

        if (!isset($_SESSION['fil_to']) && empty($_SESSION['fil_to'])) {
            $_SESSION['fil_to'] = date('d M Y');
        }
        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $_SESSION['fil_from'] = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $_SESSION['fil_to'] = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
        }
        $tim_date = " and o.date_of_order BETWEEN '" . date('Y-m-d', strtotime
            ($_SESSION['fil_from'])) .
            "' AND '" . date('Y-m-d', strtotime($_SESSION['fil_to'])) . "'";


        // -------------End dynamic filter condition------------

        if ($_SESSION['userLoginType'] == 3) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['distributorId'] . "' ";
        } else if (isset($_SESSION['sel_dis']) && $_SESSION['sel_dis'] > 0) {
            $disLogCond = " AND o.distributor_id='" . $_SESSION['sel_dis'] . "' ";
        }
        if ($_SESSION['userLoginType'] == 1) {
            $salesman = '';
        }

        if ($_SESSION['userLoginType'] == 7) {
            $StockistLogCond = " AND d.stockist_id='" . $_SESSION['stockistId'] . "' ";
        }

        $where = " o.order_for='D' $disLogCond $tim_date $StockistLogCond $salesmanCnd  and o.account_id =" . $_SESSION['accountId'];
        if ($qtype == 'o.date_of_order') {
            $query = date('Y-m-d', strtotime($query));
        }

        // When salesman is loggedin
        if (($_SESSION['userLoginType'] == 5) && ($_SESSION['salesmanId'] > 0)) {
            $disIdArr = $_objAdmin->getRouteWiseDistributors($_SESSION['salesmanId'], $_SESSION['accountId']);
            //echo "<pre>";print_R($disIdArr);die;
            if (is_array($disIdArr) && (count($disIdArr) > 0)) {
                $disIds = implode(',', $disIdArr);
                $where .= " AND o.distributor_id IN($disIds) ";
            }
        }


        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_order as o
    left join table_salesman as s on o.salesman_id=s.salesman_id
    left join table_distributors as d on d.distributor_id=o.distributor_id
    left join state as ss on ss.state_id = s.state
    left join state as st on st.state_id = d.state
    left join table_zone_state_mapping as zsm1 on zsm1.state_id = s.state and zsm1.account_id = s.account_id
    left join table_zone as z on z.zone_id = zsm1.zone_id
  	left join table_zone_state_mapping as zsm on zsm.state_id = d.state and zsm.account_id = d.account_id 
  	left join table_tags as t on t.tag_id=o.reason
  	left join table_zone as z1 on z1.zone_id = zsm.zone_id
  	left join city as c on c.city_id=d.city
  	left join city as c1 on c1.city_id = s.city
  	', "o.*,s.salesman_name,d.distributor_name,d.distributor_code,d.distributor_location, d.distributor_address, st.state_name as dis_state,c1.city_name as sal_city ,c.city_name as dis_city,ss.state_name as sal_state,z.zone_name as sal_zone,z1.zone_name as dis_zone,t.tag_description", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributor_order as o
    left join table_salesman as s on o.salesman_id=s.salesman_id
    left join table_distributors as d on d.distributor_id=o.distributor_id
    left join state as ss on ss.state_id = s.state
    left join state as st on st.state_id = d.state
    left join table_zone_state_mapping as zsm1 on zsm1.state_id = s.state and zsm1.account_id = s.account_id
    left join table_tags as t on t.tag_id=o.reason
    left join table_zone as z on z.zone_id = zsm1.zone_id
  	left join table_zone_state_mapping as zsm on zsm.state_id = d.state and zsm.account_id = d.account_id 
  	left join table_zone as z1 on z1.zone_id = zsm.zone_id
  	left join city as c on c.city_id=d.city
  	left join city as c1 on c1.city_id = s.city
  	', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
                $targetBlank = '';
            } else {
                $targetBlank = "target='_blank'";
            }
            $image1 = '<a href=\"dis_order_image.php?ordId=' . base64_encode($auRec[$i]->stock_id) . '\" ' .
                $targetBlank .
                '>View Image</a>';


            if ($auRec[$i]->order_type == 'Yes') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "U";
            }
            if ($auRec[$i]->order_type == 'No') {
                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
                $color = ($auRec[$i]->order_status == 'A') ? "I" : "P";
            }
            if ($auRec[$i]->order_type == 'Adhoc') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Adhoc Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }
            if ($auRec[$i]->order_type == 'Return') {
                if ($auRec[$i]->order_status == 'A') {
                    $status = "Return Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }
            if ($auRec[$i]->updated_by_app > 0) {
                $color = "U";
            }
            $auRec2 = $this->_getSelectList2('table_distributor_order_detail', "count( distinct(item_id)) as total_item,sum(quantity) as total_qty", '', " order_id = " . $auRec[$i]->order_id . " and type = 1");
            $CheckOrderSts = $this->_getSelectList2('table_distributor_order as o 
	  inner join table_distributor_order_detail as od on o.order_id = od.order_id',
                "od.quantity, od.acc_quantity,od.is_processed ", '', " o.order_id='" . $auRec[$i]->order_id . "' 
		AND ((od.quantity = od.acc_quantity AND od.is_processed=0) OR (od.quantity >od.acc_quantity AND od.is_processed=1)) 
		and od.free_item_id = 0");
            if ($auRec[$i]->order_status == 'A') {
                $orderStatus = 'Fully Pending';
            } else if (is_array($CheckOrderSts) && count($CheckOrderSts) > 0) {
                $orderStatus = 'Partially Invoiced';
            } else {
                $orderStatus = 'Fully Invoiced';
            }
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            /* ----Display Outlet ---- */
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }


            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            //$json .= ',"' . $orderStatus . '"';
            $json .= ',"' . ucwords(addslashes(number_format(floor($auRec[$i]->acc_total_invoice_amount), 2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec2[0]->total_item)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec2[0]->total_qty)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_city)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_city)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_location))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->distributor_address))) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->reason_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"';
            $json .= ',"' . $image1 . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo : End : 5 Dec 2023 : Dynamic batch wise distributor Order list

    // Todo : Start : Jatin : 7 Dec 2023 : Account billing status report

    function showAccountBillingDetails()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'abd.acc_bill_id';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query) $where .= " $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_account_billing_detail as abd
                    left join table_account as u on u.account_id = abd.account_id
                    ', "abd.*,u.company_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_account_billing_detail as abd
                    left join table_account as u on u.account_id = abd.account_id', 'count(*) AS total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->bill_paid == 'N') {
                $bill_paid = 'No';
            } else {
                $bill_paid = 'Yes';
            }
            if ($auRec[$i]->account_hold == 'N') {
                $account_hold = 'No';
            } else {
                $account_hold = 'Yes';
            }

//            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
//            $status = '<a href=\"account_billing_status_report.php.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->acc_bill_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->company_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->no_of_days) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->bill_due_date)) . '"';
            $json .= ',"' . addslashes($bill_paid) . '"';
            $json .= ',"' . addslashes($account_hold) . '"';
            $json .= ',"' . $this->_changeDate($auRec[$i]->updated_date) . '"';
            $json .= ',"' . $this->_changeDate($auRec[$i]->created_date) . '"]';
//            $json .= ',"' . $status . '"';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addAccountBillingDetails()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['no_of_days'] = mysql_escape_string(trim($_POST['no_of_days']));
        $data['bill_due_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['bill_due_date'])));
        $data['bill_paid'] = mysql_escape_string(trim($_POST['bill_paid']));
        $data['account_hold'] = mysql_escape_string($_POST['account_hold']);
        $data['created_date'] = date('Y-m-d H:i:s');
        $id = $this->_dbInsert($data, 'table_account_billing_detail');
        return $id;
    }

    function upAccountBillingDetails($id)
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['no_of_days'] = mysql_escape_string(trim($_POST['no_of_days']));
        $data['bill_due_date'] = date('Y-m-d', strtotime(mysql_escape_string($_POST['bill_due_date'])));
        $data['bill_paid'] = mysql_escape_string(trim($_POST['bill_paid']));
        $data['account_hold'] = mysql_escape_string($_POST['account_hold']);
        $data['updated_date'] = date('Y-m-d H:i:s');

        $id = $this->_dbUpdate2($data, 'table_account_billing_detail', " acc_bill_id=" . $id);
        return $id;
    }

    // Todo : End : Jatin : 7 Dec 2023 : Account billing status report

    // Todo Start : sudhanshu : 07 dec 2023 distributor wise item description

    function showDistributorWiseItemDesc()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'd.distributor_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder , it.item_name ASC";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " b.brand_id IN(" . $RoleBrands . ")";
        }
        //Todo Start : sudhanshu 12 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasDisItm']) && $_SESSION['MasDisItm'] != 'all' && $_SESSION['MasDisItm'] != '') {
            $statusCondi = "  msi.status ='" . $_SESSION['MasDisItm'] . "'";
        }
        //Todo End : sudhanshu 12 june 2024 : add status filter
        $where = " $brandCnd $statusCondi";
        //$where = "it.account_id = '" .$_SESSION['accountId']."'";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributor_wise_item_description as msi
        LEFT JOIN table_distributors as d ON d.distributor_id = msi.distributor_id
        LEFT JOIN state as s ON s.state_id=d.state
        LEFT JOIN table_location as loc ON loc.location_id=d.location
        LEFT JOIN table_item as it ON it.item_id = msi.item_id
        LEFT JOIN table_brands as b on b.brand_id = it.brand_id
        LEFT JOIN table_grade as g ON it.grade_id = g.grade_id
        LEFT JOIN table_category as c on c.category_id = it.category_id', "msi.*,d.distributor_name,d.distributor_code,it.item_code,b.brand_name,it.item_name,c.category_name,g.grade_name,s.state_name,loc.location_name", $rp, $where . $sort,
            '');
        $auRecCount = $this->_getSelectList('table_distributor_wise_item_description as msi
        LEFT JOIN table_distributors as d ON d.distributor_id = msi.distributor_id
        LEFT JOIN state as s ON s.state_id=d.state
        LEFT JOIN table_location as loc ON loc.location_id=d.location
        LEFT JOIN table_item as it ON it.item_id = msi.item_id
        LEFT JOIN table_brands as b on b.brand_id = it.brand_id
        LEFT JOIN table_grade as g ON it.grade_id = g.grade_id
        LEFT JOIN table_category as c on c.category_id = it.category_id
', 'count(msi.id) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $created_date = $this->_changeDate($auRec[$i]->created_on);
            $updated_date = $this->_changeDate($auRec[$i]->updated_on);
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"distributor_wise_item_descripiton.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' .
                $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->grade_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_desc) . '"';
            $json .= ',"' . addslashes($created_date) . '"';
            $json .= ',"' . addslashes($updated_date) . '"';
            $json .= ',"' . $status . '"';
            $json .= "]";
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End :sudhanshu : 07 dec 2023 distributor wise item description

    // Todo Start :  reatailer order accept reject : sudhanshu : 28 Nov 2023

    function showRetailerOrderAccReject()
    {
        $RoleBrands = $this->getUserRoleBrand();
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //$_objAdmin = new Admin();
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $disList = " o.distributor_id=" . $_SESSION['distributorId'] . " and";
        } else {
            $disList = "";
        }
        if ($_SESSION['userLoginType'] == 7) {
            $stkList = " d.stockist_id=" . $_SESSION['stockistId'] . " and";
        } else {
            $stkList = "";
        }
        if ($_SESSION['OrderBy'] != '') {
            if ($_SESSION['OrderBy'] == 1) {
                $orderby = " and order_status IN('A','I') ";
            }
            if ($_SESSION['OrderBy'] == 2) {
                $orderby = " and o.order_status='A' ";
            }
            if ($_SESSION['OrderBy'] == 3) {
                $orderby = " and o.order_status='I' ";
            }
            if ($_SESSION['OrderBy'] == 4) {
                $orderby = " and o.order_status='D' ";
            }
        } else {
            $orderby = " and order_status IN('A','I') ";
        }
        //$where = " 1=1 ";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $orderIds = '';
        if (is_array($_SESSION['SalDisList']) && (count($_SESSION['SalDisList']) > 0)) {
            $salectedSalIds = implode(',', $_SESSION['SalDisList']);
            $salesman = " AND s.salesman_id IN(" . $salectedSalIds . ") ";
        } else if (!empty($RoleBrands)) {
            $salesman = "";
        }

        if (!empty($RoleBrands)) {
            $brandWhere = " o.order_for='R' and o.order_status !='C' and o.order_type !='Return' and o.distributor_id !='' $fromdate $todate ";
            $orderIds = $this->getBrandsOrder($RoleBrands, $brandWhere);
        }
        $where = " $disList $stkList r.new='' and o.order_for='R' and o.order_status !='C' and o.order_type !='Return' 
    and o.distributor_id!='' $orderIds $orderIds $salesman $fromdate $todate $orderby";

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order as o 
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id 
            left join table_distributors as d on d.distributor_id=o.distributor_id 
            left join table_retailer_channel_master as cm on cm.channel_id=r.channel_id 
            left join state as st on st.state_id=d.state 
            LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
            LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
            left join city as c on c.city_id=d.city',
            "o.*,r.retailer_name,r.retailer_code,r.retailer_address,r.retailer_location,cm.channel_name,r.display_outlet,s.salesman_name,s.employee_code,
    d.distributor_name,d.distributor_code, st.state_name,c.city_name,sz.zone_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_order as o 
        join table_distributors as d on d.distributor_id=o.distributor_id
        left join table_retailer as r on o.retailer_id=r.retailer_id 
        left join table_salesman as s on o.salesman_id=s.salesman_id
        LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id 
        left join table_retailer_channel_master as cm on cm.channel_id=r.channel_id',
            'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->order_status == 'A') {
                $status = "New Order";
                $color = "A";
            }
            if ($auRec[$i]->order_status == 'I') {
                $status = "Processed";
                $color = "I";
            }
            if ($auRec[$i]->order_status == 'D') {
                $status = "Dispatched";
                $color = "N";
            }
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            //----- Order by condtion -----

            switch ($auRec[$i]->order_by) {
                case 'S':
                    $order_by = $this->AliaseUsers['salesman'];
                    break;
                case "D":
                    $order_by = $this->AliaseUsers['distributor'];
                    break;
                case "R":
                    $order_by = $this->AliaseUsers['retailer'];
                    break;
                default :
                    $order_by = '';
            }

            $CheckOrderSts = $this->_getSelectList2('table_order_accept_reject as c', "SUM(c.effected_qty) as total,(select sum(effected_qty) FROM table_order_accept_reject WHERE order_id='" . $auRec[$i]->order_id . "' and action='rej' ) as reject_qty",
                '', "order_id='" . $auRec[$i]->order_id . "' ");


            $CheckOrderQuantity = $this->_getSelectList2('table_order as o 
            inner join table_order_detail as odr on odr.order_id = o.order_id', "sum(odr.quantity) as total_odr_quantity",
                '', "o.order_id=" . $auRec[$i]->order_id . " and odr.order_detail_status NOt in (6,4) group by o.order_id");


            if ($CheckOrderSts[0]->total <= 0) {
                $orderStatus = 'Fully Pending';
                $color = 'A';
            } else if ($CheckOrderSts[0]->total == $CheckOrderSts[0]->reject_qty) {
                $orderStatus = 'Fully Rejected';
                $color = 'C';
            } else if ($CheckOrderQuantity[0]->total_odr_quantity != $CheckOrderSts[0]->total) {
                $orderStatus = 'Partially Pending';
                $color = 'I';
            } else {
                $orderStatus = 'Fully Accepted';
                $color = 'D';
            }
            //--------
            //$status=($auRec[$i]->order_status=='A')?"New Adhoc Order":"Processed";
            //$color=($auRec[$i]->order_status=='A')?"O":"P";
            //$status=($auRec[$i]->order_status=='A')?"New Order":"Processed";
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . date("h:i A.", strtotime($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($orderStatus)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->acc_total_invoice_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes($outlet)) . '"';
            $json .= ',"' . ucwords(addslashes($order_by)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function RetOrderReject($id)
    {

        $auRec = $this->_getSelectList2('table_order_detail', "*", '', " order_detail_id=" . $id);
        $order_id = $auRec[0]->order_id;
        $order_detail_id = $auRec[0]->order_detail_id;
        $item_id = $auRec[0]->item_id;


        $data['tag_id'] = mysql_escape_string($_POST['tag_id']);

        $data['order_detail_status'] = '3';
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $id = $this->_dbUpdate2($data, 'table_order_detail', " order_detail_id=" . $id);
        //insert seprt table table_order_accept_reject

        $data2['order_id'] = $order_id;
        $data2['order_detail_id'] = $order_detail_id;
        $data2['item_id'] = $item_id;
        $data2['uam'] = $auRec[0]->item_unit_type;
        $data2['effected_qty'] = mysql_escape_string($_POST['rej_qty']);
        $data2['action'] = 'rej';
        $data2['rej_reason'] = mysql_escape_string($_POST['tag_id']);
        $data2['batch_id'] = $auRec[0]->color_id;
        $data2['action_by'] = $_SESSION['PepUpSalesUserId'];
        $data2['created_on'] = date('Y-m-d h:i:s');
        $id = $this->_dbInsert($data2, 'table_order_accept_reject');
        return $id;
    }


    function RetOrderAccept($id)
    {
        //echo "hh";die;
        $id = base64_decode($_REQUEST['ord']);
        $ordId = base64_decode($_REQUEST['ord']);
        $auRec = $this->_getSelectList2('table_order_detail', "*", '', " order_detail_id=" . $id);
        $order_id = $auRec[0]->order_id;
        $item_id = $auRec[0]->item_id;
        $item_total = $auRec[0]->acc_total;
        $item_price = $auRec[0]->price;
        $oldQty = $auRec[0]->acc_quantity;
        $quantity = $_POST['qty_' . $id] + $oldQty;

        $total_price = $quantity * $item_price;
        $orRec = $this->_getSelectList('table_order', "order_id,distributor_id", '', " order_id=" . $order_id);
        $distributor_id = $orRec[0]->distributor_id;

        $total_old_amt = $old_amt[0]->old_amt - $old_dis[0]->old_dis;
        $data['tag_id'] = '';
        $data['acc_total'] = $total_price;
        $data['acc_quantity'] = $quantity;
        $data['order_detail_status'] = '2';
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';

        $id = $this->_dbUpdate2($data, 'table_order_detail', " order_detail_id=" . $id);
        //Calculate Items wise scheme

        //New Amount
        $itemTotal = $this->_getSelectList2('table_order_detail', "SUM(acc_quantity) as total_items,SUM(acc_total) as total_amt", '', " order_id=$order_id and item_id=$item_id and type=1 ");
        $netItem = $itemTotal[0]->total_items;
        $acc_amt = $itemTotal[0]->total_amt;

        //Update Invoine
        $data1['acc_total_invoice_amount'] = $acc_amt;
        //$data1['order_status']='I';
        $data1['last_update_date'] = date('Y-m-d');
        $data1['last_update_status'] = 'Update';
        $id = $this->_dbUpdate($data1, 'table_order', " order_id=" . $orRec[0]->order_id);

        $data2['order_id'] = $order_id;
        $data2['order_detail_id'] = base64_decode($_REQUEST['ord']);
        $data2['item_id'] = $item_id;
        $data2['uam'] = $auRec[0]->item_unit_type;
        $data2['effected_qty'] = $_POST['qty_' . base64_decode($_REQUEST['ord'])];
        $data2['action'] = 'act';

        $data2['batch_id'] = $auRec[0]->color_id;
        $data2['action_by'] = $_SESSION['PepUpSalesUserId'];
        $data2['created_on'] = date('Y-m-d h:i:s');

        $id = $this->_dbInsert($data2, 'table_order_accept_reject');

        //  start manage distributor stock
        $quantity = $_POST['qty_' . base64_decode($_REQUEST['ord'])];

        $featureList = $this->getAccountFeaturesList($_SESSION['accountId']);

        if (count($featureList) > 0 && in_array(84, $featureList)) {

            $OrdQty = $this->_getSelectList2('table_order_detail', "order_detail_id,order_id,item_id", '', "order_detail_id=$ordId and quantity >= $quantity ");
            $disStock = $this->_getSelectList2('table_item_distributor_stock as s 
					left join table_item as i on i.item_id = s.item_id
					left join table_color as cl on cl.color_id=s.color_id',
                " s.dis_stk_id,s.dis_stock_value,cl.last_update_date,s.distributor_id,s.account_id,s.category_id", '', " s.item_id='" . $item_id . "' 
				  AND s.distributor_id='" . $distributor_id . "' order by cl.last_update_date ASC");
            //print_r($disStock);die;
            if (count($disStock) <= 0) {
                $auItem = $this->_getSelectList('table_item', "category_id", '', " item_id=" . $item_id);

                $condi = "ic.item_id=" . $item_id;

                $resultset = $this->_getSelectList('table_cases as c left join table_item_case_relationship as ic on ic.case_id=c.case_id', 'c.case_id,case_size', '', $condi);

                $case_id = $resultset[0]->case_id;

                $stockData['account_id'] = $_SESSION['accountId'];
                $stockData['distributor_id'] = $distributor_id;
                $stockData['item_id'] = $item_id;
                $stockData['category_id'] = $auItem[0]->category_id;
                $stockData['attribute_value_id'] = $case_id;
                $stockData['color_id'] = $color_id;
                $stockData['dis_stock_value'] = 0;
                $stockData['last_updated_date'] = date('Y-m-d');
                $stockData['status'] = 'A';
                $stockData['last_update_datetime'] = date('Y-m-d h:i:s');

                $stkId = $this->_dbInsert($stockData, 'table_item_distributor_stock');
            }


            if (count($OrdQty) > 0) {

                $this->adjustStockByAccRejOrder($disStock, $quantity, $OrdQty[0]);

            }


        }
        // end manage distributor stock
        return $id;
    }

    function RetOrderBulkReject()
    {


        if (is_array($_POST['slecetdItem']) && count($_POST['slecetdItem']) > 0) {
            $seltItem = $_POST['slecetdItem'];

            foreach ($seltItem as $key => $ordId) {

                $auRec = $this->_getSelectList2('table_order_detail', "*", '', " order_detail_id=" . $ordId);
                $order_id = $auRec[0]->order_id;
                $order_detail_id = $auRec[0]->order_detail_id;
                $item_id = $auRec[0]->item_id;


                $data['tag_id'] = mysql_escape_string($_POST['reason']);

                $data['order_detail_status'] = '3';
                $data['last_update_date'] = date('Y-m-d');
                $data['last_update_status'] = 'Update';
                $id = $this->_dbUpdate2($data, 'table_order_detail', " order_detail_id=" . $ordId);
                echo $_POST['updateqty_' . $ordId] . '<br>';

                //insert seprt table table_order_accept_reject

                $data2['order_id'] = $order_id;
                $data2['order_detail_id'] = $order_detail_id;
                $data2['item_id'] = $item_id;
                $data2['uam'] = $auRec[0]->item_unit_type;
                $data2['effected_qty'] = mysql_escape_string($_POST['updateqty_' . $ordId]);
                $data2['action'] = 'rej';
                $data2['rej_reason'] = mysql_escape_string($_POST['reason']);
                $data2['batch_id'] = $auRec[0]->color_id;
                $data2['action_by'] = $_SESSION['PepUpSalesUserId'];
                $data2['created_on'] = date('Y-m-d h:i:s');
                $id = $this->_dbInsert($data2, 'table_order_accept_reject');
            }


        }

        return $id;
    }

    function RetOrderBulkAccept()
    {


        if (is_array($_POST['slecetdItem']) && count($_POST['slecetdItem']) > 0) {
            $seltItem = $_POST['slecetdItem'];

            foreach ($seltItem as $key => $ordId) {

                $auRec = $this->_getSelectList2('table_order_detail', "*", '', " order_detail_id=" . $ordId);
                $order_id = $auRec[0]->order_id;
                $order_detail_id = $auRec[0]->order_detail_id;
                $item_id = $auRec[0]->item_id;
                $color_id = $auRec[0]->color_id;

                $item_price = $auRec[0]->price;
                $oldQty = $auRec[0]->acc_quantity;
                $quantity = $_POST['updateqty_' . $ordId] + $oldQty;

                $orRec = $this->_getSelectList('table_order', "order_id,distributor_id", '', " order_id=" . $order_id);
                $distributor_id = $orRec[0]->distributor_id;

                $data['acc_quantity'] = $quantity;
                $data['order_detail_status'] = '2';
                $data['last_update_date'] = date('Y-m-d');
                $data['last_update_status'] = 'Update';

                $id = $this->_dbUpdate2($data, 'table_order_detail', " order_detail_id=" . $ordId);


                //insert seprt table table_order_accept_reject

                $data2['order_id'] = $order_id;
                $data2['order_detail_id'] = $order_detail_id;
                $data2['item_id'] = $item_id;
                $data2['uam'] = $auRec[0]->item_unit_type;
                $data2['effected_qty'] = mysql_escape_string($_POST['updateqty_' . $ordId]);
                $data2['action'] = 'act';
                $data2['rej_reason'] = mysql_escape_string($_POST['reason']);
                $data2['batch_id'] = $auRec[0]->color_id;
                $data2['action_by'] = $_SESSION['PepUpSalesUserId'];
                $data2['created_on'] = date('Y-m-d h:i:s');
                $id = $this->_dbInsert($data2, 'table_order_accept_reject');


                //  start manage distributor stock
                $quantity = $_POST['updateqty_' . $ordId];
                $featureList = $this->getAccountFeaturesList($_SESSION['accountId']);

                if (count($featureList) > 0 && in_array(84, $featureList)) {

                    $OrdQty = $this->_getSelectList2('table_order_detail', "order_detail_id,order_id,item_id", '', "order_detail_id=$ordId and quantity >= $quantity ");
                    $disStock = $this->_getSelectList2('table_item_distributor_stock as s 
                            left join table_item as i on i.item_id = s.item_id
                            left join table_color as cl on cl.color_id=s.color_id',
                        " s.dis_stk_id,s.dis_stock_value,cl.last_update_date,s.distributor_id,s.account_id,s.category_id", '', " s.item_id='" . $item_id . "' 
                        AND s.distributor_id='" . $distributor_id . "' order by cl.last_update_date ASC");

                    if (count($disStock) <= 0) {
                        $auItem = $this->_getSelectList('table_item', "category_id", '', " item_id=" . $item_id);

                        $condi = "ic.item_id=" . $item_id;

                        $resultset = $this->_getSelectList('table_cases as c left join table_item_case_relationship as ic on ic.case_id=c.case_id', 'c.case_id,case_size', '', $condi);

                        $case_id = $resultset[0]->case_id;

                        $stockData['account_id'] = $_SESSION['accountId'];
                        $stockData['distributor_id'] = $distributor_id;
                        $stockData['item_id'] = $item_id;
                        $stockData['category_id'] = $auItem[0]->category_id;
                        $stockData['attribute_value_id'] = $case_id;
                        $stockData['color_id'] = $color_id;
                        $stockData['dis_stock_value'] = 0;
                        $stockData['last_updated_date'] = date('Y-m-d');
                        $stockData['status'] = 'A';
                        $stockData['last_update_datetime'] = date('Y-m-d h:i:s');

                        $stkId = $this->_dbInsert($stockData, 'table_item_distributor_stock');
                    }


                    if (count($OrdQty) > 0) {

                        $this->adjustStockByAccRejOrder($disStock, $quantity, $OrdQty[0]);

                    }


                }

                // end manage distributor stock
            }


        }

        return $id;
    }


    public function adjustStockByAccRejOrder($disStockArr, $quantity, $odrVal)
    {
        $acc_quantity = $remainingQty = $quantity;
        foreach ($disStockArr as $key => $disStock) {
            if ($remainingQty > 0) {
                $data = array();
                if (($disStock->dis_stock_value >= $remainingQty) || $key == (count($disStockArr) - 1)) {
                    $data['dis_stock_value'] = ($disStock->dis_stock_value - $remainingQty);
                    $acc_quantity = $remainingQty;
                    $remainingQty = 0;
                } else if (($disStock->dis_stock_value <= $remainingQty) && ($disStock->dis_stock_value > 0)) {
                    $data['dis_stock_value'] = ($disStock->dis_stock_value - $remainingQty);
                    $remainingQty = ($remainingQty - $disStock->dis_stock_value);
                    $acc_quantity = $remainingQty;
                }
                $data['last_updated_date'] = date('Y-m-d');
                $this->_dbUpdate($data, 'table_item_distributor_stock', " dis_stk_id='" . $disStock->dis_stk_id . "'");
                $data = array();
                $data['account_id'] = $disStock->account_id;
                $data['distributor_id'] = $disStock->distributor_id;
                $data['item_id'] = $odrVal->item_id;
                $data['category_id'] = $disStock->category_id;
                $data['dispatch_stock_value'] = $acc_quantity;
                $data['bill_date'] = date('Y-m-d H:i:s');
                $data['bill_no'] = '';
                $data['created_datetime'] = date('Y-m-d H:i:s');
                $data['status'] = 'D';
                $this->_dbInsert($data, 'table_item_dis_stk_dispatch_activity');
                $data = array();
                $data['distributor_id'] = $disStock->distributor_id;
                $data['order_id'] = $odrVal->order_id;
                $data['item_id'] = $odrVal->item_id;
                $data['stock_before_activity'] = $disStock->dis_stock_value;
                $data['quantity'] = $acc_quantity;
                $data['stock_after_activity'] = ($disStock->dis_stock_value - $acc_quantity);
                $data['activity_type'] = "INV_REC";
                $data['activity_date'] = date('Y-m-d');
                $data['activity_time'] = date('H:i:s');
                $this->_dbInsert($data, 'table_item_distributor_stock_transaction_activity');
            }
        }
        return true;
    }

    function showOrderInvoceStatus($salesman)
    {
        //$salesman = "";
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $condition = '';

        if ($_SESSION['retOrderList'] != '' && $_SESSION['retOrderList'] != 'all') {
            $condition .= " R.retailer_id = " . $_SESSION['retOrderList'] . " AND ";
        }
        if ($_SESSION['FromOrdList'] != '') {
            $fromdate = "  O.date_of_order  >= '" . date('Y-m-d', strtotime($_SESSION['FromOrdList'])) . "' AND ";
        } else {
            $fromdate = " O.date_of_order  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToOrdList'] != '') {
            $todate = " O.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToOrdList'])) . "' ";
        } else {
            $todate = "  O.date_of_order <= '" . date('Y-m-d') . "'";
        }


        $where = "   O.account_id='" . $_SESSION['accountId'] . "' and D.quantity>0 and $condition $fromdate $todate   ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_order_detail AS D 
		LEFT JOIN table_order AS O ON D.order_id = O.order_id
        
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		
		LEFT JOIN table_retailer AS R ON O.retailer_id = R.retailer_id
		
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN state as st on st.state_id=R.state
		LEFT JOIN city as ct on ct.city_id=R.city
		LEFT JOIN table_location as loc on loc.location_id = R.location_id 
		left join table_item_case_relationship as cr on cr.item_id=D.item_id
		left join table_cases as ca on ca.case_id=cr.case_id',
            'D.price, D.quantity,D.item_unit_type,D.total,R.new, I.item_name,I.item_code,I.item_size,ca.case_size,b.brand_name,
			I.item_id,
			Dis.distributor_name,Dis.distributor_code,O.retailer_id,R.retailer_name,R.retailer_code,c.category_name,O.order_id,O.date_of_order,O.time_of_order,st.state_name,ct.city_name,D.remarks,loc.location_name', $rp, $where . $sort, '');


        $retIdArr = [];

        $total = $this->_getSelectList2('table_order_detail AS D 
		LEFT JOIN table_order AS O ON D.order_id = O.order_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		
		LEFT JOIN table_retailer AS R ON O.retailer_id = R.retailer_id
		
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN state as st on st.state_id=R.state
		LEFT JOIN city as ct on ct.city_id=R.city
        LEFT JOIN table_location as loc on loc.location_id = R.location_id 
		left join table_item_case_relationship as cr on cr.item_id=D.item_id
		left join table_cases as ca on ca.case_id=cr.case_id', "COUNT(*) AS total", '', $where . $sort, '');
//        $getRetailerRoutes = $this->_getSelectList("table_route_retailer as rr
//LEFT JOIN table_route as r ON r.route_id = rr.route_id","rr.retailer_id, GROUP_CONCAT(DISTINCT r.route_name SEPARATOR ' | ') as route_names",""," rr.retailer_id > 0 GROUP BY rr.retailer_id ORDER BY rr.retailer_id ASC ");
//        $retailerWiseRoutesArr = [];
//        if(is_array($getRetailerRoutes) && (count($getRetailerRoutes) > 0)){
//            foreach ($getRetailerRoutes as $key => $retRoutes){
//                if(isset($retRoutes->route_names) && !empty($retRoutes->route_names)){
//                    $retailerWiseRoutesArr[$retRoutes->retailer_id] = $retRoutes->route_names;
//                }
//            }
//        }
//        echo '<pre>';
//        print_r($retailerWiseRoutesArr);
//        die(' die here');
        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            //if($auRec[$i]->new=="1"){$retailer_type='New Retailer';} else{$retailer_type='Existing Retailer';}

            $ordRec = $this->_getSelectList2('table_invoice_detail AS D
          LEFT JOIN table_invoice AS Inv ON D.invoice_id=Inv.invoice_id', "D.price, SUM(D.quantity) as quantity,SUM(D.total) as invoice_amt,Inv.bill_date,Inv.invoice_id", '', " Inv.ref_order_id = '" . $auRec[$i]->order_id . "' AND item_id = '" . $auRec[$i]->item_id . "'  ");
            $pcs = '';
            $kg = '';
            $cases = '';
            $ipcs = '';
            $ikg = '';
            $icases = '';
            $invoiceQty = 0;
            $ordQty = array();
            // print_r($ordRec);
            foreach ($ordRec as $ordD) {

                if ($auRec[$i]->item_unit_type == "pcs") {
                    $ipcs = $ordD->quantity;
                    $ikg = (($auRec[$i]->item_size != 0 && $ordD->quantity != 0) ? ROUND((($auRec[$i]->item_size * $ordD->quantity) / 1000), 2) : '');
                    $icases = (($auRec[$i]->case_size != 0 && $ordD->quantity != 0) ? ROUND(($ordD->quantity / $auRec[$i]->case_size), 2) : '');

                }

                if ($auRec[$i]->item_unit_type == "kg") {
                    $ikg = $ordD->quantity;
                    $ipcs = (($auRec[$i]->item_size != 0 && $ordD->quantity != 0) ? ROUND((($ordD->quantity * 1000) / $auRec[$i]->item_size), 2) : '');
                    $icases = (($auRec[$i]->case_size != 0 && $ordD->quantity != 0) ? ROUND(($ipcs / $auRec[$i]->case_size), 2) : '');


                }

                if ($auRec[$i]->item_unit_type == "cases") {
                    $icases = $ordD->quantity;
                    $ipcs = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->case_size * $ordD->quantity), 2) : '');
                    $ikg = (($auRec[$i]->item_size != 0) ? ROUND((($ipcs * $auRec[$i]->item_size) / 1000), 2) : '');

                }
                $invoice_amt = $ordD->invoice_amt;
                $invoiceQty = $ordD->quantity;
                $invoice_date = $this->_changeDate($ordD->bill_date);
                $invoice_no = $ordD->invoice_id;
            }


            if ($auRec[$i]->item_unit_type == "pcs") {
                $pcs = $auRec[$i]->quantity;
                $kg = (($auRec[$i]->item_size != 0) ? ROUND((($auRec[$i]->item_size * $auRec[$i]->quantity) / 1000), 2) : '');
                $cases = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->quantity / $auRec[$i]->case_size), 2) : '');
                $ordQty[$auRec[$i]->order_id][$auRec[$i]->item_id]['pcs'] = $pcs;
                $ordQty[$auRec[$i]->order_id][$auRec[$i]->item_id]['kg'] = $kg;
                $ordQty[$auRec[$i]->order_id][$auRec[$i]->item_id]['case'] = $cases;
            }

            if ($ordD->item_unit_type == "kg") {
                $kg = $auRec[$i]->quantity;
                $pcs = (($auRec[$i]->item_size != 0) ? ROUND((($auRec[$i]->quantity * 1000) / $auRec[$i]->item_size), 2) : '');
                $cases = (($auRec[$i]->case_size != 0) ? ROUND(($pcs / $auRec[$i]->case_size), 2) : '');


            }

            if ($ordD->item_unit_type == "cases") {
                $cases = $auRec[$i]->quantity;
                $pcs = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->case_size * $auRec[$i]->quantity), 2) : '');
                $kg = (($auRec[$i]->item_size != 0) ? ROUND((($pcs * $auRec[$i]->item_size) / 1000), 2) : '');

            }

            if ($invoiceQty == $auRec[$i]->quantity) {
                $status = "Fully Invoiced";
            } elseif ($invoiceQty > 0 && $invoiceQty < $auRec[$i]->quantity) {
                $status = "Partial Pending";
            } else {
                $status = "Fully Pending";
            }
            //    echo "<pre>";print_r($ordQty);


            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            //$json .= "ostype:'". $auRec[$i]->ostype . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';


            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';

            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->brand_name)))) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->offer_name)). '"';
            $json .= ',"' . ucwords(addslashes($pcs)) . '"';
            $json .= ',"' . ucwords(addslashes($kg)) . '"';
            $json .= ',"' . ucwords(addslashes($cases)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($auRec[$i]->total, 2))) . '"';
            $json .= ',"' . ucwords(addslashes($invoice_date)) . '"';
            $json .= ',"' . ucwords(addslashes($invoice_no)) . '"';
            $json .= ',"' . ucwords(addslashes($ipcs)) . '"';
            $json .= ',"' . ucwords(addslashes($ikg)) . '"';
            $json .= ',"' . ucwords(addslashes($icases)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($invoice_amt, 2))) . '"';


            $json .= ',"' . ucwords(addslashes($status)) . '"]';
//            $json .= ',"'.ucwords(addslashes($retailer_type)). '"]';
//            $json .= ',"'.$status.'"]';
            //$json .= ',"'.ucwords(str_replace($remove, ' ',addslashes($auRec[$i]->comments))).'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDisProductListNew($salesman)
    {
        //$salesman = "";
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $condition = '';
        if ($_SESSION['categoryID'] != '' && $_SESSION['categoryID'] != 'all') {
            $condition .= " c.category_id = " . $_SESSION['categoryID'] . " AND ";
        }
        if ($_SESSION['itemID'] != '' && $_SESSION['itemID'] != 'all') {
            $condition .= " D.item_id = " . $_SESSION['itemID'] . " AND ";
        }
        if ($_SESSION['FromProductList'] != '') {
            $fromdate = "  O.date_of_order  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
        } else {
            $fromdate = " O.date_of_order  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToProductList'] != '') {
            $todate = " O.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
        } else {
            $todate = "  O.date_of_order <= '" . date('Y-m-d') . "'";
        }
        //Added condition for role based access at brand lavel.
//        $RoleBrands = $this->getUserRoleBrand();
//        $brandCnd = '';
//        if(!empty($RoleBrands)){
//            $brandCnd = " and b.brand_id IN(".$RoleBrands.")";
//            if(isset($_SESSION['SalOrderList']) && $_SESSION['SalOrderList'] !='' && $_SESSION['SalOrderList'] !='All'){
//                $salesman  = $salesman ;
//            }else{
//                $salesman ='';
//            }
//        }
        //$groupby  = " GROUP BY table_order_detail.item_id having SUM(table_order_detail.quantity)!=0";
        //$groupby  = " AND o.order_id in (select order_id from table_order where ostype in ('D','R') AND order_type = 'Yes' AND order_status='A' AND $fromdate $todate ) group by o.item_id having SUM(o.quantity)!=0 ";
//        $groupby  = " GROUP BY D.item_id having D.item_id!=''";
        if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
            $RoleBrands = $this->getUserRoleBrand();
            if (!empty($RoleBrands)) {
                $salesman = " AND b.brand_id IN(" . $RoleBrands . ")";
            }
        }
        $where = " D.type=1 and O.account_id='" . $_SESSION['accountId'] . "' and $condition $fromdate $todate  $salesman ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_distributor_order_detail AS D 
		LEFT JOIN table_distributor_order AS O ON D.order_id = O.order_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
		
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN state as st on st.state_id=Dis.state
		LEFT JOIN city as ct on ct.city_id=Dis.city
		LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = Dis.state and szsm.account_id = Dis.account_id
        LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
		left join table_item_case_relationship as cr on cr.item_id=D.item_id
		left join table_cases as ca on ca.case_id=cr.case_id',
            'D.price, D.quantity,D.item_unit_type,D.total, I.item_name,I.item_code,I.item_size,ca.case_size,b.brand_name,sz.zone_name,
			I.item_erp_code,D.item_ptr_price as ptr_price,D.item_mrp_price as mrp_price, s.salesman_name, s.employee_code, 
			Dis.distributor_name,Dis.distributor_code,O.distributor_id,c.category_name,O.order_id,O.date_of_order,O.time_of_order,st.state_name,ct.city_name,D.remarks', $rp, $where . $sort, '');
        $disIdArr = [];

        // echo "<pre>";print_r($auRec);die;
        if (is_array($auRec) && (count($auRec) > 0)) {
            foreach ($auRec as $key => $auRecData) {
                if (isset($auRecData->distributor_id) && !empty($auRecData->distributor_id) && (intval($auRecData->distributor_id) > 0)) {
                    $disIdArr[] = $auRecData->distributor_id;
                }
            }
            $disIds = implode(',', array_unique($disIdArr));
            $getRetailerRoutes = $this->_getSelectList("table_route_retailer as rr 
LEFT JOIN table_route as r ON r.route_id = rr.route_id", "rr.distributor_id, GROUP_CONCAT(DISTINCT r.route_name SEPARATOR ' | ') as route_names", "", " rr.distributor_id IN($disIds) GROUP BY rr.distributor_id ORDER BY rr.distributor_id ASC ");
            $retailerWiseRoutesArr = [];
            if (is_array($getRetailerRoutes) && (count($getRetailerRoutes) > 0)) {
                foreach ($getRetailerRoutes as $key => $retRoutes) {
                    if (isset($retRoutes->route_names) && !empty($retRoutes->route_names)) {
                        $retailerWiseRoutesArr[$retRoutes->distributor_id] = $retRoutes->route_names;
                    }
                }
            }
        }
        $total = $this->_getSelectList2('table_distributor_order_detail AS D 
		LEFT JOIN table_distributor_order AS O ON D.order_id = O.order_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id		
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN state as st on st.state_id=Dis.state
		LEFT JOIN city as ct on ct.city_id=Dis.city', "COUNT(*) AS total", '', $where . $sort, '');

//        die(' die here');
        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            //if($auRec[$i]->new=="1"){$retailer_type='New Retailer';} else{$retailer_type='Existing Retailer';}

            $routeName = (isset($retailerWiseRoutesArr[$auRec[$i]->distributor_id]) && !empty($retailerWiseRoutesArr[$auRec[$i]->distributor_id])) ? $retailerWiseRoutesArr[$auRec[$i]->distributor_id] : '';
            $pcs = '';
            $kg = '';
            $cases = '';
            if (strtolower($auRec[$i]->item_unit_type) == "pcs") {
                $pcs = $auRec[$i]->quantity;
                $kg = (($auRec[$i]->item_size != 0) ? ROUND((($auRec[$i]->item_size * $auRec[$i]->quantity) / 1000), 2) : '');
                $cases = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->quantity / $auRec[$i]->case_size), 2) : '');
                $discount = number_format((($auRec[$i]->price * $pcs) - $auRec[$i]->total), 2);
            }

            if (strtolower($auRec[$i]->item_unit_type) == "kg") {
                $kg = $auRec[$i]->quantity;
                $pcs = (($auRec[$i]->item_size != 0) ? ROUND((($auRec[$i]->quantity * 1000) / $auRec[$i]->item_size), 2) : '');
                $cases = (($auRec[$i]->case_size != 0) ? ROUND(($pcs / $auRec[$i]->case_size), 2) : '');

                $discount = number_format((($auRec[$i]->price * $kg) - $auRec[$i]->total), 2);
            }

            if (strtolower($auRec[$i]->item_unit_type) == "cases") {
                $cases = $auRec[$i]->quantity;
                $pcs = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->case_size * $auRec[$i]->quantity), 2) : '');
                $kg = (($auRec[$i]->item_size != 0) ? ROUND((($pcs * $auRec[$i]->item_size) / 1000), 2) : '');
                $discount = number_format((($auRec[$i]->price * $cases) - $auRec[$i]->total), 2);
            }


            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            //$json .= "ostype:'". $auRec[$i]->ostype . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->zone_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';

            $json .= ',"' . ucwords(addslashes($routeName)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->brand_name)))) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->offer_name)). '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_erp_code)))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->price)) . '"';

            $json .= ',"' . ucwords(addslashes($pcs)) . '"';
            $json .= ',"' . ucwords(addslashes($kg)) . '"';
            $json .= ',"' . ucwords(addslashes($cases)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_size)) . '"';
            $json .= ',"' . ucwords(addslashes($discount)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total)) . '"';

//            $json .= ',"'.$auRec[$i]->total. '"';
            $json .= ',"' . $this->_changeDate($auRec[$i]->date_of_order) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->remarks)))) . '"]';
//            $json .= ',"'.ucwords(addslashes($retailer_type)). '"]';
//            $json .= ',"'.$status.'"]';
            //$json .= ',"'.ucwords(str_replace($remove, ' ',addslashes($auRec[$i]->comments))).'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


    //Todo Start : sudhanshu : 03 Jan 2024 : Cases, pcs, wise report for distributor invoice
    function showDisOrderInvoceStatus($salesman)
    {
        //$salesman = "";
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $condition = '';

        if ($_SESSION['dissOrderList'] != '' && $_SESSION['dissOrderList'] != 'all') {
            $condition .= " Dis.distributor_id = " . $_SESSION['dissOrderList'] . " AND ";
        }
        if ($_SESSION['FromOrdList'] != '') {
            $fromdate = "  O.date_of_order  >= '" . date('Y-m-d', strtotime($_SESSION['FromOrdList'])) . "' AND ";
        } else {
            $fromdate = " O.date_of_order  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToOrdList'] != '') {
            $todate = " O.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToOrdList'])) . "' ";
        } else {
            $todate = "  O.date_of_order <= '" . date('Y-m-d') . "'";
        }


        $where = "   O.account_id='" . $_SESSION['accountId'] . "' and $condition $fromdate $todate   ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_distributor_order_detail AS D 
		LEFT JOIN table_distributor_order AS O ON D.order_id = O.order_id
        
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		
	
		
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN state as st on st.state_id=Dis.state
		LEFT JOIN city as ct on ct.city_id=Dis.city
		LEFT JOIN table_location as loc on loc.location_id = Dis.location 
		left join table_item_case_relationship as cr on cr.item_id=D.item_id
		left join table_cases as ca on ca.case_id=cr.case_id',
            'D.price, D.quantity,D.item_unit_type,D.total, I.item_name,I.item_code,I.item_size,ca.case_size,b.brand_name,
			I.item_id,
			Dis.distributor_name,Dis.distributor_code,O.distributor_id,c.category_name,O.order_id,O.date_of_order,O.time_of_order,st.state_name,ct.city_name,D.remarks,loc.location_name', $rp, $where . $sort, '');


        $retIdArr = [];

        $total = $this->_getSelectList2('table_distributor_order_detail AS D 
		LEFT JOIN table_distributor_order AS O ON D.order_id = O.order_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		
	
		
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		LEFT JOIN state as st on st.state_id=Dis.state
		LEFT JOIN city as ct on ct.city_id=Dis.city
        LEFT JOIN table_location as loc on loc.location_id = Dis.location 
		left join table_item_case_relationship as cr on cr.item_id=D.item_id
		left join table_cases as ca on ca.case_id=cr.case_id', "COUNT(*) AS total", '', $where . $sort, '');

        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            //if($auRec[$i]->new=="1"){$retailer_type='New Retailer';} else{$retailer_type='Existing Retailer';}

            $ordRec = $this->_getSelectList2('table_distributor_invoice_detail AS D
          LEFT JOIN  table_distributor_invoice AS Inv ON D.invoice_id=Inv.invoice_id', "D.price, SUM(D.quantity) as quantity,SUM(D.total) as invoice_amt,Inv.bill_date,Inv.invoice_id", '', " Inv.ref_order_id = '" . $auRec[$i]->order_id . "' AND item_id = '" . $auRec[$i]->item_id . "'  ");
            $pcs = '';
            $kg = '';
            $cases = '';
            $ipcs = '';
            $ikg = '';
            $icases = '';
            $invoiceQty = 0;
            $ordQty = array();
            // print_r($ordRec);
            foreach ($ordRec as $ordD) {

                if ($auRec[$i]->item_unit_type == "pcs") {
                    $ipcs = $ordD->quantity;
                    $ikg = (($auRec[$i]->item_size != 0 && $ordD->quantity != 0) ? ROUND((($auRec[$i]->item_size * $ordD->quantity) / 1000), 2) : '');
                    $icases = (($auRec[$i]->case_size != 0 && $ordD->quantity != 0) ? ROUND(($ordD->quantity / $auRec[$i]->case_size), 2) : '');

                }

                if ($auRec[$i]->item_unit_type == "kg") {
                    $ikg = $ordD->quantity;
                    $ipcs = (($auRec[$i]->item_size != 0 && $ordD->quantity != 0) ? ROUND((($ordD->quantity * 1000) / $auRec[$i]->item_size), 2) : '');
                    $icases = (($auRec[$i]->case_size != 0 && $ordD->quantity != 0) ? ROUND(($ipcs / $auRec[$i]->case_size), 2) : '');


                }

                if ($auRec[$i]->item_unit_type == "cases") {
                    $icases = $ordD->quantity;
                    $ipcs = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->case_size * $ordD->quantity), 2) : '');
                    $ikg = (($auRec[$i]->item_size != 0) ? ROUND((($ipcs * $auRec[$i]->item_size) / 1000), 2) : '');

                }
                $invoice_amt = $ordD->invoice_amt;
                $invoiceQty = $ordD->quantity;
                $invoice_date = $this->_changeDate($ordD->bill_date);
                $invoice_no = $ordD->invoice_id;
            }


            if ($auRec[$i]->item_unit_type == "pcs") {
                $pcs = $auRec[$i]->quantity;
                $kg = (($auRec[$i]->item_size != 0) ? ROUND((($auRec[$i]->item_size * $auRec[$i]->quantity) / 1000), 2) : '');
                $cases = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->quantity / $auRec[$i]->case_size), 2) : '');
                $ordQty[$auRec[$i]->order_id][$auRec[$i]->item_id]['pcs'] = $pcs;
                $ordQty[$auRec[$i]->order_id][$auRec[$i]->item_id]['kg'] = $kg;
                $ordQty[$auRec[$i]->order_id][$auRec[$i]->item_id]['case'] = $cases;
            }

            if ($ordD->item_unit_type == "kg") {
                $kg = $auRec[$i]->quantity;
                $pcs = (($auRec[$i]->item_size != 0) ? ROUND((($auRec[$i]->quantity * 1000) / $auRec[$i]->item_size), 2) : '');
                $cases = (($auRec[$i]->case_size != 0) ? ROUND(($pcs / $auRec[$i]->case_size), 2) : '');


            }

            if ($ordD->item_unit_type == "cases") {
                $cases = $auRec[$i]->quantity;
                $pcs = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->case_size * $auRec[$i]->quantity), 2) : '');
                $kg = (($auRec[$i]->item_size != 0) ? ROUND((($pcs * $auRec[$i]->item_size) / 1000), 2) : '');

            }

            if ($invoiceQty == $auRec[$i]->quantity) {
                $status = "Fully Invoiced";
            } elseif ($invoiceQty > 0 && $invoiceQty < $auRec[$i]->quantity) {
                $status = "Partial Pending";
            } else {
                $status = "Fully Pending";
            }
            //    echo "<pre>";print_r($ordQty);


            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            //$json .= "ostype:'". $auRec[$i]->ostype . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';


            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';

            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->brand_name)))) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->offer_name)). '"';
            $json .= ',"' . ucwords(addslashes($pcs)) . '"';
            $json .= ',"' . ucwords(addslashes($kg)) . '"';
            $json .= ',"' . ucwords(addslashes($cases)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($auRec[$i]->total, 2))) . '"';
            $json .= ',"' . ucwords(addslashes($invoice_date)) . '"';
            $json .= ',"' . ucwords(addslashes($invoice_no)) . '"';
            $json .= ',"' . ucwords(addslashes($ipcs)) . '"';
            $json .= ',"' . ucwords(addslashes($ikg)) . '"';
            $json .= ',"' . ucwords(addslashes($icases)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($invoice_amt, 2))) . '"';


            $json .= ',"' . ucwords(addslashes($status)) . '"]';
//            $json .= ',"'.ucwords(addslashes($retailer_type)). '"]';
//            $json .= ',"'.$status.'"]';
            //$json .= ',"'.ucwords(str_replace($remove, ' ',addslashes($auRec[$i]->comments))).'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : sudhanshu : 03 Jan 2024 : Cases, pcs, wise report for distributor invoice


    // Todo Start : sudhanshu : stockist GRN status report : 09 Jan 2024
    function showStockistInProcessReport()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'c.category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " b.brand_id IN(" . $RoleBrands . ")";
        }
        $where = $brandCnd;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($_SESSION['stockistId'] != "" && $_SESSION['stockistId'] != '0') {
            $dis = " and st.stockist_id='" . $_SESSION['stockistId'] . "'";
        }
        $auRec = $this->_getSelectList('table_item_stockist_stk_inprocess AS s 
		LEFT JOIN table_cases AS clr ON clr.case_id = s.attribute_value_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		LEFT JOIN table_stockist AS st ON st.stockist_id = s.stockist_id', "st.stockist_code, 
		st.stockist_name,st.gst_no,st.pan_no,b.brand_name,
		c.category_name, clr.case_size, i.item_name, i.item_code, s.acpt_stock_value,s.price, s.rec_stock_value, s.status, 
		s.bill_no,s.bill_date,(s.rec_stock_value-s.acpt_stock_value) as pending_qty,s.GRN_date,
		s.last_update_datetime,s.stockist_stk_inpro_id,s.sgst_amount,s.cgst_amount,
		s.igst_amount,s.cess_amount", $rp, $where . $dis . $sort, '');
        $auRecCount = $this->_getSelectList('table_item_stockist_stk_inprocess AS s 
		LEFT JOIN table_cases AS clr ON clr.case_id = s.attribute_value_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		LEFT JOIN table_stockist AS st ON st.stockist_id = s.stockist_id', 'count(*) as total', '', $where . $dis);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Accepted" : "In-Process";
            if ($auRec[$i]->GRN_date != '0000-00-00 00:00:00') {
                $grn_date = $this->_changeDate($auRec[$i]->GRN_date);
            } else {
                $grn_date = '';
            }

            //$status='<a href=\"master_category.php?stid='.$auRec[$i]->category_id.'&value='.$status.'\">'.$status.'</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stockist_stk_inpro_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->stockist_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->stockist_name) . '"';
            $json .= ',"' . addslashes(strtoupper($auRec[$i]->gst_no)) . '"';
            $json .= ',"' . addslashes(strtoupper($auRec[$i]->pan_no)) . '"';
            $json .= ',"' . addslashes(strtoupper($auRec[$i]->bill_no)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->bill_date) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            //$json .= ',"'.addslashes($auRec[$i]->case_size). '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rec_stock_value) . '"';
            $json .= ',"' . addslashes($auRec[$i]->acpt_stock_value) . '"';
            $json .= ',"' . addslashes($auRec[$i]->pending_qty) . '"';
            $json .= ',"' . addslashes($auRec[$i]->price) . '"';
            $json .= ',"' . addslashes($auRec[$i]->invoice_value) . '"';
            $json .= ',"' . addslashes($auRec[$i]->taxable_value) . '"';
            $json .= ',"' . addslashes($auRec[$i]->sgst_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->cgst_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->igst_amount) . '"';
            $json .= ',"' . addslashes($auRec[$i]->cess_amount) . '"';
            $json .= ',"' . addslashes($status) . '"';
            $json .= ',"' . addslashes($grn_date) . '"';
            // change date format : sudhanshu 11 march 2024
            $json .= ',"' . addslashes(date('d M Y H:i:s', strtotime($auRec[$i]->last_update_datetime))) . '"]';
            //$json .= ',"'.$status.'"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    // Todo End : sudhanshu : stockist GRN status report : 09 Jan 2024
    /*********************************************************************************************/
    // Distributor Claim report created by Sachin On 12 jan 2024
    function showDistributorClaimReport()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname)
            $sortname = ' o.bill_date,o.invoice_id,od.item_id';
        if (!$sortorder)
            $sortorder = ' DESC ';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['retailer'] != '') {
            $retailer = " and o.retailer_id='" . $_SESSION['retailer'] . "'";
        }
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.bill_date >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
            $frombilldate = " and di.last_update_date >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.bill_date >= '" . date('Y-m-d') . "'";
            $frombilldate = " and di.last_update_date >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.bill_date <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
            $tobilldate = " and di.last_update_date <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.bill_date <= '" . date('Y-m-d') . "'";
            $tobilldate = " and di.last_update_date <= '" . date('Y-m-d') . "'";
        }

        if ($_SESSION['distributorId'] > 0) {
            $distributorCond = " AND o.distributor_id ='" . $_SESSION['distributorId'] . "' ";
        }


        $where = " o.account_id=" . $_SESSION['accountId'] . " AND o.invoice_status='A' and o.order_type IN('Yes','Adhoc') and o.distributor_id!='' 
		 $fromdate $todate $frombilldate $tobilldate $distributorCond $retailer";

        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('view_discounted_invoice as di
			inner join table_invoice as o on o.order_id=di.invoice_id
			inner join table_invoice_detail as od on od.invoice_id=o.order_id
			left join table_item as i on i.item_id=od.item_id
			LEFT JOIN table_item_gst AS ig ON ig.item_id = i.item_id
			left join table_price as p on p.item_id=i.item_id
			left join table_salesman as s on s.salesman_id = o.salesman_id
			left join table_retailer as r on r.retailer_id=o.retailer_id
			left join table_distributors as d on d.distributor_id=o.distributor_id
			left join table_stockist as stk on stk.stockist_id = d.stockist_id',
            "o.invoice_id,o.bill_no,o.bill_date,o.order_type,o.invoice_status,o.distributor_id,o.retailer_id,stk.stockist_code,stk.stockist_name,
			od.item_id,od.price as ordered_price,od.quantity,od.discount_desc,od.discount_type,od.custom_discount_amount,s.salesman_name,s.employee_code,
			od.custom_discount_percentage,
			i.item_name,i.item_code,ifnull(ig.tax,0) as dis_tax,r.retailer_name,r.retailer_code,d.distributor_name,d.distributor_code,
			p.item_dp as item_mrp,p.item_mrp as item_ptr,ROUND(ifnull((p.dist_price+((p.dist_price*ifnull(ig.tax,0))/100)),0),2) as dist_price,if((od.discount_type = 3 AND od.free_item_id >0),'FOC','') as free_issues",
            $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('view_discounted_invoice as di
		inner join table_invoice as o on o.order_id=di.invoice_id
		inner join table_invoice_detail as od on od.invoice_id=o.order_id
		left join table_item as i on i.item_id=od.item_id
		left join table_price as p on p.item_id=i.item_id
		left join table_retailer as r on r.retailer_id=o.retailer_id
		left join table_distributors as d on d.distributor_id=o.distributor_id',
            'count(*) as total', '', $where);

        //Todo Start: sudhanshu 02 May 2024 : get multiple mapped stockist
        $mappedStk = $this->_getSelectList('table_stockist_distributor_mapping  as sm
		
		left join table_stockist AS s ON s.stockist_id = sm.stockist_id
		',
            'GROUP_CONCAT(s.stockist_name," (",s.stockist_code,") " SEPARATOR "|") as stocksit_name,distributor_id', '', ' s.status="A" GROUP BY sm.distributor_id');

        $distributorMappedStokckist = [];
        if (is_array($mappedStk) && count($mappedStk) > 0) {
            foreach ($mappedStk as $disStokist) {
                $distributorMappedStokckist[$disStokist->distributor_id] = $disStokist->stocksit_name;
            }
        }

        //Todo End: sudhanshu 02 May 2024 : get multiple mapped stockist
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";

        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $color = '';
            $date_of_invoice = $this->_changeDate($auRec[$i]->bill_date);
            $PTR_After_Discount = $DistributorMargin = $ClaimAmount = $TotalClaimAmount = 0;
            if ($auRec[$i]->custom_discount_percentage > 0) {
                $color = 'O';
                $PTR_After_Discount = ROUND(($auRec[$i]->item_ptr - ($auRec[$i]->custom_discount_amount / $auRec[$i]->quantity)), 2);
                $DistributorMargin = ROUND((($PTR_After_Discount / 110) * 10), 2); //"((Price After Discount/(110))*10)";
                $ClaimAmount = ROUND((($auRec[$i]->dist_price - $PTR_After_Discount) + $DistributorMargin), 2); // DLP-PTR After Discount+Distributor Margin of per unit;
                $TotalClaimAmount = ROUND(($ClaimAmount * $auRec[$i]->quantity), 2);
            } else if ($auRec[$i]->free_issues == 'FOC') {
                $color = 'A';
                $PTR_After_Discount = ROUND($auRec[$i]->item_ptr, 2);
                $DistributorMargin = 0;
                $ClaimAmount = 0; //ROUND($auRec[$i]->dist_price,2);
                $TotalClaimAmount = 0; //ROUND(($ClaimAmount*$auRec[$i]->quantity),2);

            } else if ($auRec[$i]->free_issues != 'FOC' && $auRec[$i]->custom_discount_percentage == 0) {
                $PTR_After_Discount = ROUND(($auRec[$i]->item_ptr), 2);
                $DistributorMargin = $ClaimAmount = $TotalClaimAmount = 0;

            }

            $colortd = '';
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r", "'", "`");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->invoice_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            //Todo Start : sudhanshu 02 may 2024 multiple mapped stockist
            //$json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_code)) . '"';
            $json .= ',"' . ucwords(addslashes($distributorMappedStokckist[$auRec[$i]->distributor_id])) . '"';
            //Todo End : sudhanshu 02 may 2024 multiple mapped stockist
            $json .= ',"' . ucwords(addslashes($date_of_invoice)) . '"';
            $json .= ',"' . (addslashes($auRec[$i]->bill_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . (addslashes($auRec[$i]->quantity)) . '"';
            $json .= ',"' . (addslashes($auRec[$i]->item_mrp)) . '"';
            $json .= ',"' . (addslashes($auRec[$i]->item_ptr)) . '"';
            $json .= ',"' . (addslashes($auRec[$i]->free_issues)) . '"';
            $json .= ',"' . (addslashes($auRec[$i]->custom_discount_percentage)) . '"';
            $json .= ',"' . ROUND(($auRec[$i]->custom_discount_amount / $auRec[$i]->quantity), 2) . '"';
            $json .= ',"' . (addslashes($auRec[$i]->custom_discount_amount)) . '"';
            $json .= ',"' . $PTR_After_Discount . '"';
            $json .= ',"' . $auRec[$i]->dist_price . '"';
            $json .= ',"' . $DistributorMargin . '"';
            $json .= ',"' . $ClaimAmount . '"';
            $json .= ',"' . $TotalClaimAmount . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function checkUniqueScheme($discountid, $schemeName = '',$partytype='')
    {
        $flag = false;
        if (!empty($discountid) && $discountid > 0) {
            if($partytype!='4'){ 
            $Aurecd = $this->_getSelectList2('table_discount_detail as ds
					inner join table_discount_item as di on di.discount_id=ds.discount_id
					left join table_item as i on i.item_id=di.item_id
					INNER JOIN table_discount as d on d.discount_id=ds.discount_id',
                "ds.discount_id,ds.discount_desc,ds.minimum_quantity,ds.discount_percentage,
					di.item_id,d.start_date,d.end_date", '',
                " d.discount_id=" . $discountid);

            if (is_array($Aurecd) && count($Aurecd) > 0) {
                $SchemeDesc = ((!empty($schemeName)) ? $schemeName : $Aurecd[0]->discount_desc);
                $MinimumQty = $Aurecd[0]->minimum_quantity;
                $BenefitPer = $Aurecd[0]->discount_percentage;
                $FromDate = $Aurecd[0]->start_date;
                $ToDate = $Aurecd[0]->end_date;
                $item_id = $Aurecd[0]->item_id;

                $ExsAurecd = $this->_getSelectList2('table_discount_detail as ds
					inner join table_discount_item as di on di.discount_id=ds.discount_id
					left join table_item as i on i.item_id=di.item_id
					INNER JOIN table_discount as d on d.discount_id=ds.discount_id',
                    "ds.discount_id", '',
                    " d.discount_id != " . $discountid . " AND d.account_id=" . $_SESSION['accountId'] . " AND ds.discount_desc = '" . $SchemeDesc . "' AND 
					ds.minimum_quantity = '" . $MinimumQty . "' AND ds.discount_percentage = '" . $BenefitPer . "'
					AND di.item_id='" . $item_id . "'	AND d.start_date='" . $FromDate . "' AND d.end_date='" . $ToDate . "' and d.status='A'");

                if (is_array($ExsAurecd) && count($ExsAurecd) > 0) {
                    $flag = true;
                }
            }
        }else{
            $Aurecd = $this->_getSelectList2('table_discount_detail as ds
					INNER JOIN table_discount as d on d.discount_id=ds.discount_id',
                "ds.discount_id,ds.discount_desc,ds.minimum_quantity,ds.discount_percentage,
					d.start_date,d.end_date", '',
                " d.discount_id=" . $discountid);

            if (is_array($Aurecd) && count($Aurecd) > 0) {
                $SchemeDesc = ((!empty($schemeName)) ? $schemeName : $Aurecd[0]->discount_desc);
                $MinimumQty = $Aurecd[0]->minimum_quantity;
                $BenefitPer = $Aurecd[0]->discount_percentage;
                $FromDate = $Aurecd[0]->start_date;
                $ToDate = $Aurecd[0]->end_date;
                $item_id = '';

                $ExsAurecd = $this->_getSelectList2('table_discount_detail as ds
					INNER JOIN table_discount as d on d.discount_id=ds.discount_id',
                    "ds.discount_id", '',
                    " d.discount_id != " . $discountid . " AND d.account_id=" . $_SESSION['accountId'] . " AND ds.discount_desc = '" . $SchemeDesc . "' AND 
					ds.minimum_quantity = '" . $MinimumQty . "' AND ds.discount_percentage = '" . $BenefitPer . "'
						AND d.start_date='" . $FromDate . "' AND d.end_date='" . $ToDate . "' and d.status='A'");

                if (is_array($ExsAurecd) && count($ExsAurecd) > 0) {
                    $flag = true;
                }
            }  
        }
        }
        return $flag;
    }


    // Todo Start : Jatin : 1 Feb 2024 : Show Parent Master Report

    function showParentMaster($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname)
            $sortname = ' p.created_on ,p.id';
        if (!$sortorder)
            $sortorder = ' DESC ';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if ($_SESSION['frmdDate'] != '') {
            $fromdate = " and p.created_on >= '" . date('Y-m-d', strtotime($_SESSION['frmdDate'])) . "'";
        }
//        else {
//            $fromdate = " and p.created_on >= '" . date('Y-m-d') . "'";
//        }
        if ($_SESSION['todDate'] != '') {
            $todate = " and p.created_on <= '" . date('Y-m-d', strtotime($_SESSION['todDate'])) . "'";
        }
//        else {
//            $todate = " and p.created_on <= '" . date('Y-m-d') . "'";
//        }

        $where = "  $fromdate $todate ";

        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_parent_master as p 
        left join table_salesman as s on s.salesman_id = p.added_by
        left join state as st on st.state_id = p.state
        left join city as c on c.city_id = p.district
        left join table_location as loc on loc.location_id = p.city
        left join table_parent_customer_type_master as ctype on ctype.id = p.cust_type_id
        left join table_project_designation as cdm on cdm.id = p.designation
        left join table_project_designation as cdm1 on cdm1.id = p.designation1',
            "p.*,st.state_name,loc.location_name,c.city_name,ctype.customer_type,cdm.designation as desg,	
            cdm1.designation as desg1,s.salesman_name",
            $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList('table_parent_master as p 
        left join table_salesman as s on s.salesman_id = p.added_by
        left join state as st on st.state_id = p.state
        left join city as c on c.city_id = p.district
        left join table_location as loc on loc.location_id = p.city
        left join table_parent_customer_type_master as ctype on ctype.id = p.cust_type_id
        left join table_project_designation as cdm on cdm.id = p.designation
        left join table_project_designation as cdm1 on cdm1.id = p.designation1',
            'count(p.id) as total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";

        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {

            $targetBlank = '';
            $link = '<a href=\"view_parent_salesman_mapping.php?salmapId=' . base64_encode($auRec[$i]->id) . '\" ' . $targetBlank . '>View Mapping</a>';

            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"parent_master.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' .
                $status .
                '</a>';
            $colortd = '';
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r", "'", "`");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->parent_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->parent_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->address)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->phoneno)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->customer_type)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_number)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->desg)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_name1)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_number1)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->desg1)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords($this->_changeDate($auRec[$i]->created_on)) . '"';
            $json .= ',"' . ucwords($auRec[$i]->updated_on) . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . $link . '"]';

            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Jatin : 1 Feb 2024 : Show Parent Master Report


    // Todo Start : Jatin :  2 Feb 2024 : add Edit Parent Master

    function addParentMaster()
    {
        $data = [];

        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['parent_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim
        ($_POST['parent_name'])));
        $data['address'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9,." "]/', trim($_POST['address'])));
        $data['phoneno'] = mysql_escape_string($_POST['phoneno']);
        $data['state'] = mysql_escape_string($_POST['state_id']);
        $data['district'] = mysql_escape_string($_POST['city_id']);
        $data['city'] = mysql_escape_string($_POST['location_id']);
        $data['cust_type_id'] = mysql_escape_string($_POST['cust_type_id']);
        $data['contact_name'] = mysql_escape_string($_POST['contact_name']);
        $data['contact_number'] = mysql_escape_string($_POST['contact_number']);
        $data['designation'] = mysql_escape_string($_POST['designation']);
        $data['contact_name1'] = mysql_escape_string($_POST['contact_name1']);
        $data['contact_number1'] = mysql_escape_string($_POST['contact_number1']);
        $data['designation1'] = mysql_escape_string($_POST['designation1']);
        $data['added_by'] = mysql_escape_string($_POST['added_by']);
        $data['created_on'] = mysql_escape_string(date('Y-m-d'));
        $data['updated_on'] = mysql_escape_string(date('Y-m-d H:i:s'));
//        $data['created_by'] = mysql_escape_string($_POST['created_by']);
//        $data['updated_by'] = mysql_escape_string($_POST['updated_by']);
        //echo "<pre>";print_R($data);die;

        $id = $this->_dbInsert($data, 'table_parent_master');
        if ($id > 0) {

            $surcode['parent_code'] = "PAR" . $id;
            $this->_dbUpdate2($surcode, 'table_parent_master', "id=" . $id);
        }

        return $id;
    }

    function updateParentMaster($id)
    {
        $data = [];

        $data['parent_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim
        ($_POST['parent_name'])));
        $data['address'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9,." "]/', trim($_POST['address'])));
        $data['phoneno'] = mysql_escape_string($_POST['phoneno']);
        $data['state'] = mysql_escape_string($_POST['state_id']);
        $data['district'] = mysql_escape_string($_POST['city_id']);
        $data['city'] = mysql_escape_string($_POST['location_id']);
        $data['cust_type_id'] = mysql_escape_string($_POST['cust_type_id']);
        $data['contact_name'] = mysql_escape_string($_POST['contact_name']);
        $data['contact_number'] = mysql_escape_string($_POST['contact_number']);
        $data['designation'] = mysql_escape_string($_POST['designation']);
        $data['contact_name1'] = mysql_escape_string($_POST['contact_name1']);
        $data['contact_number1'] = mysql_escape_string($_POST['contact_number1']);
        $data['designation1'] = mysql_escape_string($_POST['designation1']);
        $data['added_by'] = mysql_escape_string($_POST['added_by']);
        $data['created_on'] = mysql_escape_string(date('Y-m-d'));
        $data['updated_on'] = mysql_escape_string(date('Y-m-d H:i:s'));
//        $data['created_by'] = mysql_escape_string($_POST['created_by']);
//        $data['updated_by'] = mysql_escape_string($_POST['updated_by']);

        $id = $this->_dbUpdate($data, 'table_parent_master', " id=" . $id);


        return $id;
    }

// Todo End : Jatin :  2 Feb 2024 : add Edit Parent Master

    function showParentCustomerType()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasCustTypeMas']) && $_SESSION['MasCustTypeMas'] != 'all' && $_SESSION['MasCustTypeMas'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasCustTypeMas'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_parent_customer_type_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_parent_customer_type_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"parent_customer_type_master.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->customer_type) . '"';


            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addParentCustomerType()
    {
        //echo "hii";die;
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['customer_type'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9.&" "]/', trim($_POST['customer_type'])));
        $data['created_on'] = date('Y-m-d H:i:s');

        $data['status'] = 'A';

        $id = $this->_dbInsert($data, 'table_parent_customer_type_master');
        return $id;
    }

    function updateParentCustomerType($id)
    {
        $data['customer_type'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9.&" "]/', trim($_POST['customer_type'])));

        $data['updated_on'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_parent_customer_type_master', " id=" . $id);
        return $id;
    }


    function showParentContactDesignation()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasContDesigM']) && $_SESSION['MasContDesigM'] != 'all' && $_SESSION['MasContDesigM'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasContDesigM'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter

        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_parent_contact_designation_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_parent_contact_designation_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"parent_contact_designation.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->designation) . '"';


            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addParentContactDesignation()
    {
        //echo "hii";die;
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['designation'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9.&" "]/', trim($_POST['designation'])));
        $data['created_on'] = date('Y-m-d H:i:s');

        $data['status'] = 'A';

        $id = $this->_dbInsert($data, 'table_parent_contact_designation_master');
        return $id;
    }

    function updateParentContactDesignation($id)
    {
        $data['designation'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9.&" "]/', trim($_POST['designation'])));

        $data['updated_on'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_parent_contact_designation_master', " id=" . $id);
        return $id;
    }


    // Todo : Start : 4 Dec 2023 : Dynamic Retailer order list batch wise

    function DynamicshowbatchWiseSalesReturn($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query == 'Yes') {
            $query = 'Y';
        } elseif ($query == 'No') {
            $query = 'N';
        }
        // echo "<pre>"; print_r($_SESSION);
        $queryConditions = '';
        if (isset($_SESSION['fil_from']) && !empty($_SESSION['fil_from'])) {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['fil_from'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if (isset($_SESSION['fil_to']) && !empty($_SESSION['fil_to'])) {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['fil_to'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $queryConditions .= " AND o.distributor_id=" . $_SESSION['distributorId'];
        } else if (isset($_SESSION['fil_distributor']) && !empty($_SESSION['fil_distributor']) && $_SESSION['fil_distributor'] > 0) {
            $queryConditions .= " AND o.distributor_id=" . $_SESSION['fil_distributor'];
        }

        if ($_SESSION['userLoginType'] == 7 && $_SESSION['stockistId'] != "" && $_SESSION['stockistId'] > 0) {
            $queryConditions .= " AND d.stockist_id=" . $_SESSION['stockistId'];

        } else if (isset($_SESSION['fil_stockist']) && !empty($_SESSION['fil_stockist']) && $_SESSION['fil_stockist'] > 0) {
            $queryConditions .= " AND d.stockist_id=" . $_SESSION['fil_stockist'];
        }
        $salesmanCnd = "";
        if ($_SESSION['userLoginType'] == 5) {
            $salesmanCnd = str_replace("s.", "o.", $salesman);
        }

        if (isset($_SESSION['fil_salesman']) && !empty($_SESSION['fil_salesman']) && $_SESSION['fil_salesman'] > 0) {
            $salesmanCnd = " AND o.salesman_id=" . $_SESSION['fil_salesman'];
        } else if (isset($_SESSION['fil_salesman_manager']) && ($_SESSION['fil_salesman_manager'] > 0)) {
            $salesmanManagerId = $_SESSION['fil_salesman_manager'];
            $account_id = $_SESSION['accountId'];
            $res = $this->_getSelectList2('table_salesman_hierarchy_relationship AS SHR 
				LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
				LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id', 's.salesman_id,SH.hierarchy_id,SH.sort_order', '', " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanManagerId ORDER BY SH.sort_order ASC ");

            if (is_array($res) && (count($res) > 0)) {
                $sortOrder = $res[0]->sort_order;
                $_objArrayList = new ArrayList();
                $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanManagerId), $sortOrder, $account_id);

                if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                    $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                }

                $salesmanCnd = " AND o.salesman_id IN($bottomUsersIds) ";
            }
        } else if (isset($_SESSION['fil_salesman_designation']) && ($_SESSION['fil_salesman_designation'] > 0)) {
            $_objArrayList = new ArrayList();
            $account_id = $_SESSION['accountId'];
            $getDesignationWiseBottomUsersIdArr = $_objArrayList->getDesignationWiseBottomUsers($_SESSION['fil_salesman_designation'], $account_id);

            if (is_array($getDesignationWiseBottomUsersIdArr) && (count($getDesignationWiseBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getDesignationWiseBottomUsersIdArr);
                $salesmanCnd .= " AND o.salesman_id IN($bottomUsersIds) ";
            }
        } else {
            $salesmanCnd .= '';
        }
        //echo $bottomUsersIds; die;
        if (isset($_SESSION['fil_retailer']) && !empty($_SESSION['fil_retailer']) && $_SESSION['fil_retailer'] > 0) {
            $queryConditions .= " AND o.retailer_id=" . $_SESSION['fil_retailer'];
        }
        if (isset($_SESSION['fil_salesman_state']) && !empty($_SESSION['fil_salesman_state']) && $_SESSION['fil_salesman_state'] > 0) {
            $queryConditions .= " AND s.state=" . $_SESSION['fil_salesman_state'];
        }
        if (isset($_SESSION['fil_retailer_state']) && !empty($_SESSION['fil_retailer_state']) && $_SESSION['fil_retailer_state'] > 0) {
            $queryConditions .= " AND r.state=" . $_SESSION['fil_retailer_state'];
        }
        if (isset($_SESSION['fil_distributor_state']) && !empty($_SESSION['fil_distributor_state']) && $_SESSION['fil_distributor_state'] > 0) {
            $queryConditions .= " AND d.state=" . $_SESSION['fil_distributor_state'];
        }

        if (isset($_SESSION['fil_salesman_zone']) && !empty($_SESSION['fil_salesman_zone']) && $_SESSION['fil_salesman_zone'] > 0) {
            $queryConditions .= " AND zms.zone_id=" . $_SESSION['fil_salesman_zone'];
        }
        if (isset($_SESSION['fil_retailer_zone']) && !empty($_SESSION['fil_retailer_zone']) && $_SESSION['fil_retailer_zone'] > 0) {
            $queryConditions .= " AND zmr.zone_id=" . $_SESSION['fil_retailer_zone'];
        }
        if (isset($_SESSION['fil_distributor_zone']) && !empty($_SESSION['fil_distributor_zone']) && $_SESSION['fil_distributor_zone'] > 0) {
            $queryConditions .= " AND zmd.zone_id=" . $_SESSION['fil_distributor_zone'];
        }
        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $firstDate = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $lastdate = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $fromdate = " and o.date_of_order >= '" . $firstDate . "'";
            $todate = " and o.date_of_order <= '" . $lastdate . "'";
        }

//		if(isset($_SESSION['fil_order_status']) && !empty($_SESSION['fil_order_status'])){
//			$queryConditions .= " AND o.order_status='".$_SESSION['fil_order_status']."'";
//		}
//		else{
//			//$queryConditions .=" and order_status IN('A','I') ";
//		}
        if (isset($_SESSION['fil_order_type']) && !empty($_SESSION['fil_order_type'])) {
            $queryConditions .= " AND o.order_type='" . $_SESSION['fil_order_type'] . "'";
        }
//		else{
//			//$queryConditions .=" AND o.order_type !='Return'";
//            }

        $queryConditions = $queryConditions . $salesmanCnd . $fromdate . $todate;

        $rtype = " o.type='R' ";
        $odrDtlJoin = "";
        $odrDtlgrpBy = "";
        if ($rtype) {
            if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
                $RoleBrands = $this->getUserRoleBrand();
                if (!empty($RoleBrands)) {
                    $salesman = " AND i.brand_id IN(" . $RoleBrands . ")";

                    $odrDtlgrpBy = " GROUP BY o.sales_order_id ";
                }
            }
            $where = $queryConditions;
            if ($query) $where .= " AND $qtype LIKE '%$query%' ";
            $auRec = $this->_getSelectList("table_sales_return as o    
			left join table_sales_return_detail as ord on ord.sales_order_id = o.sales_order_id
            left join table_item as i on i.item_id = ord.item_id
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id
            left join table_salesman_hierarchy_relationship as shr on shr.salesman_id = s.salesman_id
            left join table_salesman as s2 on s2.salesman_id=shr.rpt_user_id
            left join table_distributors as d on r.distributor_id=d.distributor_id             
            left join state as str on str.state_id=r.state 
            left join state as sts on sts.state_id=s.state 
            left join state as std on std.state_id=d.state 
            left join city as c on c.city_id=r.city
            left join city as dc on dc.city_id=d.city 
			left join table_zone_state_mapping as zms on zms.state_id=s.state and zms.account_id = s.account_id
			left join table_zone as sz on sz.zone_id=zms.zone_id 
			left join table_zone_state_mapping as zmr on zmr.state_id=r.state and zmr.account_id = r.account_id
			left join table_zone as rz on rz.zone_id=zmr.zone_id
			left join table_zone_state_mapping as zmd on zmd.state_id=d.state and zmd.account_id = d.account_id
			left join table_zone as dz on dz.zone_id=zmd.zone_id",
                "o.sales_order_id,count(ord.item_id) as total_item,SUM(ord.acc_quantity) as total_ordered_qty,o.retailer_id,o.order_type,o.order_status,o.lat,
			o.date_of_order,o.time_of_order,
r.retailer_name,r.retailer_code,
r.lng as retlng,s.salesman_name,s.employee_code,
d.distributor_name,d.distributor_code,rz.zone_name as ret_zone,dz.zone_name as dist_zone,str.state_name as ret_state,std.state_name as dist_state,c.city_name,dc.city_name as dis_city,o.photo_count", $rp, $where . " group by o.sales_order_id " . $sort, '');

            $auRecCount = $this->_getSelectList("table_sales_return as o $odrDtlJoin           
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id            
            left join table_distributors as d on r.distributor_id=d.distributor_id 
            left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id
            left join state as str on str.state_id=r.state 
            left join state as sts on sts.state_id=s.state 
            left join state as std on std.state_id=d.state
			left join table_zone_state_mapping as zms on zms.state_id=s.state and zms.account_id = s.account_id
			left join table_zone as sz on sz.zone_id=zms.zone_id 
			left join table_zone_state_mapping as zmr on zmr.state_id=r.state and zmr.account_id = r.account_id
			left join table_zone as rz on rz.zone_id=zmr.zone_id
			left join table_zone_state_mapping as zmd on zmd.state_id=d.state and zmd.account_id = d.account_id
			left join table_zone as dz on dz.zone_id=zmd.zone_id			
			", 'COUNT(o.sales_order_id) as total', '', $where . $odrDtlgrpBy . $sort);

            $total = $auRecCount[0]->total;
            if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
                if (!empty($RoleBrands)) {
                    $total = count($auRecCount);
                }
            } else {
                $total = $auRecCount[0]->total;
            }

        }


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {


            $orderType = '';


            //Retailer location maping only survey table
            if ($auRec[$i]->lat != '') {
                $map = '<a href="sales_return_map.php?utype=q&ord=' . base64_encode($auRec[$i]->sales_order_id) . '" ' . $targetBlank . '>View on Map</a>';
                $colortd = "out";
            } else {
                $map = "-";
                $colortd = "out";
            }
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            $date_of_delivery = $this->_changeDate($auRec[$i]->delivery_date);

            $ttlItems = $auRec[$i]->total_item;
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->sales_order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';


//            $json .= ',"'.ucwords(addslashes($auRec[$i]->region_name)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dist_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dist_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_city)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_zone)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($ttlItems)) . '"';
            $json .= ',"' . ucwords(addslashes($map)) . '"';
            $json .= ',"' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';


            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"]';

            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo : End : 4 Dec 2023 : Dynamic Retailer order list batch wise

    function showProjectContactDesignation()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasContDesi']) && $_SESSION['MasContDesi'] != 'all' && $_SESSION['MasContDesi'] != '') {
            $statusCondi = " status ='" . $_SESSION['MasContDesi'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter
        $where = " $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_project_designation', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_project_designation', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"project_contact_designation_master.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->designation) . '"';


            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addProjectContactDesignation()
    {
        //echo "hii";die;
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['designation'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9.&" "]/', trim($_POST['designation'])));
        $data['created_on'] = date('Y-m-d H:i:s');

        $data['status'] = 'A';

        $id = $this->_dbInsert($data, 'table_project_designation');
        return $id;
    }

    function updateProjectContactDesignation($id)
    {
        $data['designation'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9.&" "]/', trim($_POST['designation'])));

        $data['updated_on'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_project_designation', " id=" . $id);
        return $id;
    }


    // Todo Start : Jatin : 12 Feb 2024 : Show Project Master Report

    function showProjectMaster($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname)
            $sortname = ' p.created_on ,p.id';
        if (!$sortorder)
            $sortorder = '  ';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $dateApplyon = 'created_on';
        if (isset($_SESSION['datetype']) && $_SESSION['datetype'] == 'updatedon') {
            $dateApplyon = 'updated_on';
        }
        if ($_SESSION['frmDate'] != '') {
            $fromdate = " and p.$dateApplyon >= '" . date('Y-m-d', strtotime($_SESSION['frmDate'])) . "'";
        }
//        else {
//            $fromdate = " and p.$dateApplyon >= '" . date('Y-m-d') . "'";
//        }
        if ($_SESSION['toDate'] != '') {
            $todate = " and p.$dateApplyon <= '" . date('Y-m-d', strtotime($_SESSION['toDate'])) . "'";
        }
//        else {
//            $todate = " and p.$dateApplyon <= '" . date('Y-m-d') . "'";
//        }
        if (isset($_SESSION['pdId']) && !empty($_SESSION['pdId'])) {
            $condi1 = $_SESSION['pdId'];
        }


        $where = "  $fromdate $todate $condi1";

        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_project_master as p 
        left join table_parent_master par on par.id = p.parent_id
        left join table_project_contact_mapping as pcm on pcm.id = p.contact_id
        left join table_salesman as s on s.salesman_id = p.assign_to
        left join state as st on st.state_id = p.state
        left join city as c on c.city_id = p.district
        left join table_location as loc on loc.location_id = p.city
        left join table_project_distributor_mapping as dism on dism.project_id = p.id
        left join table_parent_contact_designation_master as pcdm on pcdm.id = pcm.contact_designation
        left join table_parent_customer_type_master as custId on custId.id = p.cust_type_id
        left join table_distributors as d on d.distributor_id = dism.distributor_id',
            "p.* ,p.id as project_ids,p.created_on as created,st.state_name,loc.location_name,c.city_name,s.salesman_name,pcm.*,d.distributor_code,par.parent_name,pcdm.designation as desg,custId.customer_type",
            $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList('table_project_master as p 
        left join table_parent_master par on par.id = p.parent_id
        left join table_project_contact_mapping as pcm on pcm.id = p.contact_id
        left join state as st on st.state_id = p.state
        left join city as c on c.city_id = p.district
        left join table_location as loc on loc.location_id = p.city
        left join table_project_distributor_mapping as dism on dism.project_id = p.id
        left join table_parent_contact_designation_master as pcdm on pcdm.id = pcm.contact_designation
        left join table_parent_customer_type_master as custId on custId.id = p.cust_type_id
        left join table_distributors as d on d.distributor_id = dism.distributor_id',
            'count(p.id) as total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";

        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {

            if ($auRec[$i]->parent_type == '1') {
                $type = 'Existing';
            } else if ($auRec[$i]->parent_type == '3') {
                $type = 'No Parent';
            } else {
                $type = 'New';
            }


            $det_data = $this->_getSelectList2('table_project_details as det', "det.id,det.remarks,det.reminder_date,det.reminder_time,det.reminder_comment,det.order_amount,det.assign_to,det.date,det.time",
                '', " det.project_id=" . $auRec[$i]->project_ids . " order by det.id desc");


            $colortd = '';
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r", "'", "`");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->project_ids . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($type)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->project_source)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->project_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->project_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->phoneno)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->Address)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->customer_type)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->parent_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->contact_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->desg)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($det_data[0]->remarks)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total_order_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($det_data[0]->reminder_date))) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->created))) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->updated_on))) . '"]';


            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addProjectMaster()
    {
        $data = [];

        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['project_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['parent_name'])));
        $data['address'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9,." "]/', trim($_POST['address'])));
        $data['phoneno'] = mysql_escape_string($_POST['phoneno']);
        $data['project_source'] = 'web';
        $data['parent_type'] = mysql_escape_string($_POST['project_type']);
        $data['project_status'] = '1';
        $data['cust_type_id'] = mysql_escape_string($_POST['cust_type_id']);
        $data['parent_id'] = mysql_escape_string($_POST['parent']);
        $data['state'] = mysql_escape_string($_POST['state_id']);
        $data['district'] = mysql_escape_string($_POST['city_id']);
        $data['city'] = mysql_escape_string($_POST['location_id']);
        $data['status'] = 'A';
        $data['assign_to'] = $_POST['added_by'];
        $data['created_on'] = mysql_escape_string(date('Y-m-d'));
        $data['updated_on'] = mysql_escape_string(date('Y-m-d H:i:s'));

        $id = $this->_dbInsert($data, 'table_project_master');

        // Add project code
        $data31 = [];
        $data31['project_code'] = 'PROJ' . $id;
        $disId = $this->_dbUpdate2($data31, 'table_project_master', " id=" . $id);

        if ($id > 0) {

            $data2['account_id'] = mysql_escape_string($_SESSION['accountId']);
            $data2['project_id'] = $id;
            $data2['remarks'] = mysql_escape_string($_POST['remark']);
            $data2['project_status'] = '1';
            $data2['assign_to'] = $_POST['added_by'];
            $data2['added_by'] = $_POST['added_by'];
            $data2['date'] = date("Y-m-d H:i:s");
            $data2['time'] = date("H:i:s");
            $data2['created_on'] = date("Y-m-d H:i:s");

            $projecDetailsId = $this->_dbInsert($data2, 'table_project_details');

            if ($projecDetailsId > 0) {

                $data1['account_id'] = mysql_escape_string($_SESSION['accountId']);
                $data1['project_id'] = mysql_escape_string($id);
                $data1['contact_name'] = mysql_escape_string($_POST['contact_name']);
                $data1['contact_no'] = mysql_escape_string($_POST['contact_number']);
                $data1['contact_designation'] = mysql_escape_string($_POST['designation']);
                $data1['is_selected'] = '1';
                $contactid = $this->_dbInsert($data1, 'table_project_contact_mapping');

                if ($contactid > 0) {

                    $data5['contact_id'] = $contactid;
                    $this->_dbUpdate($data5, 'table_project_master', " id=" . $id);
                    $this->_dbUpdate($data5, 'table_project_details', " id=" . $projecDetailsId);

                    // Add Distributor ID
                    $data3 = [];
                    $data3['project_id'] = mysql_escape_string($id);
                    $data3['distributor_id'] = mysql_escape_string($_POST['distributor']);
                    $disId = $this->_dbInsert($data3, 'table_project_distributor_mapping');
                }

            }

        }


        return $disId;
    }

    function updateProjectMaster($id)
    {
        $data = [];

        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['project_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['parent_name'])));
        $data['address'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9,." "]/', trim($_POST['address'])));
        $data['phoneno'] = mysql_escape_string($_POST['phoneno']);
        $data['parent_type'] = mysql_escape_string($_POST['project_type']);
        $data['cust_type_id'] = mysql_escape_string($_POST['cust_type_id']);
        $data['parent_id'] = mysql_escape_string($_POST['parent']);
        $data['state'] = mysql_escape_string($_POST['state_id']);
        $data['district'] = mysql_escape_string($_POST['city_id']);
        $data['city'] = mysql_escape_string($_POST['location_id']);
        $data['status'] = 'A';
        $data['assign_to'] = $_POST['added_by'];
        $data['updated_on'] = mysql_escape_string(date('Y-m-d H:i:s'));

        $this->_dbUpdate($data, 'table_project_master', " id=" . $id);

        if ($id > 0) {

            $data2['account_id'] = mysql_escape_string($_SESSION['accountId']);
            $data2['project_id'] = $id;
            $data2['remarks'] = mysql_escape_string($_POST['remark']);
            $data2['project_status'] = '1';
            $data2['assign_to'] = $_POST['added_by'];
            $data2['added_by'] = $_POST['added_by'];
            $data2['date'] = date("Y-m-d H:i:s");
            $data2['time'] = date("H:i:s");
            $data2['created_on'] = date("Y-m-d H:i:s");


            $this->_dbUpdate($data2, 'table_project_details', " id=" . $_POST['del_id']);

            $contact_id = $this->_getSelectList('table_project_master',
                'contact_id', '', ' id =' . $id);

            $data1['account_id'] = mysql_escape_string($_SESSION['accountId']);
            $data1['project_id'] = mysql_escape_string($id);
            $data1['contact_name'] = mysql_escape_string($_POST['contact_name']);
            $data1['contact_no'] = mysql_escape_string($_POST['contact_number']);
            $data1['is_selected'] = '1';
            $data1['contact_designation'] = mysql_escape_string($_POST['designation']);
            $this->_dbUpdate2($data1, 'table_project_contact_mapping', " id=" . $contact_id[0]->contact_id);


            // Add Distributor ID
            $data3 = [];
            $data3['project_id'] = mysql_escape_string($id);
            $data3['distributor_id'] = mysql_escape_string($_POST['distributor']);

            $disId = $this->_dbUpdate2($data3, 'table_project_distributor_mapping', " id=" . $_POST['dis_map_id']);


        }


        return $disId;
    }

    // Todo End : Jatin : 12 Feb 2024 : Show Project Master Report
    function showProjectStatusReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname)
            $sortname = ' p.created_on ,p.id';
        if (!$sortorder)
            $sortorder = '  ';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $salInCondi = '';
        //echo "<pre>"; print_r($_SESSION);
        if (isset($_SESSION['SelCondi']) && !empty($_SESSION['SelCondi'])) {
            $salInCondi = $_SESSION['SelCondi'];
        }
        $dateApplyon = 'created_on';
        if (isset($_SESSION['datetype']) && $_SESSION['datetype'] == 'updatedon') {
            $dateApplyon = 'updated_on';
        }
        if ($_SESSION['frmDate'] != '') {
            $fromdate = " and p." . $dateApplyon . " >= '" . date('Y-m-d', strtotime($_SESSION['frmDate'])) . "'";
        } else {
            $fromdate = " and p." . $dateApplyon . " >= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['toDate'] != '') {
            $todate = " and p." . $dateApplyon . " <= '" . date('Y-m-d', strtotime($_SESSION['toDate'])) . "'";
        } else {
            $todate = " and p." . $dateApplyon . " <= '" . date('Y-m-d') . "'";
        }

        $where = "  $fromdate $todate $salInCondi $salesman";

        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_project_master as p 
		left join table_parent_project_status_master as ps on ps.id=p.project_status
        left join table_parent_master par on par.id = p.parent_id        
        left join table_salesman as s on s.salesman_id = p.assign_to
		left join table_salesman as s1 on s1.salesman_id = p.created_by		
        left join state as st on st.state_id = p.state
        left join city as c on c.city_id = p.district
        left join table_location as loc on loc.location_id = p.city',
            "p.id as project_id,p.*,ps.project_status as project_status_name,st.state_name,loc.location_name,c.city_name,s.salesman_name as assign_to_salesman
		,s1.salesman_name as added_by_salesman,par.parent_name", $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList('table_project_master as p 
        left join table_parent_master par on par.id = p.parent_id        
        left join table_salesman as s on s.salesman_id = p.assign_to
		left join table_salesman as s1 on s1.salesman_id = p.created_by		
        left join state as st on st.state_id = p.state
        left join city as c on c.city_id = p.district
        left join table_location as loc on loc.location_id = p.city',
            'count(p.id) as total', '', $where);

        $total = $auRecCount[0]->total;
        $projectStatusDetails = array();
        $projectOdrAmt = array();
        if (count($auRec) > 0) {
            $projectIdsArr = array();
            foreach ($auRec as $key => $value) {
                $projectIdsArr[] = $value->project_id;
            }
            $whereCnd = " project_id IN(" . implode(',', $projectIdsArr) . ") group by project_id,project_status";
            $DetailauRec = $this->_getSelectList('table_project_details',
                "project_id,project_status,MAX(date) as max_activity_date,
		MIN(date) as min_activity_date,count(id) as no_of_attempts,
		SUM(order_amount) as order_amount", '', $whereCnd, '');
            if (count($DetailauRec) > 0) {
                foreach ($DetailauRec as $key => $value) {
                    $projectStatusDetails[$value->project_id][$value->project_status] = $value;
                    $projectOdrAmt[$value->project_id] = $projectOdrAmt[$value->project_id] + $value->order_amount;
                }

            }
        }


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";

        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        for ($i = 0; $i < count($auRec); $i++) {
            $FollowUps = $projectStatusDetails[$auRec[$i]->project_id][2]->min_activity_date;
            $NoofattemptsforFollowUps = $projectStatusDetails[$auRec[$i]->project_id][2]->no_of_attempts;
            $Enquiry = $projectStatusDetails[$auRec[$i]->project_id][3]->max_activity_date;
            $Quotation = $projectStatusDetails[$auRec[$i]->project_id][4]->max_activity_date;
            $Negotiation = $projectStatusDetails[$auRec[$i]->project_id][5]->max_activity_date;
            $Win = $projectStatusDetails[$auRec[$i]->project_id][6]->max_activity_date;
            $Lost = $projectStatusDetails[$auRec[$i]->project_id][7]->max_activity_date;
            $ProjectCompleted = $projectStatusDetails[$auRec[$i]->project_id][8]->max_activity_date;
            $TotalOrderAmount = $projectOdrAmt[$auRec[$i]->project_id];

            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";

            //Todo Start : sudhanshu 25 june 2024 cahnge parent type logic
            if ($auRec[$i]->parent_type == '1') {
                $type = 'Existing';
            } else if ($auRec[$i]->parent_type == '2') {
                $type = 'New';
            } else if ($auRec[$i]->parent_type == '3') {
                $type = 'No Parent';
            } else {
                $type = '';
            }
            //Todo End : sudhanshu 25 june 2024 cahnge parent type logic

            $colortd = '';
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r", "'", "`");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->project_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->assign_to_salesman)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->project_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->project_code)) . '"';
            $json .= ',"' . ucwords($type) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->parent_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->Address)) . '"';
            $json .= ',"' . ucwords(addslashes($status)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->created_on))) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->updated_on))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->added_by_salesman)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($FollowUps))) . '"';
            $json .= ',"' . ucwords(addslashes($NoofattemptsforFollowUps)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($Enquiry))) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($Quotation))) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($Negotiation))) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($Win))) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($Lost))) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($ProjectCompleted))) . '"';
            $json .= ',"' . ucwords(addslashes($TotalOrderAmount)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->project_status_name)) . '"]';


            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // todo Start : Jatin : 20 Feb 2024 : Project Summary Report

    function showProjectSummaryMaster($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname)
            $sortname = ' p.created_on ,p.id';
        if (!$sortorder)
            $sortorder = '  ';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];


//// rohit 
        $dateApplyon = 'created_on';
        if (isset($_SESSION['datetype']) && $_SESSION['datetype'] == 'updatedon') {
        

            if ($_SESSION['frmDate'] != '') {
                $fromdate = " and DATE(pd." . $dateApplyon . ")>= '" . date('Y-m-d', strtotime($_SESSION['frmDate'])) . "'";
            } else {
                $fromdate = " and DATE(pd." . $dateApplyon . ") >= '" . date('Y-m-d') . "'";
            }
            if ($_SESSION['toDate'] != '') {
                $todate = " and DATE(pd." . $dateApplyon . ") <= '" . date('Y-m-d', strtotime($_SESSION['toDate'])) . "'";
            } else {
                $todate = " and DATE(pd." . $dateApplyon . ") <= '" . date('Y-m-d') . "'";
            }
            if (isset($_SESSION['SelCondi']) && $_SESSION['SelCondi'] != '') {
                $sal = $_SESSION['SelCondi'];
            }
        }
        else
        {
            if ($_SESSION['frmDate'] != '') {
                $fromdate = " and DATE(p." . $dateApplyon . ") >= '" . date('Y-m-d', strtotime($_SESSION['frmDate'])) . "'";
            } else {
                $fromdate = " and DATE(p." . $dateApplyon . ") >= '" . date('Y-m-d') . "'";
            }
            if ($_SESSION['toDate'] != '') {
                $todate = " and DATE(p." . $dateApplyon . ") <= '" . date('Y-m-d', strtotime($_SESSION['toDate'])) . "'";
            } else {
                $todate = " and DATE(p." . $dateApplyon . ") <= '" . date('Y-m-d') . "'";
            }
            if (isset($_SESSION['SelCondi']) && $_SESSION['SelCondi'] != '') {
                $sal = $_SESSION['SelCondi'];
            }
        }


/// rohit

        // $dateApplyon = 'created_on';
        // if (isset($_SESSION['datetype']) && $_SESSION['datetype'] == 'updatedon') {
        //     $dateApplyon = 'updated_on';
        // }
        // if ($_SESSION['frmDate'] != '') {
        //     $fromdate = " and p." . $dateApplyon . " >= '" . date('Y-m-d', strtotime($_SESSION['frmDate'])) . "'";
        // } else {
        //     $fromdate = " and p." . $dateApplyon . " >= '" . date('Y-m-d') . "'";
        // }
        // if ($_SESSION['toDate'] != '') {
        //     $todate = " and p." . $dateApplyon . " <= '" . date('Y-m-d', strtotime($_SESSION['toDate'])) . "'";
        // } else {
        //     $todate = " and p." . $dateApplyon . " <= '" . date('Y-m-d') . "'";
        // }
        // if (isset($_SESSION['SelCondi']) && $_SESSION['SelCondi'] != '') {
        //     $sal = $_SESSION['SelCondi'];
        // }

        $where = "  $fromdate $todate $sal $salesman ";

        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";

///rohit
        $auRec = $this->_getSelectList('table_project_master as p 
        left join table_project_details pd on pd.project_id = p.id
        left join table_parent_master par on par.id = p.parent_id
        left join table_project_contact_mapping as pcm on pcm.id = p.contact_id
        left join table_salesman as sa on sa.salesman_id = p.created_by
        left join table_salesman as s on s.salesman_id = p.assign_to
        left join state as st on st.state_id = p.state
        left join city as c on c.city_id = p.district
        left join table_location as loc on loc.location_id = p.city
        left join table_project_distributor_mapping as dism on dism.project_id = p.id
        left join table_parent_project_status_master as pms on p.project_status = pms.id
        left join table_distributors as d on d.distributor_id = dism.distributor_id',
            "p.id as project_ids,p.*,st.state_name,loc.location_name,c.city_name,sa.salesman_name,sa.employee_code,pcm.*,d.distributor_code,par.parent_name,pms.project_status as status_name,s.salesman_name as assign_to,p.created_on as crt ,p.updated_on as upd",
            $rp, $where .' GROUP BY p.project_code '.$sort, '');

        $auRecCount = $this->_getSelectList('table_project_master as p 
        left join table_project_details pd on pd.project_id = p.id
        left join table_parent_master par on par.id = p.parent_id
        left join table_project_contact_mapping as pcm on pcm.id = p.contact_id
        left join table_salesman as s on s.salesman_id = p.assign_to
        left join state as st on st.state_id = p.state
        left join city as c on c.city_id = p.district
        left join table_location as loc on loc.location_id = p.city
        left join table_project_distributor_mapping as dism on dism.project_id = p.id
        left join table_parent_project_status_master as pms on p.project_status = pms.id
        left join table_distributors as d on d.distributor_id = dism.distributor_id',
            'count(p.id) as total', '', $where.' Group By p.project_code');


///rohit


        // $auRec = $this->_getSelectList('table_project_master as p 
        // left join table_parent_master par on par.id = p.parent_id
        // left join table_project_contact_mapping as pcm on pcm.id = p.contact_id
        // left join table_salesman as sa on sa.salesman_id = p.created_by
        // left join table_salesman as s on s.salesman_id = p.assign_to
        // left join state as st on st.state_id = p.state
        // left join city as c on c.city_id = p.district
        // left join table_location as loc on loc.location_id = p.city
        // left join table_project_distributor_mapping as dism on dism.project_id = p.id
        // left join table_parent_project_status_master as pms on p.project_status = pms.id
        // left join table_distributors as d on d.distributor_id = dism.distributor_id',
        //     "p.id as project_ids,p.*,st.state_name,loc.location_name,c.city_name,sa.salesman_name,sa.employee_code,pcm.*,d.distributor_code,par.parent_name,pms.project_status as status_name,s.salesman_name as assign_to,p.created_on as crt ,p.updated_on as upd",
        //     $rp, $where . $sort, '');

        // $auRecCount = $this->_getSelectList('table_project_master as p 
        // left join table_parent_master par on par.id = p.parent_id
        // left join table_project_contact_mapping as pcm on pcm.id = p.contact_id
        // left join table_salesman as s on s.salesman_id = p.assign_to
        // left join state as st on st.state_id = p.state
        // left join city as c on c.city_id = p.district
        // left join table_location as loc on loc.location_id = p.city
        // left join table_project_distributor_mapping as dism on dism.project_id = p.id
        // left join table_parent_project_status_master as pms on p.project_status = pms.id
        // left join table_distributors as d on d.distributor_id = dism.distributor_id',
        //     'count(p.id) as total', '', $where);


        $uniqueCheck = $this->_getSelectList('table_project_master', "phoneno",
            '', " group by phoneno HAVING COUNT(*) > 1 ");

        if (is_array($uniqueCheck) && count($uniqueCheck) > 0) {
            foreach ($uniqueCheck as $key => $value) {
                $uniquePhone[] = $value->phoneno;
            }
        }

        if (is_array($uniquePhone) && count($uniquePhone) > 0) {
            $uniqueid = $this->_getSelectList('table_project_master', "id",
                '', " phoneno IN(" . implode(',', $uniquePhone) . ") order by id asc ");

            if (is_array($uniqueid) && count($uniqueid) > 0) {
                foreach ($uniqueid as $key => $value) {
                    $uniquePhoneIds[] = $value->id;
                }
            }
        }


        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";

        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {

            //Todo Start : sudhanshu 25 june 2024 cahnge parent type logic
            if ($auRec[$i]->parent_type == '1') {
                $type = 'Existing';
            } else if ($auRec[$i]->parent_type == '2') {
                $type = 'New';
            } else if ($auRec[$i]->parent_type == '3') {
                $type = 'No Parent';
            } else {
                $type = '';
            }
            //Todo End : sudhanshu 25 june 2024 cahnge parent type logic


            if (in_array($auRec[$i]->project_ids, $uniquePhoneIds)) {
                $color = 'I';
            } else {
                $color = '';
            }

///rohit
$maxId = $this->_getSelectList2('table_project_details', "max(id) as delId",
'', " project_id=" . $auRec[$i]->project_ids . " order by id desc");


$det_data = $this->_getSelectList2('table_project_details as det', "det.remarks,det.reminder_date,det.reminder_time,det.reminder_comment,det.order_amount,det.assign_to,det.date,det.time",
'', " id='".$maxId[0]->delId."'");

            
///rohit


            // $maxId = $this->_getSelectList2('table_project_details', "max(id) as delId",
            //     '', " project_id=" . $auRec[$i]->project_ids . " order by id desc");


            // $det_data = $this->_getSelectList2('table_project_details as det', "det.remarks,det.reminder_date,det.reminder_time,det.reminder_comment,det.order_amount,det.assign_to,det.date,det.time",
            //     '', " id=" . $maxId[0]->delId);


            $View_detail = '<a href=\"project_details_list.php?id=' . base64_encode($auRec[$i]->project_ids) . '\" ' .
                $targetBlank . '>View Details</a>';

            $View_Quotation = '<a href=\"view_project_quotation_image.php?salmapId=' . base64_encode
                ($auRec[$i]->project_ids) .
                '\" ' .
                $targetBlank .
                '>View Quotation</a>';

            $colortd = '';
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r", "'", "`");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->project_ids . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($type)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->project_source)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->project_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->project_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->parent_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->phoneno)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->Address)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->assign_to)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->status_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total_order_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->crt))) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->upd))) . '"';
            $json .= ',"' . ucwords($View_Quotation) . '"';
            $json .= ',"' . ucwords($View_detail) . '"]';


            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // todo End : Jatin : 20 Feb 2024 : Project Summary Report
    public function invoiceTransferToGRN($odrDet)
    {
        $data1 = array();
        $account_id = $odrDet[0]->account_id;
        $invoice_id = $odrDet[0]->invoice_id;
        foreach ($odrDet as $odrVal) {
            $data1 = array();
            $data1['account_id'] = ($odrVal->account_id);
            $data1['invoice_id'] = ($odrVal->invoice_id);
            $data1['stockist_id'] = ($odrVal->stockist_id);
            $data1['distributor_id'] = ($odrVal->distributor_id);
            $data1['item_id'] = ($odrVal->item_id);
            $data1['category_id'] = ($odrVal->category_id);
            $data1['attribute_value_id'] = (($odrVal->color_id == 0) ? $this->getDefaultBatchId($odrVal->account_id) : $odrVal->color_id);
            $data1['color_id'] = (($odrVal->color_id == 0) ? $this->getDefaultBatchId($odrVal->account_id) : $odrVal->color_id);
            $data1['bill_date'] = ($odrVal->bill_date);
            $data1['bill_no'] = ($odrVal->bill_no);
            $data1['rec_stock_value'] = $odrVal->acc_quantity;
            $data1['last_update_datetime'] = date('Y-m-d H:i:s');
            $data1['created_datetime'] = date('Y-m-d H:i:s');
            $data1['status'] = 'I';
            $data1['price'] = $odrVal->price;
            $data1['before_tax_amount'] = (($odrVal->price * $odrVal->acc_quantity) - ($odrVal->discount_amount + $odrVal->custom_discount_amount));
            $data1['total_tax_amount'] = ($odrVal->gst_amount);
            $data1['igst_amount'] = $odrVal->gst_amount;
            $data1['cgst_amount'] = 0;
            $data1['sgst_amount'] = 0;
            $data1['cess_amount'] = 0;
            $data1['bill_type'] = (($odrVal->order_type == 'Yes') ? 'Invoice' : 'Return');
            $data1['return_type'] = $odrVal->return_type;
            $data1['bill_status'] = 'A';
            $result = $this->_dbInsert($data1, 'table_item_dis_stk_inprocess');
        }

        $checkStockistFeature = $this->getAccountFeaturesList($account_id);

        if (in_array(115, $checkStockistFeature)) {
            $this->getDistributorStockFromInprocessStock($invoice_id);
        }

        return true;
    }

    function addCustomerSalesmanMapping()
    {

        $salId = $_POST['salesman_id'];
        $accId = $_POST['account_id'];
        $retId = $_POST['retailer_id'];

        if (is_array($retId) && count($retId) > 0) {

            foreach ($retId as $ret) {

                $data['salesman_id'] = $salId;
                $data['account_id'] = $accId;
                $data['retailer_id'] = $ret;
                $data['created_date'] = date('Y-m-d H:i:s');


                $id = $this->_dbInsert($data, 'table_customer_salesman_mapping');
            }

        }


        return $id;
    }

    // Todo Start : JAtin : 22 Feb 2024 : Create feature listing

    function showFeatureIdListing()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'feature_id';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_feature', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList2('table_feature', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->feature_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->feature_id) . '"';
            $json .= ',"' . addslashes($auRec[$i]->feature_name) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : JAtin : 22 Feb 2024 : Create feature listing

    //Todo Start : CN DN reason master: sudhanshu : 23 Feb 2024
    function addCNDNReason()
    {
        //echo "hii";die;
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['reason'] = mysql_escape_string($_POST['reason']);
        $data['created'] = date('Y-m-d H:i:s');
        $data['updated'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        //print_r($data)die;
        $id = $this->_dbInsert($data, 'table_cn_dn_reason_master');
        return $id;
    }

    function updateCNDNReason($id)
    {
        $data['reason'] = mysql_escape_string($_POST['reason']);

        $data['updated'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $this->_dbUpdate($data, 'table_cn_dn_reason_master', " reason_id=" . $id);
        return $id;
    }

    function showCNDNReason()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_cn_dn_reason_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_cn_dn_reason_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"cn_dn_reason.php?stid=' . $auRec[$i]->reason_id . '&value=' . $status . '\">' . $status . '</a>';
            $lastUpdate = date('d M Y', strtotime($auRec[$i]->updated));
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->reason_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->reason) . '"';

            $json .= ',"' . addslashes($lastUpdate) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo End : CN DN reason master: sudhanshu : 23 Feb 2024

    //Todo Start :  Jatin :  26 Feb 2024 : Stockist cancel Order Report

    function showStockistFullPartialPendingOrders()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        $ordertime = ',time_of_order desc';
        if (!$sortname)
            $sortname = 'date_of_order';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($qtype == "date_of_order" && $query != '') {
            $query = date("Y-m-d", strtotime($query));
        }
        $_objAdmin = new Admin();
        // Todo sudhanshu 01 may 2024 : change from session nanme FromOrderList to FromDisList
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['FromDisList'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        //Todo sudhanshu 01 may 2024 : change time session name ToOrderList to ToDisList
        if ($_SESSION['ToDisList'] != '') {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['ToDisList'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }

        if (isset($_SESSION['stockistId']) && $_SESSION['stockistId'] > 0) {
            $disLogCond = " AND o.stockist_id='" . $_SESSION['stockistId'] . "' ";
        } else {
            $disLogCond = "";
        }
        if ($_SESSION['userLoginType'] == 1) {
            $salesman = '';
        }

        $where = " o.order_for='S' $disLogCond $fromdate $todate  and o.order_status IN('A','C') AND o.order_type IN('Yes', 'Return', 'Adhoc') AND o.stockist_id!='' and o.account_id =" . $_SESSION['accountId'];
        if ($qtype == 'date_of_order' && $query != '') {
            $query = date('Y-m-d', strtotime($query));
        }
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_stockist_order as o
  	left join table_stockist as d on d.stockist_id=o.stockist_id
  	left join state as st on st.state_id=d.state
  	left join city as c on c.city_id=d.city
  	', "o.*,d.stockist_name,d.stockist_code,d.stockist_location,d.stockist_address, st.state_name, c.city_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_stockist_order as o
  	left join table_stockist as d on d.stockist_id=o.stockist_id
  	left join state as st on st.state_id=d.state
  	left join city as c on c.city_id=d.city
  	', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ($auRec[$i]->order_type == 'Yes') {

                $orderid = $auRec[$i]->order_id;
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "P";

                if ($auRec[$i]->order_status == 'A') {
                    $status = "Sales Order";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = "Sales Order";
                    $color = 'C';
                }


            }
            if ($auRec[$i]->order_type == 'No') {
                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
                $color = ($auRec[$i]->order_status == 'A') ? "I" : "P";
            }
            if ($auRec[$i]->order_type == 'Adhoc') {
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Adhoc Order";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = "New Adhoc Order";
                    $color = 'C';
                }


            }
            if ($auRec[$i]->order_type == 'Return') {

                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
                if ($auRec[$i]->order_status == 'A') {
                    $status = "Return Order";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = "Return Order";
                    $color = 'C';
                }


            }


            if ($auRec[$i]->order_status == 'C') {
                $orderStatus = 'Cancelled';
            } else if ($auRec[$i]->order_status != 'A') {
                $CheckOrderSts = $this->_getSelectList2('table_stockist_order as o 
	  inner join table_stockist_order_detail as od on o.order_id = od.order_id',
                    "od.quantity, od.acc_quantity,od.is_processed ", '', " o.order_id='" . $auRec[$i]->order_id . "' 
		AND ((od.quantity = od.acc_quantity AND od.is_processed=0) OR (od.quantity > od.acc_quantity AND od.is_processed=1)) 
		and od.free_item_id = 0");

                if (is_array($CheckOrderSts) && count($CheckOrderSts) > 0) {
                    $orderStatus = 'Partially Pending';
                } else {
                    $orderStatus = 'Fully Invoiced';
                }
            } else {
                $orderStatus = 'Fully Pending';
            }

            if ($orderStatus == 'Partially Pending') {
                $orderid = 0;
            } else if ($orderStatus == 'Cancelled') {
                $orderid = '00';
            } else {

                $orderid = $auRec[$i]->order_id;
            }
            if ($auRec[$i]->sync_on_3p == '1' && $auRec[$i]->erp_order_id != '') {
                $orderid = '001';
            }


            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);

            if ($auRec[$i]->cancellation_date != '0000-00-00 00:00:00') {
                $cancel_date = $this->_changeDate($auRec[$i]->cancellation_date);
            } else {
                $cancel_date = '';
            }
            //Todo Start : Sudhanshu 01 may 2024: add cancel by column
            $cancelByUserType = '';
            $cancel_by = '';

            if (strtolower($auRec[$i]->cancel_by_user_type) == 'admin') {
                $cancelByUserType = 'Admin';
                $cancel_by = 'Admin';
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'stockist') {
                $cancelByUserType = $this->AliaseUsers('stockist');
                $cancel_by = $auRec[$i]->stockist_name;
            } elseif (strtolower($auRec[$i]->cancel_by_user_type) == 'distributor') {
                $cancelByUserType = $this->AliaseUsers('distributor');
                $cancel_by = $auRec[$i]->distributor_name;
            }
            //Todo End : Sudhanshu 01 May 2024 : add cancel by column
            $DistRec = $_objAdmin->_getSelectList2('table_stockist', "stockist_id, stockist_code", '', " stockist_id='" . $auRec[$i]->stockist_id . "'");
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $orderid . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->stockist_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($orderStatus)) . '"';
            $json .= ',"' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($auRec[$i]->acc_total_invoice_amount, 2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->stockist_location))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->stockist_address))) . '"';
            $json .= ',"' . $cancel_date . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->remark))) . '"';
            $json .= ',"' . ucwords($cancelByUserType) . '"';
            $json .= ',"' . ucwords($cancel_by) . '"';
            $json .= ',"' . ucwords(addslashes($status)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo $json;
        exit;
    }

    //Todo End :  Jatin :  26 Feb 2024 : Stockist cancel Order Report

    //Todo Start : sudhanshu : 27 feb 2024 : category wise order report

    function dynamicCategoryWiseOrderReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query == 'Yes') {
            $query = 'Y';
        } elseif ($query == 'No') {
            $query = 'N';
        }
        // echo "<pre>"; print_r($_SESSION);
        $queryConditions = '';
        if (isset($_SESSION['fil_from']) && !empty($_SESSION['fil_from'])) {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['fil_from'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if (isset($_SESSION['fil_to']) && !empty($_SESSION['fil_to'])) {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['fil_to'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $queryConditions .= " AND o.distributor_id=" . $_SESSION['distributorId'];
        }

        if ($_SESSION['userLoginType'] == 7 && $_SESSION['stockistId'] != "" && $_SESSION['stockistId'] > 0) {
            $queryConditions .= " AND d.stockist_id=" . $_SESSION['stockistId'];

        }

        $salesmanCnd = "";
        if ($_SESSION['userLoginType'] == 5) {
            $salesmanCnd = str_replace("s.", "o.", $salesman);
        }

        if (isset($_SESSION['fil_category']) && !empty($_SESSION['fil_category']) && $_SESSION['fil_category'] > 0) {
            $queryConditions .= " AND c.category_id = '" . $_SESSION['fil_category'] . "' ";
        }


        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $firstDate = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $lastdate = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $fromdate = " and o.date_of_order >= '" . $firstDate . "'";
            $todate = " and o.date_of_order <= '" . $lastdate . "'";
        }

        $queryConditions .= " AND order_status !='C' ";

        $queryConditions = $queryConditions . $salesmanCnd . $fromdate . $todate;

        $rtype = " o.type='R' ";
        $odrDtlJoin = "";
        $odrDtlgrpBy = "";


        $where = $queryConditions;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList("table_order as o    
        left join table_order_detail as ord on o.order_type != 'No' and ord.order_id = o.order_id and ord.type = 1
        left join table_item as i on i.item_id = ord.item_id
        left join table_category as c on i.category_id = c.category_id       
       ",
            "o.order_id,o.order_by,SUM(ord.acc_quantity) as total_ordered_qty,SUM(o.acc_total_invoice_amount) as order_amount,
         c.category_name,c.category_code", $rp, $where . " group by c.category_id " . $sort, '');

        $auRecCount = $this->_getSelectList("table_order as o            
        left join table_order_detail as ord on o.order_type != 'No' and ord.order_id = o.order_id and ord.type = 1
        left join table_item as i on i.item_id = ord.item_id
        left join table_category as c on i.category_id = c.category_id 			
        ", 'COUNT(o.order_id) as total', '', $where . ' group by c.category_id' . $sort);

        $total = count($auRecCount);


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {

            //----- Order by condtion -----


            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total_ordered_qty)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_amount)) . '"]';

            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo End : sudhanshu : 27 feb 2024 : category wise order report


    //Todo Start : sudhanshu : 27 feb 2024 : retailer cases pcs available stock


    function dynamicRetailerAvailableStock($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query == 'Yes') {
            $query = 'Y';
        } elseif ($query == 'No') {
            $query = 'N';
        }
        // echo "<pre>"; print_r($_SESSION);
        $queryConditions = '';
        if (isset($_SESSION['fil_from']) && !empty($_SESSION['fil_from'])) {
            $fromdate = " and O.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['fil_from'])) . "'";
        } else {
            $fromdate = " and O.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if (isset($_SESSION['fil_to']) && !empty($_SESSION['fil_to'])) {
            $todate = " and O.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['fil_to'])) . "'";
        } else {
            $todate = " and O.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $queryConditions .= " AND O.distributor_id=" . $_SESSION['distributorId'];
        } else if (isset($_SESSION['fil_distributor']) && !empty($_SESSION['fil_distributor']) && $_SESSION['fil_distributor'] > 0) {
            $queryConditions .= " AND O.distributor_id=" . $_SESSION['fil_distributor'];
        }


        if ($_SESSION['userLoginType'] == 7 && $_SESSION['stockistId'] != "" && $_SESSION['stockistId'] > 0) {
            $queryConditions .= " AND Dis.stockist_id=" . $_SESSION['stockistId'];

        } else if (isset($_SESSION['fil_stockist']) && !empty($_SESSION['fil_stockist']) && $_SESSION['fil_stockist'] > 0) {
            $queryConditions .= " AND Dis.stockist_id=" . $_SESSION['fil_stockist'];
        }

        $salesmanCnd = "";
        if ($_SESSION['userLoginType'] == 5) {
            $salesmanCnd = str_replace("s.", "O.", $salesman);
        }


        if (isset($_SESSION['fil_salesman']) && !empty($_SESSION['fil_salesman']) && $_SESSION['fil_salesman'] > 0) {
            $salesmanCnd = " AND O.salesman_id=" . $_SESSION['fil_salesman'];
        } else if (isset($_SESSION['fil_salesman_manager']) && ($_SESSION['fil_salesman_manager'] > 0)) {
            $salesmanManagerId = $_SESSION['fil_salesman_manager'];
            $account_id = $_SESSION['accountId'];
            $res = $this->_getSelectList2('table_salesman_hierarchy_relationship AS SHR 
            LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
            LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id', 's.salesman_id,SH.hierarchy_id,SH.sort_order', '', " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanManagerId ORDER BY SH.sort_order ASC ");

            if (is_array($res) && (count($res) > 0)) {
                $sortOrder = $res[0]->sort_order;
                $_objArrayList = new ArrayList();
                $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanManagerId), $sortOrder, $account_id);

                if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                    $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                }

                $salesmanCnd = " AND O.salesman_id IN($bottomUsersIds) ";
            }
        } else if (isset($_SESSION['fil_salesman_designation']) && ($_SESSION['fil_salesman_designation'] > 0)) {
            $_objArrayList = new ArrayList();
            $account_id = $_SESSION['accountId'];
            $getDesignationWiseBottomUsersIdArr = $_objArrayList->getDesignationWiseBottomUsers($_SESSION['fil_salesman_designation'], $account_id);

            if (is_array($getDesignationWiseBottomUsersIdArr) && (count($getDesignationWiseBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getDesignationWiseBottomUsersIdArr);
                $salesmanCnd .= " AND O.salesman_id IN($bottomUsersIds) ";
            }
        } else {
            $salesmanCnd .= '';
        }

        if (isset($_SESSION['fil_category']) && !empty($_SESSION['fil_category']) && $_SESSION['fil_category'] > 0) {
            $queryConditions .= " AND c.category_id = '" . $_SESSION['fil_category'] . "' ";
        }


        if (isset($_SESSION['fil_retailer']) && !empty($_SESSION['fil_retailer']) && $_SESSION['fil_retailer'] > 0) {
            $queryConditions .= " AND O.retailer_id=" . $_SESSION['fil_retailer'];
        }
        if (isset($_SESSION['fil_salesman_state']) && !empty($_SESSION['fil_salesman_state']) && $_SESSION['fil_salesman_state'] > 0) {
            $queryConditions .= " AND sts.state=" . $_SESSION['fil_salesman_state'];
        }
        if (isset($_SESSION['fil_retailer_state']) && !empty($_SESSION['fil_retailer_state']) && $_SESSION['fil_retailer_state'] > 0) {
            $queryConditions .= " AND str.state=" . $_SESSION['fil_retailer_state'];
        }
        if (isset($_SESSION['fil_distributor_state']) && !empty($_SESSION['fil_distributor_state']) && $_SESSION['fil_distributor_state'] > 0) {
            $queryConditions .= " AND std.state=" . $_SESSION['fil_distributor_state'];
        }

        if (isset($_SESSION['fil_salesman_zone']) && !empty($_SESSION['fil_salesman_zone']) && $_SESSION['fil_salesman_zone'] > 0) {
            $queryConditions .= " AND sz.zone_id=" . $_SESSION['fil_salesman_zone'];
        }
        if (isset($_SESSION['fil_retailer_zone']) && !empty($_SESSION['fil_retailer_zone']) && $_SESSION['fil_retailer_zone'] > 0) {
            $queryConditions .= " AND rz.zone_id=" . $_SESSION['fil_retailer_zone'];
        }
        if (isset($_SESSION['fil_distributor_zone']) && !empty($_SESSION['fil_distributor_zone']) && $_SESSION['fil_distributor_zone'] > 0) {
            $queryConditions .= " AND dz.zone_id=" . $_SESSION['fil_distributor_zone'];
        }

        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $firstDate = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $lastdate = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $fromdate = " and O.date_of_order >= '" . $firstDate . "'";
            $todate = " and O.date_of_order <= '" . $lastdate . "'";
        }


        $queryConditions = $queryConditions . $salesmanCnd . $fromdate . $todate;


        //echo $queryConditions;die;
        $where = $queryConditions;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order_os AS O 
		LEFT JOIN table_order_detail_os AS D ON D.os_id = O.os_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
        left join table_salesman_hierarchy_relationship as shr on shr.salesman_id = s.salesman_id
        left join table_salesman as s2 on s2.salesman_id=shr.rpt_user_id
		LEFT JOIN table_retailer AS R ON O.retailer_id = R.retailer_id
		LEFT JOIN table_retailer_channel_master as cm ON cm.channel_id=R.channel_id
        left join table_retailer_type_master as tm on tm.type_id=R.type_id
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		left join state as str on str.state_id=R.state 
            left join state as sts on sts.state_id=s.state 
            left join state as std on std.state_id=Dis.state 
        
            LEFT JOIN city as ct on ct.city_id=R.city
            LEFT JOIN city as ctd on ctd.city_id=Dis.city
            LEFT JOIN city as cts on cts.city_id=s.city
            left join table_zone_state_mapping as zms on zms.state_id=s.state and zms.account_id = s.account_id
			left join table_zone as sz on sz.zone_id=zms.zone_id 
			left join table_zone_state_mapping as zmr on zmr.state_id=R.state and zmr.account_id = R.account_id
			left join table_zone as rz on rz.zone_id=zmr.zone_id
			left join table_zone_state_mapping as zmd on zmd.state_id=Dis.state and zmd.account_id = Dis.account_id
			left join table_zone as dz on dz.zone_id=zmd.zone_id

		left join table_item_case_relationship as cr on cr.item_id=D.item_id
		left join table_cases as ca on ca.case_id=cr.case_id',
            ' D.quantity,R.new, I.item_name,I.item_code,I.item_size,ca.case_size,b.brand_name,cm.channel_name,sz.zone_name as sal_zone,rz.zone_name as ret_zone,dz.zone_name as dis_zone,
			I.item_erp_code, s.salesman_name, s.employee_code, str.state_name as ret_state,sts.state_name as sal_state,std.state_name as dis_state,
            ct.city_name as ret_city,ctd.city_name as dis_city,cts.city_name as sal_city,P.item_dp as item_mrp,P.item_mrp as itme_ptr,
			Dis.distributor_name,Dis.distributor_code,O.retailer_id,R.retailer_name,R.retailer_code,c.category_name,O.date_of_order,O.time_of_order,tm.type_name', $rp, $where . $sort, '');


        $retIdArr = [];
        if (is_array($auRec) && (count($auRec) > 0)) {
            foreach ($auRec as $key => $auRecData) {
                if (isset($auRecData->retailer_id) && !empty($auRecData->retailer_id) && (intval($auRecData->retailer_id) > 0)) {
                    $retIdArr[] = $auRecData->retailer_id;
                }
            }
            $retIds = implode(',', array_unique($retIdArr));
            $getRetailerRoutes = $this->_getSelectList("table_route_retailer as rr 
    LEFT JOIN table_route as r ON r.route_id = rr.route_id", "rr.retailer_id, GROUP_CONCAT(DISTINCT r.route_name SEPARATOR ' | ') as route_names", "", " rr.retailer_id IN($retIds) GROUP BY rr.retailer_id ORDER BY rr.retailer_id ASC ");
            $retailerWiseRoutesArr = [];
            if (is_array($getRetailerRoutes) && (count($getRetailerRoutes) > 0)) {
                foreach ($getRetailerRoutes as $key => $retRoutes) {
                    if (isset($retRoutes->route_names) && !empty($retRoutes->route_names)) {
                        $retailerWiseRoutesArr[$retRoutes->retailer_id] = $retRoutes->route_names;
                    }
                }
            }
        }

        $auRecCount = $this->_getSelectList("table_order_os AS O 
            LEFT JOIN table_order_detail_os AS D ON D.os_id = O.os_id
            LEFT JOIN table_item AS I ON D.item_id = I.item_id
            LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
            LEFT JOIN table_category AS c ON c.category_id = I.category_id 
            LEFT JOIN table_price AS P ON D.item_id = P.item_id
            LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
            LEFT JOIN table_retailer AS R ON O.retailer_id = R.retailer_id
            LEFT JOIN table_retailer_channel_master as cm ON cm.channel_id=R.channel_id
            left join table_retailer_type_master as tm on tm.type_id=R.type_id
            LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
            left join state as str on str.state_id=R.state 
            left join state as sts on sts.state_id=s.state 
            left join state as std on std.state_id=Dis.state 
        
            LEFT JOIN city as ct on ct.city_id=R.city
            LEFT JOIN city as ctd on ctd.city_id=Dis.city
            LEFT JOIN city as cts on cts.city_id=s.city
            left join table_zone_state_mapping as zms on zms.state_id=s.state and zms.account_id = s.account_id
			left join table_zone as sz on sz.zone_id=zms.zone_id 
			left join table_zone_state_mapping as zmr on zmr.state_id=R.state and zmr.account_id = R.account_id
			left join table_zone as rz on rz.zone_id=zmr.zone_id
			left join table_zone_state_mapping as zmd on zmd.state_id=Dis.state and zmd.account_id = Dis.account_id
			left join table_zone as dz on dz.zone_id=zmd.zone_id

            left join table_item_case_relationship as cr on cr.item_id=D.item_id
            left join table_cases as ca on ca.case_id=cr.case_id		
        ", 'COUNT(O.os_id) as total', '', $where . $sort, '');

        $total = $auRecCount[0]->total;


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {

            //----- Order by condtion -----
            $routeName = (isset($retailerWiseRoutesArr[$auRec[$i]->retailer_id]) && !empty($retailerWiseRoutesArr[$auRec[$i]->retailer_id])) ? $retailerWiseRoutesArr[$auRec[$i]->retailer_id] : '';
            $pcs = '';
            $kg = '';
            $cases = '';

            // start pcs to kg cases conversion
            $pcs = $auRec[$i]->quantity;
            $kg = (($auRec[$i]->item_size != 0) ? ROUND((($auRec[$i]->item_size * $auRec[$i]->quantity) / 1000), 2) : '');
            $cases = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->quantity / $auRec[$i]->case_size), 2) : '');

            // end pcs to kg cases conversion
            // if ($auRec[$i]->item_unit_type == "kg") {
            //     $kg = $auRec[$i]->quantity;
            //     $pcs = (($auRec[$i]->item_size != 0) ? ROUND((($auRec[$i]->quantity * 1000) / $auRec[$i]->item_size), 2) : '');
            //     $cases = (($auRec[$i]->case_size != 0) ? ROUND(($pcs / $auRec[$i]->case_size), 2) : '');

            //     $discount = number_format((($auRec[$i]->ptr_price * $pcs) - $auRec[$i]->total), 2);
            // }

            // if ($auRec[$i]->item_unit_type == "cases") {
            //     $cases = $auRec[$i]->quantity;
            //     $pcs = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->case_size * $auRec[$i]->quantity), 2) : '');
            //     $kg = (($auRec[$i]->item_size != 0) ? ROUND((($pcs * $auRec[$i]->item_size) / 1000), 2) : '');
            //     $discount = number_format((($auRec[$i]->ptr_price * $pcs) - $auRec[$i]->total), 2);
            // }

            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->os_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_city)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->type_name)) . '"';
            $json .= ',"' . ucwords(addslashes($routeName)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_city)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_city)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->category_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->brand_name)))) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->offer_name)). '"';


            $json .= ',"' . ucwords(addslashes($pcs)) . '"';
            $json .= ',"' . ucwords(addslashes($kg)) . '"';
            $json .= ',"' . ucwords(addslashes($cases)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_size)) . '"';

            $json .= ',"' . ucwords(addslashes($date_of_order)) . '"';


            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"]';

            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


//Todo Start : sudhanshu : 27 feb 2024 : retailer cases pcs available stock


    function dynamicDistributorAvailableStock($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query == 'Yes') {
            $query = 'Y';
        } elseif ($query == 'No') {
            $query = 'N';
        }
        // echo "<pre>"; print_r($_SESSION);
        $queryConditions = '';
        if (isset($_SESSION['fil_from']) && !empty($_SESSION['fil_from'])) {
            $fromdate = " and O.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['fil_from'])) . "'";
        } else {
            $fromdate = " and O.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if (isset($_SESSION['fil_to']) && !empty($_SESSION['fil_to'])) {
            $todate = " and O.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['fil_to'])) . "'";
        } else {
            $todate = " and O.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $queryConditions .= " AND O.distributor_id=" . $_SESSION['distributorId'];
        } else if (isset($_SESSION['fil_distributor']) && !empty($_SESSION['fil_distributor']) && $_SESSION['fil_distributor'] > 0) {
            $queryConditions .= " AND O.distributor_id=" . $_SESSION['fil_distributor'];
        }


        if ($_SESSION['userLoginType'] == 7 && $_SESSION['stockistId'] != "" && $_SESSION['stockistId'] > 0) {
            $queryConditions .= " AND Dis.stockist_id=" . $_SESSION['stockistId'];

        } else if (isset($_SESSION['fil_stockist']) && !empty($_SESSION['fil_stockist']) && $_SESSION['fil_stockist'] > 0) {
            $queryConditions .= " AND Dis.stockist_id=" . $_SESSION['fil_stockist'];
        }

        $salesmanCnd = "";
        if ($_SESSION['userLoginType'] == 5) {
            $salesmanCnd = str_replace("s.", "O.", $salesman);
        }


        if (isset($_SESSION['fil_salesman']) && !empty($_SESSION['fil_salesman']) && $_SESSION['fil_salesman'] > 0) {
            $salesmanCnd = " AND O.salesman_id=" . $_SESSION['fil_salesman'];
        } else if (isset($_SESSION['fil_salesman_manager']) && ($_SESSION['fil_salesman_manager'] > 0)) {
            $salesmanManagerId = $_SESSION['fil_salesman_manager'];
            $account_id = $_SESSION['accountId'];
            $res = $this->_getSelectList2('table_salesman_hierarchy_relationship AS SHR 
            LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
            LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id', 's.salesman_id,SH.hierarchy_id,SH.sort_order', '', " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanManagerId ORDER BY SH.sort_order ASC ");

            if (is_array($res) && (count($res) > 0)) {
                $sortOrder = $res[0]->sort_order;
                $_objArrayList = new ArrayList();
                $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanManagerId), $sortOrder, $account_id);

                if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                    $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                }

                $salesmanCnd = " AND O.salesman_id IN($bottomUsersIds) ";
            }
        } else if (isset($_SESSION['fil_salesman_designation']) && ($_SESSION['fil_salesman_designation'] > 0)) {
            $_objArrayList = new ArrayList();
            $account_id = $_SESSION['accountId'];
            $getDesignationWiseBottomUsersIdArr = $_objArrayList->getDesignationWiseBottomUsers($_SESSION['fil_salesman_designation'], $account_id);

            if (is_array($getDesignationWiseBottomUsersIdArr) && (count($getDesignationWiseBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getDesignationWiseBottomUsersIdArr);
                $salesmanCnd .= " AND O.salesman_id IN($bottomUsersIds) ";
            }
        } else {
            $salesmanCnd .= '';
        }

        if (isset($_SESSION['fil_category']) && !empty($_SESSION['fil_category']) && $_SESSION['fil_category'] > 0) {
            $queryConditions .= " AND c.category_id = '" . $_SESSION['fil_category'] . "' ";
        }


        if (isset($_SESSION['fil_retailer']) && !empty($_SESSION['fil_retailer']) && $_SESSION['fil_retailer'] > 0) {
            $queryConditions .= " AND O.retailer_id=" . $_SESSION['fil_retailer'];
        }
        if (isset($_SESSION['fil_salesman_state']) && !empty($_SESSION['fil_salesman_state']) && $_SESSION['fil_salesman_state'] > 0) {
            $queryConditions .= " AND sts.state=" . $_SESSION['fil_salesman_state'];
        }
        if (isset($_SESSION['fil_retailer_state']) && !empty($_SESSION['fil_retailer_state']) && $_SESSION['fil_retailer_state'] > 0) {
            $queryConditions .= " AND str.state=" . $_SESSION['fil_retailer_state'];
        }
        if (isset($_SESSION['fil_distributor_state']) && !empty($_SESSION['fil_distributor_state']) && $_SESSION['fil_distributor_state'] > 0) {
            $queryConditions .= " AND std.state=" . $_SESSION['fil_distributor_state'];
        }

        if (isset($_SESSION['fil_salesman_zone']) && !empty($_SESSION['fil_salesman_zone']) && $_SESSION['fil_salesman_zone'] > 0) {
            $queryConditions .= " AND sz.zone_id=" . $_SESSION['fil_salesman_zone'];
        }
        if (isset($_SESSION['fil_retailer_zone']) && !empty($_SESSION['fil_retailer_zone']) && $_SESSION['fil_retailer_zone'] > 0) {
            $queryConditions .= " AND rz.zone_id=" . $_SESSION['fil_retailer_zone'];
        }
        if (isset($_SESSION['fil_distributor_zone']) && !empty($_SESSION['fil_distributor_zone']) && $_SESSION['fil_distributor_zone'] > 0) {
            $queryConditions .= " AND dz.zone_id=" . $_SESSION['fil_distributor_zone'];
        }

        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $firstDate = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $lastdate = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $fromdate = " and O.date_of_order >= '" . $firstDate . "'";
            $todate = " and O.date_of_order <= '" . $lastdate . "'";
        }


        $queryConditions = $queryConditions . $salesmanCnd . $fromdate . $todate;


        //echo $queryConditions;die;
        $where = $queryConditions;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order_distributor_stock AS O 
		LEFT JOIN table_order_detail_distributor_stock AS D ON D.stock_id = O.stock_id
		LEFT JOIN table_item AS I ON D.item_id = I.item_id
		LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
		LEFT JOIN table_category AS c ON c.category_id = I.category_id 
		LEFT JOIN table_price AS P ON D.item_id = P.item_id
		LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
        left join table_salesman_hierarchy_relationship as shr on shr.salesman_id = s.salesman_id
        left join table_salesman as s2 on s2.salesman_id=shr.rpt_user_id
		
		LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
		
            left join state as sts on sts.state_id=s.state 
            left join state as std on std.state_id=Dis.state 
        
           
            LEFT JOIN city as ctd on ctd.city_id=Dis.city
            LEFT JOIN city as cts on cts.city_id=s.city
            left join table_zone_state_mapping as zms on zms.state_id=s.state and zms.account_id = s.account_id
			left join table_zone as sz on sz.zone_id=zms.zone_id 
			
			left join table_zone_state_mapping as zmd on zmd.state_id=Dis.state and zmd.account_id = Dis.account_id
			left join table_zone as dz on dz.zone_id=zmd.zone_id

		left join table_item_case_relationship as cr on cr.item_id=D.item_id
		left join table_cases as ca on ca.case_id=cr.case_id',
            ' D.openning_stock_volume, I.item_name,I.item_code,I.item_size,ca.case_size,b.brand_name,sz.zone_name as sal_zone,dz.zone_name as dis_zone,
			I.item_erp_code, s.salesman_name, s.employee_code, sts.state_name as sal_state,std.state_name as dis_state,
           ctd.city_name as dis_city,cts.city_name as sal_city,P.item_dp as item_mrp,P.item_mrp as itme_ptr,
			Dis.distributor_name,Dis.distributor_code,c.category_name,O.date_of_order,O.time_of_order', $rp, $where . $sort, '');


        $auRecCount = $this->_getSelectList("table_order_distributor_stock AS O 
            LEFT JOIN table_order_detail_distributor_stock AS D ON D.stock_id = O.stock_id
            LEFT JOIN table_item AS I ON D.item_id = I.item_id
            LEFT JOIN table_brands as b ON b.brand_id=I.brand_id
            LEFT JOIN table_category AS c ON c.category_id = I.category_id 
            LEFT JOIN table_price AS P ON D.item_id = P.item_id
            LEFT JOIN table_salesman AS s ON O.salesman_id = s.salesman_id
           
            LEFT JOIN table_distributors AS Dis ON O.distributor_id = Dis.distributor_id
           
            left join state as sts on sts.state_id=s.state 
            left join state as std on std.state_id=Dis.state 
        
          
            LEFT JOIN city as ctd on ctd.city_id=Dis.city
            LEFT JOIN city as cts on cts.city_id=s.city
            left join table_zone_state_mapping as zms on zms.state_id=s.state and zms.account_id = s.account_id
			left join table_zone as sz on sz.zone_id=zms.zone_id 
		
			left join table_zone_state_mapping as zmd on zmd.state_id=Dis.state and zmd.account_id = Dis.account_id
			left join table_zone as dz on dz.zone_id=zmd.zone_id

            left join table_item_case_relationship as cr on cr.item_id=D.item_id
            left join table_cases as ca on ca.case_id=cr.case_id		
        ", 'COUNT(O.stock_id) as total', '', $where . $sort, '');

        $total = $auRecCount[0]->total;


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {

            //----- Order by condtion -----

            $pcs = '';
            $kg = '';
            $cases = '';

            // start pcs to kg cases conversion
            $pcs = $auRec[$i]->openning_stock_volume;
            $kg = (($auRec[$i]->item_size != 0) ? ROUND((($auRec[$i]->item_size * $auRec[$i]->openning_stock_volume) / 1000), 2) : '');
            $cases = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->openning_stock_volume / $auRec[$i]->case_size), 2) : '');

            // end pcs to kg cases conversion
            // if ($auRec[$i]->item_unit_type == "kg") {
            //     $kg = $auRec[$i]->quantity;
            //     $pcs = (($auRec[$i]->item_size != 0) ? ROUND((($auRec[$i]->quantity * 1000) / $auRec[$i]->item_size), 2) : '');
            //     $cases = (($auRec[$i]->case_size != 0) ? ROUND(($pcs / $auRec[$i]->case_size), 2) : '');

            //     $discount = number_format((($auRec[$i]->ptr_price * $pcs) - $auRec[$i]->total), 2);
            // }

            // if ($auRec[$i]->item_unit_type == "cases") {
            //     $cases = $auRec[$i]->quantity;
            //     $pcs = (($auRec[$i]->case_size != 0) ? ROUND(($auRec[$i]->case_size * $auRec[$i]->quantity), 2) : '');
            //     $kg = (($auRec[$i]->item_size != 0) ? ROUND((($pcs * $auRec[$i]->item_size) / 1000), 2) : '');
            //     $discount = number_format((($auRec[$i]->ptr_price * $pcs) - $auRec[$i]->total), 2);
            // }

            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);

            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->os_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dis_city)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_city)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->category_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->brand_name)))) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->offer_name)). '"';

            $json .= ',"' . ucwords(addslashes($pcs)) . '"';
            $json .= ',"' . ucwords(addslashes($kg)) . '"';
            $json .= ',"' . ucwords(addslashes($cases)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_size)) . '"';

            $json .= ',"' . ucwords(addslashes($date_of_order)) . '"';


            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"]';

            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo : Start : Jatin : 4 March 2024 :  Item Size Master

    function showItemSize()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'color_code';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " account_id='" . $_SESSION['accountId'] . "' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_item_size_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_item_size_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"item_size_master.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status
                . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->item_size_code) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_size_name)) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


    function addItemSizeMaster()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['item_size_code'] = mysql_escape_string(trim($_POST['item_size_code']));
        $data['item_size_name'] = mysql_escape_string(trim($_POST['item_size_name']));
        $data['created_on'] = date('Y-m-d');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_item_size_master');
        return $id;
    }

    function updateItemSizeMaster($id)
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['item_size_code'] = mysql_escape_string(trim($_POST['item_size_code']));
        $data['item_size_name'] = mysql_escape_string(trim($_POST['item_size_name']));
        $data['updated_on'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_item_size_master', " id=" . $id);
        return $id;
    }

    // Todo : End : Jatin : 4 March 2024 :  Item Size Master

    // Todo : Start : Jatin : 6 March 2024 :  Item Color Master

    function showItemColorSize()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'color_code';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " account_id='" . $_SESSION['accountId'] . "' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_item_color_master', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_item_color_master', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"item_color_size_master.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status
                . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->item_color_code) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_color_name)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->rgb_code)) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


    function addItemColorSize()
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['item_color_code'] = mysql_escape_string(trim($_POST['item_color_code']));
        $data['item_color_name'] = mysql_escape_string(trim($_POST['item_color_name']));
        $data['rgb_code'] = mysql_escape_string(trim($_POST['rgb_code']));
        $data['created_on'] = date('Y-m-d');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_item_color_master');
        return $id;
    }

    function updateItemColorSize($id)
    {
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['item_color_code'] = mysql_escape_string(trim($_POST['item_color_code']));
        $data['item_color_name'] = mysql_escape_string(trim($_POST['item_color_name']));
        $data['rgb_code'] = mysql_escape_string(trim($_POST['rgb_code']));
        $data['created_on'] = date('Y-m-d');
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_item_color_master', " id=" . $id);
        return $id;
    }

    // Todo : End : Jatin : 6 March 2024 :  Item Color Master

    // Todo : Start : Jatin : 6 March 2024 : Import Item Color Size Mapping

    function showItemColorSizeMapping()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'color_code';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " account_id='" . $_SESSION['accountId'] . "' ";
        if ($query) $where .= " and map.status='A' AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_item_code_size_color_mapping as map
         left join table_item_color_master as c on c.id = map.color_id
         left join table_item_size_master as s on s.id = map.size_id
         left join table_item as i on i.item_id = map.item_id', "i.item_code,i.item_name,map.*,
         c.item_color_code,c.item_color_name,s.item_size_code,s.item_size_name,c.rgb_code", $rp,
            $where
            . $sort, '');
        $auRecCount = $this->_getSelectList('table_item_code_size_color_mapping as map
         left join table_item_color_master as c on c.id = map.color_id
         left join table_item_size_master as s on s.id = map.size_id
         left join table_item as i on i.item_id = map.item_id', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"item_color_size_mapping_master.php?stid=' . $auRec[$i]->mapping_id . '&value=' . $status . '\">' . $status
                . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->mapping_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_name)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_size_code)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_size_name)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_color_code)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_color_name)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->rgb_code)) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->price)) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo : End : Jatin : 6 March 2024 : Import Item Color Size Mapping

    // Todo : Start : Jatin : 7 March 2024 : Report item wise color order

    function DynamicshowItemSizeColorWiseOrderList($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query == 'Yes') {
            $query = 'Y';
        } elseif ($query == 'No') {
            $query = 'N';
        }
        // echo "<pre>"; print_r($_SESSION);
        $queryConditions = '';
        if (isset($_SESSION['fil_from']) && !empty($_SESSION['fil_from'])) {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d', strtotime($_SESSION['fil_from'])) . "'";
        } else {
            $fromdate = " and o.date_of_order >= '" . date('Y-m-d') . "'";
        }
        if (isset($_SESSION['fil_to']) && !empty($_SESSION['fil_to'])) {
            $todate = " and o.date_of_order <= '" . date('Y-m-d', strtotime($_SESSION['fil_to'])) . "'";
        } else {
            $todate = " and o.date_of_order <= '" . date('Y-m-d') . "'";
        }
        if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $queryConditions .= " AND o.distributor_id=" . $_SESSION['distributorId'];
        } else if (isset($_SESSION['fil_distributor']) && !empty($_SESSION['fil_distributor']) && $_SESSION['fil_distributor'] > 0) {
            $queryConditions .= " AND o.distributor_id=" . $_SESSION['fil_distributor'];
        }

        if ($_SESSION['userLoginType'] == 7 && $_SESSION['stockistId'] != "" && $_SESSION['stockistId'] > 0) {
            $queryConditions .= " AND d.stockist_id=" . $_SESSION['stockistId'];

        } else if (isset($_SESSION['fil_stockist']) && !empty($_SESSION['fil_stockist']) && $_SESSION['fil_stockist'] > 0) {
            $queryConditions .= " AND d.stockist_id=" . $_SESSION['fil_stockist'];
        }
        $salesmanCnd = "";
        if ($_SESSION['userLoginType'] == 5) {
            $salesmanCnd = str_replace("s.", "o.", $salesman);
        }

        if (isset($_SESSION['fil_salesman']) && !empty($_SESSION['fil_salesman']) && $_SESSION['fil_salesman'] > 0) {
            $salesmanCnd = " AND o.salesman_id=" . $_SESSION['fil_salesman'];
        } else if (isset($_SESSION['fil_salesman_manager']) && ($_SESSION['fil_salesman_manager'] > 0)) {
            $salesmanManagerId = $_SESSION['fil_salesman_manager'];
            $account_id = $_SESSION['accountId'];
            $res = $this->_getSelectList2('table_salesman_hierarchy_relationship AS SHR 
				LEFT JOIN table_salesman_hierarchy AS SH ON SH.hierarchy_id = SHR.hierarchy_id
				LEFT JOIN table_salesman AS s ON s.salesman_id = SHR.salesman_id', 's.salesman_id,SH.hierarchy_id,SH.sort_order', '', " SH.account_id=" . $account_id . " AND SHR.salesman_id = $salesmanManagerId ORDER BY SH.sort_order ASC ");

            if (is_array($res) && (count($res) > 0)) {
                $sortOrder = $res[0]->sort_order;
                $_objArrayList = new ArrayList();
                $getBottomUsersIdArr = $_objArrayList->getSalesmansBottomUsers(array($salesmanManagerId), $sortOrder, $account_id);

                if (is_array($getBottomUsersIdArr) && (count($getBottomUsersIdArr) > 0)) {
                    $bottomUsersIds = implode(',', $getBottomUsersIdArr);
                }

                $salesmanCnd = " AND o.salesman_id IN($bottomUsersIds) ";
            }
        } else if (isset($_SESSION['fil_salesman_designation']) && ($_SESSION['fil_salesman_designation'] > 0)) {
            $_objArrayList = new ArrayList();
            $account_id = $_SESSION['accountId'];
            $getDesignationWiseBottomUsersIdArr = $_objArrayList->getDesignationWiseBottomUsers($_SESSION['fil_salesman_designation'], $account_id);

            if (is_array($getDesignationWiseBottomUsersIdArr) && (count($getDesignationWiseBottomUsersIdArr) > 0)) {
                $bottomUsersIds = implode(',', $getDesignationWiseBottomUsersIdArr);
                $salesmanCnd .= " AND o.salesman_id IN($bottomUsersIds) ";
            }
        } else {
            $salesmanCnd .= '';
        }
        //echo $bottomUsersIds; die;
        if (isset($_SESSION['fil_retailer']) && !empty($_SESSION['fil_retailer']) && $_SESSION['fil_retailer'] > 0) {
            $queryConditions .= " AND o.retailer_id=" . $_SESSION['fil_retailer'];
        }
        if (isset($_SESSION['fil_salesman_state']) && !empty($_SESSION['fil_salesman_state']) && $_SESSION['fil_salesman_state'] > 0) {
            $queryConditions .= " AND s.state=" . $_SESSION['fil_salesman_state'];
        }
        if (isset($_SESSION['fil_retailer_state']) && !empty($_SESSION['fil_retailer_state']) && $_SESSION['fil_retailer_state'] > 0) {
            $queryConditions .= " AND r.state=" . $_SESSION['fil_retailer_state'];
        }
        if (isset($_SESSION['fil_distributor_state']) && !empty($_SESSION['fil_distributor_state']) && $_SESSION['fil_distributor_state'] > 0) {
            $queryConditions .= " AND d.state=" . $_SESSION['fil_distributor_state'];
        }

        if (isset($_SESSION['fil_salesman_zone']) && !empty($_SESSION['fil_salesman_zone']) && $_SESSION['fil_salesman_zone'] > 0) {
            $queryConditions .= " AND zms.zone_id=" . $_SESSION['fil_salesman_zone'];
        }
        if (isset($_SESSION['fil_retailer_zone']) && !empty($_SESSION['fil_retailer_zone']) && $_SESSION['fil_retailer_zone'] > 0) {
            $queryConditions .= " AND zmr.zone_id=" . $_SESSION['fil_retailer_zone'];
        }
        if (isset($_SESSION['fil_distributor_zone']) && !empty($_SESSION['fil_distributor_zone']) && $_SESSION['fil_distributor_zone'] > 0) {
            $queryConditions .= " AND zmd.zone_id=" . $_SESSION['fil_distributor_zone'];
        }
        if (isset($_SESSION['fil_month']) && !empty($_SESSION['fil_month']) && isset($_SESSION['fil_year']) && !empty($_SESSION['fil_year'])) {
            $firstDate = date('Y-m-d', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $lastdate = date('Y-m-t', strtotime($_SESSION['fil_year'] . '-' . $_SESSION['fil_month'] . '-01'));
            $fromdate = " and o.date_of_order >= '" . $firstDate . "'";
            $todate = " and o.date_of_order <= '" . $lastdate . "'";
        }

//		if(isset($_SESSION['fil_order_status']) && !empty($_SESSION['fil_order_status'])){
//			$queryConditions .= " AND o.order_status='".$_SESSION['fil_order_status']."'";
//		}
//		else{
//			//$queryConditions .=" and order_status IN('A','I') ";
//		}
        if (isset($_SESSION['fil_order_type']) && !empty($_SESSION['fil_order_type'])) {
            $queryConditions .= " AND o.order_type='" . $_SESSION['fil_order_type'] . "'";
        }
//		else{
//			//$queryConditions .=" AND o.order_type !='Return'";
//            }

        $queryConditions = $queryConditions . $salesmanCnd . $fromdate . $todate;

        $rtype = " o.type='R' ";
        $odrDtlJoin = "";
        $odrDtlgrpBy = "";
        if ($rtype) {
            if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
                $RoleBrands = $this->getUserRoleBrand();
                if (!empty($RoleBrands)) {
                    $salesman = " AND i.brand_id IN(" . $RoleBrands . ")";
                    $odrDtlJoin = " left join table_order_detail as ord on o.order_type != 'No' and ord.order_id = o.order_id and ord.type = 1
					left join table_item as i on i.item_id = ord.item_id ";
                    $odrDtlgrpBy = " GROUP BY o.order_id ";
                }
            }
            $where = $queryConditions;
            if ($query) $where .= " AND $qtype LIKE '%$query%' ";
            $auRec = $this->_getSelectList("table_order as o    
			left join table_order_detail as ord on o.order_type != 'No' and ord.order_id = o.order_id and ord.type = 1
            left join table_item as i on i.item_id = ord.item_id
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id
            left join table_salesman_hierarchy_relationship as shr on shr.salesman_id = s.salesman_id
            left join table_salesman as s2 on s2.salesman_id=shr.rpt_user_id
            left join table_distributors as d on o.distributor_id=d.distributor_id 
            left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id 
            LEFT JOIN table_retailer_group as rg ON rg.group_id = r.group_id
            left join table_retailer_type_master as rtm ON rtm.type_id=r.type_id
            left join table_relationship as rel ON rel.relationship_id=r.relationship_id 
            left join state as str on str.state_id=r.state 
            left join state as sts on sts.state_id=s.state 
            left join state as std on std.state_id=d.state 
            left join city as c on c.city_id=r.city 
			left join table_zone_state_mapping as zms on zms.state_id=s.state and zms.account_id = s.account_id
			left join table_zone as sz on sz.zone_id=zms.zone_id 
			left join table_zone_state_mapping as zmr on zmr.state_id=r.state and zmr.account_id = r.account_id
			left join table_zone as rz on rz.zone_id=zmr.zone_id
			left join table_zone_state_mapping as zmd on zmd.state_id=d.state and zmd.account_id = d.account_id
			left join table_zone as dz on dz.zone_id=zmd.zone_id",
                "o.order_id,o.order_by,count(ord.item_id) as total_item,SUM(ord.acc_quantity) as total_ordered_qty,o.retailer_id,o.order_type,o.order_status,
			o.date_of_order,o.time_of_order,o.acc_total_invoice_amount,o.updated_by_app,
r.retailer_name,r.retailer_code,r.retailer_address,r.retailer_location,r.lat as retlat,cm.channel_name,
r.display_outlet,r.lng as retlng,s.salesman_name,s.employee_code,
s2.salesman_name as rpt_to,d.distributor_name,d.distributor_code,sz.zone_name as sal_zone,rz.zone_name as ret_zone,dz.zone_name as dist_zone,str.state_name as ret_state,sts.state_name as sal_state,std.state_name as dist_state,c.city_name,rg.group_name,rtm.type_name,rel.relationship_code as relation,o.delivery_date,o.comments,o.tag_description,o.photo_count", $rp, $where . " group by o.order_id " . $sort, '');

            $auRecCount = $this->_getSelectList("table_order as o $odrDtlJoin           
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_salesman as s on o.salesman_id=s.salesman_id            
            left join table_distributors as d on o.distributor_id=d.distributor_id 
            left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id
            left join state as str on str.state_id=r.state 
            left join state as sts on sts.state_id=s.state 
            left join state as std on std.state_id=d.state
			left join table_zone_state_mapping as zms on zms.state_id=s.state and zms.account_id = s.account_id
			left join table_zone as sz on sz.zone_id=zms.zone_id 
			left join table_zone_state_mapping as zmr on zmr.state_id=r.state and zmr.account_id = r.account_id
			left join table_zone as rz on rz.zone_id=zmr.zone_id
			left join table_zone_state_mapping as zmd on zmd.state_id=d.state and zmd.account_id = d.account_id
			left join table_zone as dz on dz.zone_id=zmd.zone_id			
			", 'COUNT(o.order_id) as total', '', $where . $odrDtlgrpBy . $sort);

            $total = $auRecCount[0]->total;
            if (($_SESSION['salesmanId'] > 0) && ($_SESSION['role_id'] > 0)) {
                if (!empty($RoleBrands)) {
                    $total = count($auRecCount);
                }
            } else {
                $total = $auRecCount[0]->total;
            }

        }


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        for ($i = 0; $i < count($auRec); $i++) {

            //----- Order by condtion -----

            switch ($auRec[$i]->order_by) {
                case 'S':
                    $order_by = $this->AliaseUsers['salesman'];
                    break;
                case "D":
                    $order_by = $this->AliaseUsers['distributor'];
                    break;
                case "R":
                    $order_by = $this->AliaseUsers['retailer'];
                    break;
                default :
                    $order_by = '';
            }

            //--------

            $orderType = '';
            if (strtolower($auRec[$i]->order_type) == 'yes') {
                $orderType = 'Sales Order';
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = "Cancelled";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "A" : "P";
            }
            if (strtolower($auRec[$i]->order_type) == 'no') {
                $orderType = 'No Order';

                $status = ($auRec[$i]->order_status == 'A') ? "No Order" : "Processed";
                $color = ($auRec[$i]->order_status == 'A') ? "I" : "P";
                $NoOrderImage = '<a href=\"no_order_image.php?ordId=' . base64_encode($auRec[$i]->order_id) . '\" ' . $targetBlank . '>View Image</a>';
            } else {
                $NoOrderImage = "-";
            }
            if (strtolower($auRec[$i]->order_type) == 'adhoc') {
                $orderType = 'Adhoc Order';
                if ($auRec[$i]->order_status == 'A') {
                    $status = "New Adhoc Order";
                }
                if ($auRec[$i]->order_status == 'I') {
                    $status = "Processed";
                }
                if ($auRec[$i]->order_status == 'D') {
                    $status = "Dispatched";
                }
                if ($auRec[$i]->order_status == 'C') {
                    $status = "Cancelled";
                }
                $color = ($auRec[$i]->order_status == 'A') ? "O" : "P";
            }

            if (strtolower($auRec[$i]->order_type) == 'return') {
                $orderType = 'Return Order';
            }

            if ($auRec[$i]->updated_by_app > 0) {
                $color = 'U';
            }

            if ($flag == 1) {
                $photo = '<a href=\"retailer_survey.php?retId=' . $auRec[$i]->retailer_id . '\" ' . $targetBlank . '>View Survey Photo</a>';
            }
            //Retailer location maping only survey table
            if ($auRec[$i]->retlat != '') {
                $map = '<a href=\"show_map.php?ord=' . base64_encode($auRec[$i]->order_id) . '\" ' . $targetBlank . '>View on Map</a>';
                $colortd = "out";
            } else {
                $map = "-";
                $colortd = "out";
            }
            $date_of_order = $this->_changeDate($auRec[$i]->date_of_order);
            $date_of_delivery = $this->_changeDate($auRec[$i]->delivery_date);
            $salRptTo = '';
            $salRptTo = $auRec[$i]->rpt_to;
            /*----Display Outlet ----*/
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'Yes';
            } else if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            } else {
                $outlet = '';
            }
            $viewOrderImage = '<a href="dynamic_order_image.php?ordId=' . base64_encode($auRec[$i]->order_id) . '" ' . $targetBlank . '>View Image</a>';
            //$ttlItems = isset($orderitms[$auRec[$i]->order_id]) && !empty($orderitms[$auRec[$i]->order_id]) ? $orderitms[$auRec[$i]->order_id] : 0;
            $ttlItems = $auRec[$i]->total_item;
            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($date_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->time_of_order)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_id)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->acc_total_invoice_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($ttlItems)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total_ordered_qty)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
//            $json .= ',"'.ucwords(addslashes($auRec[$i]->region_name)). '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dist_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->dist_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_state)) . '"';
            $json .= ',"' . ucwords(addslashes($salRptTo)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_zone)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->ret_state)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->group_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->channel_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->relation)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->type_name)) . '"';
            $json .= ',"' . ucwords(addslashes($outlet)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_location))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . $map . '"';
            $json .= ',"' . $photo . '"';
            $json .= ',"' . $orderType . '"';
            $json .= ',"' . $order_by . '"';
            $json .= ',"' . $status . '"';
            $json .= ',"' . $NoOrderImage . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->comments))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . ucwords(addslashes($date_of_delivery)) . '"';
            $json .= ',"' . ucwords(addslashes($viewOrderImage)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"]';

            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo : End : Jatin : 7 March 2024 : Report item wise color order

//Todo Start : sudhanshu : 12 march 2024 retailer mo order report
    function showRetailerNoOrderReport()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order DESC';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//        $_objAdmin = new Admin();
        $distributorId = "";
        $stateId = "";
        $location_id = '';
        if ($_SESSION['FromDate'] != '') {
            $fromdate = "  ods.date_of_order BETWEEN ('" . date('Y-m-d', strtotime($_SESSION['FromDate'])) . "')";
        } else {
            $fromdate = "  ods.date_of_order BETWEEN ('" . date('Y-m-d') . "') ";
        }
        if ($_SESSION['ToDate'] != '') {
            $todate = " and ('" . date('Y-m-d', strtotime($_SESSION['ToDate'])) . "')";
        } else {
            $todate = " and ('" . date('Y-m-d') . "')";
        }

        if ($_SESSION['Disstate'] != '') {
            $stateId = " and st.state_id='" . $_SESSION['Disstate'] . "'";
        }
        if ($_SESSION['Dislocation_id'] != '') {
            $location_id = " and ct.city_id='" . $_SESSION['Dislocation_id'] . "'";
        }
        //Added condition for role based access at brand lavel.
//        $RoleBrands = $this->getUserRoleBrand();
//        $brandCnd = '';
//        if(!empty($RoleBrands)){
//            $brandCnd = " and b.brand_id IN(".$RoleBrands.")";
//            $salesman ='';
//        }
        $where = " $fromdate  $todate $retailerId $stateId $location_id and d.retailer_name!='' and LOWER(ods.order_type) = 'no' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order as ods
    left join table_retailer as d on d.retailer_id=ods.retailer_id 
    left join state as st on st.state_id=d.state 
    left join city as ct on ct.city_id=d.city  
    left join table_location as loc on loc.location_id=d.location_id  
    left join table_salesman as s on s.salesman_id=ods.salesman_id
    LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
    LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id
   ',
            "ods.order_id,ods.date_of_order,ods.time_of_order,ods.order_type,ods.reason,ods.tag_description as no_order_reason,ods.comments,d.retailer_id,sz.zone_name,d.retailer_name,d.retailer_code,st.state_id,st.state_name,ct.city_name,s.salesman_id,s.salesman_name,s.employee_code,loc.location_name", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_order as ods  
    left join table_retailer as d on d.retailer_id=ods.retailer_id 
    left join state as st on st.state_id=d.state 
    left join city as ct on ct.city_id=d.city 
    left join table_location as loc on loc.location_id=d.location_id  
    left join table_salesman as s on s.salesman_id=ods.salesman_id
    LEFT JOIN table_zone_state_mapping as szsm on szsm.state_id = d.state and szsm.account_id = d.account_id
    LEFT JOIN table_zone as sz on sz.zone_id = szsm.zone_id',
            "count(ods.order_id) AS total", '', $where);
    //    echo '<pre>';
    //    print_r($where);die;
    //    print_r($auRec);die;
//        die(' die ehre');
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
                $targetBlank = '';
            } else {
                $targetBlank = "target='_blank'";
            }
            $image = '<a href="rotate_img.php?retOrdId=' . base64_encode($auRec[$i]->order_id) . '" ' .
                $targetBlank .
                '>View Image</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($this->_changeDate($auRec[$i]->date_of_order))) . '"';
            $json .= ',"' . addslashes($auRec[$i]->time_of_order) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zone_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->no_order_reason) . '"';
            $json .= ',"' . addslashes($auRec[$i]->comments) . '"';
            $json .= ',"' . addslashes($image) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
//Todo End : sudhanshu : 12 march 2024 retailer mo order report
    // Todo : Start : Sudhanshu :  uom account mapping : 12 march 2024

    function addItemUOMMapping()
    {
        $account_id = $_POST['account_id'];
        $this->mysql_query("DELETE FROM table_item_uom_account_mapping WHERE account_id='" . $account_id . "' ");

        $uomList = $_POST['uom_map'];

        if (is_array($uomList) && count($uomList) > 0) {
            foreach ($uomList as $uom) {
                $data['account_id'] = $_POST['account_id'];
                $data['uom_id'] = $uom;

                $data['last_update'] = date('Y-m-d H:i:s');

                $id = $this->_dbInsert($data, 'table_item_uom_account_mapping');
            }
        }


    }


    // Todo : End : Sudhanshu :  uom account mapping : 12 march 2024

    // Todo : Start : Jatin : 13 March 2024 : To get a salesman wise route retailer

    function getSalesmanRouteWiseRetailers($salesId, $account_id, $featureList)
    {

        $currDate = date('Y-m-d');
        $_objArrayList = new ArrayList();
        $retIdArr = [];


        foreach ($salesId as $key => $salesmanId) {


            //first we will fetch the logged in salesman's route retailers
            if (count($featureList) > 0 && in_array(94, $featureList)) {
                $condition = " sd.status='A' AND r.status='A' AND  sd.month='" . date('n') . "' and  sd.year='" . date('Y') . "' and sd.salesman_id='" . $salesmanId . "' and d.assign_day<='" . date('j') . "' AND ret.retailer_id > 0 ORDER BY ret.retailer_id ASC";

                $getRet = $this->_getSelectList("table_route_scheduled as sd 
		left join table_route_schedule_details as d on sd.route_schedule_id=d.route_schedule_id  
		left join table_route as r on r.route_id=d.route_id 
		left join table_route_retailer as ret on ret.route_id = r.route_id", "DISTINCT(ret.retailer_id) as retailer_id", "", " $condition ");

                if (is_array($getRet) && (count($getRet) > 0)) {
                    foreach ($getRet as $key => $retData) {
                        $retIdArr[$salesmanId][] = $retData->retailer_id;
                    }
                }
            } else if (count($featureList) > 0 && in_array(95, $featureList)) {

                $condition = "  rs.salesman_id = '" . $salesmanId . "' and rs.month='" . date('n') . "' and rs.year='" . date('Y') . "' and rs.status='A' and rsd.status='A' and rsd.retailer_id > 0 ORDER BY rsd.retailer_id ASC";

                $getRet = $this->_getSelectList("table_salesman_retailer_assignment as rs
		left join table_salesman_retailer_assignment_details as rsd on rs.route_schedule_id=rsd.route_schedule_id", "DISTINCT(rsd.retailer_id) as retailer_id", "", " $condition ");

                if (is_array($getRet) && (count($getRet) > 0)) {
                    foreach ($getRet as $key => $retData) {
                        $retIdArr[$salesmanId][] = $retData->retailer_id;
                    }
                }
            } else if (count($featureList) > 0 && in_array(119, $featureList)) {
                $condition = "  rsd.salesman_id = '" . $salesmanId . "' AND rsd.retailer_id > 0  ORDER BY rsd.retailer_id ASC ";

                $getRet = $this->_getSelectList("table_customer_salesman_mapping as rsd", "DISTINCT(rsd.retailer_id) as retailer_id", "", " $condition ");

                if (is_array($getRet) && (count($getRet) > 0)) {
                    foreach ($getRet as $key => $retData) {
                        $retIdArr[$salesmanId][] = $retData->retailer_id;
                    }
                }
            } else {
                $condition = " s.from_date<='" . $currDate . "' and s.to_date>='" . $currDate . "' and s.status='A' and ret.retailer_id > 0 AND r.status='A' and s.salesman_id='" . $salesmanId . "' ORDER BY ret.retailer_id ASC ";

                $getRet = $this->_getSelectList("table_route_schedule as s 
		LEFT JOIN table_route_schedule_by_day as d on s.route_schedule_id=d.route_schedule_id 
		LEFT JOIN table_route as r on FIND_IN_SET(r.route_id,concat(if(d.Sun='',0,d.Sun),',',if(d.Mon='',0,d.Mon),',',if(d.Tue='',0,d.Tue),',',if(d.Wed='',0,d.Wed),',',if(d.Thu='',0,d.Thu),',',if(d.Fri='',0,d.Fri),',',if(d.Sat='',0,d.Sat)))
		LEFT JOIN table_route_retailer as ret on ret.route_id = r.route_id", 'DISTINCT(ret.retailer_id) as retailer_id', '', " $condition ");

                if (is_array($getRet) && (count($getRet) > 0)) {
                    foreach ($getRet as $key => $retData) {
                        $retIdArr[$salesmanId][] = $retData->retailer_id;
                    }
                }
            }
        }


//        echo '<pre>';
//        print_r($retIdArr);
////        print_r(implode(',',array_unique($retIdArr)));
//        die(' die here');

        if (is_array($retIdArr) && (count($retIdArr) > 0)) {
//            return array_unique($retIdArr);
            return $retIdArr;
        } else {
            return [];
        }
    }

// Todo : End : Jatin : 13 March 2024 : To get a salesman wise route retailer

    //Todo Start : sudhanshu 22 march 2024 show stockist payment

    function showStockistPaymentTransactions()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'o.payment_date';
        if (!$sortorder)
            $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromDisList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromDisList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToDisList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToDisList']));
        } else {
            $todate = date('Y-m-d');
        }
        if ($_SESSION['stockist_id'] != '' && $_SESSION['userLoginType'] != 7) {
            $disLogCond = " AND o.stockist_id='" . $_SESSION['stockist_id'] . "' ";
        }
        if ($_SESSION['userLoginType'] == 7) {
            $disLogCond = " AND o.stockist_id='" . $_SESSION['stockistId'] . "' ";
        }
        if ($query != '' && ($qtype == "payment_date" || $qtype == "due_date")) {
            $query = date("Y-m-d", strtotime($query));
        }
        $where = " o.payment_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' $disLogCond";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_stockist_payment_transactions AS o
				LEFT JOIN table_stockist as s on s.stockist_id = o.stockist_id
			
				LEFT JOIN table_payment_method as pp on pp.payment_method_id = o.payment_method_id',
            " o.*, s.stockist_name, s.stockist_code, pp.payment_method_desc",
            $rp, $where . $sort, '');
        $auRec1 = $this->_getSelectList('table_stockist_payment_transactions AS o
					LEFT JOIN table_stockist as s on s.stockist_id = o.stockist_id
					', "COUNT(*) AS total", '', $where . $sort, '');
        $total = $auRec1[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'C') ? 'Cancelled' : '';
            $pending_amount = ROUND((ROUND($auRec[$i]->total_amount, 0) - ($auRec[$i]->adjusted_amount)), 0);
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->payment_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->payment_id)) . '"';
            $json .= ',"' . ucwords(addslashes($this->_changeDate($auRec[$i]->payment_date))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->payment_time)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->payment_ref_no)) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(ROUND($auRec[$i]->total_amount), 0))) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(ROUND($auRec[$i]->adjusted_amount), 0))) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($pending_amount, 2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->payment_method_desc)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->cheque_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->bank_details)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace(array("\n", "\r"), '', $auRec[$i]->payment_remarks))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->clearing_status)) . '"';
            $json .= ',"' . ucwords($status) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->remarks)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

//Todo End : sudhanshu 22 march 2024 show stockist payment

//Todo Start : sudhanshu 27 march 2024 stockist payment adjustment
    function showStockistDebitEntries($stockist_id)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'category_name';
        if (!$sortorder)
            $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " cat_type = 'C' ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auResult = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Invoice' as doc_type,substr(o.bill_no, -10) as 
	document_no,o.bill_date, o.due_date,
        o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
		o.acc_total_invoice_amount-COALESCE(sum(p.received_amount),
         0) AS pending_amount
            FROM stockist_single_invoice_record as o 
		left join table_stockist_payment_received as p on p.order_id = o.invoice_id 
		WHERE o.order_type='Yes'  AND
        o.invoice_status='A' AND o.order_status='D' 
		AND o.stockist_id='" . $stockist_id . "' AND
       o.clearing_status!='Full'  Group by o.invoice_id )
		Union
	(SELECT o.note_id as id, 'DN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,o.due_date, o.total_amount as total_amount,
	COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount
		FROM table_stockist_credit_debit_note as o left join table_stockist_payment_received as p on p.note_id = o.note_id
		WHERE o.note_type='D' AND o.note_status='A' AND o.stockist_id='" . $stockist_id . "' 
		 AND o.clearing_status!='Full' Group by o.note_id )) as tm",
            "tm.*", $rp, '', ' ORDER BY tm.due_date ASC');

        $auResultTotal = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Invoice' as doc_type,substr(o.bill_no, -10) as document_no,o.bill_date, o.due_date,
        o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.acc_total_invoice_amount-COALESCE(sum(p.received_amount),
         0) AS pending_amount
        FROM stockist_single_invoice_record as o 
		left join table_stockist_payment_received as p on p.order_id = o.invoice_id 
		WHERE o.order_type='Yes' AND
        o.invoice_status='A' AND o.order_status='D' AND o.stockist_id='" . $stockist_id . "' 
		 AND
       o.clearing_status!='Full'  Group by o.invoice_id )
		Union
	(SELECT o.note_id as id, 'DN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,o.due_date, o.total_amount as total_amount,
	COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount
		FROM table_stockist_credit_debit_note as o left join table_stockist_payment_received as p on p.note_id = o.note_id
		WHERE o.note_type='D' AND o.note_status='A' 
		AND o.stockist_id='" . $stockist_id . "' AND o.clearing_status!='Full' Group by o.note_id )) as tm",
            "count(*) as total", '', '', '');
        $total = $auResultTotal[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auResult); $i++) {
            if ($auResult[$i]->pending_amount >= 1) {
                //echo "ddd";
                $input = ' <input type=\"checkbox\" class=\"checkbox\" data-adj=\"' . $auResult[$i]->id . '\" data-adt=\"' . $auResult[$i]->doc_type . '\" data-dat=\"' . $auResult[$i]->due_date . '\" name=\"debit[]\" />';
                if ($rc)
                    $json .= ",";
                $json .= "\n{";
                $json .= '"id":"' . $auResult[$i]->id . '",';
                $json .= '"cell":["' . $input . '"';
                $json .= ',"' . addslashes($auResult[$i]->doc_type) . '"';
                $json .= ',"' . addslashes($auResult[$i]->document_no) . '"';
                $json .= ',"' . addslashes($auResult[$i]->bill_date) . '"';
                $json .= ',"' . addslashes($auResult[$i]->due_date) . '"';
                $json .= ',"' . addslashes(str_replace(',', '', number_format(ROUND($auResult[$i]->total_amount), 0))) . '"';
                $json .= ',"' . addslashes(str_replace(',', '', number_format(ROUND($auResult[$i]->adjusted_amount), 0))) . '"';
                $json .= ',"' . addslashes(str_replace(',', '', number_format(ROUND($auResult[$i]->pending_amount), 0))) . '"]';
                $json .= "}";
                $rc = true;
            }
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showStockistCreditEntries($stockist_id)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname)
            $sortname = 'category_name';
        if (!$sortorder)
            $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " cat_type = 'C' ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auResult = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Return/Auto CN' as doc_type,substr(o.bill_no, -10) as document_no
	,o.bill_date,o.due_date, 
	o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.acc_total_invoice_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.bill_date as document_date 
	FROM stockist_single_invoice_record as o 
	left join table_stockist_payment_received as p on p.return_order_id = o.invoice_id 
	WHERE o.order_type='Return'  AND o.invoice_status='A' 
	AND o.order_status='D' AND o.stockist_id='" . $stockist_id . "'
	AND o.clearing_status!='Full' Group by o.invoice_id)
	Union
	(SELECT o.note_id as id, 'CN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,
	o.due_date, o.total_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.date_of_note as document_date 
	FROM table_stockist_credit_debit_note as o left join table_stockist_payment_received as p on p.credit_note_id = o.note_id 
	WHERE o.note_type='C' AND o.note_status='A' AND o.stockist_id='" . $stockist_id . "' 
	 AND o.clearing_status!='Full' Group by o.note_id)
	union
	(SELECT o.payment_id as id, 'PMT' as doc_type ,o.payment_id as document_no, o.payment_date as bill_date,o.payment_date as due_date, o.total_amount as total_amount,
	COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.total_amount-COALESCE(sum(p.received_amount), 0) AS 
	pending_amount,
	o.payment_date as document_date FROM table_stockist_payment_transactions as o left join table_stockist_payment_received as p 
	on p.transaction_id = o.payment_id WHERE o.status='A' and o.stockist_id='" . $stockist_id . "' 
	 AND o.status='A' AND o.clearing_status!='Full' 
	Group by o.payment_id)) as tm", "tm.*", $rp, '', ' ORDER BY tm.document_date ASC');

        $auResultTotal = $this->_getSelectList2("((SELECT o.invoice_id as id, 'Return' as doc_type,substr(o.bill_no, -10) as document_no
	,o.bill_date,o.due_date, 
	o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.acc_total_invoice_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.bill_date as document_date 
	FROM stockist_single_invoice_record as o 
	left join table_stockist_payment_received as p on p.return_order_id = o.invoice_id 
	WHERE o.order_type='Return' AND o.invoice_status='A' 
	AND o.order_status='D' AND o.stockist_id='" . $stockist_id . "' 
	AND o.clearing_status!='Full' Group by o.invoice_id)
	Union
	(SELECT o.note_id as id, 'CN' as doc_type ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,
	o.due_date, o.total_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount, 
	o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.date_of_note as document_date 
	FROM table_stockist_credit_debit_note as o left join table_stockist_payment_received as p on p.credit_note_id = o.note_id 
	WHERE o.note_type='C' 
	AND o.stockist_id='" . $stockist_id . "' AND o.clearing_status!='Full' Group by o.note_id)
	union
	(SELECT o.payment_id as id, 'PMT' as doc_type ,o.payment_id as document_no, o.payment_date as bill_date,o.payment_date as due_date, o.total_amount as total_amount,
	COALESCE(sum(p.received_amount), 0) as adjusted_amount, o.total_amount-COALESCE(sum(p.received_amount), 0) AS 
	pending_amount,
	o.payment_date as document_date FROM table_stockist_payment_transactions as o left join table_stockist_payment_received as p 
	on p.transaction_id = o.payment_id WHERE o.status='A' and o.stockist_id='" . $stockist_id . "' 
	AND o.status='A' AND o.clearing_status!='Full' 
	Group by o.payment_id)) as tm", "count(*) as total", '', '', '');
        $total = $auResultTotal[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auResult); $i++) {
            if ($auResult[$i]->pending_amount >= 1) {
                $input = ' <input type=\"checkbox\" class=\"checkbox\" data-adj=\"' . $auResult[$i]->id . '\" data-adt=\"' . $auResult[$i]->doc_type . '\" data-dat=\"' . $auResult[$i]->document_date . '\" name=\"credit[]\" />';
                if ($rc)
                    $json .= ",";
                $json .= "\n{";
                $json .= '"id":"' . $auResult[$i]->id . '",';
                $json .= '"cell":["' . $input . '"';
                $json .= ',"' . addslashes($auResult[$i]->doc_type) . '"';
                $json .= ',"' . addslashes($auResult[$i]->document_no) . '"';
                $json .= ',"' . addslashes($auResult[$i]->bill_date) . '"';
                $json .= ',"' . addslashes($auResult[$i]->document_date) . '"';
                $json .= ',"' . addslashes(ROUND($auResult[$i]->total_amount, 0)) . '"';
                $json .= ',"' . addslashes(ROUND($auResult[$i]->adjusted_amount, 0)) . '"';
                $json .= ',"' . addslashes(ROUND($auResult[$i]->pending_amount, 0)) . '"]';
                $json .= "}";
                $rc = true;
            }
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

//Todo End : sudhanshu 27 march 2024 stockist payment adjustment
//Todo Start : sudhanshu 27 march 2024 mapped distributor list for stockist
    function showDistributorStockist($flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'd.distributor_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $distCondi = '';
        if ((intval($_SESSION['userLoginType']) == 7) && (intval($_SESSION['stockistId']) > 0)) {
            $distCondi = ' AND d.stockist_id = ' . intval($_SESSION['stockistId']);
        }
        $where = " d.status ='A' $distCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_distributors as d 
       
        left join table_web_users as w on w.distributor_id=d.distributor_id 
        left join country as con on con.country_id = d.country
        left join state as s on s.state_id=d.state 
        left join city as c on c.city_id=d.city 
        left join table_location as loc ON loc.location_id = d.location
       
        left join table_distributor_type_master as tm on tm.dis_type_id=d.distributor_type_id 
        left join table_stockist as st on st.stockist_id=d.stockist_id', "d.*,w.username,st.stockist_name,st.stockist_code,w.email_id,w.web_user_id,tm.dis_type_name,con.country_name,s.state_name,c.city_name,loc.location_name", $rp, $where . ' GROUP BY d.distributor_id ' . $sort, '');
        $auRecCount = $this->_getSelectList('table_distributors as d 
       
        left join table_web_users as w on w.distributor_id=d.distributor_id 
        left join country as con on con.country_id = d.country
        left join state as s on s.state_id=d.state 
        left join city as c on c.city_id=d.city 
        left join table_location as loc ON loc.location_id = d.location
       
        left join table_distributor_type_master as tm on tm.dis_type_id=d.distributor_type_id 
        left join table_stockist as st on st.stockist_id=d.stockist_id', 'd.distributor_id', '', $where . ' GROUP BY d.distributor_id ');
//        $total= $auRecCount[0]->total;
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r", "\t");
        for ($i = 0; $i < count($auRec); $i++) {
            $surveyStatus = '';
            if (strtolower($auRec[$i]->survey_status) == 'c') {
                $surveyStatus = 'Surveyed';
            } elseif (strtolower($auRec[$i]->survey_status) == 'i') {
                $surveyStatus = 'Not Surveyed';
            } elseif (strtolower($auRec[$i]->survey_status) == 'n') {
                $surveyStatus = 'Rejected';
            } else {
                $surveyStatus = '';
            }
            /* Display outlet*/

            $start_date = $this->_changeDate($auRec[$i]->start_date);
            if ($auRec[$i]->distributor_dob == "0000-00-00") {
                $distributor_dob = "-";
            } else {
                $distributor_dob = $this->_changeDate($auRec[$i]->distributor_dob);
            }


//            $gstPhotoLink = '<a href=\"view_gst_photo.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View GST Photo</a>';
            $gstPhotoLink = '<a href=\"rotate_img.php?retId=' . $auRec[$i]->distributor_id . '\" target=\"_blank\">View GST Photo</a>';

//            $aadharPhotoLink = '<a href=\"view_aadhar_photo.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Aadhar Photo</a>';

            $aadharPhotoLink = '<a href=\"rotate_img.php?adId=' . $auRec[$i]->distributor_id . '\" target=\"_blank\">View Aadhar Photo</a>';

            $addressLink = '<a href=\"distributor_address.php?disId=' . $auRec[$i]->distributor_id . '\" target=\"_blank\">View Address</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"cell":["' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->dis_type_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $surveyStatus))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->stockist_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->stockist_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->country_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->state_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->city_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->location_name))) . '"';

            // $json .= ',"' . $survey . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->distributor_address))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->zipcode))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_phone_no)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_phone_no2)) . '"';
            // $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_leadline_no)) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->contact_person))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->contact_number)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->contact_person2))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->contact_number2)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_email)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->distributor_email2)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $distributor_dob)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->gst_no)) . '"';
            $json .= ',"' . $gstPhotoLink . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->aadhar_no)) . '"';
            $json .= ',"' . $aadharPhotoLink . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->pan_no)) . '"';
            //  $json .= ',"' . addslashes($start_date) . '"';
            $json .= ',"' . $addressLink . '"';
            $json .= ',"' . addslashes($start_date) . '"]';

            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
//Todo End : sudhanshu 27 marc 2024 mapped distributor list for stockist

    // Todo Start : Jatin : 29 March 2024 : Account wise Active Status Report

    function showAccountWiseActiveUser()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'account_id';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $where = " ac.account_id > 0 ";

        $condi = " ac.account_id > 0 and ac.company_name !=''";

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2("table_account as ac 
        LEFT JOIN table_web_users as w ON w.account_id = ac.account_id AND w.status = 'A' AND w.user_type > 0 ", "ac.*,count(w.account_id) as active_login_users", $rp, $condi . '  GROUP BY ac.account_id ' . $sort, '');

        // To Get All Login Salesman ,retailer ,Distributor and Stockist

        $SalArr = $this->_getSelectList2("table_web_users as ac 
        LEFT JOIN table_salesman as s ON s.salesman_id = ac.salesman_id ", "ac.account_id,count(DISTINCT ac.salesman_id) as active_salesman_users", '', " $where AND s.account_id > 0 GROUP BY ac.account_id ORDER BY ac.account_id ASC ");

        $activeUsersArr = [];
        if (is_array($SalArr) && (count($SalArr) > 0)) {
            foreach ($SalArr as $key => $auRec2Data) {
                $activeSaleUsersArr[$auRec2Data->account_id] = $auRec2Data->active_salesman_users;
            }
        }

        $DisArr = $this->_getSelectList2("table_web_users as ac 
        LEFT JOIN table_distributors as s ON s.distributor_id = ac.distributor_id  ", "ac.account_id,count(DISTINCT ac.distributor_id) as active_distributor_users", '', " $where AND s.account_id > 0  GROUP BY ac.account_id ORDER BY ac.account_id ASC ");

        $activeUsersArr = [];
        if (is_array($DisArr) && (count($DisArr) > 0)) {
            foreach ($DisArr as $key => $auRec2Data1) {
                $activeDisUsersArr[$auRec2Data1->account_id] = $auRec2Data1->active_distributor_users;
            }
        }

        $StkArr = $this->_getSelectList2("table_web_users as ac 
        LEFT JOIN table_stockist as s ON s.stockist_id = ac.stockist_id  ", "ac.account_id,count(DISTINCT ac.stockist_id) as active_stockist_users", '', " $where AND s.account_id > 0  GROUP BY ac.account_id ORDER BY ac.account_id ASC ");

        $activeUsersArr = [];
        if (is_array($StkArr) && (count($StkArr) > 0)) {
            foreach ($StkArr as $key => $auRec2Data1) {
                $activeStkUsersArr[$auRec2Data1->account_id] = $auRec2Data1->active_stockist_users;
            }
        }

        $RetArr = $this->_getSelectList2("table_web_users as ac 
        LEFT JOIN table_retailer as s ON s.retailer_id = ac.retailer_id  ", "ac.account_id,count(DISTINCT ac.retailer_id) as active_retailer_users", '', " $where AND s.account_id > 0  GROUP BY ac.account_id ORDER BY ac.account_id ASC ");

        $activeUsersArr = [];
        if (is_array($RetArr) && (count($RetArr) > 0)) {
            foreach ($RetArr as $key => $auRec2Data1) {
                $activeRetUsersArr[$auRec2Data1->account_id] = $auRec2Data1->active_retailer_users;
            }
        }


        // To Get All Login Salesman ,retailer ,Distributor and Stockist

        $auRecCount = $this->_getSelectList2("table_account as ac 
LEFT JOIN table_web_users as w ON w.account_id = ac.account_id AND w.status = 'A' AND w.user_type > 0 ", 'ac.account_id', '', $condi . ' GROUP BY ac.account_id ' . $sort);

        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            $activeSalesman = (isset($activeSaleUsersArr[$auRec[$i]->account_id]) && count
                ($activeSaleUsersArr[$auRec[$i]->account_id] > 0)) ? $activeSaleUsersArr[$auRec[$i]->account_id] : '0';

            $activeRetailer = (isset($activeRetUsersArr[$auRec[$i]->account_id]) && count
                ($activeRetUsersArr[$auRec[$i]->account_id] > 0)) ? $activeRetUsersArr[$auRec[$i]->account_id] : '0';

            $activeDistributor = (isset($activeDisUsersArr[$auRec[$i]->account_id]) && count
                ($activeDisUsersArr[$auRec[$i]->account_id] > 0)) ? $activeDisUsersArr[$auRec[$i]->account_id] : '0';

            $activeStockist = (isset($activeStkUsersArr[$auRec[$i]->account_id]) && count
                ($activeStkUsersArr[$auRec[$i]->account_id] > 0)) ? $activeStkUsersArr[$auRec[$i]->account_id] : '0';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->account_id . '",';
            $json .= '"cell":["' . "" . '"';
            $json .= ',"' . "" . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->company_name)) . '"';
            $json .= ',"' . $activeSalesman . '"';
            $json .= ',"' . $activeRetailer . '"';
            $json .= ',"' . $activeDistributor . '"';
            $json .= ',"' . $activeStockist . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Jatin : 29 March 2024 : Account wise Active Status Report
//Todo Start : sudhanshu 1 April 2024 show stockist CN/DN
    function showStockistCreditDebitNote($flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_note desc';
        if (!$sortname)
            $sortname = 'date_of_note';
        if (!$sortorder)
            $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $qtype = $_REQUEST['qtype'];
        if ($_REQUEST['query'] == 'Credit') {
            $query = 'C';
        } elseif ($_REQUEST['query'] == 'Debit') {
            $query = 'D';
        } else {
            $query = $_REQUEST['query'];
        }
        if ($_SESSION['userLoginType'] == 7 && $_SESSION['stockistId'] > 0) {
            $stockist_id = " AND o.stockist_id =" . $_SESSION['stockistId'];
        }
        if ($_SESSION['FromAttList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromAttList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToAttList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToAttList']));
        } else {
            $todate = date('Y-m-d');
        }
//        $where = "  O.date_of_note BETWEEN '" . $fromdate . "' AND '" . $todate . "' $stockist_id  $orderby";
        if ($query)
            $where .= "  $qtype LIKE '%$query%' ";
//        $auRec = $this->_getSelectList('table_stockist_credit_debit_note AS O
//	LEFT JOIN table_account AS ac ON ac.account_id = O.account_id
// 	LEFT JOIN table_stockist AS S ON O.stockist_id = S.stockist_id
//  	left join table_cn_dn_reason_master AS T on T.reason_id = O.tag_id
//  	', " O.*, ac.company_name,S.stockist_name,  T.reason , S.stockist_code  ", $rp, $where . $sort, '');

        $auRec = $this->_getSelectList2("((SELECT o.invoice_id as note_id, '' as note_type,substr(o.bill_no, -10) as document_no
	,o.bill_date,o.due_date,
	o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount,
	o.acc_total_invoice_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.bill_date as document_date,o.date_of_order as date ,o.time_of_order as time,ac.company_name,S.stockist_name,  'Sales return CN' as reason , S.stockist_code,o.remark as remarks,'' as note_status,
	case when o.clearing_status ='' Then 'Unadjusted' 
	     when o.clearing_status ='Full' Then 'Fully Adjusted'
	     when o.clearing_status ='Partial Adjust' Then 'Partially Adjusted'
	     ELSE o.clearing_status 
	End as clearing_status
	FROM
	stockist_single_invoice_record as o
	left join table_stockist_payment_received as p on p.return_order_id = o.invoice_id
	LEFT JOIN table_account AS ac ON ac.account_id = o.account_id
	LEFT JOIN table_stockist AS S ON o.stockist_id = S.stockist_id
  	left join table_cn_dn_reason_master AS T on T.reason_id = o.tag_id
	WHERE o.order_type='Return'  AND o.invoice_status='A' and o.account_id = '" . $_SESSION['accountId'] . "'
	AND o.order_status='D' AND o.date_of_order BETWEEN '" . $fromdate . "' AND '" . $todate . "' $stockist_id
	 Group by o.invoice_id order by note_id desc)

	Union

	(SELECT o.note_id , o.note_type  ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,
	o.due_date, o.total_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount,
	o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.date_of_note as document_date,
	o.date_of_note as date, o.time_of_note as time,ac.company_name,S.stockist_name,  T.reason , S.stockist_code,o.remarks,o.note_status,
	case when o.clearing_status ='' Then 'Unadjusted' 
	     when o.clearing_status ='Full' Then 'Fully Adjusted'
	     when o.clearing_status ='Partial Adjust' Then 'Partially Adjusted'
	     ELSE o.clearing_status 
	End as clearing_status
	FROM
	table_stockist_credit_debit_note as o
	left join table_stockist_payment_received as p on p.credit_note_id = o.note_id
	LEFT JOIN table_account AS ac ON ac.account_id = o.account_id
	LEFT JOIN table_stockist AS S ON o.stockist_id = S.stockist_id
  	left join table_cn_dn_reason_master AS T on T.reason_id = o.tag_id
	WHERE  o.account_id = '" . $_SESSION['accountId'] . "' and o.date_of_note BETWEEN '" . $fromdate . "' AND '" .
            $todate . "' $stockist_id  Group by o.note_id)) as tm", "tm.*", $rp, $where . '', ' order by note_id desc');

        $auRecCount = $this->_getSelectList2("((SELECT o.invoice_id as note_id, '' as note_type,substr(o.bill_no, -10) as document_no
	,o.bill_date,o.due_date,
	o.acc_total_invoice_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount,
	o.acc_total_invoice_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.bill_date as document_date,o.date_of_order as date ,o.time_of_order as time,ac.company_name,S.stockist_name,  T.reason , S.stockist_code,o.remark as remarks,o.clearing_status
	FROM
	stockist_single_invoice_record as o
	left join table_stockist_payment_received as p on p.return_order_id = o.invoice_id
	LEFT JOIN table_account AS ac ON ac.account_id = o.account_id
	LEFT JOIN table_stockist AS S ON o.stockist_id = S.stockist_id
  	left join table_cn_dn_reason_master AS T on T.reason_id = o.tag_id
	WHERE o.order_type='Return'  AND o.invoice_status='A' and o.account_id = '" . $_SESSION['accountId'] . "'
	AND o.order_status='D' AND o.date_of_order BETWEEN '" . $fromdate . "' AND '" . $todate . "' $stockist_id
	 Group by o.invoice_id)

	Union

	(SELECT o.note_id , o.note_type  ,substr(o.document_no, -10) as document_no, o.date_of_note as bill_date,
	o.due_date, o.total_amount as total_amount, COALESCE(sum(p.received_amount), 0) as adjusted_amount,
	o.total_amount-COALESCE(sum(p.received_amount), 0) AS pending_amount, o.date_of_note as document_date,
	o.date_of_note as date, o.time_of_note as time,ac.company_name,S.stockist_name,  T.reason , S.stockist_code,o.remarks,o.clearing_status
	FROM
	table_stockist_credit_debit_note as o
	left join table_stockist_payment_received as p on p.credit_note_id = o.note_id
	LEFT JOIN table_account AS ac ON ac.account_id = o.account_id
	LEFT JOIN table_stockist AS S ON o.stockist_id = S.stockist_id
  	left join table_cn_dn_reason_master AS T on T.reason_id = o.tag_id
	WHERE  o.account_id = '" . $_SESSION['accountId'] . "' and o.date_of_note BETWEEN '" . $fromdate . "' AND '" .
            $todate . "' $stockist_id  Group by o.note_id)) as tm", "count(*) as total", '', $where . ' ORDER BY tm.document_date ASC');

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $viewInvoice = $viewPrintInvoice = '';
            if ($auRec[$i]->note_type == 'C') {
                $note_type = "Credit";
                $type = '';
                $note_id = $auRec[$i]->note_id;
            } else if ($auRec[$i]->note_type == 'D') {
                $note_type = "Debit";
                $type = '';
                $note_id = $auRec[$i]->note_id;
            } else {
                $note_type = "Sales Return";
                $type = "&type=1";
                $note_id = '';
            }
            $note_status = $color = $att_id = '';
            if ($auRec[$i]->note_status == 'C') {
                $note_status = "Canceled Note";
                $color = 'C';
            } else {
                $note_status = "Active";
                $viewInvoice = '<a target=\"blank\" href=\"stockist_cn_pdf.php?id=' . base64_encode
                    ($auRec[$i]->note_id) . $type . '\">View</a>';
                $viewPrintInvoice = '<a target=\"blank\" href=\"stockist_cn_print.php?id=' . base64_encode
                    ($auRec[$i]->note_id) . $type . '\">Print</a>';
            }
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $note_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . $viewInvoice . '"';
            $json .= ',"' . $viewPrintInvoice . '"';
            $json .= ',"' . $this->_changeDate($auRec[$i]->date) . '"';
//            $json .= ',"' . ucwords(addslashes($auRec[$i]->time)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->company_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->document_no)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';
            $json .= ',"' . ucwords(addslashes($note_type)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->reason))) . '"';
            $json .= ',"' . ucwords(addslashes(number_format(floor($auRec[$i]->total_amount), 2))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->description))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->remarks)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->clearing_status)) . '"';
            $json .= ',"' . ucwords(addslashes($note_status)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

//Todo End : sudhanshu 1 April 2024 show stockist CN/DN

    /*********Manage stockist stock summery b y sachin on 2nd April 2024************/
    function updateStockistQtySummary($stkType, $stockistid, $itemid, $month, $year, $qty)
    {
        //echo $stkType.", ".$stockistid.", ".$itemid.", ".$month.", ".$year.", ".$qty;die;
        if (!empty($stockistid) && !empty($itemid) && !empty($month) && !empty($year) && !empty($qty)) {
            $where = " o.stockist_id =" . $stockistid . " and o.item_id =" . $itemid . " and o.month =" . $month . " and o.year =" . $year;
            $auRec = $this->_getSelectList('table_stockist_stock_summary_month_wise as o',
                " o.*", '', $where, '');
            if (count($auRec) > 0) {
                $stockId = $auRec[0]->id;
                $data = array();

                $data['received_qty'] = $auRec[0]->received_qty;
                $data['return_qty'] = $auRec[0]->return_qty;
                $data['dist_invoiced_qty'] = $auRec[0]->dist_invoiced_qty;
                $data['dist_return_qty'] = $auRec[0]->dist_return_qty;

                if ($stkType == 'rct_qty') {
                    $data['received_qty'] = ($auRec[0]->received_qty + $qty);
                } else if ($stkType == 'ret_rct_qty') {
                    $data['return_qty'] = ($auRec[0]->return_qty + $qty);
                } else if ($stkType == 'dis_inv_qty') {
                    $data['dist_invoiced_qty'] = ($auRec[0]->dist_invoiced_qty + $qty);
                } else if ($stkType == 'dis_ret_inv_qty') {
                    $data['dist_return_qty'] = ($auRec[0]->dist_return_qty + $qty);
                }

                $openingStock = $auRec[0]->opening_stock;
                $closingStock = (($openingStock + $data['received_qty'] + $data['dist_return_qty']) - ($data['return_qty'] + $data['dist_invoiced_qty']));
                $data['closing_stock'] = $closingStock;
                $data['updated_on'] = date('Y-m-d H:i:s');
                $aid = $this->_dbUpdate($data, 'table_stockist_stock_summary_month_wise', " id=" . $stockId);

                if ($month != intval(date('m'))) {
                    if ($month == 12) {
                        $nextMonth = 1;
                        $nextYear = ($year + 1);
                    } else {
                        $nextMonth = $month + 1;
                        $nextYear = $year;
                    }
                    $this->updateNextMonthStockSummary($stockistid, $itemid, $nextMonth, $nextYear, $closingStock);
                }

            } else {
                $data = array();
                $data['account_id'] = $_SESSION['accountId'];
                $data['stockist_id'] = $stockistid;
                $data['item_id'] = $itemid;
                $data['month'] = $month;
                $data['year'] = $year;
                if ($stkType == 'rct_qty') {
                    $data['received_qty'] = $qty;
                } else if ($stkType == 'ret_rct_qty') {
                    $data['return_qty'] = $qty;
                } else if ($stkType == 'dis_inv_qty') {
                    $data['dist_invoiced_qty'] = $qty;
                } else if ($stkType == 'dis_ret_inv_qty') {
                    $data['dist_return_qty'] = $qty;
                }
                $data['created_on'] = date('Y-m-d H:i:s');
                $data['updated_on'] = date('Y-m-d H:i:s');

                $openingStock = $this->getPreviousMonthClosingStock($stockistid, $itemid, $month, $year); //get previouse month closing month;
                $closingStock = (($openingStock + $data['received_qty'] + $data['dist_return_qty']) - ($data['return_qty'] + $data['dist_invoiced_qty']));
                $data['opening_stock'] = $openingStock;
                $data['closing_stock'] = $closingStock;

                $aid = $this->_dbInsert($data, 'table_stockist_stock_summary_month_wise');
                if ($month != intval(date('m'))) {
                    if ($month == 12) {
                        $nextMonth = 1;
                        $nextYear = ($year + 1);
                    } else {
                        $nextMonth = $month + 1;
                        $nextYear = $year;
                    }
                    $this->updateNextMonthStockSummary($stockistid, $itemid, $nextMonth, $nextYear, $closingStock);
                }
            }
        }
        return $aid;
    }

    function getPreviousMonthClosingStock($stockistid, $itemid, $month, $year)
    {
        $clossingStock = 0;
        if (!empty($stockistid) && !empty($itemid) && !empty($month) && !empty($year)) {
            $fromDate = date('Y-m-d', strtotime($year . '-' . $month . '-01'));

            $innerwhere = " (select MAX(id) as max_id from 
			table_stockist_stock_summary_month_wise where 
			stockist_id =" . $stockistid . " and item_id =" . $itemid . " 
			and CONCAT(year,'-',LPAD(month, 2, '0'),'-','01')< '" . $fromDate . "')";


            $where = " o.id=" . $innerwhere;
            $auRec = $this->_getSelectList('table_stockist_stock_summary_month_wise as o',
                " o.*", '', $where, '');
            if (count($auRec) > 0) {
                $clossingStock = $auRec[0]->closing_stock;
            }

        }
        return $clossingStock;
    }

    function revertStockistQtySummary($stkType, $stockistid, $itemid, $month, $year, $qty)
    {

        if (!empty($stockistid) && !empty($itemid) && !empty($month) && !empty($year) && !empty($qty)) {
            $where = " o.stockist_id =" . $stockistid . " and o.item_id =" . $itemid . " and o.month =" . $month . " and o.year =" . $year;
            $auRec = $this->_getSelectList('table_stockist_stock_summary_month_wise as o',
                " o.*", '', $where, '');
            if (count($auRec) > 0) {
                $stockId = $auRec[0]->id;
                $data = array();

                $data['received_qty'] = $auRec[0]->received_qty;
                $data['return_qty'] = $auRec[0]->return_qty;
                $data['dist_invoiced_qty'] = $auRec[0]->dist_invoiced_qty;
                $data['dist_return_qty'] = $auRec[0]->dist_return_qty;

                if ($stkType == 'rct_qty') {
                    $data['received_qty'] = ($auRec[0]->received_qty - $qty);
                } else if ($stkType == 'ret_rct_qty') {
                    $data['return_qty'] = ($auRec[0]->return_qty - $qty);
                } else if ($stkType == 'dis_inv_qty') {
                    $data['dist_invoiced_qty'] = ($auRec[0]->dist_invoiced_qty - $qty);
                } else if ($stkType == 'dis_ret_inv_qty') {
                    $data['dist_return_qty'] = ($auRec[0]->dist_return_qty - $qty);
                }
                $openingStock = $auRec[0]->opening_stock;
                $closingStock = (($openingStock + $data['received_qty'] + $data['dist_return_qty']) - ($data['return_qty'] + $data['dist_invoiced_qty']));

                $data['closing_stock'] = $closingStock;
                $data['updated_on'] = date('Y-m-d H:i:s');
                $aid = $this->_dbUpdate($data, 'table_stockist_stock_summary_month_wise', " id=" . $stockId);

                $month = $auRec[0]->month;
                $year = $auRec[0]->year;
                if ($month != intval(date('m'))) {
                    if ($month == 12) {
                        $nextMonth = 1;
                        $nextYear = ($year + 1);
                    } else {
                        $nextMonth = $month + 1;
                        $nextYear = $year;
                    }
                    $this->updateNextMonthStockSummary($stockistid, $itemid, $nextMonth, $nextYear, $closingStock);
                }
            }
        }
        return $aid;
    }

    function updateNextMonthStockSummary($stockistid, $itemid, $nextMonth, $nextYear, $closingStock)
    {
        if (!empty($stockistid) && !empty($itemid) && !empty($nextMonth) && !empty($nextYear) && !empty($closingStock)) {
            $where = " o.stockist_id =" . $stockistid . " and o.item_id =" . $itemid . " and o.month =" . $nextMonth . " and o.year =" . $nextYear;
            $auRec = $this->_getSelectList('table_stockist_stock_summary_month_wise as o',
                " o.*", '', $where, '');
            if (is_array($auRec) && count($auRec) > 0) {
                $stockId = $auRec[0]->id;
                $data = array();
                $openingStock = $closingStock;
                $closingStockNew = (($openingStock + $auRec[0]->received_qty + $auRec[0]->dist_return_qty) - ($auRec[0]->return_qty + $auRec[0]->dist_invoiced_qty));
                $data['opening_stock'] = $openingStock;
                $data['closing_stock'] = $closingStockNew;
                $data['updated_on'] = date('Y-m-d H:i:s');
                $aid = $this->_dbUpdate($data, 'table_stockist_stock_summary_month_wise', " id=" . $stockId);
            }
        }
        return true;
    }

    /*********Manage stockist stock summery by sachin on 2nd April 2024************/
    function showStockistStockSummary($flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname)
            $sortname = 'o.stockist_id,i.item_name ';
        if (!$sortorder)
            $sortorder = ' ASC ';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $qtype = $_REQUEST['qtype'];
        $query = $_REQUEST['query'];

        if (isset($_SESSION['stockist_id']) && !empty($_SESSION['stockist_id'])) {
            $stockistcnd = " AND ssk.stockist_id =" . $_SESSION['stockist_id'];
        } else if ($_SESSION['userLoginType'] == 7 && $_SESSION['stockistId'] > 0) {
            $stockistcnd = " AND ssk.stockist_id =" . $_SESSION['stockistId'];
        }
        if (isset($_SESSION['monthYearCnd'])) {
            $monthYearCnd = $_SESSION['monthYearCnd'];
        }

        $where = " ssk.item_id !='' $stockistcnd ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList("view_stockist_stock as ssk
				left join table_stockist_stock_summary_month_wise as o on o.stockist_id=ssk.stockist_id AND o.item_id=ssk.item_id " . $monthYearCnd . "
				left join table_stockist s on ssk.stockist_id=s.stockist_id
				left join table_item as i on i.item_id=ssk.item_id
				left join table_brands as b on b.brand_id = i.brand_id",
            "o.id,ssk.stockist_id,ssk.item_id, s.stockist_name,s.stockist_code,i.item_name,
				i.item_code,b.brand_name,o.month,o.year,o.opening_stock,o.received_qty,o.return_qty,
				o.dist_invoiced_qty,o.dist_return_qty,o.closing_stock", $rp, $where . $sort, '');


        $auRecCount = $this->_getSelectList("view_stockist_stock as ssk
				left join table_stockist_stock_summary_month_wise as o on o.stockist_id=ssk.stockist_id AND o.item_id=ssk.item_id " . $monthYearCnd . "
				left join table_stockist s on ssk.stockist_id=s.stockist_id
				left join table_item as i on i.item_id=ssk.item_id
				left join table_brands as b on b.brand_id = i.brand_id",
            'COUNT(*) AS total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $_objArrList = new ArrayList();
        for ($i = 0; $i < count($auRec); $i++) {
            $opening_balance = $auRec[$i]->opening_stock;
            $rctval = $auRec[$i]->received_qty;
            $rctRetval = $auRec[$i]->return_qty;
            $invval = $auRec[$i]->dist_invoiced_qty;
            $invRetval = $auRec[$i]->dist_return_qty;
            $closing_balance = $auRec[$i]->closing_stock;
            if (empty($auRec[$i]->id) && empty($opening_balance) && empty($rctval) && empty($rctRetval) && empty($invval) && empty($invRetval) && empty($closing_balance)) {
                $lastlosingStock = $this->getPreviousMonthClosingStock($auRec[$i]->stockist_id, $auRec[$i]->item_id, $_SESSION['maxMonth'], $_SESSION['maxyear']);
                $opening_balance = $lastlosingStock;
                $closing_balance = $lastlosingStock;
                $auRec[$i]->month = $_SESSION['maxMonth'];
                $auRec[$i]->year = $_SESSION['maxyear'];
            }
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->stockist_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . $_objArrList->ARR_MONTHS[str_pad($auRec[$i]->month, 2, '0', STR_PAD_LEFT)] . '"';
            $json .= ',"' . $auRec[$i]->year . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->stockist_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ROUND($opening_balance) . '"';
            $json .= ',"' . ROUND($rctval) . '"';
            $json .= ',"' . ROUND($rctRetval) . '"';
            $json .= ',"' . ROUND($invval) . '"';
            $json .= ',"' . ROUND($invRetval) . '"';
            $json .= ',"' . ROUND($closing_balance) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    /*********Manage Distributor stock summery by sachin on 18nd April 2024************/
    function showDistributorStockSummary($flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname)
            $sortname = 'o.distributor_id,i.item_name ';
        if (!$sortorder)
            $sortorder = ' ASC ';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page)
            $page = 1;
        if (!$rp)
            $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $qtype = $_REQUEST['qtype'];
        $query = $_REQUEST['query'];

        if (isset($_SESSION['distributor_id']) && !empty($_SESSION['distributor_id'])) {
            $stockistcnd = " AND ssk.distributor_id =" . $_SESSION['distributor_id'];
        } else if ($_SESSION['userLoginType'] == 3 && $_SESSION['distributorId'] > 0) {
            $stockistcnd = " AND d.distributor_id =" . $_SESSION['distributorId'];
        }
        if (isset($_SESSION['monthYearCnd'])) {
            $monthYearCnd = $_SESSION['monthYearCnd'];
        }

        $where = " ssk.item_id !='' $stockistcnd ";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList("view_distributor_stock as ssk
				left join table_distributor_stock_summary_month_wise as o on o.distributor_id=ssk.distributor_id AND o.item_id=ssk.item_id " . $monthYearCnd . "
				left join table_distributors d on ssk.distributor_id=d.distributor_id
				left join table_item as i on i.item_id=ssk.item_id
				left join table_brands as b on b.brand_id = i.brand_id",
            "o.id,ssk.distributor_id,ssk.item_id, d.distributor_name,d.distributor_code,i.item_name,
				i.item_code,b.brand_name,o.month,o.year,o.opening_stock,o.received_qty,o.return_qty,
				o.ret_invoiced_qty,o.ret_return_qty,o.closing_stock", $rp, $where . $sort, '');


        $auRecCount = $this->_getSelectList("view_distributor_stock as ssk
				left join table_distributor_stock_summary_month_wise as o on o.distributor_id=ssk.distributor_id AND o.item_id=ssk.item_id " . $monthYearCnd . "
				left join table_distributors d on ssk.distributor_id=d.distributor_id
				left join table_item as i on i.item_id=ssk.item_id
				left join table_brands as b on b.brand_id = i.brand_id",
            'COUNT(*) AS total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $_objArrList = new ArrayList();
        for ($i = 0; $i < count($auRec); $i++) {
            $opening_balance = $auRec[$i]->opening_stock;
            $rctval = $auRec[$i]->received_qty;
            $rctRetval = $auRec[$i]->return_qty;
            $invval = $auRec[$i]->ret_invoiced_qty;
            $invRetval = $auRec[$i]->ret_return_qty;
            $closing_balance = $auRec[$i]->closing_stock;
            if (empty($auRec[$i]->id) && empty($opening_balance) && empty($rctval) && empty($rctRetval) && empty($invval) && empty($invRetval) && empty($closing_balance)) {
                $lastlosingStock = $this->getDistPreviousMonthClosingStock($auRec[$i]->distributor_id, $auRec[$i]->item_id, $_SESSION['maxMonth'], $_SESSION['maxyear']);
                $opening_balance = $lastlosingStock;
                $closing_balance = $lastlosingStock;
                $auRec[$i]->month = $_SESSION['maxMonth'];
                $auRec[$i]->year = $_SESSION['maxyear'];
            }
            if ($rc)
                $json .= ",";
            $remove = array("\n", "\r\n", "\r");
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"cell":["' . $_objArrList->ARR_MONTHS[str_pad($auRec[$i]->month, 2, '0', STR_PAD_LEFT)] . '"';
            $json .= ',"' . $auRec[$i]->year . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ROUND($opening_balance) . '"';
            $json .= ',"' . ROUND($rctval) . '"';
            $json .= ',"' . ROUND($rctRetval) . '"';
            $json .= ',"' . ROUND($invval) . '"';
            $json .= ',"' . ROUND($invRetval) . '"';
            $json .= ',"' . ROUND($closing_balance) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function getDistPreviousMonthClosingStock($stockistid, $itemid, $month, $year)
    {
        $clossingStock = 0;
        if (!empty($stockistid) && !empty($itemid) && !empty($month) && !empty($year)) {
            $fromDate = date('Y-m-d', strtotime($year . '-' . $month . '-01'));

            $innerwhere = " (select MAX(id) as max_id from 
			table_distributor_stock_summary_month_wise where 
			distributor_id =" . $stockistid . " and item_id =" . $itemid . " 
			and CONCAT(year,'-',LPAD(month, 2, '0'),'-','01')< '" . $fromDate . "')";


            $where = " o.id=" . $innerwhere;
            $auRec = $this->_getSelectList('table_distributor_stock_summary_month_wise as o',
                " o.*", '', $where, '');
            if (count($auRec) > 0) {
                $clossingStock = $auRec[0]->closing_stock;
            }

        }
        return $clossingStock;
    }

    function updateDistQtySummary($stkType, $stockistid, $itemid, $month, $year, $qty)
    {
        //echo $stkType.", ".$stockistid.", ".$itemid.", ".$month.", ".$year.", ".$qty;
        if (!empty($stockistid) && !empty($itemid) && !empty($month) && !empty($year) && !empty($qty)) {
            $where = " o.distributor_id =" . $stockistid . " and o.item_id =" . $itemid . " and o.month =" . $month . " and o.year =" . $year;
            $auRec = $this->_getSelectList('table_distributor_stock_summary_month_wise as o',
                " o.*", '', $where, '');

            if (count($auRec) > 0) {
                $stockId = $auRec[0]->id;
                $data = array();

                $data['received_qty'] = $auRec[0]->received_qty;
                $data['return_qty'] = $auRec[0]->return_qty;
                $data['ret_invoiced_qty'] = $auRec[0]->ret_invoiced_qty;
                $data['ret_return_qty'] = $auRec[0]->ret_return_qty;

                if ($stkType == 'rct_qty') {
                    $data['received_qty'] = ($auRec[0]->received_qty + $qty);
                } else if ($stkType == 'ret_rct_qty') {
                    $data['return_qty'] = ($auRec[0]->return_qty + $qty);
                } else if ($stkType == 'ret_inv_qty') {
                    $data['ret_invoiced_qty'] = ($auRec[0]->ret_invoiced_qty + $qty);
                } else if ($stkType == 'ret_ret_inv_qty') {
                    $data['ret_return_qty'] = ($auRec[0]->ret_return_qty + $qty);
                }

                $openingStock = $auRec[0]->opening_stock;
                $closingStock = (($openingStock + $data['received_qty'] + $data['ret_return_qty']) - ($data['return_qty'] + $data['ret_invoiced_qty']));
                $data['closing_stock'] = $closingStock;
                $data['updated_on'] = date('Y-m-d H:i:s');
                $aid = $this->_dbUpdate($data, 'table_distributor_stock_summary_month_wise', " id=" . $stockId);

                if ($month != intval(date('m'))) {
                    if ($month == 12) {
                        $nextMonth = 1;
                        $nextYear = ($year + 1);
                    } else {
                        $nextMonth = $month + 1;
                        $nextYear = $year;
                    }
                    $this->updateDistNextMonthStockSummary($stockistid, $itemid, $nextMonth, $nextYear, $closingStock);
                }

            } else {
                $data = array();
                $data['account_id'] = $_SESSION['accountId'];
                $data['distributor_id'] = $stockistid;
                $data['item_id'] = $itemid;
                $data['month'] = $month;
                $data['year'] = $year;
                if ($stkType == 'rct_qty') {
                    $data['received_qty'] = $qty;
                } else if ($stkType == 'ret_rct_qty') {
                    $data['return_qty'] = $qty;
                } else if ($stkType == 'ret_inv_qty') {
                    $data['ret_invoiced_qty'] = $qty;
                } else if ($stkType == 'ret_ret_inv_qty') {
                    $data['ret_return_qty'] = $qty;
                }
                $data['created_on'] = date('Y-m-d H:i:s');
                $data['updated_on'] = date('Y-m-d H:i:s');

                $openingStock = $this->getDistPreviousMonthClosingStock($stockistid, $itemid, $month, $year); //get previouse month closing month;
                $closingStock = (($openingStock + $data['received_qty'] + $data['ret_return_qty']) - ($data['return_qty'] + $data['ret_invoiced_qty']));
                $data['opening_stock'] = $openingStock;
                $data['closing_stock'] = $closingStock;

                $aid = $this->_dbInsert($data, 'table_distributor_stock_summary_month_wise');
                if ($month != intval(date('m'))) {
                    if ($month == 12) {
                        $nextMonth = 1;
                        $nextYear = ($year + 1);
                    } else {
                        $nextMonth = $month + 1;
                        $nextYear = $year;
                    }
                    $this->updateDistNextMonthStockSummary($stockistid, $itemid, $nextMonth, $nextYear, $closingStock);
                }
            }
        }

        return $aid;
    }

    function updateDistNextMonthStockSummary($stockistid, $itemid, $nextMonth, $nextYear, $closingStock)
    {
        if (!empty($stockistid) && !empty($itemid) && !empty($nextMonth) && !empty($nextYear) && !empty($closingStock)) {
            $where = " o.distributor_id =" . $stockistid . " and o.item_id =" . $itemid . " and o.month =" . $nextMonth . " and o.year =" . $nextYear;
            $auRec = $this->_getSelectList('table_distributor_stock_summary_month_wise as o',
                " o.*", '', $where, '');
            if (is_array($auRec) && count($auRec) > 0) {
                $stockId = $auRec[0]->id;
                $data = array();
                $openingStock = $closingStock;
                $closingStockNew = (($openingStock + $auRec[0]->received_qty + $auRec[0]->ret_return_qty) - ($auRec[0]->return_qty + $auRec[0]->ret_invoiced_qty));
                $data['opening_stock'] = $openingStock;
                $data['closing_stock'] = $closingStockNew;
                $data['updated_on'] = date('Y-m-d H:i:s');
                $aid = $this->_dbUpdate($data, 'table_distributor_stock_summary_month_wise', " id=" . $stockId);
            }
        }
        return true;
    }

    function revertDistQtySummary($stkType, $stockistid, $itemid, $month, $year, $qty)
    {

        if (!empty($stockistid) && !empty($itemid) && !empty($month) && !empty($year) && !empty($qty)) {
            $where = " o.distributor_id =" . $stockistid . " and o.item_id =" . $itemid . " and o.month =" . $month . " and o.year =" . $year;
            $auRec = $this->_getSelectList('table_distributor_stock_summary_month_wise as o',
                " o.*", '', $where, '');
            if (count($auRec) > 0) {
                $stockId = $auRec[0]->id;
                $data = array();

                $data['received_qty'] = $auRec[0]->received_qty;
                $data['return_qty'] = $auRec[0]->return_qty;
                $data['ret_invoiced_qty'] = $auRec[0]->ret_invoiced_qty;
                $data['ret_return_qty'] = $auRec[0]->ret_return_qty;

                if ($stkType == 'rct_qty') {
                    $data['received_qty'] = ($auRec[0]->received_qty - $qty);
                } else if ($stkType == 'ret_rct_qty') {
                    $data['return_qty'] = ($auRec[0]->return_qty - $qty);
                } else if ($stkType == 'ret_inv_qty') {
                    $data['ret_invoiced_qty'] = ($auRec[0]->ret_invoiced_qty - $qty);
                } else if ($stkType == 'ret_ret_inv_qty') {
                    $data['ret_return_qty'] = ($auRec[0]->ret_return_qty - $qty);
                }
                $openingStock = $auRec[0]->opening_stock;
                $closingStock = (($openingStock + $data['received_qty'] + $data['ret_return_qty']) - ($data['return_qty'] + $data['ret_invoiced_qty']));

                $data['closing_stock'] = $closingStock;
                $data['updated_on'] = date('Y-m-d H:i:s');
                $aid = $this->_dbUpdate($data, 'table_distributor_stock_summary_month_wise', " id=" . $stockId);

                $month = $auRec[0]->month;
                $year = $auRec[0]->year;
                if ($month != intval(date('m'))) {
                    if ($month == 12) {
                        $nextMonth = 1;
                        $nextYear = ($year + 1);
                    } else {
                        $nextMonth = $month + 1;
                        $nextYear = $year;
                    }
                    $this->updateDistNextMonthStockSummary($stockistid, $itemid, $nextMonth, $nextYear, $closingStock);
                }
            }
        }
        return $aid;
    }


    /*********Manage Distributor stock summery by sachin on 18nd April 2024************/
//Todo Start sudhanshu 19 April 2024 :  Share of Shelves List from pernod
    function showShareShelvesList($salesman)
    {

        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//        $_objAdmin = new Admin();
        $condi = '';
        if ($_SESSION['state'] > 0) {
            $condi .= " AND r.state ='" . $_SESSION['state'] . "'";
        }

        if ($_SESSION['zone'] > 0) {
            $condi .= " AND r.zone_id ='" . $_SESSION['zone'] . "'";
        }

        if ($_SESSION['region'] > 0) {
            $condi .= " AND r.region_id ='" . $_SESSION['region'] . "'";
        }

        if ($_SESSION['salID'] > 0) {
            $condi .= " AND ss.salesman_id ='" . $_SESSION['salID'] . "'";
        }

        if ($_SESSION['is_audited'] > 0) {
            if ($_SESSION['is_audited'] == 1) {
                $condi .= " AND ss.user_type !=''";
            } else {
                $condi .= " AND ss.user_type =''";
            }
        }

        if ($_SESSION['is_surveyed'] > 0) {
            if ($_SESSION['is_surveyed'] == 1) {
                $condi .= " AND r.survey_status='C' AND r.verified_by!='' ";
            } else if ($_SESSION['is_surveyed'] == 2) {
                $condi .= " AND ((r.survey_status='I') OR (r.survey_status='C' AND r.verified_by='')) ";
            } else if ($_SESSION['is_surveyed'] == 3) {
                $condi .= " AND r.survey_status='N' ";
            }
        }


        if (isset($_SESSION['fromDate']) && $_SESSION['fromDate'] != "") {
            $fromDate = date('Y-m-d', strtotime($_SESSION['fromDate']));
        } else {
            $fromDate = date('Y-m-d');
        }


        if (isset($_SESSION['toDate']) && $_SESSION['toDate'] != "") {
            $toDate = date('Y-m-d', strtotime($_SESSION['toDate']));
        } else {
            $toDate = date('Y-m-d');
        }

        $month = intval(date('m', strtotime($fromDate)));
        $year = intval(date('Y', strtotime($fromDate)));
        $where = "  ss.created_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' AND r.status='A' $salesman $condi";

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2('table_share_shelve_detail as ss
    left join table_retailer as r on r.retailer_id = ss.retailer_id
    left join table_salesman as s on s.salesman_id = ss.salesman_id
    left join table_region as reg on reg.region_id=r.region_id
   
    left join state as st on st.state_id=r.state
   
    left join table_zone_state_mapping as zmr on zmr.state_id=r.state and zmr.account_id = r.account_id
    left join table_zone as rz on rz.zone_id=zmr.zone_id
    ', "ss.*, r.retailer_name, r.retailer_code, s.salesman_name,s.employee_code, reg.region_name,rz.zone_name, st.state_name", $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList2('table_share_shelve_detail as ss
    left join table_retailer as r on r.retailer_id = ss.retailer_id
    left join table_salesman as s on s.salesman_id = ss.salesman_id
    left join table_region as reg on reg.region_id=r.region_id       
    left join state as st on st.state_id=r.state
    left join table_zone_state_mapping as zmr on zmr.state_id=r.state and zmr.account_id = r.account_id
    left join table_zone as rz on rz.zone_id=zmr.zone_id', 'count(*) as total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $Rec = $this->_getSelectList2('table_share_shelve_detail as ssd 
    left join table_image as i on i.ref_id = ssd.id AND image_type = "39" 
    left join table_tags as t on t.tag_id = i.tag_id
    left join table_salesman as s on s.salesman_id = ssd.salesman_id 
    left join table_retailer as r on r.retailer_id = ssd .retailer_id', 'count(i.ref_id) as image_count', '', " ssd.id=" . $auRec[$i]->id);
            $color = '';
            if ($auRec[$i]->audit_by != '') {
                $color = "A";
            }

            $audit_by = '';
            if ($auRec[$i]->user_type == 1) {
                $audit_by = $auRec[$i]->audit_by;
            } elseif ($auRec[$i]->user_type == 6) {
                $audit_by = $auRec[$i]->audit_by . '(Auditor)';
            } else {

                if ($auRec[$i]->user_type == 5) {
                    $audit_by = $auRec[$i]->audit_by . '(Salesman)';
                } elseif ($auRec[$i]->user_type == 6) {
                    $audit_by = '';
                }
            }

            $audit_date = '';
            if ($auRec[$i]->audit_date != '0000-00-00 00:00:00') {
                $audit_date = $this->_changeDate($auRec[$i]->audit_date);
            }

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($this->_changeDate($auRec[$i]->created_date))) . '"';
            $json .= ',"' . addslashes($auRec[$i]->created_time) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zone_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->region_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';

            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->photo_count) . '"';
            $json .= ',"' . addslashes($auRec[$i]->image_count) . '"';
            $json .= ',"' . addslashes($audit_by) . '"';

            $json .= ',"' . addslashes($audit_date) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showShareOfShelveReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname) $sortname = 'salesman_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
//        $_objAdmin = new Admin();
        $condi = '';

        if ($_SESSION['SalAttList'] > 0) {
            $condi .= " AND s.salesman_id ='" . $_SESSION['SalAttList'] . "'";
        }
        if ($_SESSION['state'] > 0) {
            $condi .= " AND s.state ='" . $_SESSION['state'] . "'";
        }

        if ($_SESSION['zone'] > 0) {
            $condi .= " AND s.zone_id ='" . $_SESSION['zone'] . "'";
        }

        if ($_SESSION['region'] > 0) {
            $condi .= " AND s.region_id ='" . $_SESSION['region'] . "'";
        }

        if (isset($_SESSION['dismonth']) && $_SESSION['dismonth'] > 0) {
            $month = $_SESSION['dismonth'];
        } else {
            $month = date('m');
        }

        if (isset($_SESSION['disCyear']) && $_SESSION['disCyear'] > 0) {
            $year = $_SESSION['disCyear'];
        } else {
            $year = date('Y');
        }

        $fromDate = date('Y-m-d', strtotime($year . '-' . $month . '-' . '01'));
        $toDate = date('Y-m-t', strtotime($year . '-' . $month . '-' . '01'));


        $condi .= " AND r.survey_status='C' ";
        $where = "  rw.month='" . intval($month) . "' AND rw.year='" . intval($year) . "' AND s.status='A' $salesman $condi";
        if ($query)
            $where .= " AND $qtype LIKE '%$query%' ";

        $where .= " GROUP BY rw.dsm_id ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList2("table_retailer_monthwise as rw
        inner join table_retailer as r on r.retailer_id = rw.retailer_id
        left join table_share_shelve_detail as tsd on tsd.retailer_id = r.retailer_id AND tsd.created_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' and rw.dsm_id = tsd.salesman_id
        left join table_share_shelve_detail as tsd1 on tsd1.retailer_id = r.retailer_id AND tsd1.created_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' and rw.dsm_id = tsd1.salesman_id AND tsd1.audit_by != ''
        left join table_survey_share_of_shelves as ts ON tsd.retailer_id = ts.retailer_id AND tsd.salesman_id = ts.salesman_id AND (ts.survey_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "')
        left join table_salesman as s on s.salesman_id = rw.dsm_id
        left join table_salesman as s1 on s1.salesman_id = rw.territory_head_id
     
       
        left join state as st on st.state_id=s.state
        left join table_zone_state_mapping as zmr on zmr.state_id=s.state and zmr.account_id = s.account_id
    left join table_zone as rz on rz.zone_id=zmr.zone_id", " rw.month, rw.year, s.salesman_id,s.salesman_name, s1.salesman_id as territory_head_id, s1.salesman_name territory_head_name,  COUNT(DISTINCT r.retailer_id) as target_universe,rz.zone_name, st.state_name, COALESCE(COUNT(DISTINCT tsd.retailer_id),0) as covered_universe, COALESCE(COUNT(DISTINCT tsd1.retailer_id),0) as audited_universe, SUM(tsd1.parameter_score) as pri_shelf", $rp, $where . $sort, '');

        $auRecCount = $this->_getSelectList2("table_retailer_monthwise as rw
        inner join table_retailer as r on r.retailer_id = rw.retailer_id
        left join table_share_shelve_detail as tsd on tsd.retailer_id = r.retailer_id AND tsd.created_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' and rw.dsm_id = tsd.salesman_id
        left join table_salesman as s on s.salesman_id = rw.dsm_id
        left join table_salesman as s1 on s1.salesman_id = rw.territory_head_id
      
       
        left join state as st on st.state_id=s.state
        left join table_zone_state_mapping as zmr on zmr.state_id=s.state and zmr.account_id = s.account_id
        left join table_zone as rz on rz.zone_id=zmr.zone_id", 'rw.id', '', $where);

        $total = COUNT($auRecCount);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $SOS = $pri_shelf = $target_shelf = $audited_universe = $covered_universe = $target_universe = 0;

            if ($auRec[$i]->target_universe > 0) {
                $target_universe = $auRec[$i]->target_universe;
            }
            if ($auRec[$i]->covered_universe > 0) {
                $covered_universe = $auRec[$i]->covered_universe;
            }
            if ($auRec[$i]->audited_universe > 0) {
                $audited_universe = $auRec[$i]->audited_universe;
            }
            if ($auRec[$i]->target_shelf > 0) {
                $target_shelf = $auRec[$i]->target_shelf;
            }
            if ($auRec[$i]->pri_shelf > 0) {
                $pri_shelf = $auRec[$i]->pri_shelf;
            }
            if ($auRec[$i]->SOS > 0) {
                $SOS = $auRec[$i]->SOS;
            }

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->salesman_id . '",';
            $json .= '"cell":["' . ucwords(addslashes(date('M', strtotime($year . '-' . $month)))) . '"';
            $json .= ',"' . addslashes($year) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zone_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->region_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->territory_head_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';

            $json .= ',"' . addslashes($target_universe) . '"';
            $json .= ',"' . addslashes($covered_universe) . '"';
            $json .= ',"' . addslashes($audited_universe) . '"';
            $json .= ',"' . addslashes($target_shelf) . '"';
            $json .= ',"' . addslashes($pri_shelf) . '"';

            $json .= ',"' . addslashes($SOS) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

//Todo End sudhanshu 19 April 2024 :  Share of Shelves List from pernod

// Todo Start : Jatin : 29 April 2024 : To show stockist mapped distributor

    function showStockistDistributorMapping()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'd.distributor_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = " ";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_stockist_distributor_mapping as csm
            LEFT JOIN table_stockist as s ON s.stockist_id = csm.stockist_id AND s.status="A"
            LEFT join table_distributors as d on d.distributor_id=csm.distributor_id', "csm.distributor_id,d.distributor_name,d.distributor_code,COUNT(s.stockist_id) as dist_count", $rp, $where . ' d.status = "A" GROUP BY csm.distributor_id ' . $sort);
        $auRecCount = $this->_getSelectList('table_stockist_distributor_mapping as csm
            LEFT JOIN table_stockist as s ON s.stockist_id = csm.stockist_id AND s.status="A"
            LEFT join table_distributors as d on d.distributor_id=csm.distributor_id', 'csm.distributor_id', '',
            $where . '  d.status = "A" GROUP BY csm.distributor_id ' . $sort);
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $viewLink = '<a href=\"view_stk_dist_mapping.php?id=' . $auRec[$i]->distributor_id . '\">View</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->dist_count) . '"';
            $json .= ',"' . $viewLink . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

// Todo End : Jatin : 29 April 2024 : To show stockist mapped distributor

//Todo Start : sudhanshu 06 may 2024  : unproductive number of days
    function showUnproductiveDays()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'reason';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        if ($query) $where .= " $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_unproductive_number_of_days', "*", $rp, $where . $sort, '');
        $auRecCount = $this->_getSelectList('table_unproductive_number_of_days', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"unproductive_days.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->number_of_days) . '"';
            $json .= ',"' . addslashes($auRec[$i]->color_code) . '"';

            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function addUnproductiveDay()
    {
        //echo "hii";die;
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['number_of_days'] = mysql_escape_string($this->validateForm('/[^0-9]/', trim($_POST['number_of_days'])));
        $data['color_code'] = mysql_escape_string(trim($_POST['color_code']));
        $data['created_date'] = date('Y-m-d H:i:s');
        $data['status'] = 'A';

        $id = $this->_dbInsert($data, 'table_unproductive_number_of_days');
        return $id;
    }

    function updateUnproductiveDay($id)
    {
        $data['account_id'] = mysql_escape_string($_SESSION['accountId']);
        $data['number_of_days'] = mysql_escape_string($this->validateForm('/[^0-9]/', trim($_POST['number_of_days'])));
        $data['color_code'] = mysql_escape_string(trim($_POST['color_code']));
        $data['last_update'] = date('Y-m-d H:i:s');
        $this->_dbUpdate($data, 'table_unproductive_number_of_days', " id=" . $id);
        return $id;
    }

    //Todo End : sudhanshu 06 may 2024  : unproductive number of days

    //Todo Start : sudhanshu 10 May 2024 : show merchading facing
    function showMerchadingFacing()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'd.distributor_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $condi = '';

        if ($_SESSION['SalFacing'] > 0) {
            $condi .= " AND s.salesman_id ='" . $_SESSION['SalFacing'] . "'";
        }

        if ($_SESSION['FromFacing'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromFacing']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToFacing'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToFacing']));
        } else {
            $todate = date('Y-m-d');
        }


        $where = " mf.app_date BETWEEN '" . $fromdate . "' AND '" . $todate . "'  $condi";
        if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_merchandising_facing as mf 
 LEFT JOIN table_retailer as r ON r.retailer_id = mf.retailer_id
  LEFT JOIN table_retailer_type_master as rt ON r.type_id = rt.type_id
 LEFT JOIN table_salesman as s ON s.salesman_id = mf.salesman_id', "mf.facing_id,mf.photo_count,mf.app_date,mf.app_time,mf.item_wise_photo,r.retailer_name,r.retailer_code,s.salesman_name,s.employee_code,rt.type_name", $rp, $where . ' ' . $sort);

        $auRecCount = $this->_getSelectList('table_merchandising_facing as mf 
 LEFT JOIN table_retailer as r ON r.retailer_id = mf.retailer_id
  LEFT JOIN table_retailer_type_master as rt ON r.type_id = rt.type_id
 LEFT JOIN table_salesman as s ON s.salesman_id = mf.salesman_id', "COUNT(mf.facing_id) as total", '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }


        for ($i = 0; $i < count($auRec); $i++) {

            $viewLink = '<a  href=\"merchandising_facing_detail.php?id=' . base64_encode($auRec[$i]->facing_id) . '\">View</a>';


            $viewPhoto = '<a  href="view_mulitple_photo.php?id=' . $auRec[$i]->facing_id . '&action=mgb_action" ' . $targetBlank . '>View</a>';


            $activityDate = $this->_changeDate($auRec[$i]->app_date);
            $activityTime = ($auRec[$i]->app_time != '' && $auRec[$i]->app_time != '00:00:00') ? date('H:i', strtotime($auRec[$i]->app_time)) : '';


            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->facing_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->salesman_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->type_name) . '"';
            $json .= ',"' . addslashes($activityDate . ' ' . $activityTime) . '"';
            $json .= ',"' . addslashes($auRec[$i]->photo_count) . '"';
            $json .= ',"' . addslashes($viewPhoto) . '"';
            $json .= ',"' . $viewLink . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showMerchadingFacingDetails($facing_id)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'd.distributor_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $condi = '';


        $where = " mfd.facing_id = '" . $facing_id . "' ";
        if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_merchandising_facing_details as mfd 
            LEFT JOIN table_item as i ON mfd.item_id = i.item_id 
            left join table_category as c on i.category_id = c.category_id 
			left join table_brands as b on b.brand_id=i.brand_id 
            left join table_grade as gt on gt.grade_id=i.grade_id ', "mfd.quantity,mfd.photo_count,facing_id,i.item_name,i.item_code,b.brand_name,c.category_name,gt.grade_name,i.item_id", '', " $where ");

        $auRecCount = $this->_getSelectList2('table_merchandising_facing_details as mfd 
            LEFT JOIN table_item as i ON mfd.item_id = i.item_id 
            left join table_category as c on i.category_id = c.category_id 
			left join table_brands as b on b.brand_id=i.brand_id 
            left join table_grade as gt on gt.grade_id=i.grade_id', "COUNT(*) as total", '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }


        for ($i = 0; $i < count($auRec); $i++) {

            $viewPhoto = '<a target="_blank" href="view_mulitple_photo.php?id=' . $auRec[$i]->facing_id . '&action=' . "mgb_action" . '&item_wise_image=' . "yes" . '&tid=' . $auRec[$i]->item_id . '">View</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->facing_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->grade_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->quantity) . '"';
            $json .= ',"' . addslashes($auRec[$i]->photo_count) . '"';
            $json .= ',"' . addslashes($viewPhoto) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : sudhanshu 10 May 2024 : show merchading facing

//Todo Start : sudhanshu 13 may 2024 : show retailer address
    function showRetailerAddress($retailer_id)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.retailer_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $where = " r.retailer_id = '" . $retailer_id . "' ";
        if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_retailer_address as a 
            LEFT JOIN table_retailer as r  ON r.retailer_id = a.retailer_id 
        ', "r.retailer_id,r.retailer_name,a.address_id,a.address,a.status,a.zipcode", '', " $where ");

//        $auRecCount = $this->_getSelectList2('table_retailer_address as a
//            LEFT JOIN table_retailer as r  ON r.retailer_id = a.retailer_id ', "COUNT(*) as total", '', $where);

        $total = count($auRec);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }


        for ($i = 0; $i < count($auRec); $i++) {

            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href="retailer_address.php?stid=' . $auRec[$i]->address_id . '&value=' . $status . '">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->address_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->address) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zipcode) . '"';

            $json .= ',"' . addslashes($status) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function updateRetailerAddress($id)
    {


        $data['address'] = mysql_escape_string(trim($_POST['address']));
        $data['zipcode'] = mysql_escape_string(trim($_POST['zipcode']));
        $data['updated_at'] = date('Y-m-d H:i:s');
        $this->_dbUpdate($data, 'table_retailer_address', " address_id=" . $id);
        //update main address
        $retailer_id = $_POST['retailer_id'];
        $where = " retailer_id = '" . $retailer_id . "'";
        $auRec = $this->_getSelectList2('table_retailer
        ', "retailer_id,address_id", '', " $where ");

        if ($auRec[0]->address_id == $id) {
            $data2['retailer_address'] = mysql_escape_string(trim($_POST['address']));
            $data2['zipcode'] = mysql_escape_string(trim($_POST['zipcode']));
            $data2['last_update_date'] = date('Y-m-d');
            $data2['last_update_status'] = "Update";
            $this->_dbUpdate($data2, 'table_retailer', " retailer_id=" . $retailer_id);
        }
        return $id;
    }

    function showDistributorAddress($distributor_id)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.retailer_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $where = " a.distributor_id = '" . $distributor_id . "' ";
        if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_distributor_address as a 
           
        ', "a.distributor_id,a.address_id,a.address,a.status,a.zipcode", '', " $where ");

//        $auRecCount = $this->_getSelectList2('table_distributor_address as a
//             ', "COUNT(*) as total", '', $where);

        $total = count($auRec);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }


        for ($i = 0; $i < count($auRec); $i++) {

            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href="distributor_address.php?stid=' . $auRec[$i]->address_id . '&value=' . $status . '">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->address_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->address) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zipcode) . '"';

            $json .= ',"' . addslashes($status) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function updateDistributorAddress($id)
    {


        $data['address'] = mysql_escape_string(trim($_POST['address']));
        $data['zipcode'] = mysql_escape_string(trim($_POST['zipcode']));
        $data['updated_at'] = date('Y-m-d H:i:s');
        $this->_dbUpdate($data, 'table_distributor_address', " address_id=" . $id);

        //update main address
        $distributor_id = $_POST['distributor_id'];
        $where = " distributor_id = '" . $distributor_id . "'";
        $auRec = $this->_getSelectList2('table_distributors
        ', "distributor_id,address_id", '', " $where ");

        if ($auRec[0]->address_id == $id) {
            $data2['distributor_address'] = mysql_escape_string(trim($_POST['address']));
            $data2['zipcode'] = mysql_escape_string(trim($_POST['zipcode']));
            $data2['last_update_date'] = date('Y-m-d');
            $data2['last_update_status'] = "Update";
            $this->_dbUpdate($data2, 'table_distributors', " distributor_id=" . $distributor_id);
        }
        return $id;
    }

    function showStockistAddress($distributor_id)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.retailer_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $where = " a.stockist_id = '" . $distributor_id . "' ";
        if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_stockist_address as a 
           
        ', "a.stockist_id,a.address_id,a.address,a.status,a.zipcode", '', " $where ");

        $auRecCount = $this->_getSelectList2('table_stockist_address as a 
             ', "COUNT(*) as total", '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }


        for ($i = 0; $i < count($auRec); $i++) {

            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href="stockist_address.php?stid=' . $auRec[$i]->address_id . '&value=' . $status . '">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->address_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->address) . '"';
            $json .= ',"' . addslashes($auRec[$i]->zipcode) . '"';

            $json .= ',"' . addslashes($status) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function updateStockistAddress($id)
    {


        $data['address'] = mysql_escape_string(trim($_POST['address']));
        $data['zipcode'] = mysql_escape_string(trim($_POST['zipcode']));
        $data['updated_at'] = date('Y-m-d H:i:s');
        $this->_dbUpdate($data, 'table_stockist_address', " address_id=" . $id);
        //update main address
        $stockist_id = $_POST['stockist_id'];
        $where = " stockist_id = '" . $stockist_id . "'";
        $auRec = $this->_getSelectList2('table_stockist
        ', "stockist_id,address_id", '', " $where ");

        if ($auRec[0]->address_id == $id) {
            $data2['stockist_address'] = mysql_escape_string(trim($_POST['address']));
            $data2['zipcode'] = mysql_escape_string(trim($_POST['zipcode']));
            $data2['last_update_date'] = date('Y-m-d');
            $data2['last_update_status'] = "Update";
            $this->_dbUpdate($data2, 'table_stockist', " stockist_id=" . $stockist_id);
        }

        return $id;
    }
//Todo End : sudhanshu 13 may 2024 : show retailer address

//Todo Start : sudhanshu 29 may 2024 : distributor mapped salesman

    public function getDirectRouteDistributors($featureList)
    {
        $day = $curDay = date('D', strtotime(date('Y-m-d')));
        $date = date('Y-m-d');

        $distIdArr = array();
        $featureList = $this->getAccountFeaturesList($_SESSION['accountId']);

        if (in_array(94, $featureList)) {
            //Route List Month Wise : $RouteListMonthWiseId : 94
//                    $condition = " WHERE sd.status='A' and  sd.month='" . date('n') . "' and  sd.year='" . date('Y') . "' and sd.salesman_id IN(" . $bottomUsersIds . ") and sd.account_id = $account_id AND r.status='A' AND rr.retailer_id <= 0 AND rr.distributor_id > 0 GROUP BY rr.distributor_id ";
//                    $sqlRouteRec = "SELECT rr.distributor_id
//					FROM table_route_scheduled as sd
//					INNER join table_route_schedule_details as d on sd.route_schedule_id=d.route_schedule_id
//					INNER join table_route as r on r.route_id=d.route_id
//					INNER join table_route_retailer as rr on rr.route_id = r.route_id " . $condition;

            //Route List Month Wise
            $condition = "  sd.status='A' and  sd.month='" . date('n') . "' and  sd.year='" . date('Y') . "'   AND rr.distributor_id != 0 AND rr.retailer_id <= 0 AND r.status='A' GROUP BY sd.salesman_id,rr.distributor_id ";

            $auRec = $this->_getSelectList('table_route_scheduled as sd
            INNER join table_route_schedule_details as d on sd.route_schedule_id=d.route_schedule_id 
            INNER join table_route as r on r.route_id=d.route_id 
			INNER join table_route_retailer as rr on rr.route_id = r.route_id 
			
			INNER join table_salesman as sal on sal.salesman_id = sd.salesman_id          
        ', "rr.distributor_id,sal.salesman_id,sal.salesman_name,sal.employee_code", '', " $condition ");


            if (is_array($auRec) && count($auRec) > 0) {
                foreach ($auRec as $salData) {
                    $salArr[$salData->distributor_id][] = $salData->salesman_name . ' (' . $salData->employee_code . ')';

                    $distIdArr[$salData->distributor_id] = implode('|', $salArr[$salData->distributor_id]);
                }
            }

        }

        if (in_array(93, $featureList)) {
            //Route List Day Wise : $RouteListDayWiseId : 93
//                    $condition = " WHERE s.from_date<='" . $date . "' and s.to_date>='" . $date . "' and s.status='A' and r.status='A' and s.salesman_id IN(" . $bottomUsersIds . ") and s.account_id = $account_id  AND rr.retailer_id <= 0 AND rr.distributor_id > 0 GROUP BY rr.distributor_id ";
//                    $sqlRouteRec = "SELECT rr.distributor_id
//					FROM table_route_schedule as s
//					left join view_route_schedule_by_day as d on s.route_schedule_id=d.route_schedule_id
//					left join table_route as r on FIND_IN_SET(r.route_id,d.all_routes)
//					LEFT JOIN table_route_retailer as rr on rr.route_id = r.route_id " . $condition;
            //echo $sqlRouteRec;die;

            //Route List Day Wise : $RouteListDayWiseId : 93
            $condition = "  s.from_date<='" . $date . "' and s.to_date>='" . $date . "' and s.status='A' and r.status='A' AND  sal.status='A' AND rr.distributor_id != 0 AND rr.retailer_id <= 0 GROUP BY rr.distributor_id,sal.salesman_id";

            $auRec = $this->_getSelectList("table_route_schedule as s 
         left join view_route_schedule_by_day as d on s.route_schedule_id=d.route_schedule_id
        left join table_route as r on r.route_id IN(d.all_routes_conct)	
        left join table_route_retailer as rr on rr.route_id = r.route_id 	
		INNER join table_salesman as sal on sal.salesman_id = s.salesman_id          
        ", "rr.distributor_id,sal.salesman_id,sal.salesman_name,sal.employee_code ", '', " $condition ");

            if (is_array($auRec) && count($auRec) > 0) {
                foreach ($auRec as $salData) {
                    $salArr[$salData->distributor_id][] = $salData->salesman_name . ' (' . $salData->employee_code . ')';

                    $distIdArr[$salData->distributor_id] = implode('|', $salArr[$salData->distributor_id]);


                }
            }

        }


        return $distIdArr;

    }

    function getRouteWiseDistributorMappedSalesman()
    {
        $day = $curDay = date('D', strtotime(date('Y-m-d')));
        $date = date('Y-m-d');
        $RouteListDayWiseId = 93;
        $RouteListMonthWiseId = 94;
        $RouteRetailerWiseId = 95;
        $SalRetMappingRouteFeatureId = 119;
        $customerWiseDayWisePJP = 186;
        $distIdArr = array();
        $featureList = $this->getAccountFeaturesList($_SESSION['accountId']);


        if (in_array($RouteListMonthWiseId, $featureList)) {
            //Route List Month Wise
            $condition = "  sd.status='A' and  sd.month='" . date('n') . "' and  sd.year='" . date('Y') . "'   AND ret.distributor_id != 0 AND ret.status='A' AND r.status='A' GROUP BY sd.salesman_id,ret.distributor_id ";

            $auRec = $this->_getSelectList('table_route_scheduled as sd
            INNER join table_route_schedule_details as d on sd.route_schedule_id=d.route_schedule_id 
            INNER join table_route as r on r.route_id=d.route_id 
			INNER join table_route_retailer as rr on rr.route_id = r.route_id 
			INNER join table_retailer as ret on ret.retailer_id = rr.retailer_id 
			INNER join table_salesman as sal on sal.salesman_id = sd.salesman_id          
        ', "ret.distributor_id,sal.salesman_id,sal.salesman_name,sal.employee_code", '', " $condition ");


            if (is_array($auRec) && count($auRec) > 0) {
                foreach ($auRec as $salData) {
                    $salArr[$salData->distributor_id][] = $salData->salesman_name . ' (' . $salData->employee_code . ')';

                    $distIdArr[$salData->distributor_id] = implode('|', $salArr[$salData->distributor_id]);
                }
            }

        } else if (in_array($RouteRetailerWiseId, $featureList)) {

            $condition = "   rs.month='" . date('n') . "' and rs.year='" . date('Y') . "' and rs.status='A' and rsd.status='A' AND ret.distributor_id != 0 AND ret.status='A' And sal.status='A' GROUP BY ret.distributor_id,sal.salesman_id ";


            $auRec = $this->_getSelectList('table_salesman_retailer_assignment as rs
           left join table_salesman_retailer_assignment_details as rsd on rs.route_schedule_id=rsd.route_schedule_id 
           INNER join table_retailer as ret on ret.retailer_id = rsd.retailer_id		
			INNER join table_salesman as sal on sal.salesman_id = rs.salesman_id          
        ', "ret.distributor_id,sal.salesman_id,sal.salesman_name,sal.employee_code", '', " $condition ");


            if (is_array($auRec) && count($auRec) > 0) {
                foreach ($auRec as $salData) {
                    $salArr[$salData->distributor_id][] = $salData->salesman_name . ' (' . $salData->employee_code . ')';

                    $distIdArr[$salData->distributor_id] = implode('|', $salArr[$salData->distributor_id]);
                }
            }


        } else if (in_array($SalRetMappingRouteFeatureId, $featureList)) {
            $condition = "  retMas.status='A' AND retMas.distributor_id != 0 AND sal.status='A' GROUP BY retMas.distributor_id,sal.salesman_id ";

            $auRec = $this->_getSelectList('table_customer_salesman_mapping as rsd
          inner join table_retailer as retMas on retMas.retailer_id=rsd.retailer_id
         		
			INNER join table_salesman as sal on sal.salesman_id = rsd.salesman_id          
        ', "retMas.distributor_id,sal.salesman_id,sal.salesman_name,sal.employee_code", '', " $condition ");


            if (is_array($auRec) && count($auRec) > 0) {
                foreach ($auRec as $salData) {
                    $salArr[$salData->distributor_id][] = $salData->salesman_name . ' (' . $salData->employee_code . ')';

                    $distIdArr[$salData->distributor_id] = implode('|', $salArr[$salData->distributor_id]);
                }
            }

        } else if (in_array($customerWiseDayWisePJP, $featureList)) {
            //customer wise day wise PJP : 186  added by sachin on 26th Oct 2023
            $condition = "  rs.status='A' and rr.status='A' and ('" . $date . "' BETWEEN rs.from_date AND rs.to_date)		
		
		and sal.status='A'  AND rr.distributor_id != 0";


            $auRec = $this->_getSelectList("table_customer_wise_route_schedule as rs
         left join table_customer_wise_route_schedule_by_day as r on rs.route_schedule_id=r.route_schedule_id
         INNER JOIN table_retailer as rr on FIND_IN_SET(rr.retailer_id,concat(if(r.Sun='',0,r.Sun),',',if(r.Mon='',0,r.Mon),',',if(r.Tue='',0,r.Tue),',',if(r.Wed='',0,r.Wed),',',if(r.Thu='',0,r.Thu),',',if(r.Fri='',0,r.Fri),',',if(r.Sat='',0,r.Sat)))		
			INNER join table_salesman as sal on sal.salesman_id = rs.salesman_id          
        ", "rr.distributor_id,sal.salesman_id,sal.salesman_name,sal.employee_code", '', " $condition ");


            if (is_array($auRec) && count($auRec) > 0) {
                foreach ($auRec as $salData) {
                    $salArr[$salData->distributor_id][] = $salData->salesman_name . ' (' . $salData->employee_code . ')';

                    $distIdArr[$salData->distributor_id] = implode('|', $salArr[$salData->distributor_id]);
                }
            }


        } else {

            //Route List Day Wise : $RouteListDayWiseId : 93
            $condition = "  s.from_date<='" . $date . "' and s.to_date>='" . $date . "' and s.status='A' and r.status='A' AND  sal.status='A' AND  ret.distributor_id != 0 AND ret.status='A' GROUP BY ret.distributor_id,sal.salesman_id";

            $auRec = $this->_getSelectList("table_route_schedule as s 
         left join view_route_schedule_by_day as d on s.route_schedule_id=d.route_schedule_id
        left join table_route as r on r.route_id IN(d.all_routes_conct)
        left join table_route_retailer as rr on rr.route_id = r.route_id 
INNER join table_retailer as ret on ret.retailer_id = rr.retailer_id 	
			INNER join table_salesman as sal on sal.salesman_id = s.salesman_id          
        ", "ret.distributor_id,sal.salesman_id,sal.salesman_name,sal.employee_code,ret.retailer_id ", '', " $condition ");


            if (is_array($auRec) && count($auRec) > 0) {
                foreach ($auRec as $salData) {
                    $salArr[$salData->distributor_id][] = $salData->salesman_name . ' (' . $salData->employee_code . ')';

                    $distIdArr[$salData->distributor_id] = implode('|', $salArr[$salData->distributor_id]);
                }
            }


        }


        return $distIdArr;

    }

    function showDistributorMappedSalesman()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'd.distributor_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $where = " d.status='A' ";
        if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_distributors as d
           
        ', "distributor_id,distributor_name,distributor_code", $rp, " $where  $sort ");

        $auRecCount = $this->_getSelectList('table_distributors as d 
             ', "COUNT(*) as total", '', $where);

        $total = $auRecCount[0]->total;

        //get dirct map salesman
        $mappedSal = $this->_getSelectList('table_salesman_distributor_mapping  as sm		
		left join table_salesman AS s ON s.salesman_id = sm.salesman_id	',
            'GROUP_CONCAT(s.salesman_name," (",s.employee_code,")" SEPARATOR "|") as salesman_name,sm.distributor_id', '', ' s.status="A" GROUP BY sm.distributor_id');

        $directMappedSal = [];
        if (is_array($mappedSal) && count($mappedSal) > 0) {
            foreach ($mappedSal as $disStokist) {
                $directMappedSal[$disStokist->distributor_id] = $disStokist->salesman_name;
            }
        }

        $routDistSal = $this->getRouteWiseDistributorMappedSalesman();
        $directDis = $this->getDirectRouteDistributors();
//        print_r($directDis);
//        print_r($routDistSal);
//       print_r($directMappedSal);die;


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;


        for ($i = 0; $i < count($auRec); $i++) {

            $salesman = '';
            if ($directMappedSal[$auRec[$i]->distributor_id] != '' && $routDistSal[$auRec[$i]->distributor_id] != '') {
                $salesman = $directMappedSal[$auRec[$i]->distributor_id] . '|' . $routDistSal[$auRec[$i]->distributor_id];
            }
            if ($directMappedSal[$auRec[$i]->distributor_id] != '' && $routDistSal[$auRec[$i]->distributor_id] == '') {
                $salesman = $directMappedSal[$auRec[$i]->distributor_id];
            }
            if ($directMappedSal[$auRec[$i]->distributor_id] == '' && $routDistSal[$auRec[$i]->distributor_id] != '') {
                $salesman = $routDistSal[$auRec[$i]->distributor_id];
            }
            if ($salesman != '') {
                if ($directDis[$auRec[$i]->distributor_id] != '') {
                    $salesman = $salesman . '|' . $directDis[$auRec[$i]->distributor_id];
                }

            } else {
                $salesman = $directDis[$auRec[$i]->distributor_id];
            }

            $salsmans = explode('|', $salesman);

            $salesman = implode(' | ', array_unique($salsmans));

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->distributor_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';

            $json .= ',"' . addslashes($salesman) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
//Todo End  : sudhanshu 29 may 2024 : distributor mapped salesman
//Todo Start : sudhanshu 05 june 2024 : update retailer master address
    function updateRetailerMasterAddress()
    {

        $address = $_POST['retailer_address'];
        $zipcode = $_POST['zipcode'];
        $main_address_id = $_POST['address_id'];
        $retailer_id = $_POST['retailer_id'];


        if (is_array($address) && count($address) > 0) {
            $main_address = $address[$main_address_id];
            if (trim($main_address != '')) {
                $masData = [];
                $masData['retailer_address'] = $main_address;
                $masData['zipcode'] = $zipcode[$main_address_id];
                $masData['last_update_date'] = date('Y-m-d');
                $this->_dbUpdate($masData, 'table_retailer', " retailer_id=" . $retailer_id);
            } else {
                $masData = [];
                $masData['retailer_address'] = $main_address;
                $masData['zipcode'] = $zipcode[$main_address_id];
                $masData['address_id'] = '0';
                $masData['last_update_date'] = date('Y-m-d');
                $this->_dbUpdate($masData, 'table_retailer', " retailer_id=" . $retailer_id);
            }
            foreach ($address as $addr_id => $adr) {

                if (trim($adr) != '') {
                    $data['address'] = trim($adr);
                    $data['zipcode'] = trim($zipcode[$addr_id]);
                    $data['updated_at'] = date('Y-m-d H:i:s');
                    $id = $this->_dbUpdate($data, 'table_retailer_address', " address_id=" . $addr_id);
                } else {
                    $this->mysql_query("DELETE FROM table_retailer_address WHERE address_id = $addr_id  ");
                }

            }
        }

        return $id;
    }


    function updateDistributorMasterAddress()
    {

        $address = $_POST['distributor_address'];
        $zipcode = $_POST['zipcode'];
        $main_address_id = $_POST['address_id'];
        $distributor_id = $_POST['distributor_id'];

        if (is_array($address) && count($address) > 0) {
            $main_address = $address[$main_address_id];
            if (trim($main_address != '')) {
                $masData = [];
                $masData['distributor_address'] = $main_address;
                $masData['zipcode'] = $zipcode[$main_address_id];
                $masData['last_update_date'] = date('Y-m-d');
                $this->_dbUpdate($masData, 'table_distributors', " distributor_id=" . $distributor_id);
            } else {
                $masData = [];
                $masData['distributor_address'] = $main_address;
                $masData['zipcode'] = $zipcode[$main_address_id];
                $masData['address_id'] = '0';
                $masData['last_update_date'] = date('Y-m-d');
                $this->_dbUpdate($masData, 'table_distributors', " distributor_id=" . $distributor_id);
            }
            foreach ($address as $addr_id => $adr) {

                if (trim($adr) != '') {
                    $data['address'] = trim($adr);
                    $data['zipcode'] = trim($zipcode[$addr_id]);
                    $data['updated_at'] = date('Y-m-d H:i:s');
                    $id = $this->_dbUpdate($data, 'table_distributor_address', " address_id=" . $addr_id);
                } else {
                    $this->mysql_query("DELETE FROM table_distributor_address WHERE address_id = $addr_id  ");
                }

            }
        }

        return $id;
    }

    function updateStockistMasterAddress()
    {

        $address = $_POST['stockist_address'];
        $zipcode = $_POST['zipcode'];
        $main_address_id = $_POST['address_id'];
        $distributor_id = $_POST['stockist_id'];

        if (is_array($address) && count($address) > 0) {
            $main_address = $address[$main_address_id];
            if (trim($main_address != '')) {
                $masData = [];
                $masData['stockist_address'] = $main_address;
                $masData['zipcode'] = $zipcode[$main_address_id];
                $masData['last_update_date'] = date('Y-m-d');
                $this->_dbUpdate($masData, 'table_stockist', " stockist_id=" . $distributor_id);
            } else {
                $masData = [];
                $masData['stockist_address'] = $main_address;
                $masData['zipcode'] = $zipcode[$main_address_id];
                $masData['address_id'] = '0';
                $masData['last_update_date'] = date('Y-m-d');
                $this->_dbUpdate($masData, 'table_stockist', " stockist_id=" . $distributor_id);
            }
            foreach ($address as $addr_id => $adr) {

                if (trim($adr) != '') {
                    $data['address'] = trim($adr);
                    $data['zipcode'] = trim($zipcode[$addr_id]);
                    $data['updated_at'] = date('Y-m-d H:i:s');
                    $id = $this->_dbUpdate($data, 'table_stockist_address', " address_id=" . $addr_id);
                } else {
                    $this->mysql_query("DELETE FROM table_stockist_address WHERE address_id = $addr_id  ");
                }

            }
        }

        return $id;
    }

    //Todo End : sudhanshu 05 june 2024 : update retailer master address

    function getSalesmanRetailersOnRoute($salesId, $account_id, $featureList)
    {

        $selectedMonth = $_SESSION['dismonth'];
        $selectedYear = $_SESSION['disCyear'];
        $fromDate = date('Y-m-d', strtotime($selectedYear . '-' . $selectedMonth . '-01'));
        $todate = date('Y-m-t', strtotime($selectedYear . '-' . $selectedMonth . '-01'));
        $_objArrayList = new ArrayList();
        $retIdArr = [];
        if (count($salesId) > 0) {
            $salesmanIds = implode(',', $salesId);
        }

        //first we will fetch the logged in salesman's route retailers
        if (count($featureList) > 0 && in_array(94, $featureList)) {
            $condition = " sd.status='A' AND r.status='A' AND  sd.month='" . $selectedMonth . "' and  sd.year='" . $selectedYear . "' and sd.salesman_id IN(" . $salesmanIds . ") AND ret.retailer_id > 0 GROUP BY sd.salesman_id,rt.distributor_id";

            $getRet = $this->_getSelectList("table_route_scheduled as sd 
				left join table_route_schedule_details as d on sd.route_schedule_id=d.route_schedule_id  
				left join table_route as r on r.route_id=d.route_id 
				left join table_route_retailer as ret on ret.route_id = r.route_id
				left join table_retailer as rt on rt.retailer_id = ret.retailer_id",
                "sd.salesman_id,rt.distributor_id,count(DISTINCT ret.retailer_id) as total_ret",
                "", " $condition ");


        } else if (count($featureList) > 0 && in_array(95, $featureList)) {

            $condition = "  rs.salesman_id IN(" . $salesmanIds . ") and rs.month='" . $selectedMonth . "' and rs.year='" . $selectedYear . "' and rs.status='A' and rsd.status='A' and rsd.retailer_id > 0 GROUP BY rs.salesman_id,rt.distributor_id";

            $getRet = $this->_getSelectList("table_salesman_retailer_assignment as rs
				left join table_salesman_retailer_assignment_details as rsd on rs.route_schedule_id=rsd.route_schedule_id
				left join table_retailer as rt on rt.retailer_id = rsd.retailer_id",
                "rs.salesman_id,rt.distributor_id,count(DISTINCT rsd.retailer_id) as total_ret", "", " $condition ");
        } else if (count($featureList) > 0 && in_array(119, $featureList)) {
            $condition = "  rsd.salesman_id IN(" . $salesmanIds . ") AND rsd.retailer_id > 0  group by rsd.salesman_id,rt.distributor_id ";
            $getRet = $this->_getSelectList("table_customer_salesman_mapping as rsd
				left join table_retailer as rt on rt.retailer_id = rsd.retailer_id
				", "rsd.salesman_id,rt.distributor_id,count(DISTINCT rsd.retailer_id) as total_ret", "", " $condition ");

        } else {
            $condition = " 
				((s.from_date <= '" . $fromDate . "' AND s.to_date >= '" . $todate . "') 
						OR (s.from_date <= '" . $fromDate . "' AND (s.to_date >= '" . $fromDate . "' AND s.to_date <= '" . $todate . "')) 
						OR (s.from_date >= '" . $fromDate . "' AND (s.to_date >= '" . $todate . "' AND s.from_date <= '" . $todate . "'))
						OR (s.from_date >= '" . $fromDate . "' AND s.to_date <= '" . $todate . "' )
						)
				and s.status='A' and ret.retailer_id > 0 AND r.status='A' 
				and s.salesman_id IN(" . $salesmanIds . ") GROUP BY s.salesman_id,rt.distributor_id";

            $getRet = $this->_getSelectList("table_route_schedule as s 
				LEFT JOIN table_route_schedule_by_day as d on s.route_schedule_id=d.route_schedule_id 
				LEFT JOIN table_route as r on FIND_IN_SET(r.route_id,concat(if(d.Sun='',0,d.Sun),',',if(d.Mon='',0,d.Mon),',',if(d.Tue='',0,d.Tue),',',if(d.Wed='',0,d.Wed),',',if(d.Thu='',0,d.Thu),',',if(d.Fri='',0,d.Fri),',',if(d.Sat='',0,d.Sat)))
				LEFT JOIN table_route_retailer as ret on ret.route_id = r.route_id
				left join table_retailer as rt on rt.retailer_id = ret.retailer_id",
                's.salesman_id,rt.distributor_id,count(DISTINCT(ret.retailer_id)) as total_ret', '', " $condition ");

        }


        if (is_array($getRet) && (count($getRet) > 0)) {
            foreach ($getRet as $key => $retData) {
                $retIdArr[$retData->salesman_id][$retData->distributor_id] = $retData->total_ret;
            }
        }
        if (is_array($retIdArr) && (count($retIdArr) > 0)) {
//            return array_unique($retIdArr);
            return $retIdArr;
        } else {
            return [];
        }
    }

    function getSalesmanRetailersOnRouteDateWise($salesId, $account_id, $featureList)
    {

        $selectedMonth = date('n', strtotime($_SESSION['FromAttList']));
        $selectedYear = date('Y', strtotime($_SESSION['FromAttList']));
        $fromDate = date('Y-m-d', strtotime($_SESSION['FromAttList']));
        $todate = date('Y-m-d', strtotime($_SESSION['ToAttList']));
        $_objArrayList = new ArrayList();
        $retIdArr = [];
        if (count($salesId) > 0) {
            $salesmanIds = implode(',', $salesId);
        }

        //first we will fetch the logged in salesman's route retailers
        if (count($featureList) > 0 && in_array(94, $featureList)) {
            $condition = " sd.status='A' AND r.status='A' AND  sd.month='" . $selectedMonth . "' and  sd.year='" . $selectedYear . "' and sd.salesman_id IN(" . $salesmanIds . ") AND ret.retailer_id > 0 GROUP BY sd.salesman_id,route_date,rt.distributor_id";

            $getRet = $this->_getSelectList("table_route_scheduled as sd 
				left join table_route_schedule_details as d on sd.route_schedule_id=d.route_schedule_id  
				left join table_route as r on r.route_id=d.route_id 
				left join table_route_retailer as ret on ret.route_id = r.route_id
				left join table_retailer as rt on rt.retailer_id = ret.retailer_id",
                "sd.salesman_id,CONCAT(sd.year,'-',LPAD(sd.month, 2, '0'),'-',LPAD(d.assign_day, 2, '0')) as route_date,rt.distributor_id,count(DISTINCT ret.retailer_id) as total_ret",
                "", " $condition ");


        } else if (count($featureList) > 0 && in_array(95, $featureList)) {

            $condition = "  rs.salesman_id IN(" . $salesmanIds . ") and rs.month='" . $selectedMonth . "' and rs.year='" . $selectedYear . "' and rs.status='A' and rsd.status='A' and rsd.retailer_id > 0 GROUP BY rs.salesman_id,route_date,rt.distributor_id";

            $getRet = $this->_getSelectList("table_salesman_retailer_assignment as rs
				left join table_salesman_retailer_assignment_details as rsd on rs.route_schedule_id=rsd.route_schedule_id
				left join table_retailer as rt on rt.retailer_id = rsd.retailer_id",
                "rs.salesman_id,CONCAT(rs.year,'-',LPAD(rs.month, 2, '0'),'-',LPAD(rsd.assign_day, 2, '0')) as route_date,rt.distributor_id,count(DISTINCT rsd.retailer_id) as total_ret", "", " $condition ");
        } else if (count($featureList) > 0 && in_array(119, $featureList)) {

            $condition = "  rsd.salesman_id IN(" . $salesmanIds . ") AND rsd.retailer_id > 0  group by rsd.salesman_id,route_date,rt.distributor_id ";
            $getRet = $this->_getSelectList("table_customer_salesman_mapping as rsd
				left join table_retailer as rt on rt.retailer_id = rsd.retailer_id
				", "rsd.salesman_id,'0000-00-00' as route_date,rt.distributor_id,count(DISTINCT rsd.retailer_id) as total_ret", "", " $condition ");

        } else {
            $condition = " 
				((s.from_date <= '" . $fromDate . "' AND s.to_date >= '" . $todate . "') 
						OR (s.from_date <= '" . $fromDate . "' AND (s.to_date >= '" . $fromDate . "' AND s.to_date <= '" . $todate . "')) 
						OR (s.from_date >= '" . $fromDate . "' AND (s.to_date >= '" . $todate . "' AND s.from_date <= '" . $todate . "'))
						OR (s.from_date >= '" . $fromDate . "' AND s.to_date <= '" . $todate . "' )
						)
				and s.status='A' and ret.retailer_id > 0 AND r.status='A' 
				and s.salesman_id IN(" . $salesmanIds . ") GROUP BY s.salesman_id,route_date,rt.distributor_id";

            $getRet = $this->_getSelectList("table_route_schedule as s 
				LEFT JOIN table_route_schedule_by_day as d on s.route_schedule_id=d.route_schedule_id 
				LEFT JOIN table_route as r on FIND_IN_SET(r.route_id,concat(if(d.Sun='',0,d.Sun),',',if(d.Mon='',0,d.Mon),',',if(d.Tue='',0,d.Tue),',',if(d.Wed='',0,d.Wed),',',if(d.Thu='',0,d.Thu),',',if(d.Fri='',0,d.Fri),',',if(d.Sat='',0,d.Sat)))
				LEFT JOIN table_route_retailer as ret on ret.route_id = r.route_id
				left join table_retailer as rt on rt.retailer_id = ret.retailer_id",
                's.salesman_id,"0000-00-00" as route_date,rt.distributor_id,count(DISTINCT(ret.retailer_id)) as total_ret', '', " $condition ");

        }


        if (is_array($getRet) && (count($getRet) > 0)) {
            foreach ($getRet as $key => $retData) {
                $retIdArr[$retData->route_date][$retData->salesman_id][$retData->distributor_id] = $retData->total_ret;
            }
        }
        if (is_array($retIdArr) && (count($retIdArr) > 0)) {
//            return array_unique($retIdArr);
            return $retIdArr;
        } else {
            return [];
        }
    }

    // Todo Start : Jatin : 27 June 2024 : Order Scheme Report

    function showSchemeOrderList($salesman, $flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',time_of_order desc';
        if (!$sortname) $sortname = 'date_of_order';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime ";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($query == 'Yes') {
            $query = 'Y';
        } elseif ($query == 'No') {
            $query = 'N';
        }

        if (isset($_SESSION['SalOrderList']) && $_SESSION['SalOrderList'] != '') {
            $ret = " and o.retailer_id ='" . $_SESSION['SalOrderList'] . "'";
        }
        if (isset($_SESSION['FromOrderList']) && $_SESSION['FromOrderList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromOrderList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if (isset($_SESSION['ToOrderList']) && $_SESSION['ToOrderList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToOrderList']));
        } else {
            $todate = date('Y-m-d');
        }

        $where = "   o.date_of_order BETWEEN '" . $fromdate . "' AND '" . $todate . "' $ret ";
        $ttlOrder = $this->_getSelectList('table_order as o ', 'o.order_id', '', $where . " ORDER BY o.order_id ");

        if (is_array($ttlOrder) && (count($ttlOrder) > 0)) {
            foreach ($ttlOrder as $key => $expData) {
                $OrderArr[] = $expData->order_id;
            }
        }

        // To Get All Duration active scheme
//        $where13 = "  (s.start_date BETWEEN '".$fromdate."'AND '".$todate."') OR
//            (s.end_date BETWEEN '".$todate."' AND '".$todate."') OR
//            (s.start_date <= '".$fromdate."' AND s.end_date >= '".$todate."')";
        $where13 = " 
            ((s.start_date <= '" . $fromdate . "' AND s.end_date >= '" . $todate . "') 
						OR (s.start_date <= '" . $fromdate . "' AND (s.end_date >= '" . $fromdate . "' AND s.end_date <= '" . $todate . "')) 
						OR (s.start_date >= '" . $fromdate . "' AND (s.end_date >= '" . $todate . "' AND s.start_date <= '" . $todate . "'))
						OR (s.start_date >= '" . $fromdate . "' AND s.end_date <= '" . $todate . "' )
						)
            ";

        $getSchemeTypes = $this->_getSelectList('table_discount as s 
        left join table_discount_detail as det on det.discount_id = s.discount_id', 's.discount_id,det
        .discount_desc', '', $where13 . " ORDER BY s.discount_id ASC ");

        if (is_array($getSchemeTypes) && (count($getSchemeTypes) > 0)) {
            foreach ($getSchemeTypes as $key => $expData) {
                $expNameArr[] = $expData->discount_id;
            }
        }

        // To get All Scheme order
        if ((is_array($expNameArr) && count($expNameArr) > 0) && (is_array($OrderArr) && count($OrderArr) > 0)) {
            // To Get All Order detail Scheme order
            $where12 = "  o.discount_id in (" . implode(',', $expNameArr) . ") and o.order_id IN(" . implode(',', $OrderArr) . ")";
            $schmeOrder = $this->_getSelectList('table_order as o', 'o.order_id as order_id,o.discount_id', '',
                $where12 . "  ");
            $OrderSchemeArr = [];
            if (is_array($schmeOrder) && (count($schmeOrder) > 0)) {
                foreach ($schmeOrder as $key => $expData) {
                    $schemIds[$expData->order_id][$expData->discount_id] = $expData->discount_id;
                    $OrderSchemeArr[] = $expData->order_id;
                }
            }


            // To Get All Order detail Scheme order
            $schmeDetailOrder = $this->_getSelectList2('table_order_detail as o', 'o.discount_id, o.order_id as order_id',
                '', $where12);
            $OrderDetailArr = [];
            if (is_array($schmeDetailOrder) && (count($schmeDetailOrder) > 0)) {
                foreach ($schmeDetailOrder as $key => $expData) {
                    $schemIds[$expData->order_id][$expData->discount_id] = $expData->discount_id;
                    $OrderDetailArr[] = $expData->order_id;
                }
            }
            $finalOrderIds = array_merge($OrderSchemeArr, $OrderDetailArr);

        }
        if (is_array($finalOrderIds) && count($finalOrderIds) > 0) {
            $order_ids = implode(',', $finalOrderIds);
        } else {
            $order_ids = '-1';
        }

        $where = " o.order_id IN($order_ids)";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_order as o 
            left join table_order_detail as ord on ord.order_id = o.order_id 
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_distributors as d on o.distributor_id=d.distributor_id 
            left join state as st on st.state_id=r.state 
            left join table_salesman as s on s.salesman_id = o.salesman_id
            left join city as c on c.city_id=r.city 
            left join table_location as loc on loc.location_id = r.location_id
            ', "o.*,SUM(ord.acc_quantity) as total_ordered_qty,r.retailer_name,r.retailer_code,
            r.retailer_location,s.salesman_name,s.employee_code,
            d.distributor_name,d.distributor_code,st.state_name,c.city_name,loc.location_name", $rp, $where . " GROUP BY o.order_id " . $sort, '');

        $auRecCount = $this->_getSelectList('table_order as o 
            left join table_retailer as r on o.retailer_id=r.retailer_id 
            left join table_distributors as d on o.distributor_id=d.distributor_id 
            left join state as st on st.state_id=r.state
            left join table_salesman as s on s.salesman_id = o.salesman_id
            left join city as c on c.city_id=r.city 
            left join table_location as loc on loc.location_id = r.location_id', 'count(o.order_id) as total', '', $where . " GROUP BY o.order_id " . $sort);

        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i(worry)") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target=\"_blank\"';
        }
        $emptyValue = '<p style="text-align: center;font-size: 30px;">-</p>';
        for ($i = 0; $i < count($auRec); $i++) {

            $cancelStatus = 'no';
            $color = '';
            if ($auRec[$i]->order_status == 'C') {
                $cancelStatus = 'yes';
                $color = 'C';
            }

            $link = '<a style=\"cursor: pointer;color: #37bcef;\" href=\"scheme_detail_order_list.php?act_id=' . base64_encode($auRec[$i]->order_id) . '\" ' . $targetBlank . '> ' . $auRec[$i]->order_id . '</a>';

            if ($rc) $json .= ",";
            $remove = array("\n", "\r\n", "\r");

            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            $json .= '"color":"' . $color . '",';
            $json .= '"colortd":"' . $colortd . '",';
            $json .= '"cell":["' . ucwords(addslashes($this->_changeDate($auRec[$i]->date_of_order))) . '"';
            $json .= ',"' . ucwords($link) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->order_by)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->total_ordered_qty)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->acc_total_invoice_amount)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->distributor_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->state_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . ucwords(addslashes($cancelStatus)) . '"';


            if (is_array($expNameArr) && (count($expNameArr) > 0)) {
                foreach ($expNameArr as $expTypeId => $expTypeName) {
                    if (is_array($schemIds[$auRec[$i]->order_id]) && count
                        ($schemIds[$auRec[$i]->order_id]) > 0) {
                        if (isset($schemIds[$auRec[$i]->order_id][$expTypeName])) {
                            $json .= ',"' . ucwords(addslashes('yes')) . '"';
                        } else {
                            $json .= ',"' . addslashes($emptyValue) . '"';
                        }
                    } else {
                        $json .= ',"' . addslashes($emptyValue) . '"';
                    }
                }
            }
            $json .= "]}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // Todo End : Jatin : 27 June 2024 : Order Scheme Report

    //Todo Start Sudhanshu : 05 july 2024 show vehicle type
    function showVehicleType()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'vehicle_type';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];


        $statusCondi = '';
        if (isset($_SESSION['MasVehicle']) && $_SESSION['MasVehicle'] != 'all' && $_SESSION['MasVehicle'] != '') {
            $statusCondi = "  status ='" . $_SESSION['MasVehicle'] . "' ";
        }
        $where = " $statusCondi ";

        if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_vehicle_type_master
           
        ', "*", $rp, " $where  $sort ");

        $auRecCount = $this->_getSelectList('table_vehicle_type_master as d 
             ', "COUNT(*) as total", '', $where);

        $total = $auRecCount[0]->total;


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;


        for ($i = 0; $i < count($auRec); $i++) {

            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href="vehicle_type.php?stid=' . $auRec[$i]->vehicle_type_id . '&value=' . $status . '">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->vehicle_type_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->vehicle_type) . '"';


            $json .= ',"' . addslashes($status) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function updateVehicleType($id)
    {
        $data['vehicle_type'] = mysql_escape_string(trim($_POST['vehicle_type']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated'] = date('Y-m-d h:i:s');

        $update = $this->_dbUpdate($data, 'table_vehicle_type_master', " vehicle_type_id=" . $id);
        return $id;
    }

    public function addVehicleType()
    {
        $data['vehicle_type'] = mysql_escape_string(trim($_POST['vehicle_type']));
        $data['account_id'] = $_POST['account_id'];
        $data['created_date'] = date('Y-m-d h:i:s');
        $data['last_updated'] = date('Y-m-d h:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_vehicle_type_master');
        return $id;
    }

    //Todo Start Sudhanshu : 05 july 2024 show vehicle type

    //Todo Start Sudhanshu : 08 july 2024 show vehicle type designation mapping
    function showVehicleTypeDesignationMapping($sal_sort_order)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'vehicle_type';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $sal_sort_order = '';
        $sal_sort_order_condi = '';
        if ($_SESSION['userLoginType'] == 5 && $_SESSION['salesmanId'] > 0) {
            $condi1 = "salesman_id ='" . $_SESSION['salesmanId'] . "'";
            $salDesig = $this->_getSelectList('table_salesman_hierarchy_relationship', 'hierarchy_id', '', $condi);

            $salDesigId = $salDesig[0]->hierarchy_id;
            $condi = "  hierarchy_id='" . $salDesigId . "' AND status = 'A'";

            $salHierarchy = $this->_getSelectList('table_salesman_hierarchy', '*', '', $condi);

            $sal_sort_order = $salHierarchy[0]->sort_order;

            $sal_sort_order_condi = "H.sort_order > $sal_sort_order ";

        }
        $where = " $sal_sort_order_condi ";

        if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

//        $auRec = $this->_getSelectList('table_vehicle_type_designatiom_mapping as vm
//        LEFT join table_salesman_hierarchy as H ON H.hierarchy_id = vm.hierarchy_id
//        LEFT join table_vehicle_type_master as vt ON vt.vehicle_type_id = vm.vehicle_type_id
//        ', "H.description as desi,vt.vehicle_type,vm.per_km_cost,vm.status,vm.mapping_id", $rp, " $where  $sort ");

        $auRec = $this->_getSelectList('table_vehicle_type_designatiom_mapping as vm
            LEFT join table_salesman_hierarchy as H ON H.hierarchy_id = vm.hierarchy_id
            LEFT join table_vehicle_type_master as vt ON vt.vehicle_type_id = vm.vehicle_type_id AND vt.status = "A"',
            "H.description as desi,H.hierarchy_id,COUNT(vt.vehicle_type_id) as dist_count", $rp, $where . ' AND H.status = "A" GROUP BY H.hierarchy_id ' . $sort);


        $auRecCount = $this->_getSelectList('table_vehicle_type_designatiom_mapping as vm
        LEFT join table_salesman_hierarchy as H ON H.hierarchy_id = vm.hierarchy_id
        LEFT join table_vehicle_type_master as vt ON vt.vehicle_type_id = vm.vehicle_type_id  
             ', "COUNT(vm.hierarchy_id) as total", '', $where . ' AND H.status = "A" GROUP BY H.hierarchy_id ');

        $total = count($auRecCount);


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;


        for ($i = 0; $i < count($auRec); $i++) {

            $status = "View Detail";
            //$status = '<a href="vehicle_type_designation_mapping.php?stid=' . $auRec[$i]->mapping_id . '&value=' . $status . '">' . $status . '</a>';
            $status = '<a href="vehicle_designation_mapping.php?desiId=' . $auRec[$i]->hierarchy_id . '">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->mapping_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->desi) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->dist_count)) . '"';

            $json .= ',"' . addslashes($status) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function updateVehicleTypeDesignationMapping($id)
    {

        $data['vehicle_type_id'] = mysql_escape_string(trim($_POST['vehicle_type_id']));
        $data['hierarchy_id'] = mysql_escape_string(trim($_POST['hierarchy_id']));
        $data['per_km_cost'] = $_POST['per_km_cost'];
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_update'] = date('Y-m-d h:i:s');

        $update = $this->_dbUpdate($data, 'table_vehicle_type_designatiom_mapping', " mapping_id=" . $id);
        return $id;
    }

    public function addVehicleTypeDesignationMapping()
    {
        $designation = $_POST['hierarchy_id'];
        if (in_array('All', $designation)) {
            $AllDesig = $this->_getSelectList('table_salesman_hierarchy', 'hierarchy_id', '', " status = 'A' AND description !='' ORDER BY sort_order ASC");
            $designation = [];
            if (is_array($AllDesig) && count($AllDesig) > 0) {
                foreach ($AllDesig as $hier) {
                    $designation[] = $hier->hierarchy_id;
                }
            }
        }

        if (is_array($designation) && count($designation) > 0) {
            foreach ($designation as $desi) {
                $data['vehicle_type_id'] = mysql_escape_string(trim($_POST['vehicle_type_id']));
                $data['hierarchy_id'] = $desi;
                $data['per_km_cost'] = $_POST['per_km_cost'];
                $data['status'] = "A";
                $data['account_id'] = mysql_escape_string($_POST['account_id']);
                $data['created_date'] = date('Y-m-d h:i:s');
                $data['last_update'] = date('Y-m-d h:i:s');

                $id = $this->_dbInsert($data, 'table_vehicle_type_designatiom_mapping');
            }
        }

        return $id;
    }

    //Todo End Sudhanshu : 05 july 2024 show vehicle type esignation mapping

    //Todo Start : sudhanshu 10 july 2024 attendance type replica
    function showAttendanceNew()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'tag_type';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 10 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasAtte']) && $_SESSION['MasAtte'] != 'all' && $_SESSION['MasAtte'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasAtte'] . "'";
        }
        //Todo End : sudhanshu 10 june 2024 : add status filter
        $where = " tag_type='4'  $statusCondi";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_tags', "*", $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_tags', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href="attendance_master_new.php?statusId=' . $auRec[$i]->tag_id . '&value=' . $sts . '">' . $sts . '</a>';

            $yes_checked = '';
            $no_checked = '';
            if ($auRec[$i]->is_mandate == 1) {
                $yes_checked = 'checked';
            } else {
                $no_checked = 'checked';
            }

            $isMandate = '<input type="radio" name="is_mandate_' . $auRec[$i]->tag_id . '" data-id="1" class="is_default" value="' . $auRec[$i]->tag_id . '" ' . $yes_checked . ' />';
            $nonMandate = '<input type="radio" name="is_mandate_' . $auRec[$i]->tag_id . '" data-id="0" class="is_default" value="' . $auRec[$i]->tag_id . '" ' . $no_checked . ' />';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->tag_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . ucwords(addslashes($sts)) . '"';
            $json .= ',"' . addslashes($isMandate) . '"';
            $json .= ',"' . addslashes($nonMandate) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : sudhanshu 10 july 2024 attendance type replica
    //Todo Start : sudhanshu odo meter report
    function showOdometerTravelExpense($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'odo.start_date';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if ($_SESSION['odoFrom'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['odoFrom']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['odoTo'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['odoTo']));
        } else {
            $todate = date('Y-m-d');
        }

        if ($_SESSION['allowncesalesmanID'] != '') {
            $salesman = " AND s.salesman_id = '" . $_SESSION['allowncesalesmanID'] . "'";
        }
        //$reqFor = "  AND (DATE(odo.start_date) BETWEEN '" . $fromdate . "' AND '" . $todate . "')  ";
        $reqFor = "  AND odo.start_date= '" . $fromdate . "'   ";

        $where = " s.account_id = " . $_SESSION['accountId'] . " $reqFor  $salesman ";
        //echo $_SESSION['allowncesalesmanID'];die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_odometer_expense_allowance as odo
LEFT JOIN table_salesman as s on s.salesman_id = odo.salesman_id 
LEFT JOIN table_vehicle_type_designatiom_mapping AS vm ON vm.mapping_id = odo.vehicle_mapping_id
LEFT JOIN table_vehicle_type_master AS vt ON vm.vehicle_type_id = vt.vehicle_type_id
', "odo.*,s.salesman_name,s.employee_code,vm.per_km_cost,vt.vehicle_type", $rp, $where . $sort);

        $auRecCount = $this->_getSelectList('table_odometer_expense_allowance as odo
LEFT JOIN table_salesman as s on s.salesman_id = odo.salesman_id 
LEFT JOIN table_vehicle_type_designatiom_mapping AS vm ON vm.mapping_id = odo.vehicle_mapping_id
LEFT JOIN table_vehicle_type_master AS vt ON vm.vehicle_type_id = vt.vehicle_type_id', 'COUNT(odo.allws_id) as total', '', $where);


        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $act_date = date('d M Y', strtotime($auRec[$i]->start_date));

            $start_time = date('H:i', $auRec[$i]->start_time);
            $end_time = date('H:i', $auRec[$i]->end_time);
            $total_distance = ($auRec[$i]->end_meter_reading != '') ? ($auRec[$i]->end_meter_reading - $auRec[$i]->start_meter_reading) . ' KM' : '';

            if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
                $targetBlank = '';
            } else {
                $targetBlank = 'target=\"_blank\"';
            }

            $start_photo = '<a  href="view_mulitple_photo.php?id=' . $auRec[$i]->allws_id . '&action=start_odometer" ' . $targetBlank . '>Photo</a>';
            $end_photo = '<a  href="view_mulitple_photo.php?id=' . $auRec[$i]->allws_id . '&action=end_odometer" ' . $targetBlank . '>Photo</a>';

            //now get total trevel distance

            $salsmanCond = " AND a.salesman_id='" . $auRec[$i]->salesman_id . "'";
            $result = $this->_getSelectList2('table_activity as a', "lat,lng,end_time as app_time,accuracy_level,salesman_id", '', " activity_type IN (3,5,11,12,13) and (lat !='' and lat !='0.0') and ( lng!='' and lng!='0.0') and activity_date='" . $auRec[$i]->start_date . "' and accuracy_level!=0 $salsmanCond ORDER BY end_time ASC");

            $total_travel_distance = 0;
            foreach ($result as $key => $value) {

                $salesLat1 = $result[$key]->lat;

                if (isset($result[$key + 1]->lat))
                    $salesLat = $result[$key + 1]->lat;
                else
                    $salesLat = $result[$key]->lat;

                $salesLng1 = $result[$key]->lng;

                if (isset($result[$key + 1]->lng))
                    $salesLng = $result[$key + 1]->lng;
                else
                    $salesLng = $result[$key]->lng;

                $salesdistance = $this->distance($salesLat1, $salesLng1, $salesLat, $salesLng, "K");

                if (!is_nan($salesdistance)) {

                    $total_travel_distance = $total_travel_distance + $salesdistance;
                }
            }

            $cost_by_pepup = (round($total_travel_distance, 2) * $auRec[$i]->per_km_cost);

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->allws_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($act_date)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->vehicle_type) . '"';
            $json .= ',"' . addslashes($auRec[$i]->per_km_cost) . '"';
            $json .= ',"' . addslashes(round($total_travel_distance, 2) . " KM") . '"';
            $json .= ',"' . ucwords(addslashes(number_format($cost_by_pepup, 2))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->start_meter_reading)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->start_time)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->start_comment))) . '"';
            $json .= ',"' . ucwords(addslashes($start_photo)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->end_time)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->end_meter_reading)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->end_comment))) . '"';
            $json .= ',"' . ucwords(addslashes($end_photo)) . '"';
            $json .= ',"' . ucwords(addslashes($total_distance)) . '"';

            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : sudhanshu odo meter report

    //Todo Start : sudhanshu 11 july 2024 odo meter approval report
    function showOdometerApprovalReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'slr.requested_on';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if ($_SESSION['FromallownceOdo'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromallownceOdo']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToallownceOdo'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToallownceOdo']));
        } else {
            $todate = date('Y-m-d');
        }

        //$reqFor = "  AND (DATE(odo.start_date) BETWEEN '" . $fromdate . "' AND '" . $todate . "')  ";
        $reqFor = "  AND odo.start_date = '" . $fromdate . "'  ";

        if ($_SESSION['allowncesalesmanID'] != '') {
            $salesman = " AND s.salesman_id = '" . $_SESSION['allowncesalesmanID'] . "'";
        }
        $where = " s.account_id = " . $_SESSION['accountId'] . " $reqFor  $salesman ";

        //echo $_SESSION['allowncesalesmanID'];die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_odometer_expense_allowance as odo
LEFT JOIN table_salesman as s on s.salesman_id = odo.salesman_id 
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
LEFT JOIN table_salesman AS s2 ON s2.salesman_id = SH.rpt_user_id
LEFT JOIN table_vehicle_type_designatiom_mapping AS vm ON vm.mapping_id = odo.vehicle_mapping_id
LEFT JOIN table_vehicle_type_master AS vt ON vm.vehicle_type_id = vt.vehicle_type_id 
', "odo.*,s.salesman_name,s.employee_code,H.description AS sal_desg,s2.salesman_name AS rpt_to, H2.description AS rpt_to_desg", $rp, $where . $sort);

        $auRecCount = $this->_getSelectList('table_odometer_expense_allowance as odo
LEFT JOIN table_salesman as s on s.salesman_id = odo.salesman_id 
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
LEFT JOIN table_salesman AS s2 ON s2.salesman_id = SH.rpt_user_id
LEFT JOIN table_vehicle_type_designatiom_mapping AS vm ON vm.mapping_id = odo.vehicle_mapping_id
LEFT JOIN table_vehicle_type_master AS vt ON vm.vehicle_type_id = vt.vehicle_type_id ', 'COUNT(odo.allws_id) as total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {

            $view_detail = '<a  href="odometer_expense_details.php?id=' . $auRec[$i]->allws_id . '&action=expense_km" >View Detail</a>';

            $travel_distance = ($auRec[$i]->end_meter_reading != '') ? ($auRec[$i]->end_meter_reading - $auRec[$i]->start_meter_reading) . ' KM' : '';

            $admin_update_date = '';
            if ($auRec[$i]->admin_update_date != '' && $auRec[$i]->admin_update_date != '0000-00-00 00:00:00') {
                $admin_update_date = $this->_changeDate($auRec[$i]->admin_update_date);
            }

            $manager_update_date = '';
            if ($auRec[$i]->manager_update_date != '' && $auRec[$i]->manager_update_date != '0000-00-00') {
                $manager_update_date = $this->_changeDate($auRec[$i]->manager_update_date);
            }

            $start_meter_reading = '';
            if ($auRec[$i]->start_meter_reading != '') {
                $start_meter_reading = $auRec[$i]->start_meter_reading . ' KM';
            }
            $end_meter_reading = '';
            if ($auRec[$i]->end_meter_reading != '') {
                $end_meter_reading = $auRec[$i]->end_meter_reading . ' KM';
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->allws_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_desg)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to_desg) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->start_date)) . '"';
            $json .= ',"' . ucwords(addslashes($start_meter_reading)) . ' "';
            $json .= ',"' . ucwords(addslashes($end_meter_reading)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->start_comment)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->end_comment))) . '"';
            $json .= ',"' . ucwords(addslashes($travel_distance)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->manager_status)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->approved_km_manager)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->manager_remark)) . '"';
            $json .= ',"' . ucwords(addslashes($manager_update_date)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->admin_status)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->approved_km_admin)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->admin_remark)) . '"';
            $json .= ',"' . ucwords(addslashes($admin_update_date)) . '"';
            $json .= ',"' . ucwords(addslashes($view_detail)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : sudhanshu odo 11 july 2024  meter approval report

    //Todo Start : sudhanshu KM meter report
    function showKMTravelExpense($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'odo.start_date';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if ($_SESSION['odoFrom'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['odoFrom']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['odoTo'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['odoTo']));
        } else {
            $todate = date('Y-m-d');
        }

        if ($_SESSION['allowncesalesmanID'] != '') {
            $salesman = " AND s.salesman_id = '" . $_SESSION['allowncesalesmanID'] . "'";
        }
        //$reqFor = "  AND (DATE(odo.app_date) BETWEEN '" . $fromdate . "' AND '" . $todate . "')  ";
        $reqFor = "  AND odo.app_date = '" . $fromdate . "'  ";

        $where = " s.account_id = " . $_SESSION['accountId'] . " $reqFor  $salesman ";
        //echo $_SESSION['allowncesalesmanID'];die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_km_expense_allowance as odo
LEFT JOIN table_salesman as s on s.salesman_id = odo.salesman_id 
LEFT JOIN table_vehicle_type_designatiom_mapping AS vm ON vm.mapping_id = odo.vehicle_mapping_id
LEFT JOIN table_vehicle_type_master AS vt ON vm.vehicle_type_id = vt.vehicle_type_id
', "odo.*,s.salesman_name,s.employee_code,vm.per_km_cost,vt.vehicle_type", $rp, $where . $sort);

        $auRecCount = $this->_getSelectList('table_km_expense_allowance as odo
LEFT JOIN table_salesman as s on s.salesman_id = odo.salesman_id 
LEFT JOIN table_vehicle_type_designatiom_mapping AS vm ON vm.mapping_id = odo.vehicle_mapping_id
LEFT JOIN table_vehicle_type_master AS vt ON vm.vehicle_type_id = vt.vehicle_type_id', 'COUNT(odo.allws_id) as total', '', $where);


        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $act_date = date('d M Y', strtotime($auRec[$i]->app_date));


            if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
                $targetBlank = '';
            } else {
                $targetBlank = 'target=\"_blank\"';
            }

            $start_photo = '<a  href="view_mulitple_photo.php?id=' . $auRec[$i]->allws_id . '&action=expense_km" ' . $targetBlank . '>Photo</a>';

            //now get total trevel distance

            $salsmanCond = " AND a.salesman_id='" . $auRec[$i]->salesman_id . "'";
            $result = $this->_getSelectList2('table_activity as a', "lat,lng,end_time as app_time,accuracy_level,salesman_id", '', " activity_type IN (3,5,11,12,13) and (lat !='' and lat !='0.0') and ( lng!='' and lng!='0.0') and activity_date='" . $auRec[$i]->app_date . "' and accuracy_level!=0 $salsmanCond ORDER BY end_time ASC");

            $total_travel_distance = 0;
            foreach ($result as $key => $value) {

                $salesLat1 = $result[$key]->lat;

                if (isset($result[$key + 1]->lat))
                    $salesLat = $result[$key + 1]->lat;
                else
                    $salesLat = $result[$key]->lat;

                $salesLng1 = $result[$key]->lng;

                if (isset($result[$key + 1]->lng))
                    $salesLng = $result[$key + 1]->lng;
                else
                    $salesLng = $result[$key]->lng;

                $salesdistance = $this->distance($salesLat1, $salesLng1, $salesLat, $salesLng, "K");

                if (!is_nan($salesdistance)) {

                    $total_travel_distance = $total_travel_distance + $salesdistance;
                }
            }

            $cost_by_pepup = (round($total_travel_distance, 2) * $auRec[$i]->per_km_cost);

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->allws_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($act_date)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->vehicle_type) . '"';
            $json .= ',"' . addslashes($auRec[$i]->per_km_cost) . '"';
            $json .= ',"' . addslashes(round($total_travel_distance, 2) . " KM") . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->travel_km))) . '"';
            $json .= ',"' . ucwords(addslashes(number_format($cost_by_pepup, 2))) . '"';


            $json .= ',"' . ucwords(addslashes($start_photo)) . '"';

            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->comment))) . '"';


            $json .= ',"' . ucwords(addslashes($auRec[$i]->photo_count)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : sudhanshu odo meter report

    //Todo Start : sudhanshu 11 july 2024 KM meter approval report
    function showKMApprovalReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'odo.app_date';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        if ($_SESSION['FromallownceOdo'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromallownceOdo']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToallownceOdo'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToallownceOdo']));
        } else {
            $todate = date('Y-m-d');
        }

        //$reqFor = "  AND (DATE(odo.start_date) BETWEEN '" . $fromdate . "' AND '" . $todate . "')  ";
        $reqFor = "  AND odo.app_date = '" . $fromdate . "'  ";

        if ($_SESSION['allowncesalesmanID'] != '') {
            $salesman = " AND s.salesman_id = '" . $_SESSION['allowncesalesmanID'] . "'";
        }
        $where = " s.account_id = " . $_SESSION['accountId'] . " $reqFor  $salesman ";

        //echo $_SESSION['allowncesalesmanID'];die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_km_expense_allowance as odo
LEFT JOIN table_salesman as s on s.salesman_id = odo.salesman_id 
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
LEFT JOIN table_salesman AS s2 ON s2.salesman_id = SH.rpt_user_id
LEFT JOIN table_vehicle_type_designatiom_mapping AS vm ON vm.mapping_id = odo.vehicle_mapping_id
LEFT JOIN table_vehicle_type_master AS vt ON vm.vehicle_type_id = vt.vehicle_type_id 
LEFT JOIN state AS st ON odo.state = st.state_id 
LEFT JOIN city AS ct ON ct.city_id = odo.district 
LEFT JOIN table_location AS loc ON loc.location_id = odo.city 
', "odo.*,s.salesman_name,s.employee_code,H.description AS sal_desg,s2.salesman_name AS rpt_to, H2.description AS rpt_to_desg,vt.vehicle_type,vm.per_km_cost,st.state_name,ct.city_name,loc.location_name", $rp, $where . $sort);

        $auRecCount = $this->_getSelectList('table_km_expense_allowance as odo
LEFT JOIN table_salesman as s on s.salesman_id = odo.salesman_id 
LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id 
LEFT JOIN table_salesman AS s2 ON s2.salesman_id = SH.rpt_user_id
LEFT JOIN table_vehicle_type_designatiom_mapping AS vm ON vm.mapping_id = odo.vehicle_mapping_id
LEFT JOIN table_vehicle_type_master AS vt ON vm.vehicle_type_id = vt.vehicle_type_id
 LEFT JOIN state AS st ON odo.state = st.state_id 
LEFT JOIN city AS ct ON ct.city_id = odo.district 
LEFT JOIN table_location AS loc ON loc.location_id = odo.city ', 'COUNT(odo.allws_id) as total', '', $where);

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {

            if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
                $targetBlank = '';
            } else {
                $targetBlank = 'target=\"_blank\"';
            }


            $view_detail = '<a  href="km_expense_details.php?id=' . $auRec[$i]->allws_id . '" >View Detail</a>';
            $photo = '<a  href="view_mulitple_photo.php?id=' . $auRec[$i]->allws_id . '&action=expense_km" ' . $targetBlank . ' >View Photo</a>';

            //now get total trevel distance

            $salsmanCond = " AND a.salesman_id='" . $auRec[$i]->salesman_id . "'";
            $result = $this->_getSelectList2('table_activity as a', "lat,lng,end_time as app_time,accuracy_level,salesman_id", '', " activity_type IN (3,5,11,12,13) and (lat !='' and lat !='0.0') and ( lng!='' and lng!='0.0') and activity_date='" . $auRec[$i]->app_date . "' and accuracy_level!=0 $salsmanCond ORDER BY end_time ASC");

            $total_travel_distance = 0;
            foreach ($result as $key => $value) {

                $salesLat1 = $result[$key]->lat;

                if (isset($result[$key + 1]->lat))
                    $salesLat = $result[$key + 1]->lat;
                else
                    $salesLat = $result[$key]->lat;

                $salesLng1 = $result[$key]->lng;

                if (isset($result[$key + 1]->lng))
                    $salesLng = $result[$key + 1]->lng;
                else
                    $salesLng = $result[$key]->lng;

                $salesdistance = $this->distance($salesLat1, $salesLng1, $salesLat, $salesLng, "K");

                if (!is_nan($salesdistance)) {

                    $total_travel_distance = $total_travel_distance + $salesdistance;
                }
            }

            $cost_by_pepup = (round($total_travel_distance, 2) * $auRec[$i]->per_km_cost);
            $cost_as_per_user = (round($auRec[$i]->travel_km, 2) * $auRec[$i]->per_km_cost);
            $admin_approve_date = '';
            if ($auRec[$i]->admin_update_date != '' && $auRec[$i]->admin_update_date != '0000-00-00 00:00:00') {
                $admin_approve_date = $this->_changeDate($auRec[$i]->admin_update_date);
            }
            $manager_update_date = '';
            if ($auRec[$i]->manager_update_date != '' && $auRec[$i]->manager_update_date != '0000-00-00 00:00:00') {
                $manager_update_date = $this->_changeDate($auRec[$i]->manager_update_date);
            }
            $approved_km_manager = '';
            if ($auRec[$i]->approved_km_manager != '') {
                $approved_km_manager = $auRec[$i]->approved_km_manager . ' KM';
            }
            $approved_km_admin = '';
            if ($auRec[$i]->approved_km_admin != '') {
                $approved_km_admin = $auRec[$i]->approved_km_admin . ' KM';
            }

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->allws_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($this->_changeDate($auRec[$i]->app_date))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sal_desg)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to_desg) . '"';
            $json .= ',"' . addslashes($auRec[$i]->rpt_to) . '"';

            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->vehicle_type)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->travel_km . ' KM'))) . '"';
            $json .= ',"' . ucwords(addslashes($cost_as_per_user)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->comment)) . '"';
            $json .= ',"' . ucwords(addslashes($photo)) . '"';
            $json .= ',"' . ucwords(addslashes(round($total_travel_distance, 2) . ' KM')) . '"';
            $json .= ',"' . ucwords(addslashes($cost_by_pepup)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->manager_status)) . '"';
            $json .= ',"' . ucwords(addslashes($approved_km_manager)) . '"';
            $json .= ',"' . ucwords(addslashes(trim($auRec[$i]->manager_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($manager_update_date)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->admin_status)) . '"';
            $json .= ',"' . ucwords(addslashes($approved_km_admin)) . '"';
            $json .= ',"' . ucwords(addslashes(trim($auRec[$i]->admin_remark))) . '"';
            $json .= ',"' . ucwords(addslashes($admin_approve_date)) . '"';
            $json .= ',"' . ucwords(addslashes($view_detail)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : sudhanshu odo 11 july 2024  KM meter approval report

    //Todo Start: sudhanshu 18 july 2024 : show distributor fulfillment
    function showDistributorFulfillment()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'c.category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 10;
        $start = (($page - 1) * $rp);
        $limit = " LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $where = "";
        //Added condition for role based access at brand lavel.
        $RoleBrands = $this->getUserRoleBrand();
        $brandCnd = '';
        if (!empty($RoleBrands)) {
            $brandCnd = " b.brand_id IN(" . $RoleBrands . ")";
        }
        $where = $brandCnd;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        if ($_SESSION['distributorId'] != "" && $_SESSION['distributorId'] > 0) {
            $dis = " and d.distributor_id='" . $_SESSION['distributorId'] . "'";
        }
        if ($_SESSION['stockistId'] != "" && $_SESSION['stockistId'] > 0) {
            //$dis = " and d.stockist_id='" . $_SESSION['stockistId'] . "'";
            //Todo Start : sudhanshu 09 may 2024 : multi stockist
            $_objArrayList = new ArrayList();
            $mapedDis = $_objArrayList->getDistributorMultiStockistMapped();
            if ($mapedDis != '') {
                $dis = " and d.distributor_id IN (" . $mapedDis . ")";
            } else {
                $dis = " and d.stockist_id =" . $_SESSION['stockistId'];
            }
            //Todo End : sudhanshu 09 may 2024 : multi stockist

        }
        //Todo Start: Sudhanshu 10 may 2024 : add distributor filter
        if (isset($_SESSION['disId']) && $_SESSION['disId'] > 0) {
            $dis = " and d.distributor_id='" . $_SESSION['disId'] . "'";
        }
        //Todo Start: Sudhanshu 10 may 2024 : add distributor filter
        $auRec = $this->_getSelectList('table_item_dis_stk_inprocess AS s 
		LEFT JOIN table_item_case_relationship AS icr ON icr.item_id = s.item_id
		LEFT JOIN table_cases AS clr ON clr.case_id = icr.case_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
        LEFT JOIN table_price AS p ON p.item_id = i.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id
		left join table_stockist as stk on stk.stockist_id = d.stockist_id
		LEFT JOIN table_color AS col ON col.color_id = s.color_id',
            "s.* ,d.distributor_name, d.distributor_code, c.category_name, 
		clr.case_size, i.item_name, i.item_code,col.color_code,p.dist_price,p.item_dp as item_mrp,stk.stockist_name,stk.stockist_code", $rp, $where . $dis . ' ' . $sort, '');

        $auRecCount = $this->_getSelectList('table_item_dis_stk_inprocess AS s 
		LEFT JOIN table_item_case_relationship AS icr ON icr.item_id = s.item_id
		LEFT JOIN table_cases AS clr ON clr.case_id = icr.case_id
		LEFT JOIN table_category AS c ON c.category_id = s.category_id
		LEFT JOIN table_item AS i ON i.item_id = s.item_id
		left join table_brands as b on b.brand_id = i.brand_id
		LEFT JOIN table_distributors AS d ON d.distributor_id = s.distributor_id
		left join table_stockist as stk on stk.stockist_id = d.stockist_id
		LEFT JOIN table_color AS col ON col.color_id = s.color_id', 's.*', '', $where . $dis . '  ');
        $total = ((count($auRecCount) > 0) ? count($auRecCount) : 0);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            if ($auRec[$i]->bill_type == 'Return Invoice') {
                $bill_type = 'Return Invoice';
            } else {
                $bill_type = 'Sales Invoice';
            }

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->dis_stk_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->sr_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->stockist_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->stockist_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($this->_changeDate($auRec[$i]->bill_date)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->bill_no) . '"';
            $json .= ',"' . addslashes($auRec[$i]->acpt_stock_value) . '"';
            $json .= ',"' . addslashes($auRec[$i]->price) . '"';
            $json .= ',"' . addslashes(($auRec[$i]->before_tax_amount)) . '"';
            $json .= ',"' . addslashes($bill_type) . '"]';

            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End: sudhanshu 18 july 2024 : show distributor fulfillment


    // Todo : Start : Jatin : 18 July 2024 :  Item Color Image Master

    function showItemimageColorSize()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = '';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
        //$where = " account_id='" . $_SESSION['accountId'] . "' ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_item_color_image_master as mas
        left join table_item as i on i.item_id = mas.item_id', "mas.*,i.item_name,i.item_code", $rp, $where . ' group by mas.item_id' .
            $sort, '');

        $auRecCount = $this->_getSelectList('table_item_color_image_master as mas
        left join table_item as i on i.item_id = mas.item_id', 'mas.item_id as total', '', $where . ' group by mas.item_id');

        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"item_image_color_master.php?stid=' . $auRec[$i]->id . '&value=' . $status . '\">' . $status . '</a>';

            $view_detail = '<a href=\"view_details_color_image.php?stid=' . $auRec[$i]->item_id . '\" >View Detail</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->item_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes(ucwords($auRec[$i]->item_name)) . '"';
            $json .= ',"' . $view_detail . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }


    function addItemColorSizeImage()
    {
        $account_id = $_POST['account_id'];
        $errors = array();
        foreach ($_FILES['image']['tmp_name'] as $key => $value) {

            $data['account_id'] = mysql_escape_string($account_id);
            $data['item_id'] = mysql_escape_string($_POST['item_id'][$key]);
            $data['color_id'] = mysql_escape_string($_POST['color_id'][$key]);


            if ($_FILES['image']['name'][$key] != '') {

                $date = date('dmY-His');
                $target_folder = 'photo/';
                $original_image_name = $_FILES['image']['name'][$key];
                $file_tmp = $_FILES['image']['tmp_name'][$key];

                $image_type = pathinfo($original_image_name, PATHINFO_EXTENSION);

                $newname = rand(1, 9) . $date . basename(str_replace(" ", "", $_FILES['image']['name']));

                $upload_image = $target_folder . $newname;
                $data['image_url'] = $newname;
                $desired_dir = 'photo';

                if (empty($errors) == true) {

                    if (is_dir($desired_dir) == false) {

                        mkdir("$desired_dir", 0700);        // Create directory if it does not exist

                    }
                    if (is_dir("$desired_dir/" . $newname) == false) {

                        move_uploaded_file($file_tmp, "photo/" . $newname);

                    } else { //rename the file if another one exist
                        $new_dir = "photo/" . $newname . time();

                        rename($file_tmp, $new_dir);

                    }

                }
            }
            $data['created_on'] = date('Y-m-d H:i:s');
            $data['status'] = 'A';
            $id = $this->_dbInsert($data, 'table_item_color_image_master');
        }
        return $id;
    }

    function updateItemColorSizeImage($id)
    {
        $account_id = $_POST['account_id'];
        $errors = array();
//         echo"<pre>";print_r($_POST);
//        echo "<pre>";print_r($_FILES);die;
        foreach ($_FILES['image']['tmp_name'] as $key => $value) {

            $data['account_id'] = mysql_escape_string($account_id);
            if (isset($_POST['item_id'][$key]) && $_POST['item_id'][$key] != '') {
                $data['item_id'] = mysql_escape_string($_POST['item_id'][$key]);
            } else {
                $data['item_id'] = mysql_escape_string($_POST['id']);
            }

            $data['color_id'] = mysql_escape_string($_POST['color_id'][$key]);
            if ($_FILES['image']['name'][$key] != '') {

                $date = date('dmY-His');
                $target_folder = 'photo/';
                $original_image_name = $_FILES['image']['name'][$key];
                $file_tmp = $_FILES['image']['tmp_name'][$key];
                $image_type = pathinfo($original_image_name, PATHINFO_EXTENSION);
                $newname = rand(1, 9) . $date . basename(str_replace(" ", "", $_FILES['image']['name']));

                $upload_image = $target_folder . $newname;
                $data['image_url'] = $newname;
                $desired_dir = 'photo';
                if (empty($errors) == true) {
                    if (is_dir($desired_dir) == false) {
                        mkdir("$desired_dir", 0700);        // Create directory if it does not exist
                    }
                    if (is_dir("$desired_dir/" . $newname) == false) {
                        move_uploaded_file($file_tmp, "photo/" . $newname);
                    } else { //rename the file if another one exist
                        $new_dir = "photo/" . $newname . time();
                        rename($file_tmp, $new_dir);
                    }
                }
            } else {
                $data['image_url'] = '';
            }
            $data['created_on'] = date('Y-m-d H:i:s');
            $data['status'] = 'A';
            $id = $this->_dbInsert($data, 'table_item_color_image_master');
        }
        return $id;
    }

    //Todo : End : Jatin : 18 July 2024 :  Item Color Image Master

    function getSalesmanExpenseAmont($salesman)
    {
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromallownceList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromallownceList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToallownceList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToallownceList']));
        } else {
            $todate = date('Y-m-d');
        }
        $salCondi = $salesman;
        if (isset($_SESSION['allowncesalesmanID']) && !empty($_SESSION['allowncesalesmanID']) && (intval($_SESSION['allowncesalesmanID']) > 0)) {
            $salCondi = " AND sad.salesman_id = " . $_SESSION['allowncesalesmanID'];
        }
        $expType = '';
        if (isset($_SESSION['expenseType']) && !empty($_SESSION['expenseType'])) {
            $expType = " AND samd.tada_id = '" . $_SESSION['expenseType'] . "'";
        }
        $where = " sad.account_id = " . $_SESSION['accountId'] . " AND DATE(sad.created) BETWEEN '" . $fromdate . "' AND '" . $todate . "' $salCondi $expType ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $expRec = $this->_getSelectList2('table_salesman_allowance_mapping as samd
                LEFT JOIN table_salesman_allowance_details as sad ON sad.allws_id = samd.allws_id
                LEFT JOIN table_salesman as s on s.salesman_id = sad.salesman_id ', '
                sum(samd.allwns_amt) as exp_amt,sum(samd.mngr_apprvd_amt) as manager_approved_amt,sum(samd.admin_apprvd_amt) as admin_approved_amt', '', $where);


        echo json_encode($expRec[0]);
    }

    function showDeliveryReturnReport($salesman)
    {
        //$salesman = "";
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = ',activity_time desc';
        if (!$sortname) $sortname = 'activity_date';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $condition = '';


        if ($_SESSION['FromProductList'] != '') {
            $fromdate = "  D.activity_date  >= '" . date('Y-m-d', strtotime($_SESSION['FromProductList'])) . "' AND ";
        } else {
            $fromdate = " D.activity_date  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ToProductList'] != '') {
            $todate = " D.activity_date <= '" . date('Y-m-d', strtotime($_SESSION['ToProductList'])) . "' ";
        } else {
            $todate = "  D.activity_date <= '" . date('Y-m-d') . "'";
        }


        $where = " $fromdate $todate $salesman ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_salesman_return_stock AS D 		
		LEFT JOIN table_item AS I ON D.item_id = I.item_id		
		LEFT JOIN table_color AS B ON D.batch_no = B.color_id		
		LEFT JOIN table_salesman AS s ON D.salesman_id = s.salesman_id
		LEFT JOIN table_retailer AS R ON D.retailer_id = R.retailer_id		
		left join table_delivery_return_reason as dr on D.reason_id=dr.id',
            'activity_date,activity_time,return_qty,s.salesman_name,s.employee_code,R.retailer_name,R.retailer_code,I.item_name,I.item_code,B.color_code,dr.reason,dr.is_saleable,D.remarks', $rp, $where . $sort, '');

        $total = $this->_getSelectList('table_salesman_return_stock AS D 		
		LEFT JOIN table_item AS I ON D.item_id = I.item_id		
		LEFT JOIN table_color AS B ON D.batch_no = B.color_id		
		LEFT JOIN table_salesman AS s ON D.salesman_id = s.salesman_id
		LEFT JOIN table_retailer AS R ON D.retailer_id = R.retailer_id		
		left join table_delivery_return_reason as dr on D.reason_id=dr.id', "COUNT(*) AS total", '', $where . $sort, '');

        $total = $total[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {

            $delivery_date = $this->_changeDate($auRec[$i]->activity_date);
            if ($auRec[$i]->is_saleable == 1) {
                $saleable = "Saleable";
            } else {
                $saleable = "Non Saleable";
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->order_id . '",';
            //$json .= "ostype:'". $auRec[$i]->ostype . '",';
            $json .= '"cell":["' . ucwords(addslashes($delivery_date)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->activity_time)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^A-Za-z0-9?!\s-,.%&#_()-+[]\/ ]/', '', str_replace($remove, '', $auRec[$i]->item_name)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^A-Za-z0-9?!\s-,.%&#_()-+[]\/ ]/', '', str_replace($remove, '', $auRec[$i]->item_code)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->color_code)))) . '"';

            $json .= ',"' . $auRec[$i]->return_qty . '"';

            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->reason)))) . '"';
            $json .= ',"' . ucwords(addslashes(preg_replace('/[^a-zA-Z0-9-_\.() ]/', '', str_replace($remove, '', $auRec[$i]->remarks)))) . '"';
            $json .= ',"' . ucwords(addslashes($saleable)) . '"]';
//
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showDistributorMappedRetails($flag)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'r.retailer_name';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $distCondi = '';
        if ((intval($_SESSION['userLoginType']) == 3) && (intval($_SESSION['distributorId']) > 0)) {
            $distCondi = ' AND r.distributor_id = ' . intval($_SESSION['distributorId']);
        }
        $where = " r.new='' AND r.status ='A' $distCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_retailer as r 
        LEFT JOIN table_relationship as tr on tr.relationship_id=r.relationship_id 
        left join table_account as a on a.account_id=r.account_id 
        left join table_web_users as w on w.retailer_id=r.retailer_id 
        left join country as con on con.country_id = r.country
        left join state as s on s.state_id=r.state 
        left join city as c on c.city_id=r.city 
        left join table_location as loc ON loc.location_id = r.location_id 
        left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id 
        left join table_retailer_type_master as tm on tm.type_id=r.type_id 
        left join table_distributors as d on d.distributor_id=r.distributor_id', "r.*,w.username,cm.channel_name,d.distributor_name,d.distributor_code,w.email_id,w.web_user_id,tr.relationship_code,tm.type_name,con.country_name,s.state_name,c.city_name,loc.location_name", $rp, $where . ' GROUP BY r.retailer_id ' . $sort, '');
        $auRecCount = $this->_getSelectList('table_retailer as r 
        LEFT JOIN table_relationship as tr on tr.relationship_id=r.relationship_id 
        left join table_account as a on a.account_id=r.account_id 
        left join table_web_users as w on w.retailer_id=r.retailer_id 
        left join country as con on con.country_id = r.country
        left join state as s on s.state_id=r.state 
        left join city as c on c.city_id=r.city 
        left join table_location as loc ON loc.location_id = r.location_id 
        left join table_retailer_channel_master as cm on r.channel_id=cm.channel_id 
        left join table_retailer_type_master as tm on tm.type_id=r.type_id 
        left join table_distributors as d on d.distributor_id=r.distributor_id', 'r.retailer_id', '', $where . ' GROUP BY r.retailer_id ');
//        $total= $auRecCount[0]->total;
        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r", "\t");
        for ($i = 0; $i < count($auRec); $i++) {
            $surveyStatus = '';
            if (strtolower($auRec[$i]->survey_status) == 'c') {
                $surveyStatus = 'Surveyed';
            } elseif (strtolower($auRec[$i]->survey_status) == 'i') {
                $surveyStatus = 'Not Surveyed';
            } elseif (strtolower($auRec[$i]->survey_status) == 'n') {
                $surveyStatus = 'Rejected';
            } else {
                $surveyStatus = '';
            }
            /* Display outlet*/
            if ($auRec[$i]->display_outlet == 'Y') {
                $outlet = 'YES';
            } else {
                $outlet = '';
            }
            if ($auRec[$i]->display_outlet == 'N') {
                $outlet = 'No';
            }
            $start_date = $this->_changeDate($auRec[$i]->start_date);
            if ($auRec[$i]->retailer_dob == "0000-00-00") {
                $retailer_dob = "-";
            } else {
                $retailer_dob = $this->_changeDate($auRec[$i]->retailer_dob);
            }
            //end date
            if ($auRec[$i]->status == 'I') {
                $end_date = $this->_changeDate($auRec[$i]->end_date);
            } else {
                $end_date = ' ';
            }
            //end date
//            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
//            $sts = '<a href=\"retailer.php?statusId=' . $auRec[$i]->retailer_id . '&value=' . $sts . '\">' . $sts . '</a>';
            //login status
//            if ($auRec[$i]->web_user_id != '') {
//                if ($auRec[$i]->status == 'A') {
//                    $LogStatus = ($auRec[$i]->loginStatus == 'A') ? "Active" : "Inactive";
//                    $LogSts = '<a href=\"retailer.php?statusLogId=' . $auRec[$i]->retailer_id . '&value=' . $LogStatus . '\">' . $LogStatus . '</a>';
//                } else {
//                    $LogSts = 'Inactive';
//                }
//            } else {
//                $LogSts = ' ';
//            }
            if ($auRec[$i]->lat != '') {
                $map = '<a href=\"retailer_distributor_list.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View on Map</a>';
            } else {
                $map = "-";
            }
            if ($flag == 1) {
                $survey = '<a href=\"retailer_survey.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Photo</a>';
            }
//            $gstPhotoLink = '<a href=\"view_gst_photo.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View GST Photo</a>';
            $gstPhotoLink = '<a href=\"rotate_img.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View GST Photo</a>';

//            $aadharPhotoLink = '<a href=\"view_aadhar_photo.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Aadhar Photo</a>';

            $aadharPhotoLink = '<a href=\"rotate_img.php?adId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Aadhar Photo</a>';

            $addressLink = '<a href=\"retailer_address.php?retId=' . $auRec[$i]->retailer_id . '\" target=\"_blank\">View Address</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->retailer_id . '",';
            $json .= '"cell":["' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->retailer_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->retailer_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->relationship_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->type_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->channel_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $surveyStatus))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $auRec[$i]->distributor_code))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, '', $outlet))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->country_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->state_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->city_name))) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->location_name))) . '"';
            $json .= ',"' . $map . '"';
            // $json .= ',"' . $survey . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->retailer_address))) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->zipcode))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_phone_no)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_phone_no2)) . '"';
            // $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_leadline_no)) . '"';
            $json .= ',"' . ucwords(str_replace($remove, ' ', addslashes($auRec[$i]->contact_person))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->contact_number)) . '"';
            $json .= ',"' . ucwords(addslashes(str_replace($remove, ' ', $auRec[$i]->contact_person2))) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->contact_number2)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->username) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_email)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->retailer_email2)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $retailer_dob)) . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->gst_no)) . '"';
            $json .= ',"' . $gstPhotoLink . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->aadhar_no)) . '"';
            $json .= ',"' . $aadharPhotoLink . '"';
            $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->pan_no)) . '"';
            //  $json .= ',"' . addslashes($start_date) . '"';
            $json .= ',"' . $addressLink . '"';
            $json .= ',"' . addslashes($start_date) . '"]';
            //$json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->status)) . '"';
            //$json .= ',"'.$sts. '"';
            //$json .= ',"'.$LogSts.'"';
            // $json .= ',"' . addslashes(str_replace($remove, ' ', $auRec[$i]->loginStatus)) . '"';
            //$json .= ',"' . addslashes(str_replace($remove, '', $auRec[$i]->routes)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo Start Sudhanshu : 20 sep 2024 show hygiene type
    function showHygiene()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'vehicle_type';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];


        $statusCondi = '';
        if (isset($_SESSION['MasVehicle']) && $_SESSION['MasVehicle'] != 'all' && $_SESSION['MasVehicle'] != '') {
            $statusCondi = "  status ='" . $_SESSION['MasVehicle'] . "' ";
        }
        $where = " $statusCondi ";

        if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_hygiene
           
        ', "*", $rp, " $where  $sort ");

        $auRecCount = $this->_getSelectList('table_hygiene as d 
             ', "COUNT(*) as total", '', $where);

        $total = $auRecCount[0]->total;


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;


        for ($i = 0; $i < count($auRec); $i++) {

            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href="hygiene.php?stid=' . $auRec[$i]->hygiene_id . '&value=' . $status . '">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->hygiene_id . '",';
            $json .= '"cell":["' . $this->toCamelCase(addslashes($auRec[$i]->description)) . '"';


            $json .= ',"' . addslashes($status) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function updateHygiene($id)
    {
        $data['description'] = mysql_escape_string(trim($this->toCamelCase($_POST['description'])));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated'] = date('Y-m-d h:i:s');

        $update = $this->_dbUpdate($data, 'table_hygiene', " hygiene_id=" . $id);
        return $id;
    }

    public function addHygiene()
    {
        $data['description'] = mysql_escape_string(trim($_POST['description']));
        $data['account_id'] = $_POST['account_id'];
        $data['created_date'] = date('Y-m-d h:i:s');
        $data['last_updated'] = date('Y-m-d h:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_hygiene');
        return $id;
    }

    //Todo Start Sudhanshu : 20 sep 2024 show hygiene type

    function showQualityCheckReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'o.app_date';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];


        if ($_SESSION['odoFrom'] != '') {
            $fromdate = "  o.app_date  >= '" . date('Y-m-d', strtotime($_SESSION['odoFrom'])) . "' AND ";
        } else {
            $fromdate = " o.app_date  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['odoTo'] != '') {
            $todate = " o.app_date <= '" . date('Y-m-d', strtotime($_SESSION['odoTo'])) . "' ";
        } else {
            $todate = "  o.app_date <= '" . date('Y-m-d') . "'";
        }

        if ($_SESSION['salId'] != '') {
            $salesman = " AND s.salesman_id = '" . $_SESSION['salId'] . "'";
        }
        //$reqFor = "  AND (DATE(odo.start_date) BETWEEN '" . $fromdate . "' AND '" . $todate . "')  ";


        $where = "  $fromdate  $todate   $salesman ";
        //echo $_SESSION['allowncesalesmanID'];die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_check_brand_quality as o
LEFT JOIN table_salesman as s on s.salesman_id = o.salesman_id 
LEFT JOIN table_retailer AS r ON o.retailer_id = r.retailer_id
LEFT JOIN state AS st ON st.state_id = r.state
LEFT JOIN city AS ct ON ct.city_id = r.city
LEFT JOIN table_location AS loc ON loc.location_id = r.location_id

LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id    

', "o.*,s.salesman_name,s.employee_code,r.retailer_name,r.retailer_code,st.state_name,ct.city_name,loc.location_name , S2.salesman_name as desc1", $rp, $where . " Group by o.quality_id". $sort);

        $auRecCount = $this->_getSelectList('table_check_brand_quality as o
LEFT JOIN table_salesman as s on s.salesman_id = o.salesman_id 
LEFT JOIN table_retailer AS r ON o.retailer_id = r.retailer_id
LEFT JOIN state AS st ON st.state_id = r.state
LEFT JOIN city AS ct ON ct.city_id = r.city
LEFT JOIN table_location AS loc ON loc.location_id = r.location_id

LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id  

', 'COUNT(o.quality_id) as total', '', $where);


        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $act_date = date('d M Y G:i', strtotime($auRec[$i]->app_date ." ". $auRec[$i]->app_time));

            $start_photo = '<a  href="quality_check_detail.php?id=' . $auRec[$i]->quality_id . '">View Detail</a>';


            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->quality_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($act_date)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
         
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';


            $json .= ',"' . ucwords(addslashes($start_photo)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showQualityCheckDetail($quality_id)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'o.app_date';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];


        //$reqFor = "  AND (DATE(odo.start_date) BETWEEN '" . $fromdate . "' AND '" . $todate . "')  ";


        $where = "  o.quality_id = $quality_id ";
        //echo $_SESSION['allowncesalesmanID'];die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_check_brand_quality_detail as o
LEFT JOIN table_brands as b on b.brand_id = o.brand_id 
LEFT JOIN table_hygiene AS h ON o.hygiene_id = h.hygiene_id
LEFT JOIN table_item it on it.item_id = o.item_id

', "o.*,b.brand_name,h.description, it.item_name, it.item_code, it.item_id", $rp, $where . $sort);

        $auRecCount = $this->_getSelectList2('table_check_brand_quality_detail as o
LEFT JOIN table_brands as b on b.brand_id = o.brand_id 
LEFT JOIN table_hygiene AS h ON o.hygiene_id = h.hygiene_id
', 'COUNT(o.quality_detail_id) as total', '', $where);


// echo "<pre>";
// print_r($auRec);die;


        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r", "\t");
        for ($i = 0; $i < count($auRec); $i++) {
            $act_date = date('d M Y', strtotime($auRec[$i]->start_date));


            $end_photo = '<a  href="view_mulitple_photo.php?id=' . $auRec[$i]->quality_id . '&tag_id=' . $auRec[$i]->item_id . '&action=check_quality" ' . $targetBlank . ' target="_blank">Photo</a>';

            //now get total trevel distance

            if ($auRec[$i]->labelling_condi == 1) {
                $label = 'Yes';
            } else {
                $label = 'No';
            }
            if ($auRec[$i]->liquid_color == 1) {
                $liquid_color = 'Yes';
            } else {
                $liquid_color = 'No';
            }
            if ($auRec[$i]->sediment == 1) {
                $sediment = 'Yes';
            } else {
                $sediment = 'No';
            }

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->quality_detail_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->brand_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
           
            $json .= ',"' . ucwords(addslashes($auRec[$i]->description)) . '"';
            $json .= ',"' . ucwords(addslashes($label)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->labelling_remark) . '"';
            $json .= ',"' . addslashes($liquid_color) . '"';
            $json .= ',"' . addslashes($auRec[$i]->liquid_remark) . '"';
            $json .= ',"' . ucwords(addslashes($sediment)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->sediment_remark)) . '"';


            $json .= ',"' . ucwords(addslashes($end_photo)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    //Todo Start : sudhanshu 26 sept 2024 promotion tracking
    function showPromoAvailbility()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'description';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];


        $statusCondi = '';

        $where = " $statusCondi ";

        if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_promo_availbility
           
        ', "*", $rp, " $where  $sort ");

        $auRecCount = $this->_getSelectList('table_promo_availbility as d 
             ', "COUNT(*) as total", '', $where);

        $total = $auRecCount[0]->total;


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;


        for ($i = 0; $i < count($auRec); $i++) {

            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href="promo_avalbility.php?stid=' . $auRec[$i]->promo_availbility_id . '&value=' . $status . '">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->promo_availbility_id . '",';
            $json .= '"cell":["' . addslashes($this->toCamelCase($auRec[$i]->description)) . '"';


            $json .= ',"' . addslashes($status) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function updatePromoAvailbility($id)
    {
        $data['description'] = mysql_escape_string(trim($_POST['description']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated'] = date('Y-m-d h:i:s');

        $update = $this->_dbUpdate($data, 'table_promo_availbility', " promo_availbility_id=" . $id);
        return $id;
    }

    public function addPromoAvailbility()
    {
        $data['description'] = mysql_escape_string(trim($_POST['description']));
        $data['account_id'] = $_POST['account_id'];
        $data['created_date'] = date('Y-m-d h:i:s');
        $data['last_updated'] = date('Y-m-d h:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_promo_availbility');
        return $id;
    }

    function showPromoCommunication()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'description';
        if (!$sortorder) $sortorder = 'ASC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];


        $statusCondi = '';

        $where = " $statusCondi ";

        if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_promo_communication
           
        ', "*", $rp, " $where  $sort ");

        $auRecCount = $this->_getSelectList('table_promo_communication as d 
             ', "COUNT(*) as total", '', $where);

        $total = $auRecCount[0]->total;


        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;


        for ($i = 0; $i < count($auRec); $i++) {

            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href="promo_communication.php?stid=' . $auRec[$i]->promo_communication_id . '&value=' . $status . '">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->promo_communication_id . '",';
            $json .= '"cell":["' . addslashes($this->toCamelCase($auRec[$i]->description)) . '"';


            $json .= ',"' . addslashes($status) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function updatePromoCommunication($id)
    {
        $data['description'] = mysql_escape_string(trim($_POST['description']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['last_updated'] = date('Y-m-d h:i:s');

        $update = $this->_dbUpdate($data, 'table_promo_communication', " promo_communication_id=" . $id);
        return $id;
    }

    public function addPromoCommunication()
    {
        $data['description'] = mysql_escape_string(trim($_POST['description']));
        $data['account_id'] = $_POST['account_id'];
        $data['created_date'] = date('Y-m-d h:i:s');
        $data['last_updated'] = date('Y-m-d h:i:s');
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_promo_communication');
        return $id;
    }

    // function showCompetitorBrand()
    // {
    //     $page = $_REQUEST['page'];
    //     $rp = $_REQUEST['rp'];
    //     $sortname = $_REQUEST['sortname'];
    //     $sortorder = $_REQUEST['sortorder'];
    //     if (!$sortname) $sortname = 'description';
    //     if (!$sortorder) $sortorder = 'ASC';
    //     $sort = " ORDER BY $sortname $sortorder";
    //     if (!$page) $page = 1;
    //     if (!$rp) $rp = 50;
    //     $query = $_REQUEST['query'];
    //     $qtype = $_REQUEST['qtype'];


    //     $statusCondi = '';

    //     $where = " $statusCondi ";

    //     if ($query) $where .= " AND  $qtype LIKE '%$query%' ";

    //     $auRec = $this->_getSelectList('table_competitor_brand
           
    //     ', "*", $rp, " $where  $sort ");

    //     $auRecCount = $this->_getSelectList('table_competitor_brand as d 
    //          ', "COUNT(*) as total", '', $where);

    //     $total = $auRecCount[0]->total;


    //     header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
    //     header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
    //     header("Cache-Control: no-cache, must-revalidate");
    //     header("Pragma: no-cache");
    //     header("Content-type: text/x-json");
    //     $json = "";
    //     $json .= "{\n";
    //     $json .= '"page": "' . $page . '",';
    //     $json .= "\n";
    //     $json .= '"total":"' . $total . '",';
    //     $json .= "\n";
    //     $json .= '"rows": [';
    //     $rc = false;


    //     for ($i = 0; $i < count($auRec); $i++) {

    //         $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
    //         $status = '<a href="competitor_brand.php?stid=' . $auRec[$i]->competitor_brand_id . '&value=' . $status . '">' . $status . '</a>';

    //         if ($rc) $json .= ",";
    //         $json .= "\n{";
    //         $json .= '"id":"' . $auRec[$i]->competitor_brand_id . '",';
    //         $json .= '"cell":["' . addslashes($this->toCamelCase($auRec[$i]->description)) . '"';


    //         $json .= ',"' . addslashes($status) . '"]';
    //         $json .= "}";
    //         $rc = true;
    //     }
    //     $json .= "]\n";
    //     $json .= "}";
    //     echo str_replace("\'", '', $json);
    //     exit;
    // }

    // function updateCompetitorBrand($id)
    // {
    //     $data['description'] = mysql_escape_string(trim($_POST['description']));
    //     $data['account_id'] = mysql_escape_string($_POST['account_id']);
    //     $data['last_updated'] = date('Y-m-d h:i:s');

    //     $update = $this->_dbUpdate($data, 'table_competitor_brand', " competitor_brand_id=" . $id);
    //     return $id;
    // }

    // public function addCompetitorBrand()
    // {
    //     $data['description'] = mysql_escape_string(trim($_POST['description']));
    //     $data['account_id'] = $_POST['account_id'];
    //     $data['created_date'] = date('Y-m-d h:i:s');
    //     $data['last_updated'] = date('Y-m-d h:i:s');
    //     $data['status'] = 'A';
    //     $id = $this->_dbInsert($data, 'table_competitor_brand');
    //     return $id;
    // }

    //Todo End : sudhanshu 26 sept 2024 promotion tracking
    function showOwnBrnadTrackingReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'o.app_date';
        if (!$sortorder) $sortorder = 'DESC';
        $ordertime = ',o.app_time desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];


        if ($_SESSION['ownFrom'] != '') {
            $fromdate = "  o.app_date  >= '" . date('Y-m-d', strtotime($_SESSION['ownFrom'])) . "' AND ";
        } else {
            $fromdate = " o.app_date  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['ownTo'] != '') {
            $todate = " o.app_date <= '" . date('Y-m-d', strtotime($_SESSION['ownTo'])) . "' ";
        } else {
            $todate = "  o.app_date <= '" . date('Y-m-d') . "'";
        }

        if ($_SESSION['ownSalId'] != '') {
            $salesman = " AND s.salesman_id = '" . $_SESSION['ownSalId'] . "'";
        }
        //$reqFor = "  AND (DATE(odo.start_date) BETWEEN '" . $fromdate . "' AND '" . $todate . "')  ";

        $retCond = '';
        if ($_SESSION['ownretId'] != '') {
            $retCond = " AND r.retailer_id = '" . $_SESSION['ownretId'] . "'";
        }
        $where = "  $fromdate  $todate   $salesman $retCond";
        //echo $_SESSION['allowncesalesmanID'];die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_own_brand_tracking as o
LEFT JOIN table_salesman as s on s.salesman_id = o.salesman_id 
LEFT JOIN table_retailer AS r ON o.retailer_id = r.retailer_id
LEFT JOIN state AS st ON st.state_id = r.state
LEFT JOIN city AS ct ON ct.city_id = r.city
LEFT JOIN table_location AS loc ON loc.location_id = r.location_id
', "o.*,s.salesman_name,s.employee_code,r.retailer_name,r.retailer_code,st.state_name,ct.city_name,loc.location_name", $rp, $where . $sort);

        $auRecCount = $this->_getSelectList('table_own_brand_tracking as o
LEFT JOIN table_salesman as s on s.salesman_id = o.salesman_id 
LEFT JOIN table_retailer AS r ON o.retailer_id = r.retailer_id
LEFT JOIN state AS st ON st.state_id = r.state
LEFT JOIN city AS ct ON ct.city_id = r.city
LEFT JOIN table_location AS loc ON loc.location_id = r.location_id', 'COUNT(o.tracking_id) as total', '', $where);
// print_r($auRec);
// die();

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $act_date = date('d M Y', strtotime($auRec[$i]->app_date));
            $act_time = $auRec[$i]->app_time;

            $start_photo = '<a  href="own_brand_tracking_detail.php?id=' . $auRec[$i]->tracking_id . '">View Detail</a>';


            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->tracking_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($act_date .' '. $act_time)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
       
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';


            $json .= ',"' . ucwords(addslashes($start_photo)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showOwnBrnadTrackingReportDetail($tracking_id)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'o.app_date';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $where = "  o.tracking_id = $tracking_id ";
        //echo $_SESSION['allowncesalesmanID'];die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_own_brand_tracking_detail as o
LEFT JOIN table_item as i on i.item_id = o.item_id 
LEFT JOIN table_category as c on c.category_id = i.category_id 
LEFT JOIN table_promo_communication AS cm ON o.promo_communication_id = cm.promo_communication_id
LEFT JOIN table_promo_availbility AS pa ON o.promo_availbility_id = pa.promo_availbility_id

', "o.*,i.item_name,i.item_code,cm.description as promo_comm,pa.description as promo_availbility,c.category_name", $rp, $where . $sort);

        $auRecCount = $this->_getSelectList2('table_own_brand_tracking_detail as o
LEFT JOIN table_item as i on i.item_id = o.item_id 
LEFT JOIN table_promo_communication AS cm ON o.promo_communication_id = cm.promo_communication_id
LEFT JOIN table_promo_availbility AS pa ON o.promo_availbility_id = pa.promo_availbility_id
', 'COUNT(o.tracking_detail_id) as total', '', $where);


        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $act_date = date('d M Y', strtotime($auRec[$i]->start_date));


            $end_photo = '<a  href="view_mulitple_photo.php?id=' . $auRec[$i]->tracking_id . '&tag_id=' . $auRec[$i]->item_id . '&action=own_brand_tracking" ' . $targetBlank . ' target="_blank">Photo</a>';


            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->tracking_detail_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->item_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->item_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->category_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->promo_availbility) . '"';
            $json .= ',"' . addslashes($auRec[$i]->promo_comm) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->remark)) . '"';
            $json .= ',"' . ucwords(addslashes($end_photo)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showCompetitorBrnadTrackingReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'o.app_date';
        if (!$sortorder) $sortorder = 'DESC';
        $ordertime = ',o.app_time desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];


        if ($_SESSION['cmpFrom'] != '') {
            $fromdate = "  o.app_date  >= '" . date('Y-m-d', strtotime($_SESSION['cmpFrom'])) . "' AND ";
        } else {
            $fromdate = " o.app_date  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['cmpTo'] != '') {
            $todate = " o.app_date <= '" . date('Y-m-d', strtotime($_SESSION['cmpTo'])) . "' ";
        } else {
            $todate = "  o.app_date <= '" . date('Y-m-d') . "'";
        }

        if ($_SESSION['cmpSalId'] != '') {
            $salesman = " AND s.salesman_id = '" . $_SESSION['cmpSalId'] . "'";
        }
        $retCond = '';
        if ($_SESSION['retId'] != '') {
            $retCond = " AND r.retailer_id = '" . $_SESSION['retId'] . "'";
        }
        //$reqFor = "  AND (DATE(odo.start_date) BETWEEN '" . $fromdate . "' AND '" . $todate . "')  ";


        $where = "  $fromdate  $todate   $salesman $retCond ";
        //echo $_SESSION['allowncesalesmanID'];die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList('table_competitor_brand_tracking as o
LEFT JOIN table_salesman as s on s.salesman_id = o.salesman_id 
LEFT JOIN table_retailer AS r ON o.retailer_id = r.retailer_id
LEFT JOIN state AS st ON st.state_id = r.state
LEFT JOIN city AS ct ON ct.city_id = r.city
LEFT JOIN table_location AS loc ON loc.location_id = r.location_id
', "o.*,s.salesman_name,s.employee_code,r.retailer_name,r.retailer_code,st.state_name,ct.city_name,loc.location_name", $rp, $where . $sort);

        $auRecCount = $this->_getSelectList('table_competitor_brand_tracking as o
LEFT JOIN table_salesman as s on s.salesman_id = o.salesman_id 
LEFT JOIN table_retailer AS r ON o.retailer_id = r.retailer_id
LEFT JOIN state AS st ON st.state_id = r.state
LEFT JOIN city AS ct ON ct.city_id = r.city
LEFT JOIN table_location AS loc ON loc.location_id = r.location_id', 'COUNT(o.tracking_id) as total', '', $where);


        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $act_date = date('d M Y G:i', strtotime($auRec[$i]->app_date ." ". $auRec[$i]->app_time));

            $start_photo = '<a  href="competitor_brand_tracking_detail.php?id=' . $auRec[$i]->tracking_id . '">View Detail</a>';


            if ($auRec[$i]->no_brand_promotion == 1) {
                $promotion = "No Promotion";
            } else {
                $promotion = "";
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->tracking_id . '",';
            $json .= '"cell":["' . addslashes($act_date) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
        
            $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';
            $json .= ',"' . ucwords(addslashes($promotion)) . '"';


            $json .= ',"' . ucwords(addslashes($start_photo)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showCompetitorBrnadTrackingReportDetail($tracking_id)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'promo_availbility';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $where = "  o.tracking_id = $tracking_id ";
        //echo $_SESSION['allowncesalesmanID'];die;
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_competitor_brand_tracking_detail as o
LEFT JOIN table_competitor_brand as b on b.competitor_brand_id = o.brand_id 
LEFT JOIN table_promo_communication AS cm ON o.promo_communication_id = cm.promo_communication_id
LEFT JOIN table_promo_availbility AS pa ON o.promo_availbility_id = pa.promo_availbility_id

', "o.*,b.description as brand_name,cm.description as promo_comm,pa.description as promo_availbility", $rp, $where . $sort);

        $auRecCount = $this->_getSelectList2('table_competitor_brand_tracking_detail as o
LEFT JOIN table_competitor_brand as b on b.competitor_brand_id = o.brand_id 
LEFT JOIN table_promo_communication AS cm ON o.promo_communication_id = cm.promo_communication_id
LEFT JOIN table_promo_availbility AS pa ON o.promo_availbility_id = pa.promo_availbility_id
', 'COUNT(o.tracking_detail_id) as total', '', $where);

// echo "<pre>";
// print_r($auRec);
// die;

        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {

            $end_photo = '<a  href="view_mulitple_photo.php?id=' . $auRec[$i]->tracking_id . '&tag_id=' . $auRec[$i]->brand_id . '&action=cmp_brand_tracking" ' . $targetBlank . ' target="_blank">Photo</a>';


            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->tracking_detail_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->brand_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->promo_availbility)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->promo_comm)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->promotion_title) . '"';
            $json .= ',"' . addslashes($auRec[$i]->promotion_scheme) . '"';
            $json .= ',"' . addslashes(date('d-M-Y', strtotime($auRec[$i]->promotion_start_date))) . '"';
            $json .= ',"' . addslashes(date('d-M-Y', strtotime($auRec[$i]->promotion_end_date))) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->remark)) . '"';
            $json .= ',"' . ucwords(addslashes($end_photo)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    function showVisitHistoryReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        $ordertime = '';
        if (!$sortname) $sortname = 'sd.created';
        if (!$sortorder) $sortorder = 'DESC';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        if ($_SESSION['FromallownceList'] != '') {
            $fromdate = date('Y-m-d', strtotime($_SESSION['FromallownceList']));
        } else {
            $fromdate = date('Y-m-d');
        }
        if ($_SESSION['ToallownceList'] != '') {
            $todate = date('Y-m-d', strtotime($_SESSION['ToallownceList']));
        } else {
            $todate = date('Y-m-d');
        }
        $salCondi = $salesman;
        if (isset($_SESSION['allowncesalesmanID']) && !empty($_SESSION['allowncesalesmanID']) && (intval($_SESSION['allowncesalesmanID']) > 0)) {
            $salesman = " AND s.salesman_id = " . $_SESSION['allowncesalesmanID'];
        }

        if (isset($_SESSION['dismonth']) && isset($_SESSION['disCyear']) && $_SESSION['dismonth'] != "" && $_SESSION['disCyear'] != "") {


            $fromDate = date('Y-m-d', strtotime($_SESSION['disCyear'] . '-' . $_SESSION['dismonth']));

            $toDate = date('Y-m-t', strtotime($_SESSION['disCyear'] . '-' . $_SESSION['dismonth']));

        }


        $where = ' ';

       
        //$where = " sd.app_date BETWEEN '" . $fromdate . "' AND '" . $todate . "' $salCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

         $featureList = $this->getAccountFeaturesList($_SESSION['accountId']);

         if (in_array(94, $featureList)) {
              if (isset($_SESSION['visitSts']) && $_SESSION['visitSts'] == 'V') {
                  $havingCond  = " HAVING count(tcco.retailer_id) > 0 OR COUNT(tod.retailer_id) > 0 ";
              }elseif(isset($_SESSION['visitSts']) && $_SESSION['visitSts'] == 'N'){
                  $havingCond  = " HAVING count(tcco.retailer_id) = 0 AND COUNT(tod.retailer_id) = 0 ";
              }else{
                  $havingCond = '';
              }

             $where .= " AND trs.status='A' AND tr.status='A' and  trs.month='" . $_SESSION['dismonth'] . "' and  trs.year='" . date('Y', strtotime($_SESSION['disCyear'])) . "'  $salesman AND r.retailer_name !='' GROUP BY s.salesman_id,r.retailer_id $havingCond";
             $auRec = $this->_getSelectList('table_route_scheduled  as trs 
		LEFT JOIN table_route_schedule_details as trsd on trs.route_schedule_id=trsd.route_schedule_id  
		LEFT JOIN table_route as tr on tr.route_id=trsd.route_id 
        LEFT JOIN table_route_retailer as rr ON rr.route_id = tr.route_id
        LEFT JOIN table_retailer as r ON rr.retailer_id = r.retailer_id 
        left join table_salesman as s on trs.salesman_id=s.salesman_id LEFT JOIN table_capture_checkin_out tcco ON tcco.salesman_id = s.salesman_id AND tcco.retailer_id = r.retailer_id AND tcco.checkin_date BETWEEN"'.$fromDate.'" and "'.$toDate.'"
                LEFT JOIN table_order tod ON s.salesman_id = tod.salesman_id AND tod.retailer_id = r.retailer_id AND tod.date_of_order BETWEEN "'.$fromDate.'" and "'.$toDate.'"', "s.salesman_id,r.retailer_id,s.salesman_name,s.employee_code,r.retailer_name,r.retailer_code", $rp, $where . ' ' . $sort);

             $auRecTotal = $this->_getSelectList('table_route_scheduled  as trs 
		LEFT JOIN table_route_schedule_details as trsd on trs.route_schedule_id=trsd.route_schedule_id  
		LEFT JOIN table_route as tr on tr.route_id=trsd.route_id 
        LEFT JOIN table_route_retailer as rr ON rr.route_id = tr.route_id
        LEFT JOIN table_retailer as r ON rr.retailer_id = r.retailer_id 
        left join table_salesman as s on trs.salesman_id=s.salesman_id
        LEFT JOIN table_capture_checkin_out tcco ON tcco.salesman_id = s.salesman_id AND tcco.retailer_id = r.retailer_id AND tcco.checkin_date BETWEEN"'.$fromDate.'" and "'.$toDate.'"
                LEFT JOIN table_order tod ON s.salesman_id = tod.salesman_id AND tod.retailer_id = r.retailer_id AND tod.date_of_order BETWEEN "'.$fromDate.'" and "'.$toDate.'"', "count(*) as total", '', $where);
             $total = count($auRecTotal);
         } elseif (in_array(93, $featureList)) {
              if (isset($_SESSION['visitSts']) && $_SESSION['visitSts'] == 'V') {
                  $havingCond  = " HAVING count(tcco.retailer_id) > 0 OR COUNT(tod.retailer_id) > 0 ";
              }elseif(isset($_SESSION['visitSts']) && $_SESSION['visitSts'] == 'N'){
                  $havingCond  = " HAVING count(tcco.retailer_id) = 0 AND COUNT(tod.retailer_id) = 0 ";
              }else{
                  $havingCond = '';
              }
             $where .= " AND trs.from_date<='" . $fromDate . "' and trs.to_date>='" . $toDate . "' and trs.status='A' and r.retailer_name !=''  $salesman AND r.retailer_name !='' $retailer  GROUP BY s.salesman_id,r.retailer_id $havingCond ";

             $auRec = $this->_getSelectList('table_route_schedule  as trs 
		LEFT JOIN view_route_schedule_by_day as rsd on trs.route_schedule_id=rsd.route_schedule_id 
				LEFT JOIN table_route as tr on tr.route_id IN(rsd.all_routes_conct)
				LEFT JOIN table_route_retailer as rr ON rr.route_id = tr.route_id 
				LEFT JOIN table_retailer as r ON rr.retailer_id = r.retailer_id 
				left join table_salesman as s on trs.salesman_id=s.salesman_id
				LEFT JOIN table_capture_checkin_out tcco ON tcco.salesman_id = s.salesman_id AND tcco.retailer_id = r.retailer_id AND tcco.checkin_date BETWEEN"'.$fromDate.'" and "'.$toDate.'"
                LEFT JOIN table_order tod ON s.salesman_id = tod.salesman_id AND tod.retailer_id = r.retailer_id AND tod.date_of_order BETWEEN "'.$fromDate.'" and "'.$toDate.'"
				', "s.salesman_id,r.retailer_id,s.salesman_name,s.employee_code,r.retailer_name,r.retailer_code, count(tcco.retailer_id) total,
  COUNT(tod.retailer_id) rettotal
  ", $rp, $where . ' ' . $sort);

             $auRecTotal = $this->_getSelectList('table_route_schedule  as trs 
		LEFT JOIN view_route_schedule_by_day as rsd on trs.route_schedule_id=rsd.route_schedule_id 
				LEFT JOIN table_route as tr on tr.route_id IN(rsd.all_routes_conct)
				LEFT JOIN table_route_retailer as rr ON rr.route_id = tr.route_id 
				LEFT JOIN table_retailer as r ON rr.retailer_id = r.retailer_id 
				left join table_salesman as s on trs.salesman_id=s.salesman_id
				LEFT JOIN table_capture_checkin_out tcco ON tcco.salesman_id = s.salesman_id AND tcco.retailer_id = r.retailer_id AND tcco.retailer_id = r.retailer_id AND tcco.checkin_date BETWEEN "'.$fromDate.'" and "'.$toDate.'"
                LEFT JOIN table_order tod ON s.salesman_id = tod.salesman_id AND tod.retailer_id = r.retailer_id AND tod.date_of_order BETWEEN "'.$fromDate.'" and "'.$toDate.'"', "count(*) as total", '', $where);

             $total = count($auRecTotal);
         } elseif (count($featureList) > 0 && in_array(95, $featureList)) {
              if (isset($_SESSION['visitSts']) && $_SESSION['visitSts'] == 'V') {
                  $havingCond  = " HAVING count(tcco.retailer_id) > 0 OR COUNT(tod.retailer_id) > 0 ";
              }elseif(isset($_SESSION['visitSts']) && $_SESSION['visitSts'] == 'N'){
                  $havingCond  = " HAVING count(tcco.retailer_id) = 0 AND COUNT(tod.retailer_id) = 0 ";
              }else{
                  $havingCond = '';
              }
             $where .= "   $salesman and rs.month='" . $_SESSION['dismonth'] . "' and rs.year='" . date('Y', strtotime($_SESSION['disCyear'])) . "'  and rs.status='A' and rsd.status='A' AND r.retailer_name !='' GROUP BY s.salesman_id,r.retailer_id $havingCond ";

             $auRec = $this->_getSelectList('table_salesman_retailer_assignment  as rs 
		left join table_salesman_retailer_assignment_details as rsd on rs.route_schedule_id=rsd.route_schedule_id 
				left join table_retailer as r on r.retailer_id=rsd.retailer_id
				left join table_salesman as s on rs.salesman_id=s.salesman_id
				LEFT JOIN table_capture_checkin_out tcco ON tcco.salesman_id = s.salesman_id AND tcco.retailer_id = r.retailer_id AND tcco.retailer_id = r.retailer_id AND tcco.checkin_date BETWEEN "'.$fromDate.'" and "'.$toDate.'"
                LEFT JOIN table_order tod ON s.salesman_id = tod.salesman_id AND tod.retailer_id = r.retailer_id AND tod.date_of_order BETWEEN "'.$fromDate.'" and "'.$toDate.'"', "s.salesman_id,r.retailer_id,s.salesman_name,s.employee_code,r.retailer_name,r.retailer_code", $rp, $where . ' ' . $sort);

             $auRecTotal = $this->_getSelectList('table_salesman_retailer_assignment  as rs 
		left join table_salesman_retailer_assignment_details as rsd on rs.route_schedule_id=rsd.route_schedule_id 
				left join table_retailer as r on r.retailer_id=rsd.retailer_id
				left join table_salesman as s on rs.salesman_id=s.salesman_id
				LEFT JOIN table_capture_checkin_out tcco ON tcco.salesman_id = s.salesman_id AND tcco.retailer_id = r.retailer_id AND tcco.retailer_id = r.retailer_id AND tcco.checkin_date BETWEEN "'.$fromDate.'" and "'.$toDate.'"
                LEFT JOIN table_order tod ON s.salesman_id = tod.salesman_id AND tod.retailer_id = r.retailer_id AND tod.date_of_order BETWEEN "'.$fromDate.'" and "'.$toDate.'"', "count(*) as total", '', $where);
             $total = count($auRecTotal);
         } elseif (count($featureList) > 0 && in_array(119, $featureList)) {
             if (isset($_SESSION['visitSts']) && $_SESSION['visitSts'] == 'V') {
                  $havingCond  = " HAVING count(tcco.retailer_id) > 0 OR COUNT(tod.retailer_id) > 0 ";
              }elseif(isset($_SESSION['visitSts']) && $_SESSION['visitSts'] == 'N'){
                  $havingCond  = " HAVING count(tcco.retailer_id) = 0 AND COUNT(tod.retailer_id) = 0 ";
              }else{
                  $havingCond = '';
              }
             $where .= "  $salesman AND  DATE(rsd.created_date) <='" . $toDate . "' AND r.retailer_name !='' GROUP BY s.salesman_id,r.retailer_id $havingCond ";
             $auRec = $this->_getSelectList('table_customer_salesman_mapping  as rsd 		
				left join table_retailer as r on r.retailer_id=rsd.retailer_id
				left join table_salesman as s on rsd.salesman_id=s.salesman_id
				LEFT JOIN table_capture_checkin_out tcco ON tcco.salesman_id = s.salesman_id AND tcco.retailer_id = r.retailer_id AND tcco.checkin_date BETWEEN"'.$fromDate.'" and "'.$toDate.'"
                LEFT JOIN table_order tod ON s.salesman_id = tod.salesman_id AND tod.retailer_id = r.retailer_id AND tod.date_of_order BETWEEN "'.$fromDate.'" and "'.$toDate.'"', "s.salesman_id,r.retailer_id,s.salesman_name,s.employee_code,r.retailer_name,r.retailer_code", $rp, $where . ' ' . $sort);

             $auRecTotal = $this->_getSelectList('table_customer_salesman_mapping  as rsd 		
				left join table_retailer as r on r.retailer_id=rsd.retailer_id
				left join table_salesman as s on rsd.salesman_id=s.salesman_id
				LEFT JOIN table_capture_checkin_out tcco ON tcco.salesman_id = s.salesman_id AND tcco.retailer_id = r.retailer_id AND tcco.checkin_date BETWEEN"'.$fromDate.'" and "'.$toDate.'"
                LEFT JOIN table_order tod ON s.salesman_id = tod.salesman_id AND tod.retailer_id = r.retailer_id AND tod.date_of_order BETWEEN "'.$fromDate.'" and "'.$toDate.'"', "count(*) as total", '', $where);
             $total = count($auRecTotal);
         } elseif (in_array(186, $featureList)) {
              if (isset($_SESSION['visitSts']) && $_SESSION['visitSts'] == 'V') {
                  $havingCond  = " HAVING count(tcco.retailer_id) > 0 OR COUNT(tod.retailer_id) > 0 ";
              }elseif(isset($_SESSION['visitSts']) && $_SESSION['visitSts'] == 'N'){
                  $havingCond  = " HAVING count(tcco.retailer_id) = 0 AND COUNT(tod.retailer_id) = 0 ";
              }else{
                  $havingCond = '';
              }
             $where .= " AND rs.status='A'  and rs.from_date<='" . $fromDate . "' and rs.to_date>='" . $toDate . "'		
							$salesman AND r.retailer_name !='' GROUP BY s.salesman_id,r.retailer_id $havingCond ";
             $auRec = $this->_getSelectList('table_customer_wise_route_schedule  as rs 
		left join view_customer_wise_route_schedule_by_day as rsd on rs.route_schedule_id=rsd.route_schedule_id
		LEFT JOIN table_retailer as r on r.retailer_id IN(rsd.all_ret_conct)
		left join table_salesman as s on rs.salesman_id=s.salesman_id
		LEFT JOIN table_capture_checkin_out tcco ON tcco.salesman_id = s.salesman_id AND tcco.retailer_id = r.retailer_id AND tcco.checkin_date BETWEEN"'.$fromDate.'" and "'.$toDate.'"
                LEFT JOIN table_order tod ON s.salesman_id = tod.salesman_id AND tod.retailer_id = r.retailer_id AND tod.date_of_order BETWEEN "'.$fromDate.'" and "'.$toDate.'"', "s.salesman_id,r.retailer_id,s.salesman_name,s.employee_code,r.retailer_name,r.retailer_code", $rp, $where . ' ' . $sort);

             $auRecTotal = $this->_getSelectList('table_customer_wise_route_schedule  as rs 
		left join view_customer_wise_route_schedule_by_day as rsd on rs.route_schedule_id=rsd.route_schedule_id
		LEFT JOIN table_retailer as r on r.retailer_id IN(rsd.all_ret_conct)
		left join table_salesman as s on rs.salesman_id=s.salesman_id
		LEFT JOIN table_capture_checkin_out tcco ON tcco.salesman_id = s.salesman_id AND tcco.retailer_id = r.retailer_id AND tcco.checkin_date BETWEEN"'.$fromDate.'" and "'.$toDate.'"
                LEFT JOIN table_order tod ON s.salesman_id = tod.salesman_id AND tod.retailer_id = r.retailer_id AND tod.date_of_order BETWEEN "'.$fromDate.'" and "'.$toDate.'"', "count(*) as total", '', $where);
             $total = count($auRecTotal);
         }

$checkCondi = " rs.checkin_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "'	
	
							$salesman GROUP BY s.salesman_id,retailer_id,checkin_date";

                        
  $auCheckin = $this->_getSelectList('table_capture_checkin_out  as rs 
  left join table_salesman as s on rs.salesman_id=s.salesman_id
		', "count(retailer_id) as total_checkin,s.salesman_id,retailer_id,checkin_date", '', $checkCondi);
      
  $orderCondi = " o.date_of_order BETWEEN '" . $fromDate . "' AND '" . $toDate . "' AND order_type IN ('Yes','No')		
							$salesman GROUP BY s.salesman_id,retailer_id,date_of_order";
  $auOrder = $this->_getSelectList('table_order  as o
  left join table_salesman as s on o.salesman_id=s.salesman_id 
		', "count(order_id) as total,s.salesman_id,retailer_id,date_of_order", '', $orderCondi);
$orderArr = [];
$checkinArr = [];
  if (is_array($auOrder) && count($auOrder) > 0) {
      foreach ($auOrder as $orderData) {
          $orderArr[$orderData->date_of_order][$orderData->salesman_id][$orderData->retailer_id] = $orderData->total;
      }
  }
  if (is_array($auCheckin) && count($auCheckin) > 0) {
      foreach ($auCheckin as $checkData) {
          $checkinArr[$checkData->checkin_date][$checkData->salesman_id][$checkData->retailer_id] = $checkData->total_checkin;
      }
  }



        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r", "\t", "'");
        $emptyValue = '<p style="text-align: center;font-size: 30px;">-</p>';
        if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
            $targetBlank = '';
        } else {
            $targetBlank = 'target="_blank"';
        }
        $visitUTC = 0;
        $_SESSION['visitUTC'] = "";
        for ($i = 0; $i < count($auRec); $i++) {
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->salesman_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_name)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->retailer_code)) . '"';
            $totalVisit = 0;

            $days = cal_days_in_month(CAL_GREGORIAN, $_SESSION['dismonth'], $_SESSION['disCyear']);
            
            $hasVisitedThisMonth = false;
            for ($k = 1; $k <= $days; $k++) {
                if ($k < 10) {
                    $dateVal = '0' . $k;
                } else {
                    $dateVal = $k;
                }

                $date = date('Y-m-d', strtotime($_SESSION['disCyear'] . '-' . $_SESSION['dismonth'] . '-' . $dateVal));
                
                if ($checkinArr[$date][$auRec[$i]->salesman_id][$auRec[$i]->retailer_id] > 0 || $orderArr[$date][$auRec[$i]->salesman_id][$auRec[$i]->retailer_id] > 0) {
                    $totalVisit++;

                    if (!$hasVisitedThisMonth) {
                        $hasVisitedThisMonth = true;  
                        $visitUTC++;  
                    }
                   
                    $json .= ',"' . ucwords(addslashes('1')) . '"';
                } else {
                    $json .= ',"' . ucwords(addslashes('')) . '"';
                }

               
            }
        
       
                $_SESSION['visitUTC'] = ($visitUTC == 0) ? count($checkinArr) : $visitUTC;

          
            // $_SESSION['visitUTC'] =  $visitUTC;
            if ($totalVisit > 0) {
                $visitStatus = "Visited";
            } else {
                $visitStatus = "Not Visited";
            }

            $json .= ',"' . ucwords(addslashes($visitStatus)) . '"';

            $json .= ',"' . ucwords(addslashes($totalVisit)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }

    // UTC Master Created On 3 oct 2024

    function showUtc()
    {
        // echo 'test';exit;
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'tag_type';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 10 june 2024 : add status filter
        $statusCondi = '';

 
        if (isset($_SESSION['MasAtte']) && $_SESSION['MasAtte'] != 'all' && $_SESSION['MasAtte'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasAtte'] . "'";
        }
        //Todo End : sudhanshu 10 june 2024 : add status filter
        $where = " $statusCondi";
       
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_utc_master', "*", $rp, $where . $sort, '');
        // print_r($auRec);exit;
        $auRecCount = $this->_getSelectList('table_utc_master', 'count(*) as total', '', $where);
   
        $total = $auRecCount[0]->total;
   
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
  
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
     
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"utc_master.php?statusId=' . $auRec[$i]->utc_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->utc_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->utc_name)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
           
        }
     
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
       
        exit;
    }


    // Coupon Master Created On 3 oct 2024

    function showCoupon()
    {
        // echo 'test';exit;
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'tag_type';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 10 june 2024 : add status filter
        $statusCondi = '';
 
 
        if (isset($_SESSION['MasAtte']) && $_SESSION['MasAtte'] != 'all' && $_SESSION['MasAtte'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasAtte'] . "'";
        }
        //Todo End : sudhanshu 10 june 2024 : add status filter
        $where = " $statusCondi";
       
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_coupon_master', "*", $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_coupon_master', 'count(*) as total', '', $where);
   
        $total = $auRecCount[0]->total;
   
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
  
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
     
        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"coupon_master.php?statusId=' . $auRec[$i]->coupon_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->coupon_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->coupon_name)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;
           
        }
     
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
       
        exit;
    }

  

  
    function showRedemption($salesman)
    {
        $page = isset($_REQUEST['page']) ? intval($_REQUEST['page']) : 1;
        $rp = isset($_REQUEST['rp']) ? intval($_REQUEST['rp']) : 50;
        $sortname = isset($_REQUEST['sortname']) ? $_REQUEST['sortname'] : ' trd.created_at';
        $sortorder = isset($_REQUEST['sortorder']) ? $_REQUEST['sortorder'] : 'desc';
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";

     

        $query = isset($_REQUEST['query']) ? $_REQUEST['query'] : '';
        $qtype = isset($_REQUEST['qtype']) ? $_REQUEST['qtype'] : '';

        if ($query != '' && $qtype != '') {
            $where .= "  $qtype LIKE '%" . addslashes($query) . "%' AND";
        }

        if(isset($_SESSION['SalOrderList'])){
            $salCondi = "And s.salesman_id = '".$_SESSION['SalOrderList']."' ";
        }
        else{
            $salCondi = $salesman;
        }
        
        // $_SESSION['redemtion'] = $salesman;
         // echo "<pre>";
        // $herie = "";
        // print_r($_SESSION);

        if($_SESSION['salesmanId']> 0){
            $herie = " AND SH.rpt_user_id = '".$_SESSION['salesmanId']."'";
        }
        else{
            $herie = "";
        }
    
      
        if (isset($_SESSION['FromRedemptionList']) && $_SESSION['FromRedemptionList'] != '') {
            $fromdate = " trd.activity_date >= '" . date('Y-m-d', strtotime($_SESSION['FromRedemptionList'])) . "' AND ";
        } else {
            $fromdate = " trd.activity_date >= '" . date('Y-m-d') . "' AND ";
        }

        if (isset($_SESSION['ToRedemptionList']) && $_SESSION['ToRedemptionList'] != '') {
            $todate = " trd.activity_date <= '" . date('Y-m-d', strtotime($_SESSION['ToRedemptionList'])) . "'";
        } else {
            $todate = " trd.activity_date <= '" . date('Y-m-d') . "'";
        }

        
        $where .= " $fromdate $todate $salCondi";        

        $auRecSAl = $this->_getSelectList(
            'table_redemption trd            
             left JOIN table_salesman s ON s.salesman_id = trd.salesman_id            
             left JOIN table_retailer tblrel ON tblrel.retailer_id = trd.retailer_id             
            LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id             
             ',
            'trd.id, s.salesman_name, s.employee_code, s.account_id, s.salesman_id, S2.salesman_name as desc1,
             tblrel.retailer_name, tblrel.retailer_code, 
             trd.activity_date,trd.activity_time, trd.created_at',
            $rp,
            $where . "Group by trd.id"  .' ORDER BY trd.created_at ' . $sortorder, 
            ''
        );
      

      
//  echo "<pre>";print_r($where);die;
        // Count total rows for pagination
        $auRecCount = $this->_getSelectList(
            'table_redemption trd 
             JOIN table_salesman s ON s.salesman_id = trd.salesman_id 
             JOIN table_retailer tblrel ON tblrel.retailer_id = trd.retailer_id
               LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
                 JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id
             ',
            'COUNT(*) AS total',
            '', // No limit for count
            $where
        );

        $total = isset($auRecCount[0]->total) ? $auRecCount[0]->total : 0;

        // Preparing JSON output
        header("Content-type: application/json");
        $json = [
            'page' => $page,
            'total' => $total,
            'rows' => []
        ];

        foreach ($auRecSAl as $rec) {
            $sts = ($rec->status == 'A') ? "Active" : "Inactive";
            $json['rows'][] = [
                'id' => $rec->id,
                'cell' => [
                    '<a href="redemption_report_detail.php?id=' . $rec->id . '&value=' . $rec->salesman_id . '" target="_blank">' . 'View Details' . '</a>',

                    date('d-M-Y', strtotime($rec->activity_date)),
                    date('G:i', strtotime($rec->activity_time)),
                    addslashes($rec->employee_code),
                    ucwords(addslashes($rec->salesman_name)),
                    addslashes($rec->retailer_code),
                    addslashes($rec->retailer_name),
                 

                ]
            ];
        }
        echo json_encode($json);
        exit;
    }







   function addUtc()
    {
        // $data['tag_type'] = mysql_escape_string(trim($_POST['tag_type']));
        $data['utc_name'] = mysql_escape_string(trim($_POST['utc_name']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_date'] = date('Y-m-d');
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_utc_master');
        return $id;
    }


// Update UTC by Domar : 27-sep-2024

function updateUtc($id)
{
    // $data['tag_type'] = mysql_escape_string(trim($_POST['tag_type']));
    $data['utc_name'] = mysql_escape_string(trim($_POST['utc_name']));
    $data['last_update_date'] = date('Y-m-d');
    $data['last_update_status'] = 'Update';
    $data['status'] = 'A';
    $id = $this->_dbUpdate($data, 'table_utc_master', " utc_id=" . $id);
    return $id;
}


    // Add Coupon by Domar : 27-sep-2024


    function addCoupon()
    {
   
        $data['coupon_name'] = mysql_escape_string(trim($_POST['coupon_name']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        $data['created_date'] = date('Y-m-d');
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $id = $this->_dbInsert($data, 'table_coupon_master');
        return $id;
    }


    // Update Coupon by Domar : 27-sep-2024

    function updateCoupon($id)
    {
   
        $data['coupon_name'] = mysql_escape_string(trim($_POST['coupon_name']));
        $data['last_update_date'] = date('Y-m-d');
        $data['last_update_status'] = 'Update';
        $data['status'] = 'A';
        $id = $this->_dbUpdate($data, 'table_coupon_master', " coupon_id=" . $id);
        return $id;
    }

    // function showStokcRequestReport($salesman)
    // {
    //     $page = $_REQUEST['page'];
    //     $rp = $_REQUEST['rp'];
    //     $sortname = $_REQUEST['sortname'];
    //     $sortorder = $_REQUEST['sortorder'];
    //     if (!$sortname) $sortname = 'o.app_date';
    //     if (!$sortorder) $sortorder = 'DESC';
    //     $ordertime = ',o.app_time desc';
    //     $sort = " ORDER BY $sortname $sortorder $ordertime";
    //     if (!$page) $page = 1;
    //     if (!$rp) $rp = 50;
    //     $start = (($page - 1) * $rp);
    //     $limit = "LIMIT $start, $rp";
    //     $query = $_REQUEST['query'];
    //     $qtype = $_REQUEST['qtype'];


    //     if ($_SESSION['cmpFrom'] != '') {
    //         $fromdate = "  o.app_date  >= '" . date('Y-m-d', strtotime($_SESSION['cmpFrom'])) . "' AND ";
    //     } else {
    //         $fromdate = " o.app_date  >= '" . date('Y-m-d') . "' AND ";
    //     }
    //     if ($_SESSION['cmpTo'] != '') {
    //         $todate = " o.app_date <= '" . date('Y-m-d', strtotime($_SESSION['cmpTo'])) . "' ";
    //     } else {
    //         $todate = "  o.app_date <= '" . date('Y-m-d') . "'";
    //     }

    //     if ($_SESSION['cmpSalId'] != '') {
    //         $salesman = " AND s.salesman_id = '" . $_SESSION['cmpSalId'] . "'";
    //     }

    //     //$reqFor = "  AND (DATE(odo.start_date) BETWEEN '" . $fromdate . "' AND '" . $todate . "')  ";
    //     $preCondi  = '';
    //     // $approvar = $this->getApprovars();
    //     // //var_dump($approvar);die;
    //     // if($approvar->level_id !=''){

    //     //     if($_SESSION['userLoginType'] == 1){
    //     //        $adminApr = $approvar->admin_appr;
    //     //        $adminPre = $approvar->admin_preference;
    //     //        if($adminApr != 1){
    //     //             $salesman = " AND s.salesman_id = ''";
    //     //        }
    //     //     }
    //     //      if($_SESSION['userLoginType'] == 3){
    //     //         $disApr =  $approvar->distributor_appr;
    //     //         $disPre =  $approvar->distributor_preference;
    //     //          if($disApr != 1){
    //     //             $salesman = " AND s.salesman_id = ''";
    //     //        }
    //     //     }
    //     //      if($_SESSION['userLoginType'] == 5){
    //     //          $userApr =  $approvar->user_appr;
    //     //          $userPre =  $approvar->user_preference;
    //     //           if($userApr != 1){
    //     //             $salesman = " AND s.salesman_id = ''";
    //     //        }
    //     //     }

    //     // }
    //     // if($adminPre >$userPre && $adminPre>$disPre)
    //     // {
    //     //     $adminPreference = true;
    //     // }
    //     // else if($userPre >$adminPre && $userPre >$disPre)
    //     // {
    //     //     $userPreference = true;
    //     // }
    //     // else if($disPre>$adminPre && $disPre>$userPre)
    //     // {
    //     //     $disPreference = true;
    //     // }
        
    //     // if($_SESSION['userLoginType'] == 1){

    //     //     $checkPre =  $this->_getSelectList('table_approvar_level', "*", '', " ");
    //     //     if(!empty($checkPre) && $adminPre !=1){
    //     //        if($checkPre->user_preference > $checkPre->distributor_preference){
    //     //            $smallestPreUser = true;
    //     //            $preCondi = " AND oa.user_apr_status = 1";
    //     //        }else{
    //     //            $smallestPreDis = true;
    //     //            $preCondi = " AND oa.dis_apr_status = 1";
    //     //        }
    //     //     }
    //     // }
    //     //  if($_SESSION['userLoginType'] == 3){

    //     //     $checkPre =  $this->_getSelectList('table_approvar_level', "*", '', " ");
    //     //     if(!empty($checkPre) && $disPre !=1){
    //     //        if($checkPre->user_preference > $checkPre->admin_preference){
    //     //            $smallestPreUser = true;
    //     //            $preCondi = " AND oa.admin_apr_status = 1  ";
    //     //        }else{
    //     //            $smallestPreAdmin = true;
    //     //            $preCondi = " AND oa.user_apr_status = 1";
    //     //        }
    //     //     }
    //     //     $preCondi .=" And o.distributor_id = '".$_SESSION['distributorId']."'";
    //     //     $salesman =' ';
    //     // }
    //     //   if($_SESSION['userLoginType'] == 5){

    //     //     $checkPre =  $this->_getSelectList('table_approvar_level', "*", '', " ");
    //     //     if(is_array($checkPre) && count($checkPre) > 0 && $userPre !=1){
    //     //        if($checkPre->admin_preference > $checkPre->distributor_preference){
    //     //            $smallestPreAdmin = true;
    //     //            $preCondi = " AND oa.dis_apr_status = 1";
    //     //        }else{
    //     //            $smallestPreDis = true;
    //     //            $preCondi = " AND oa.admin_apr_status = 1";
    //     //        }
    //     //     }
    //     // } 

    //     if($_SESSION['userLoginType'] == 5){
    //         $preCondi = "And o.status = 'A'";
    //     }

    //     $where = "  $fromdate  $todate   $salesman $preCondi GROUP BY o.request_id ";
    //     //echo $_SESSION['allowncesalesmanID'];die;
    //  //    echo $where;die;
    //     if ($query) $where .= " AND $qtype LIKE '%$query%' ";

    //                     $auRec = $this->_getSelectList('table_stock_request as o
    //             LEFT JOIN table_stock_request_detail as od on od.request_id = o.request_id 
    //             LEFT JOIN table_stock_request_approved_items as oa on oa.request_id = o.request_id 
    //             LEFT JOIN table_salesman as s on s.salesman_id = o.salesman_id 
    //             LEFT JOIN table_distributors AS r ON o.distributor_id = r.distributor_id

    //             ', "o.*,s.salesman_name,s.employee_code,r.distributor_name,r.distributor_code,count(od.item_id) as total_item", $rp, $where . $sort);

    //             // echo "<pre>";
    //             // echo $where;die;
    //             // print_r($auRec);die;


    //                         $auRecCount = $this->_getSelectList('table_stock_request as o
    //                 LEFT JOIN table_stock_request_detail as od on od.request_id = o.request_id 
    //                 LEFT JOIN table_stock_request_approved_items as oa on oa.request_id = o.request_id 
    //                 LEFT JOIN table_salesman as s on s.salesman_id = o.salesman_id 
    //                 LEFT JOIN table_distributors AS r ON o.distributor_id = r.distributor_id', 'COUNT(o.request_id) as total', '', $where);


    //     $total = count($auRecCount);
    //     header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
    //     header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
    //     header("Cache-Control: no-cache, must-revalidate");
    //     header("Pragma: no-cache");
    //     header("Content-type: text/x-json");
    //     $json = "";
    //     $json .= "{\n";
    //     $json .= '"page": "' . $page . '",';
    //     $json .= "\n";
    //     $json .= '"total":"' . $total . '",';
    //     $json .= "\n";
    //     $json .= '"rows": [';
    //     $rc = false;
    //     $remove = array("\n", "\r\n", "\r");
    //     for ($i = 0; $i < count($auRec); $i++) {
    //         $act_date = date('d M Y', strtotime($auRec[$i]->app_date));

    //         $start_photo = '<a  href="stock_request_detail.php?id=' . $auRec[$i]->request_id . '">'.$auRec[$i]->request_id.'</a>';
    //        $chck = '<input type="checkbox" name="stockEdit[]" class="stock-check" value="' . $auRec[$i]->request_id . '" onclick="uncheck(this)" /> ';


    //         if ($rc) $json .= ",";
    //         $json .= "\n{";
    //         $json .= '"id":"' . $auRec[$i]->request_id . '",';
    //         $json .= '"cell":["' . ucwords(addslashes($chck)) . '"';
    //         $json .= ',"' . ucwords(addslashes($start_photo)) . '"';
    //         $json .= ',"' . ucwords(addslashes($act_date)) . '"';
    //         $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
    //         $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
    //         $json .= ',"' . addslashes($auRec[$i]->distributor_name) . '"';
    //         $json .= ',"' . addslashes($auRec[$i]->distributor_code) . '"';
    //         $json .= ',"' . addslashes($auRec[$i]->total_item) . '"';
    //         $json .= ',"' . ucwords(addslashes($auRec[$i]->city_name)) . '"';
    //         $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"';



    //         $json .= ',"' . ucwords(addslashes($auRec[$i]->location_name)) . '"]';
    //         $json .= "}";
    //         $rc = true;
    //     }
    //     $json .= "]\n";
    //     $json .= "}";
    //     echo str_replace("\'", '', $json);
    //     exit;
    // }
    //Todo Start : sudhanshu 08 Oct 2024 : show menu change report
    function showMenuChangeReport($salesman)
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'o.app_date';
        if (!$sortorder) $sortorder = 'DESC';
        $ordertime = ',o.app_time desc';
        $sort = " ORDER BY $sortname $sortorder $ordertime";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];


        if ($_SESSION['menuFrom'] != '') {
            $fromdate = "  o.app_date  >= '" . date('Y-m-d', strtotime($_SESSION['menuFrom'])) . "' AND ";
        } else {
            $fromdate = " o.app_date  >= '" . date('Y-m-d') . "' AND ";
        }
        if ($_SESSION['menuTo'] != '') {
            $todate = " o.app_date <= '" . date('Y-m-d', strtotime($_SESSION['menuTo'])) . "' ";
        } else {
            $todate = "  o.app_date <= '" . date('Y-m-d') . "'";
        }

        if ($_SESSION['menuSalId'] != '') {
            $salesman = " AND s.salesman_id = '" . $_SESSION['menuSalId'] . "'";
        }

        //$reqFor = "  AND (DATE(odo.start_date) BETWEEN '" . $fromdate . "' AND '" . $todate . "')  ";
        $where ="";
        if ($query) $where = "  ($qtype LIKE '%$query%' )  ANd";
        $where .= " $fromdate  $todate   $salesman GROUP BY o.menu_id ";
        //echo $_SESSION['allowncesalesmanID'];die;
        

        $auRec = $this->_getSelectList('table_menu_change as o
LEFT JOIN table_menu_change_item as od on od.menu_id = o.menu_id 
LEFT JOIN table_salesman as s on s.salesman_id = o.salesman_id 
LEFT JOIN table_retailer AS r ON o.retailer_id = r.retailer_id
LEFT JOIN state AS st ON st.state_id = r.state
LEFT JOIN city AS ct ON ct.city_id = r.city
LEFT JOIN table_location AS loc ON loc.location_id = r.location_id LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id  
', "o.*,s.salesman_name,s.employee_code,r.retailer_name,r.retailer_code,count(od.item_id) as total_item,st.state_name,ct.city_name,loc.location_name ,S2.salesman_name as desc1", $rp, $where  . $sort);


//  echo "<pre>";print_r($where); print_r($auRec);die;

        $auRecCount = $this->_getSelectList('table_menu_change as o
LEFT JOIN table_menu_change_item as od on od.menu_id = o.menu_id 
LEFT JOIN table_salesman as s on s.salesman_id = o.salesman_id 
LEFT JOIN table_retailer AS r ON o.retailer_id = r.retailer_id
LEFT JOIN state AS st ON st.state_id = r.state
LEFT JOIN city AS ct ON ct.city_id = r.city
LEFT JOIN table_location AS loc ON loc.location_id = r.location_id LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id  ', 'COUNT(o.menu_id) as total', '', $where );


        $total = count($auRecCount);
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        $remove = array("\n", "\r\n", "\r");
        for ($i = 0; $i < count($auRec); $i++) {
            $act_date = date('d M Y', strtotime($auRec[$i]->app_date));
            $menu_date = date('d M Y', strtotime($auRec[$i]->menu_date));

            $start_photo = '<a  href="menu_change_details.php?id=' . $auRec[$i]->menu_id . '">View</a>';

            $end_photo = '<a  href="view_mulitple_photo.php?id=' . $auRec[$i]->menu_id .  '&action=menu_change_photo" ' . $targetBlank . ' target="_blank">Photo</a>';


            $menu_change = '';
            if($auRec[$i]->menu_change == 1){
                $menu_change = "Yes";
            }elseif ($auRec[$i]->menu_change == 2){
                $menu_change = "No";
            }elseif ($auRec[$i]->menu_change == 3){
                $menu_change = "In Future";
            }
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->menu_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($act_date)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->employee_code)) . '"';
            $json .= ',"' . ucwords(addslashes($auRec[$i]->salesman_name)) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
           $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
           $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
           $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
           $json .= ',"' . addslashes($menu_change) . '"';
           $json .= ',"' . addslashes($menu_date) . '"';
            $json .= ',"' . addslashes($auRec[$i]->total_item) . '"';

            $json .= ',"' . ucwords(addslashes($start_photo)) . '"';



            $json .= ',"' . ucwords(addslashes($end_photo)) . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }
    //Todo End : sudhanshu 08 Oct 2024 : show menu change report
    // Todo start : Domar : 11-oct-2024 : FOC master

    function showFoc()
    {
        // echo 'test';exit;
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'tag_type';
        if (!$sortorder) $sortorder = 'desc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];

        $statusCondi = '';


        if (isset($_SESSION['MasAtte']) && $_SESSION['MasAtte'] != 'all' && $_SESSION['MasAtte'] != '') {
            $statusCondi = " AND status ='" . $_SESSION['MasAtte'] . "'";
        }

        $where = " tag_type='10'  $statusCondi";

        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_tags', "*", $rp, $where . $sort, '');
        //print_r($auRec);
        $auRecCount = $this->_getSelectList('table_tags', 'count(*) as total', '', $where);

        $total = $auRecCount[0]->total;

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");

        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

        for ($i = 0; $i < count($auRec); $i++) {
            $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $sts = '<a href=\"foc_master.php?statusId=' . $auRec[$i]->tag_id . '&value=' . $sts . '\">' . $sts . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->tag_id . '",';
            $json .= '"cell":["' . ucwords(addslashes($auRec[$i]->tag_description)) . '"';
            $json .= ',"' . $sts . '"]';
            $json .= "}";
            $rc = true;

        }

        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);

        exit;
    }




// Todo start : Domar : 11-oct-2024 : FOC master

     function addFoc()
     {
         $data['tag_type'] = mysql_escape_string(trim($_POST['tag_type']));
         $data['tag_description'] = mysql_escape_string(trim($_POST['tag_description']));
         $data['account_id'] = mysql_escape_string($_POST['account_id']);
         $data['last_update_date'] = date('Y-m-d');
         $data['last_update_status'] = 'New';
         $data['status'] = 'A';
         $id = $this->_dbInsert($data, 'table_tags');
         return $id;
     }


 // Todo start : Domar : 11-oct-2024 : FOC master

     function updateFoc($id)
     {
         $data['tag_type'] = mysql_escape_string(trim($_POST['tag_type']));
         $data['tag_description'] = mysql_escape_string(trim($_POST['tag_description']));
         $data['last_update_date'] = date('Y-m-d');
         $data['last_update_status'] = 'Update';
         $data['status'] = 'A';
         $id = $this->_dbUpdate($data, 'table_tags', " tag_id=" . $id);
         return $id;
     }

    //  function getApprovars(){
    //      $auRec = $this->_getSelectList('table_approvar_level', "*", '', " ");

    //      return (is_array($auRec)) ? $auRec[0] : '';
    //  }


// Todo start : Domar : 23-oct-2024 : Sub category master

    function showSubCategory()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];
        if (!$sortname) $sortname = 'category_name';
        if (!$sortorder) $sortorder = 'asc';
        $sort = " ORDER BY $sortname $sortorder";
        if (!$page) $page = 1;
        if (!$rp) $rp = 50;
        $start = (($page - 1) * $rp);
        $limit = "LIMIT $start, $rp";
        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        $_objAdmin = new Admin();
     
        $statusCondi = '';
        if (isset($_SESSION['MasCat']) && $_SESSION['MasCat'] != 'all' && $_SESSION['MasCat'] != '') {
            $statusCondi = " AND cs.status ='A'";
        }
   
        $where = "  $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";
        $auRec = $this->_getSelectList('table_subcategory as cs INNER JOIN table_category as c on c.category_id = cs.category_id', "cs.*,c.category_name", $rp, $where, '');


        // $auSub = $this->_getSelectList('table_category as c INNER JOIN table_subcategory as cs ON cs.category_id = c.category_id', 'c.category_name','','');

        // print_r($auRec);exit;
        $auRecCount = $this->_getSelectList('table_subcategory', 'count(*) as total', '', $where);
        $total = $auRecCount[0]->total;
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;
        for ($i = 0; $i < count($auRec); $i++) {

            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
            $status = '<a href=\"subcategory.php?stid=' . $auRec[$i]->subcategory_id . '&value=' . $status . '\">' . $status . '</a>';
            if ($rc) $json .= ",";
            $json .= "\n{";
            $json .= '"id":"' . $auRec[$i]->subcategory_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->category_name) . '","' . addslashes($auRec[$i]->subcategory_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->subcategory_code) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }



// Todo start : Domar : 23-oct-2024 : Sub category master

    function addSubCategory()
    {
        $data['subcategory_name'] = mysql_escape_string(trim($_POST['category_name']));
        $data['subcategory_code'] = mysql_escape_string(trim($_POST['category_code']));
        $data['account_id'] = mysql_escape_string($_POST['account_id']);
        // $data['parent_id'] = mysql_escape_string($_POST['parent_id']);
        // $data['type'] = "I";
        $data['created_date'] = date('Y-m-d');
        $data['last_update_date'] = date('Y-m-d');
        // $data['last_update_status'] = 'New';
        $data['status'] = 'A';
        $data['category_id'] = mysql_escape_string($_POST['category_id']);

        // print_r($data);exit;
        $id = $this->_dbInsert($data, 'table_subcategory');
        return $id;
    }


// Todo start : Domar : 23-oct-2024 : Sub category master


    function updateSubCategory($id)
    {
        $data['subcategory_name'] = mysql_escape_string(trim($_POST['category_name']));
        $data['subcategory_code'] = mysql_escape_string(trim($_POST['category_code']));
        $data['created_date'] = date('Y-m-d');
        $data['last_update_date'] = date('Y-m-d');
        $data['status'] = 'A';
        $data['category_id'] = mysql_escape_string($_POST['category_id']);
        $id = $this->_dbUpdate($data, 'table_subcategory', "subcategory_id=" . $id);
        return $id;
    }



    //Todo start: Domar : 25-nov-2024 : Product Display Position Master

 function showProductDisplayPosition()
 {
     $page = $_REQUEST['page'];
     $rp = $_REQUEST['rp'];
     $sortname = $_REQUEST['sortname'];
     $sortorder = $_REQUEST['sortorder'];
     if (!$sortname) $sortname = 'display_position_name';
     if (!$sortorder) $sortorder = 'asc';
     $sort = " ORDER BY $sortname $sortorder";
     if (!$page) $page = 1;
     if (!$rp) $rp = 50;
     //Todo Start : add status filter
     $statusCondi = '';
     if (isset($_SESSION['MasEnqSource']) && $_SESSION['MasEnqSource'] != 'all' && $_SESSION['MasEnqSource'] != '') {
         $statusCondi = " status ='" . $_SESSION['MasEnqSource'] . "'";
     }
     //Todo End : add status filter
     $where = " $statusCondi ";
     $query = $_REQUEST['query'];
     $qtype = $_REQUEST['qtype'];
     if ($query) $where .= " AND $qtype LIKE '%$query%' ";
     $auRec = $this->_getSelectList('table_product_display_position_master', "*", $rp, $where . $sort, '');
     $auRecCount = $this->_getSelectList('table_product_display_position_master', 'count(*) as total', '', $where);
     $total = $auRecCount[0]->total;
     header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
     header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
     header("Cache-Control: no-cache, must-revalidate");
     header("Pragma: no-cache");
     header("Content-type: text/x-json");
     $json = "";
     $json .= "{\n";
     $json .= '"page": "' . $page . '",';
     $json .= "\n";
     $json .= '"total":"' . $total . '",';
     $json .= "\n";
     $json .= '"rows": [';
     $rc = false;
     for ($i = 0; $i < count($auRec); $i++) {
         $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
         $status = '<a href=\"product_display_position_master.php?stid=' . $auRec[$i]->product_display_id . '&value=' . $status . '\">' . $status . '</a>';


         $checked = '';
         if ($auRec[$i]->is_default) {
             $checked = 'checked';
         }

         $isDefaultField = '<input type="radio" name="is_default" class="is_default" value="' . $auRec[$i]->product_display_id . '" ' . $checked . ' />';

         if ($rc) $json .= ",";
         $json .= "\n{";
         $json .= '"id":"' . $auRec[$i]->product_display_id . '",';
         $json .= '"cell":["' . addslashes($auRec[$i]->display_position_name) . '"';
         $json .= ',"' . addslashes($isDefaultField) . '"';
         $json .= ',"' . $status . '"]';
         $json .= "}";
         $rc = true;
     }
     $json .= "]\n";
     $json .= "}";
     echo str_replace("\'", '', $json);
     exit;
 }

 function addProductDisplayPosition()
 {
     $data['display_position_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['display_position_name'])));
     $data['last_update_date'] = date('Y-m-d');
     $data['last_update_status'] = 'New';
     $data['status'] = 'A';
     $data['account_id'] = $_SESSION['accountId'];
     $id = $this->_dbInsert($data, 'table_product_display_position_master');
     return $id;
 }

 function updateProductDisplayPosition($id)
 {
     $data['display_position_name'] = mysql_escape_string($this->validateForm('/[^A-Za-z0-9" "]/', trim($_POST['display_position_name'])));
     $data['last_update_date'] = date('Y-m-d');
     $data['last_update_status'] = 'Update';
     $data['account_id'] = $_SESSION['accountId'];
     $id = $this->_dbUpdate2($data, 'table_product_display_position_master', " product_display_id=" . $id);
     return $id;
 }
//Todo End: Domar : 25-nov-2024 : Product Display Position Master

// Todo Start : 26-Dec-2024 : Domar : PG Attendance & Sales Report


function showPGAttendenceAndSalesReport($salesman)
{
    $page = $_REQUEST['page'];
    $rp = $_REQUEST['rp'];
    $sortname = $_REQUEST['sortname'];
    $sortorder = $_REQUEST['sortorder'];
    if (!$sortname) $sortname = 'pg.id';
    if (!$sortorder) $sortorder = 'DESC';
    $sort = " ORDER BY $sortname $sortorder";
    if (!$page) $page = 1;
    if (!$rp) $rp = 50;
    $start = (($page - 1) * $rp);
    $limit = "LIMIT $start, $rp";
    $query = $_REQUEST['query'];
    $qtype = $_REQUEST['qtype'];
    if ($_SESSION['FromOrderList'] != '') {
        $fromdate = "'" . date('Y-m-d', strtotime($_SESSION['FromOrderList'])) . "'";
    } else {
        $fromdate = "'" . date('Y-m-d') . "'";
    }
    if ($_SESSION['ToOrderList'] != '') {
        $todate = "'" . date('Y-m-d', strtotime($_SESSION['ToOrderList'])) . "'";
    } else {
        $todate = "'" . date('Y-m-d') . "'";
    }

   

    if ($_SESSION['salemanId'] != '') {
        $salesman = " AND s.salesman_id = '" . $_SESSION['salemanId'] . "'";
    }
    if ($_SESSION['transId'] != '') {
        $trans = " AND am.id= '" . $_SESSION['transId'] . "'";
    }
    $where = " DATE(pg.created_on) >=" . $fromdate . " AND DATE(pg.created_on) <=" . $todate . " $salesman ";

    // echo $where;

    if ($query) $where .= " AND $qtype LIKE '%$query%' ";
    $auRec = $this->_getSelectList('table_pg_sales_attendance as pg LEFT JOIN table_salesman as s ON s.salesman_id = pg.salesman_id LEFT JOIN table_retailer as r ON r.retailer_id = pg.retailer_id LEFT JOIN state as st on st.state_id = r.state LEFT JOIN city as ct ON ct.city_id = r.city LEFT JOIN table_location as l ON l.location_id = r.location_id 
    LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id  
    ', "pg.*, s.employee_code, s.salesman_name , r.retailer_name, r.retailer_code, st.state_name, ct.city_name , l.location_name , S2.salesman_name as desc1", $rp, $where ." Group by pg.id". $sort, '');
    /********** Add Accounts attributes ****************/
    // echo "<pre>";print_r($auRec);die;
    $auRecCount = $this->_getSelectList('table_pg_sales_attendance as pg LEFT JOIN table_salesman as s ON s.salesman_id = pg.salesman_id LEFT JOIN table_retailer as r ON r.retailer_id = pg.retailer_id LEFT JOIN state as st on st.state_id = r.state LEFT JOIN city as ct ON ct.city_id = r.city LEFT JOIN table_location as l ON l.location_id = r.location_id  LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id  ', 'count(*) as total', '', $where);
    //  echo "<pre/>";print_r($auRec);die;
    $total = $auRecCount[0]->total;
    // echo $total;die;
    header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
    header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
    header("Cache-Control: no-cache, must-revalidate");
    header("Pragma: no-cache");
    header("Content-type: text/x-json");
    $json = "";
    $json .= "{\n";
    $json .= '"page": "' . $page . '",';
    $json .= "\n";
    $json .= '"total":"' . $total . '",';
    $json .= "\n";
    $json .= '"rows": [';
    $rc = false;
    $remove = array("\n", "\r\n", "\r");
    if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
        $targetBlank = '';
    } else {
        $targetBlank = 'target=\"_blank\"';
    }
  
    for ($i = 0; $i < count($auRec); $i++) {
        

        $viewDetails = '<a href=\"pg_attendance_and_sales_report_details_list.php?pg_id=' . base64_encode($auRec[$i]->id) . '\" ' . $targetBlank . '>View Details</a>';
        if ($rc) $json .= ",";
        $json .= "\n{";
        $json .= '"id":"' . $auRec[$i]->id . '",';
        $json .= '"cell":["' . addslashes(date("d-M-Y", strtotime($auRec[$i]->created_on))) . '"';
        $json .= ',"' . addslashes(date("G:i", strtotime($auRec[$i]->created_on))) . '"';
        $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
        $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
        $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
        $json .= ',"' . $viewDetails . '"]';
        $json .= "}";
        $rc = true;
    }
    $json .= "]\n";
    $json .= "}";
    echo str_replace("\'", '', $json);
    exit;
}

// Todo start : Domar : 18-oct-2024 : POSM master 

function showPosm()
{
    // echo 'test';exit;
    $page = $_REQUEST['page'];
    $rp = $_REQUEST['rp'];
    $sortname = $_REQUEST['sortname'];
    $sortorder = $_REQUEST['sortorder'];
    if (!$sortname) $sortname = 'tag_type';
    if (!$sortorder) $sortorder = 'desc';
    $sort = " ORDER BY $sortname $sortorder";
    if (!$page) $page = 1;
    if (!$rp) $rp = 50;
    $start = (($page - 1) * $rp);
    $limit = "LIMIT $start, $rp";
    $query = $_REQUEST['query'];
    $qtype = $_REQUEST['qtype'];

    $statusCondi = '';


    if (isset($_SESSION['MasAtte']) && $_SESSION['MasAtte'] != 'all' && $_SESSION['MasAtte'] != '') {
        $statusCondi = " AND status ='" . $_SESSION['MasAtte'] . "'";
    }
    
    $where = " $statusCondi";

    if ($query) $where .= " AND $qtype LIKE '%$query%' ";
    $auRec = $this->_getSelectList('table_posm_master', "*", $rp, $where . $sort, '');
    //print_r($auRec);
    $auRecCount = $this->_getSelectList('table_posm_master', 'count(*) as total', '', $where);

    $total = $auRecCount[0]->total;

    header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
    header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
    header("Cache-Control: no-cache, must-revalidate");
    header("Pragma: no-cache");
    header("Content-type: text/x-json");

    $json = "";
    $json .= "{\n";
    $json .= '"page": "' . $page . '",';
    $json .= "\n";
    $json .= '"total":"' . $total . '",';
    $json .= "\n";
    $json .= '"rows": [';
    $rc = false;

    for ($i = 0; $i < count($auRec); $i++) {
        $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
        $sts = '<a href=\"posm_master.php?statusId=' . $auRec[$i]->posm_id . '&value=' . $sts . '\">' . $sts . '</a>';
        if ($rc) $json .= ",";
        $json .= "\n{";
        $json .= '"id":"' . $auRec[$i]->posm_id . '",';
        $json .= '"cell":["' . ucwords(strtolower($auRec[$i]->posm_name)) . '"';
        $json .= ',"' . $sts . '"]';
        $json .= "}";
        $rc = true;
    
    }

    $json .= "]\n";
    $json .= "}";
    echo str_replace("\'", '', $json);

    exit;
}



// Todo start : Domar : 18-oct-2024 : POSM master 

function addPosm()
 {
     $data['posm_name'] = mysql_escape_string(trim($_POST['posm_name']));
     $data['account_id'] = mysql_escape_string($_POST['account_id']);
     $data['created_date'] = date('Y-m-d');
     $data['last_update_date'] = date('Y-m-d');
     $data['last_update_status'] = 'New';
     $data['status'] = 'A';
     $id = $this->_dbInsert($data, 'table_posm_master');
     return $id;
 }


// Todo start : Domar : 18-oct-2024 : POSM master 

 function updatePosm($id)
 {
     $data['posm_name'] = mysql_escape_string(trim($_POST['posm_name']));
     $data['last_update_date'] = date('Y-m-d');
     $data['last_update_status'] = 'Update';
     $data['status'] = 'A';
     $id = $this->_dbUpdate($data, 'table_posm_master', " posm_id=" . $id);
     return $id;
 }





// Todo start : Domar : 18-oct-2024 : Campaign master 

function showCampaignMaster()
{
    // echo 'test';exit;
    $page = $_REQUEST['page'];
    $rp = $_REQUEST['rp'];
    $sortname = $_REQUEST['sortname'];
    $sortorder = $_REQUEST['sortorder'];
    if (!$sortname) $sortname = 'tag_type';
    if (!$sortorder) $sortorder = 'desc';
    $sort = " ORDER BY $sortname $sortorder";
    if (!$page) $page = 1;
    if (!$rp) $rp = 50;
    $start = (($page - 1) * $rp);
    $limit = "LIMIT $start, $rp";
    $query = $_REQUEST['query'];
    $qtype = $_REQUEST['qtype'];

    $statusCondi = '';


    if (isset($_SESSION['MasAtte']) && $_SESSION['MasAtte'] != 'all' && $_SESSION['MasAtte'] != '') {
        $statusCondi = " AND status ='" . $_SESSION['MasAtte'] . "'";
    }
    
    $where = " $statusCondi";

    if ($query) $where .= " AND $qtype LIKE '%$query%' ";
    $auRec = $this->_getSelectList('table_campaign_master', "*", $rp, $where . $sort, '');
    //print_r($auRec);
    $auRecCount = $this->_getSelectList('table_campaign_master', 'count(*) as total', '', $where);

    $total = $auRecCount[0]->total;

    header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
    header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
    header("Cache-Control: no-cache, must-revalidate");
    header("Pragma: no-cache");
    header("Content-type: text/x-json");

    $json = "";
    $json .= "{\n";
    $json .= '"page": "' . $page . '",';
    $json .= "\n";
    $json .= '"total":"' . $total . '",';
    $json .= "\n";
    $json .= '"rows": [';
    $rc = false;

    for ($i = 0; $i < count($auRec); $i++) {
        $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
        $sts = '<a href=\"campaign_master.php?statusId=' . $auRec[$i]->campaign_id . '&value=' . $sts . '\">' . $sts . '</a>';
        if ($rc) $json .= ",";
        $json .= "\n{";
        $json .= '"id":"' . $auRec[$i]->campaign_id . '",';
        $json .= '"cell":["' . ucwords(strtolower($auRec[$i]->campaign_name)) . '"';
        $json .= ',"' . $sts . '"]';
        $json .= "}";
        $rc = true;
    
    }

    $json .= "]\n";
    $json .= "}";
    echo str_replace("\'", '', $json);

    exit;
}





// Todo start : Domar : 18-oct-2024 : Campaign master 

function addCampaignMaster()
{
    $data['campaign_name'] = mysql_escape_string(trim($_POST['campaign_name']));
    $data['account_id'] = mysql_escape_string($_POST['account_id']);
    $data['created_date'] = date('Y-m-d');
    $data['last_update_date'] = date('Y-m-d');
    $data['last_update_status'] = 'New';
    $data['status'] = 'A';
    $id = $this->_dbInsert($data, 'table_campaign_master');
    return $id;
}


// Todo start : Domar : 18-oct-2024 : Campaign master 

function updateCampaignMaster($id)
{
    $data['campaign_name'] = mysql_escape_string(trim($_POST['campaign_name']));
    $data['last_update_date'] = date('Y-m-d');
    $data['last_update_status'] = 'Update';
    $data['status'] = 'A';
    $id = $this->_dbUpdate($data, 'table_campaign_master', " campaign_id=" . $id);
    return $id;
}






// Todo start : Domar : 18-oct-2024 : Placement master 

function showPlacement()
{
    // echo 'test';exit;
    $page = $_REQUEST['page'];
    $rp = $_REQUEST['rp'];
    $sortname = $_REQUEST['sortname'];
    $sortorder = $_REQUEST['sortorder'];
    if (!$sortname) $sortname = 'tag_type';
    if (!$sortorder) $sortorder = 'desc';
    $sort = " ORDER BY $sortname $sortorder";
    if (!$page) $page = 1;
    if (!$rp) $rp = 50;
    $start = (($page - 1) * $rp);
    $limit = "LIMIT $start, $rp";
    $query = $_REQUEST['query'];
    $qtype = $_REQUEST['qtype'];

    $statusCondi = '';


    if (isset($_SESSION['MasAtte']) && $_SESSION['MasAtte'] != 'all' && $_SESSION['MasAtte'] != '') {
        $statusCondi = " AND status ='" . $_SESSION['MasAtte'] . "'";
    }
    
    $where = " $statusCondi";

    if ($query) $where .= " AND $qtype LIKE '%$query%' ";
    $auRec = $this->_getSelectList('table_placement_master', "*", $rp, $where . $sort, '');
    // print_r($auRec);
    $auRecCount = $this->_getSelectList('table_placement_master', 'count(*) as total', '', $where);

    $total = $auRecCount[0]->total;

    header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
    header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
    header("Cache-Control: no-cache, must-revalidate");
    header("Pragma: no-cache");
    header("Content-type: text/x-json");

    $json = "";
    $json .= "{\n";
    $json .= '"page": "' . $page . '",';
    $json .= "\n";
    $json .= '"total":"' . $total . '",';
    $json .= "\n";
    $json .= '"rows": [';
    $rc = false;

    for ($i = 0; $i < count($auRec); $i++) {
        $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
        $sts = '<a href=\"placement_master.php?statusId=' . $auRec[$i]->placement_id . '&value=' . $sts . '\">' . $sts . '</a>';
        if ($rc) $json .= ",";
        $json .= "\n{";
        $json .= '"id":"' . $auRec[$i]->placement_id . '",';
        $json .= '"cell":["' . ucwords(strtolower($auRec[$i]->placement_name)) . '"';
        $json .= ',"' . $sts . '"]';
        $json .= "}";
        $rc = true;
    
    }

    $json .= "]\n";
    $json .= "}";
    echo str_replace("\'", '', $json);

    exit;
}





// Todo start : Domar : 18-oct-2024 : Placement master 

function addPlacement()
{
    $data['placement_name'] = mysql_escape_string(trim($_POST['placement_name']));
    $data['account_id'] = mysql_escape_string($_POST['account_id']);
    $data['created_date'] = date('Y-m-d');
    $data['last_update_date'] = date('Y-m-d');
    $data['last_update_status'] = 'New';
    $data['status'] = 'A';
    $id = $this->_dbInsert($data, 'table_placement_master');
    return $id;
}



// Todo start : Domar : 18-oct-2024 : Placement master 

function updatePlacement($id)
{
    $data['placement_name'] = mysql_escape_string(trim($_POST['placement_name']));
    $data['last_update_date'] = date('Y-m-d');
    $data['last_update_status'] = 'Update';
    $data['status'] = 'A';
    $id = $this->_dbUpdate($data, 'table_placement_master', " placement_id=" . $id);
    return $id;
}

function showStateAndItemRankingMapping()
{
    $page = $_REQUEST['page'];
     $rp = $_REQUEST['rp'];
     $sortname = $_REQUEST['sortname'];
     $sortorder = $_REQUEST['sortorder'];
     if (!$sortname) $sortname = 'i.item_code';
     if (!$sortorder) $sortorder = 'asc';
     $sort = " ORDER BY $sortname $sortorder";
     if (!$page) $page = 1;
     if (!$rp) $rp = 50;
     $start = (($page - 1) * $rp);
     $limit = "LIMIT $start, $rp";
     $query = $_REQUEST['query'];
     $qtype = $_REQUEST['qtype'];

    //  echo $query;die;
     //Todo Start : add status filter
     $statusCondi = '';
     if (isset($_SESSION['MasAtte']) && $_SESSION['MasAtte'] != 'all' && $_SESSION['MasAtte'] != '') {
        $statusCondi = "sair.status ='" . $_SESSION['MasAtte'] . "'";
        $where = " $statusCondi";
    }
    //Todo End : sudhanshu 10 june 2024 : add status filter
    
   
    if ($query) $where .= " AND $qtype LIKE '%$query%' ";

    $auRec = $this->_getSelectList(' table_state_and_item_rank_mapping as sair LEFT JOIN table_item as i ON i.item_id = sair.item_id LEFT JOIN state as s ON s.state_id = sair.state_id LEFT JOIN table_item_ranking as ir ON ir.item_rank_id =  sair.item_rank_id ', " i.item_name, i.item_code, s.state_name, s.state_code, ir.item_rank_name, sair.state_and_item_id, sair.status ", $rp, $where , '');

    

    $auRecCount = $this->_getSelectList('table_state_and_item_rank_mapping as sair LEFT JOIN table_item as i ON i.item_id = sair.item_id LEFT JOIN state as s ON s.state_id = sair.state_id LEFT JOIN table_item_ranking as ir ON ir.item_rank_id =  sair.item_rank_id', 'count(sair.state_and_item_id) as total', '', $where);
    $total = $auRecCount[0]->total;
    header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
    header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
    header("Cache-Control: no-cache, must-revalidate");
    header("Pragma: no-cache");
    header("Content-type: text/x-json");
    $json = "";
    $json .= "{\n";
    $json .= '"page": "' . $page . '",';
    $json .= "\n";
    $json .= '"total":"' . $total . '",';
    $json .= "\n";
    $json .= '"rows": [';
    $rc = false;
    for ($i = 0; $i < count($auRec); $i++) {
        $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
        $status = '<a href=\"state_and_item_ranking_mapping.php?stid=' . $auRec[$i]->state_and_item_id . '&value=' . $status . '\">' . $status . '</a>';
        $lastUpdate = date('d M Y', strtotime($auRec[$i]->last_update_date));
        if ($rc) $json .= ",";
        $json .= "\n{";
        $json .= '"id":"' . $auRec[$i]->state_and_item_id . '",';
        $json .= '"cell":["' . addslashes($auRec[$i]->item_code) . '"';
        $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->state_code) . '"';
        $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->item_rank_name) . '"';
        $json .= ',"' . $status . '"]';
        $json .= "}";
        $rc = true;
    }
    $json .= "]\n";
    $json .= "}";
    echo str_replace("\'", '', $json);
    exit;
}

function showItemRanking()
 {
     $page = $_REQUEST['page'];
     $rp = $_REQUEST['rp'];
     $sortname = $_REQUEST['sortname'];
     $sortorder = $_REQUEST['sortorder'];
     if (!$sortname) $sortname = 'brand_name';
     if (!$sortorder) $sortorder = 'asc';
     $sort = " ORDER BY $sortname $sortorder";
     if (!$page) $page = 1;
     if (!$rp) $rp = 50;
     $start = (($page - 1) * $rp);
     $limit = "LIMIT $start, $rp";
     $query = $_REQUEST['query'];
     $qtype = $_REQUEST['qtype'];
     $_objAdmin = new Admin();
     //Todo Start : sudhanshu 12 june 2024 : add status filter
     $statusCondi = '';
     if (isset($_SESSION['MasAtte']) && $_SESSION['MasAtte'] != 'all' && $_SESSION['MasAtte'] != '') {
         $statusCondi = " status ='" . $_SESSION['MasAtte'] . "'";
         $where = " $statusCondi ";
     }
     //Todo End : sudhanshu 12 june 2024 : add status filter
     if ($query) $where .= " AND $qtype LIKE '%$query%' ";
     $auRec = $this->_getSelectList('table_item_ranking', "*", $rp, $where . $sort, '');
     $auRecCount = $this->_getSelectList('table_item_ranking', 'count(*) as total', '', $where);
     $total = $auRecCount[0]->total;
     header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
     header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
     header("Cache-Control: no-cache, must-revalidate");
     header("Pragma: no-cache");
     header("Content-type: text/x-json");
     $json = "";
     $json .= "{\n";
     $json .= '"page": "' . $page . '",';
     $json .= "\n";
     $json .= '"total":"' . $total . '",';
     $json .= "\n";
     $json .= '"rows": [';
     $rc = false;
     for ($i = 0; $i < count($auRec); $i++) {
         $sts = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";
         $sts = '<a href=\"item_ranking_master.php?statusId=' . $auRec[$i]->item_rank_id . '&order='. $auRec[$i]->item_rank_order . '&value=' . $sts . '\">' . $sts . '</a>';
         if ($rc) $json .= ",";
         $json .= "\n{";
         $json .= '"id":"' . $auRec[$i]->item_rank_id . '",';
         $json .= '"cell":["' . addslashes($auRec[$i]->item_rank_name) . '","' . addslashes($auRec[$i]->item_rank_order) . '"';
         $json .= ',"' . $sts . '"]';
         $json .= "}";
         $rc = true;
     }
     $json .= "]\n";
     $json .= "}";
     echo str_replace("\'", '', $json);
     exit;
 }


// Update Item Ranking Master : Domar : 21-nov-2024

function updateItemRanking($id)
{
    $data['item_rank_name'] = mysql_escape_string(trim($_POST['item_rank_name']));
    $data['item_rank_order'] = mysql_escape_string(trim($_POST['item_rank_order']));
    $data['status'] = 'A';

    $auRec = $this->_getSelectList('table_item_ranking', "*",'','','');
    for ($i = 0; $i < count($auRec); $i++) {
       
        if($auRec[$i]->item_rank_order ==  $data['item_rank_order'] && $auRec[$i]->status == $data['status']){

            $_SESSION['msg']='1'; 
            return 'F';
        }     
    } 
    $id = $this->_dbUpdate($data, 'table_item_ranking', " item_rank_id=" . $id);
    return $id;  
  
}



// Todo Start : 28-jan-2025 : Domar : Product Display Report

function showProductDisplayReport($salesman)
{
    $page = $_REQUEST['page'];
    $rp = $_REQUEST['rp'];
    $sortname = $_REQUEST['sortname'];
    $sortorder = $_REQUEST['sortorder'];
    if (!$sortname) $sortname = 'pdr.display_id';
    if (!$sortorder) $sortorder = 'DESC';
    $sort = " ORDER BY $sortname $sortorder";
    if (!$page) $page = 1;
    if (!$rp) $rp = 50;
    $start = (($page - 1) * $rp);
    $limit = "LIMIT $start, $rp";
    $query = $_REQUEST['query'];
    $qtype = $_REQUEST['qtype'];
   
   
    if ($_SESSION['SaleId'] != '') {
        $salesman = " AND s.salesman_id = '" . $_SESSION['SaleId'] . "";
    }
   

    $where = "DATE(pdr.app_date) BETWEEN'" .
                        date('Y-m-d', strtotime($_SESSION['FromAttList'])) . "' AND '" . date('Y-m-d', strtotime($_SESSION['ToAttList'])) . $salesman;

    // echo $where;die;

    if ($query) $where .= " AND $qtype LIKE '%$query%' ";

    $auRec = $this->_getSelectList('product_display_rank as pdr LEFT join table_salesman as s on s.salesman_id = pdr.salesman_id LEFT JOIN table_retailer as r ON r.retailer_id = pdr.retailer_id LEFT JOIN state as st on st.state_id = r.state LEFT JOIN city as ct ON ct.city_id = r.city LEFT JOIN table_location as l ON l.location_id = r.location_id LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id ', "pdr.* , s.salesman_name, s.employee_code, r.retailer_name, r.retailer_code , st.state_name, ct.city_name, l.location_name , pdr.app_time as product_start, pdr.display_id , pdr.app_date ,S2.salesman_name as desc1", $rp, $where . " Group by pdr.display_id " . $sort, '');

    /********** Add Accounts attributes ****************/
    // echo "<pre>";print_r($auRec);die;
    $auRecCount = $this->_getSelectList('product_display_rank as pdr LEFT JOIN product_display_rank_details as pdrd on pdrd.display_id = pdr.display_id LEFT join table_salesman as s on s.salesman_id = pdr.salesman_id LEFT JOIN table_retailer as r ON r.retailer_id = pdr.retailer_id LEFT JOIN state as st on st.state_id = r.state LEFT JOIN city as ct ON ct.city_id = r.city LEFT JOIN table_location as l ON l.location_id = r.location_id LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id', 'count(*) as total', '', $where);
    //  echo "<pre/>";print_r($auRec);die;
    $total = $auRecCount[0]->total;
    // echo $total;die;
    header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
    header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
    header("Cache-Control: no-cache, must-revalidate");
    header("Pragma: no-cache");
    header("Content-type: text/x-json");
    $json = "";
    $json .= "{\n";
    $json .= '"page": "' . $page . '",';
    $json .= "\n";
    $json .= '"total":"' . $total . '",';
    $json .= "\n";
    $json .= '"rows": [';
    $rc = false;
    $remove = array("\n", "\r\n", "\r");
    if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
        $targetBlank = '';
    } else {
        $targetBlank = 'target=\"_blank\"';
    }
  
    for ($i = 0; $i < count($auRec); $i++) {
        

        $viewDetails = '<a href=\"product_display_report_details_list.php?id=' . base64_encode($auRec[$i]->display_id) . '\" ' . $targetBlank . '>View Details</a>';

        $viewPhoto = '<a href=\"product_display_position_multiple_image.php?productDisplayReportId=' . base64_encode($auRec[$i]->display_id) . '\" ' . $targetBlank . '>View Photo</a>';


        if ($rc) $json .= ",";
        $json .= "\n{";
        $json .= '"id":"' . $auRec[$i]->display_id . '",';
        $json .= '"cell":["' . addslashes(date("d-M-Y", strtotime($auRec[$i]->app_date))) . '"';
        $json .= ',"' . addslashes(date("G:i", strtotime($auRec[$i]->app_time))) . '"';
        $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
        $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
        $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
        $json .= ',"' . $viewPhoto . '"';
        $json .= ',"' . $viewDetails . '"]';
        $json .= "}";
        $rc = true;
    }
    $json .= "]\n";
    $json .= "}";
    echo str_replace("\'", '', $json);
    exit;
}





function showGwpReports($salesman)
{
    $page = $_REQUEST['page'];
    $rp = $_REQUEST['rp'];
    $sortname = $_REQUEST['sortname'];
    $sortorder = $_REQUEST['sortorder'];
    if (!$sortname) $sortname = 'gt.gwp_transaction_id';
    if (!$sortorder) $sortorder = 'DESC';
    $sort = " ORDER BY $sortname $sortorder";
    if (!$page) $page = 1;
    if (!$rp) $rp = 50;
    $start = (($page - 1) * $rp);
    $limit = "LIMIT $start, $rp";
    $query = $_REQUEST['query'];
    $qtype = $_REQUEST['qtype'];
   
   
    if ($_SESSION['SaleId'] != '') {
        $salesman = " AND s.salesman_id = '" . $_SESSION['SaleId'] . "";
    }
   

    $where = "DATE(gt.transaction_date) BETWEEN'" .
                        date('Y-m-d', strtotime($_SESSION['FromAttList'])) . "' AND '" . date('Y-m-d', strtotime($_SESSION['ToAttList'])) . $salesman;

    // echo $where;die;

    if ($query) $where .= " AND $qtype LIKE '%$query%' ";

    $auRec = $this->_getSelectList('table_gwp_transactions as gt
                LEFT JOIN table_gwp_transactions_details as gtd ON gtd.gwp_transaction_id = gt.gwp_transaction_id 
                LEFT JOIN table_salesman AS s ON s.salesman_id = gt.salesman_id 
                LEFT JOIN table_retailer as r ON r.retailer_id = gt.retailer_id 
                LEFT JOIN table_brands as b ON b.brand_id = gtd.brand_id 
                LEFT JOIN table_asset_master as a ON a.asset_id = gtd.asset_id 
                LEFT JOIN state as st on st.state_id = r.state
                LEFT JOIN city as c ON c.city_id = r.city 
                LEFT JOIN table_location as l ON l.location_id = r.location_id LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id',
                 "gt.*, s.employee_code, s.salesman_name, r.retailer_code, r.retailer_name, b.brand_name, gtd.gwp_quantity, a.asset_name,b.brand_id, st.state_name, c.city_name, l.location_name, gtd.image_url as in_image_url, gtd.gwp_transaction_id ,S2.salesman_name as desc1 ", $rp, $where . " GROUP BY gt.gwp_transaction_id " . $sort, '');

    /********** Add Accounts attributes ****************/
    // echo "<pre>";print_r($auRec);die;
    $auRecCount = $this->_getSelectList('table_gwp_transactions as gt
                LEFT JOIN table_gwp_transactions_details as gtd ON gtd.gwp_transaction_id = gt.gwp_transaction_id 
                LEFT JOIN table_salesman AS s ON s.salesman_id = gt.salesman_id 
                LEFT JOIN table_retailer as r ON r.retailer_id = gt.retailer_id 
                LEFT JOIN table_brands as b ON b.brand_id = gtd.brand_id 
                LEFT JOIN table_asset_master as a ON a.asset_id = gtd.asset_id 
                LEFT JOIN state as st on st.state_id = r.state
                LEFT JOIN city as c ON c.city_id = r.city 
                LEFT JOIN table_location as l ON l.location_id = r.location_id LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id', 'count(*) as total', '', $where );
    //  echo "<pre/>";print_r($auRec);die;
    $total = $auRecCount[0]->total;
    // echo $total;die;
    header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
    header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
    header("Cache-Control: no-cache, must-revalidate");
    header("Pragma: no-cache");
    header("Content-type: text/x-json");
    $json = "";
    $json .= "{\n";
    $json .= '"page": "' . $page . '",';
    $json .= "\n";
    $json .= '"total":"' . $total . '",';
    $json .= "\n";
    $json .= '"rows": [';
    $rc = false;
    $remove = array("\n", "\r\n", "\r");
    if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
        $targetBlank = '';
    } else {
        $targetBlank = 'target=\"_blank\"';
    }
  
    for ($i = 0; $i < count($auRec); $i++) {
        

        // $viewDetails = '<a href=\"product_display_report_details_list.php?id=' . base64_encode($auRec[$i]->display_id) . '\" ' . $targetBlank . '>View Details</a>';

        $viewPhoto = '<a href=\"gwp_report_multiple_image.php?br='.$auRec[$i]->brand_id.'&gwpId=' . base64_encode($auRec[$i]->gwp_transaction_id) . '\" ' . $targetBlank . '>View Photo</a>';


        if ($rc) $json .= ",";
        $json .= "\n{";
        $json .= '"id":"' . $auRec[$i]->gwp_transaction_id . '",';
        $json .= '"cell":["' . addslashes(date('d-M-Y', strtotime($auRec[$i]->transaction_date))) . '"';
        $json .= ',"' . addslashes(date('G:i', strtotime($auRec[$i]->transaction_time))) . '"';
        $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
        $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
        $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';

        $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->gwp_quantity) . '"';
        $json .= ',"' . addslashes($auRec[$i]->asset_name) . '"';

        $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
        $json .= ',"' . $viewPhoto . '"]';
        $json .= "}";
        $rc = true;
    }
    $json .= "]\n";
    $json .= "}";
    echo str_replace("\'", '', $json);
    exit;
}





function showPosmConsumerReport($salesman)
{
    $page = $_REQUEST['page'];
    $rp = $_REQUEST['rp'];
    $sortname = $_REQUEST['sortname'];
    $sortorder = $_REQUEST['sortorder'];
    if (!$sortname) $sortname = 'pct.pcr_transaction_id';
    if (!$sortorder) $sortorder = 'DESC';
    $sort = " ORDER BY $sortname $sortorder";
    if (!$page) $page = 1;
    if (!$rp) $rp = 50;
    $start = (($page - 1) * $rp);
    $limit = "LIMIT $start, $rp";
    $query = $_REQUEST['query'];
    $qtype = $_REQUEST['qtype'];
   
   
    if ($_SESSION['SaleId'] != '') {
        $salesman = " AND s.salesman_id = '" . $_SESSION['SaleId'] . "";
    }
   

    $where = "DATE(pct.transaction_date) BETWEEN'" .
                        date('Y-m-d', strtotime($_SESSION['FromAttList'])) . "' AND '" . date('Y-m-d', strtotime($_SESSION['ToAttList'])) . $salesman;

    // echo $where;die;

    if ($query) $where .= " AND $qtype LIKE '%$query%' ";

    $auRec = $this->_getSelectList('posm_consumer_transactions as pct LEFT JOIN posm_consumer_transactions_details as pctd ON pctd.pcr_transaction_id = pct.pcr_transaction_id 
                LEFT JOIN table_salesman AS s ON s.salesman_id = pct.salesman_id 
                LEFT JOIN table_retailer as r ON r.retailer_id = pct.retailer_id
                LEFT JOIN table_brands as b ON b.brand_id = pctd.brand_id 
                LEFT JOIN table_posm_master as pm on pm.posm_id= pctd.posm_id 
                LEFT JOIN table_placement_master as tpm on tpm.placement_id= pctd.placement_id
                LEFT JOIN table_campaign_master as cm on cm.campaign_id= pctd.campaign_id 
               LEFT JOIN state as st on st.state_id = r.state
                LEFT JOIN city as c ON c.city_id = r.city 
                LEFT JOIN table_location as l ON l.location_id = r.location_id LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id ',
                 "pct.transaction_date, s.employee_code,b.brand_id, s.salesman_name, r.retailer_code, r.retailer_name, b.brand_name, st.state_name, c.city_name, l.location_name , pctd.image_url as in_image_url, pct.transaction_time, pctd.pcr_transaction_id , pm.posm_name , tpm.placement_name , cm.campaign_name ,S2.salesman_name as desc1", $rp, $where ." GROUP BY pct.pcr_transaction_id" . $sort, '');

    /********** Add Accounts attributes ****************/
    // echo "<pre>";print_r($auRec);die;
    $auRecCount = $this->_getSelectList('posm_consumer_transactions as pct LEFT JOIN posm_consumer_transactions_details as pctd ON pctd.pcr_transaction_id = pct.pcr_transaction_id 
                LEFT JOIN table_salesman AS s ON s.salesman_id = pct.salesman_id 
                LEFT JOIN table_retailer as r ON r.retailer_id = pct.retailer_id
                LEFT JOIN table_brands as b ON b.brand_id = pctd.brand_id 
                LEFT JOIN table_posm_master as pm on pm.posm_id= pctd.posm_id 
                LEFT JOIN table_placement_master as tpm on tpm.placement_id= pctd.placement_id
                LEFT JOIN table_campaign_master as cm on cm.campaign_id= pctd.campaign_id 
               LEFT JOIN state as st on st.state_id = r.state
                LEFT JOIN city as c ON c.city_id = r.city 
                LEFT JOIN table_location as l ON l.location_id = r.location_id LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id', 'count(*) as total', '', $where);
    //  echo "<pre/>";print_r($auRec);die;
    $total = $auRecCount[0]->total;
    // echo $total;die;
    header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
    header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
    header("Cache-Control: no-cache, must-revalidate");
    header("Pragma: no-cache");
    header("Content-type: text/x-json");
    $json = "";
    $json .= "{\n";
    $json .= '"page": "' . $page . '",';
    $json .= "\n";
    $json .= '"total":"' . $total . '",';
    $json .= "\n";
    $json .= '"rows": [';
    $rc = false;
    $remove = array("\n", "\r\n", "\r");
    if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
        $targetBlank = '';
    } else {
        $targetBlank = 'target=\"_blank\"';
    }
  
    for ($i = 0; $i < count($auRec); $i++) {
        

        // $viewDetails = '<a href=\"product_display_report_details_list.php?id=' . base64_encode($auRec[$i]->display_id) . '\" ' . $targetBlank . '>View Details</a>';

        $viewPhoto = '<a href=\"posm_consumer_report_multiple_image.php?br='.$auRec[$i]->brand_id.'&posmConsumerId=' . base64_encode($auRec[$i]->pcr_transaction_id) . '\" ' . $targetBlank . '>View Photo</a>';


        if ($rc) $json .= ",";
        $json .= "\n{";
        $json .= '"id":"' . $auRec[$i]->pcr_transaction_id . '",';
        $json .= '"cell":["' . addslashes(date('d-M-Y', strtotime($auRec[$i]->transaction_date))) .'"';
        $json .= ',"' . addslashes(date('G:i', strtotime($auRec[$i]->transaction_time))) . '"';
        $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
        $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
        $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';

        $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->posm_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->placement_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->campaign_name) . '"';

        $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
        $json .= ',"' . $viewPhoto . '"]';
        $json .= "}";
        $rc = true;
    }
    $json .= "]\n";
    $json .= "}";
    echo str_replace("\'", '', $json);
    exit;
}





function showPosmCustomerReport($salesman)
{
    $page = $_REQUEST['page'];
    $rp = $_REQUEST['rp'];
    $sortname = $_REQUEST['sortname'];
    $sortorder = $_REQUEST['sortorder'];
    if (!$sortname) $sortname = 'pct.pctr_transaction_id';
    if (!$sortorder) $sortorder = 'DESC';
    $sort = " ORDER BY $sortname $sortorder";
    if (!$page) $page = 1;
    if (!$rp) $rp = 50;
    $start = (($page - 1) * $rp);
    $limit = "LIMIT $start, $rp";
    $query = $_REQUEST['query'];
    $qtype = $_REQUEST['qtype'];
   
   
    if ($_SESSION['SaleId'] != '') {
        $salesman = " AND s.salesman_id = '" . $_SESSION['SaleId'] . "";
    }
   

    $where = "DATE(pct.transaction_date) BETWEEN'" .
                        date('Y-m-d', strtotime($_SESSION['FromAttList'])) . "' AND '" . date('Y-m-d', strtotime($_SESSION['ToAttList'])) . $salesman;

    // echo $where;die;

    if ($query) $where .= " AND $qtype LIKE '%$query%' ";

    $auRec = $this->_getSelectList('posm_customer_transactions as pct LEFT JOIN posm_customer_transactions_details as pctd ON pctd.pctr_transaction_id = pct.pctr_transaction_id 
                LEFT JOIN table_salesman AS s ON s.salesman_id = pct.salesman_id 
                LEFT JOIN table_retailer as r ON r.retailer_id = pct.retailer_id 
                LEFT JOIN table_brands as b ON b.brand_id = pctd.brand_id 
                LEFT JOIN table_asset_master as a ON a.asset_id = pctd.asset_id 
               LEFT JOIN state as st on st.state_id = r.state
                LEFT JOIN city as c ON c.city_id = r.city 
                LEFT JOIN table_location as l ON l.location_id = r.location_id LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id',
                 "pct.transaction_date, s.employee_code,b.brand_id, s.salesman_name, r.retailer_code, r.retailer_name, b.brand_name, pctd.pctr_quantity, a.asset_name, st.state_name, c.city_name, l.location_name , pctd.image_url as in_image_url, pct.transaction_time, pctd.pctr_transaction_id  ,S2.salesman_name as desc1", $rp, $where ." GROUP BY pct.pctr_transaction_id" . $sort, '');

    /********** Add Accounts attributes ****************/
    // echo "<pre>";print_r($auRec);die;
    $auRecCount = $this->_getSelectList('posm_customer_transactions as pct LEFT JOIN posm_customer_transactions_details as pctd ON pctd.pctr_transaction_id = pct.pctr_transaction_id 
                LEFT JOIN table_salesman AS s ON s.salesman_id = pct.salesman_id 
                LEFT JOIN table_retailer as r ON r.retailer_id = pct.retailer_id 
                LEFT JOIN table_brands as b ON b.brand_id = pctd.brand_id 
                LEFT JOIN table_asset_master as a ON a.asset_id = pctd.asset_id 
               LEFT JOIN state as st on st.state_id = r.state
                LEFT JOIN city as c ON c.city_id = r.city 
                LEFT JOIN table_location as l ON l.location_id = r.location_id LEFT JOIN table_salesman_hierarchy_relationship AS SH ON SH.salesman_id = s.salesman_id
                LEFT JOIN table_salesman_hierarchy AS H ON H.hierarchy_id = SH.hierarchy_id
                LEFT JOIN table_salesman_hierarchy AS H2 ON H2.hierarchy_id = SH.rpt_hierarchy_id
              left JOIN table_salesman AS S2 ON S2.salesman_id = SH.rpt_user_id', 'count(*) as total', '', $where);
    //  echo "<pre/>";print_r($auRec);die;
    $total = $auRecCount[0]->total;
    // echo $total;die;
    header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
    header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
    header("Cache-Control: no-cache, must-revalidate");
    header("Pragma: no-cache");
    header("Content-type: text/x-json");
    $json = "";
    $json .= "{\n";
    $json .= '"page": "' . $page . '",';
    $json .= "\n";
    $json .= '"total":"' . $total . '",';
    $json .= "\n";
    $json .= '"rows": [';
    $rc = false;
    $remove = array("\n", "\r\n", "\r");
    if ((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
        $targetBlank = '';
    } else {
        $targetBlank = 'target=\"_blank\"';
    }
  
    for ($i = 0; $i < count($auRec); $i++) {
        

        // $viewDetails = '<a href=\"product_display_report_details_list.php?id=' . base64_encode($auRec[$i]->display_id) . '\" ' . $targetBlank . '>View Details</a>';

        $viewPhoto = '<a href=\"posm_customer_report_multiple_image.php?br='.$auRec[$i]->brand_id.'&posmCustomerId=' . base64_encode($auRec[$i]->pctr_transaction_id) . '\" ' . $targetBlank . '>View Photo</a>';


        if ($rc) $json .= ",";
        $json .= "\n{";
        $json .= '"id":"' . $auRec[$i]->pctr_transaction_id . '",';
        $json .= '"cell":["' . addslashes(date('d-M-Y', strtotime($auRec[$i]->transaction_date))) .'"';
        $json .= ',"' . addslashes(date('G:i', strtotime($auRec[$i]->transaction_time))) . '"';
        $json .= ',"' . addslashes($auRec[$i]->employee_code) . '"';
        $json .= ',"' . addslashes($auRec[$i]->salesman_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->retailer_code) . '"';
        $json .= ',"' . addslashes($auRec[$i]->retailer_name) . '"';

        $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->pctr_quantity) . '"';
        $json .= ',"' . addslashes($auRec[$i]->asset_name) . '"';

        $json .= ',"' . addslashes($auRec[$i]->state_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->city_name) . '"';
        $json .= ',"' . addslashes($auRec[$i]->location_name) . '"';
        $json .= ',"' . $viewPhoto . '"]';
        $json .= "}";
        $rc = true;
    }
    $json .= "]\n";
    $json .= "}";
    echo str_replace("\'", '', $json);
    exit;
}



// Rohit : Start : 18-feb-2025 

  function updateRetailerChannelItemPrice($id)
    {
        $data['retailer_channel_id'] = $_POST['retailer_type_id'];
        $data['item_id'] = $_POST['item_id'];
        $data['price'] = $_POST['price'];
        $data['status'] = 'A';
        $data['updated_at'] = date('Y-m-d H:i:s');
        $this->_dbUpdate2($data, 'table_retailer_channel_item_price_mapping', " mapping_id = " . $id);
        return $id;
    }


 function addRetailerChannelItemPrice()
    {
        $data['retailer_channel_id'] = $_POST['retailer_type_id'];
        $data['item_id'] = $_POST['item_id'];
        $data['price'] = $_POST['price'];
        $data['account_id'] = $_POST['account_id'];
        $data['status'] = 'A';
        $data['created_at'] = date('Y-m-d H:i:s');
        $data['updated_at'] = date('Y-m-d H:i:s');

        $mapping_id = $this->_dbInsert($data, 'table_retailer_channel_item_price_mapping');
        return $mapping_id;
    }

function showRetailerChannelItemPrice()
    {
        $page = $_REQUEST['page'];
        $rp = $_REQUEST['rp'];
        $sortname = $_REQUEST['sortname'];
        $sortorder = $_REQUEST['sortorder'];

        if (!$sortname) $sortname = 'i.item_name';
        if (!$sortorder) $sortorder = 'ASC';

        $sort = " ORDER BY $sortname $sortorder";

        if (!$page) $page = 1;
        if (!$rp) $rp = 50;

        $query = $_REQUEST['query'];
        $qtype = $_REQUEST['qtype'];
        //Todo Start : sudhanshu 13 june 2024 : add status filter
        $statusCondi = '';
        if (isset($_SESSION['MasRetTypeItmPrice']) && $_SESSION['MasRetTypeItmPrice'] != 'all' && $_SESSION['MasRetTypeItmPrice'] != '') {
            $statusCondi = " AND rtim.status ='" . $_SESSION['MasRetTypeItmPrice'] . "'";
        }
        //Todo End : sudhanshu 13 june 2024 : add status filter

        $where = " c.status='A' AND i.status='A' AND i.account_id='" . $_SESSION['accountId'] . "' AND i.item_type='I' $statusCondi ";
        if ($query) $where .= " AND $qtype LIKE '%$query%' ";

        $auRec = $this->_getSelectList2('table_retailer_channel_item_price_mapping as rtim
            left join table_item as i ON i.item_id = rtim.item_id
            left join table_retailer_channel_master as rt ON rt.channel_id = rtim.retailer_channel_id 
            left join table_category as c on i.category_id = c.category_id 
            left join table_brands as b on b.brand_id=i.brand_id',
            "rtim.*,i.item_name,i.item_code,c.category_name,b.brand_name,rt.channel_name", $rp, " $where $sort ");

        $auRecCount = $this->_getSelectList2('table_retailer_channel_item_price_mapping as rtim
            left join table_item as i ON i.item_id = rtim.item_id
            left join table_retailer_channel_master as rt ON rt.channel_id = rtim.retailer_channel_id 
            left join table_category as c on i.category_id = c.category_id 
            left join table_brands as b on b.brand_id=i.brand_id ',
            'count(rtim.mapping_id) as total', '', " $where ");

        $total = $auRecCount[0]->total;

        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");
        header("Content-type: text/x-json");
        $json = "";
        $json .= "{\n";
        $json .= '"page": "' . $page . '",';
        $json .= "\n";
        $json .= '"total":"' . $total . '",';
        $json .= "\n";
        $json .= '"rows": [';
        $rc = false;

//        if((strpos($_SERVER['HTTP_USER_AGENT'], 'Mobile') !== false) || (strpos($_SERVER['HTTP_USER_AGENT'], 'wv') !== false)) {
//            $targetBlank = '';
//        }
//        else{
//            $targetBlank = 'target=\"_blank\"';
//        }

        for ($i = 0; $i < count($auRec); $i++) {
            $status = ($auRec[$i]->status == 'A') ? "Active" : "Inactive";

            $status = '<a href=\"ret_channel_item_price.php?stid=' . $auRec[$i]->mapping_id . '&value=' . $status . '\">' . $status . '</a>';

            if ($rc) $json .= ",";
            $json .= "\n{";

            $json .= '"id":"' . $auRec[$i]->mapping_id . '",';
            $json .= '"cell":["' . addslashes($auRec[$i]->item_code) . '"';
            $json .= ',"' . addslashes($auRec[$i]->item_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->category_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->brand_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->channel_name) . '"';
            $json .= ',"' . addslashes($auRec[$i]->price) . '"';
            $json .= ',"' . $status . '"]';
            $json .= "}";
            $rc = true;
        }
        $json .= "]\n";
        $json .= "}";
        echo str_replace("\'", '', $json);
        exit;
    }



// Rohit : End : 18-feb-2025 




    
} // end of class





?>